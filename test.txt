# An Advanced Approach to Komodo's Antara Framework

## Introduction

The following content is provided for the experienced C/C++ developer who desires to create new Antara Modules for Komodo Smart Chains. 

The content herein provides introductory instruction that can allow the developer to more easily read existing Antara-related code and follow advanced tutorials that examine specific Antara Modules.

## Link to Learning Path Outline

The following tutorial series is intended for advanced Komodo developers who intend to manipulate the default software setup. Please review the placement of this tutorial in [the Learning Path Outline section.](../../../basic-docs/start-here/learning-launchpad/learning-path-outline.html#step-15-begin-the-advanced-development-tutorial)

## Antara Encompasses Several Technologies

The Antara Framework greatly enhances blockchain functionality. Antara allows a developer to use their Smart Chain's consensus mechanism to enforce arbitrary code. Antara even allows clusters of Smart Chains to work together in this effort. 

The level of freedom this grants to the blockchain developer is sometimes difficult to comprehend until one has either seen the technology in action or engaged with the technology directly.

The Antara Framework takes into account several different advanced technologies. To limit the scope of our introduction, for now we focus only on one crucial aspect: "CryptoConditions," or "CC" for brevity.

## A Less Conceptual Discussion of CryptoConditions 

#### CryptoConditions in Brief

CryptoConditions is a technology that allows for arbitrary logical conditions and fulfillment to be evaluated as a part of consensus. This allows for a Smart Chain's consensus mechanism to evaluate the results of arbitrary code and update state in the blockchain's data in a decentralized and secure fashion.

CryptoConditions technology is not a new concept. The [Interledger](https://interledger.org/) team originally proposed this technology in 2016. 

The [original proposal](https://tools.ietf.org/html/draft-thomas-crypto-conditions-01) was that it would be an open-source industry-wide standard format. The Interledger team does not seem to have continued exploring the technology beyond the original proposal. 

Komodo, on the other hand, found the CryptoConditions concept to be intriguing. In 2018, Komodo adopted this open-source technology into the suite of offerings in our Antara Framework.

Our implementation uses many of the key ideas put forth by the Interledger team, and at the same time we depart in several significant ways. Those who are curious for specific details on this topic can explore the open-source code in the respective repositories. 

The important takeaway is that the Antara Framework encompasses several underlying technologies, one of which is CryptoConditions (CC). This technology allows a developer to add arbitrary logical conditions and fulfillment to their Smart Chain, and to rely on the consensus mechanism to ensure state integrity in a decentralized environment.

#### CryptoConditions Depends Upon Transactions and Booleans

At the most fundamental level, blockchain data is advanced only through transactions. A blockchain itself is but a list of transactions, bound into blocks. By design, each transaction must be confirmed by the consensus mechanism.

Therefore, all decentralized data that a developer wishes to create or use with their arbitrary code must first be added to a transaction. This transaction is then passed through the consensus mechanism. Transactions that are successfully confirmed are finally added to the blockchain, and therefore the data is also added.

To take advantage of this functionality, a developer adds customized source code to the Antara Framework to form a new module. Whenever a relevant transaction occurs on the blockchain, the consensus mechanism calls the developer's module, validates the logical conditions and fulfillment as put forth by the arbitrary code, and either confirms or denies the transaction.

To simplify this process, Antara requires that the developer build their module such that each CryptoConditions (CC) transaction returns a boolean value as a part of the final results. If the returned boolean value is `true`, the transaction is approved.

With this framework in place, the developer can also add any other data to be saved as a part of the transaction.  This data is included in a special part of the transaction called an [<b>OP_RETURN</b>](https://en.bitcoin.it/wiki/OP_RETURN), or <b>opreturn</b> for brevity. We will discuss opreturns in greater detail further on.

Through Antara, the developer receives a powerful tool for creating and executing decentralized arbitrary code. A developer can also add data to any transaction, and their Smart Chain can utilize this data in future executions of arbitrary code. The primary requirement is that the arbitrary code return a meaningful boolean value as a part of the final result. 

#### Building an Antara Module is Harder Than Creating a Balance-Based Smart Contract 

Antara Modules are fundamentally different than the "smart contracts" that are familiar on other blockchain platforms. The key difference is that Antara Modules directly rely on ["unspent transactions,"](../../../basic-docs/start-here/core-technology-discussions/miscellaneous.html#the-utxo-an-elusive-yet-fundamental-concept) which are called "utxos" for brevity. Smart contracts, on the other hand, rely on the total balance of funds held within an address. 

Utxo-based modules are harder to create than balance-based smart contracts. However, utxo-based modules result in dramatically more powerful and secure functionality, as they leverage the existing Bitcoin-utxo system. 

For example, with balance-based smart contracts, a bug in the smart-contract language can result in terrible events, such as the malicious printing of new coins in a smart contract, or the draining of all funds within a shared contract. Events such as these can happen even when the smart-contract author is a competent developer.

In a utxo-based module, the risk of such events is exponentially reduced. One reason utxo-based modules are more secure is that every update of the blockchain's state must be executed as a transaction, and therefore the data must pass the normal rules of consensus. 

Komodo is based on the Bitcoin protocol, and therefore Komodo's Smart Chain consensus mechanism is built on the most rigorously tested and heavily supported software in the industry. Balance-based smart contracts cannot compare to this level of security.

As the developer engages with Antara Module development, they can learn how utxo-based modules allow for increased speed in achieving consensus, greater simplicity in software architecture, more flexible functionality between Smart Chains, and many more superior features. 

#### A Brief Look at an Antara Module Template

The following file, `customcc.cpp`, is a blank template a developer can use when beginning the creation of a new Antara Module. Take a brief look to familiarize yourself with the essential layout.

[<b>Link to customcc.cpp file</b>](https://github.com/jl777/komodo/blob/dev/src/cc/customcc.cpp)

The key takeaway is that the entrypoints to Antara's CryptoConditions technology are broken down into a few functions and tables. Once the developer grasps the nature of working with these entry points, building Antara Modules becomes a simple exercise in the common aspects of software development. 

Komodo already offers many SDK functions, tutorials, and best practices to simplify the learning curve and development process, and we continue to develop more of these sources of assistance.  

Before the developer can begin creating new Antara Modules, there are several key concepts to understand in the Bitcoin Protocol.

------------

[<b>Link to Next Tutorial in the Advanced Series</b>](../../../basic-docs/antara/antara-tutorials/advanced-series-1.html)
# Advanced Series — Smart Chain Development Basics

#### Understanding Utxos is Important in Antara Modules

In the [Learning Launchpad Outline](../../../basic-docs/start-here/learning-launchpad/learning-path-outline.html) the reader received encouragement to understand the basics of blockchain technology in preparation for this tutorial. The [<b>Core Technology Discussions section</b>](../../../basic-docs/start-here/core-technology-discussions/introduction.html) provides a useful introduction to most concepts that are necessary for blockchain engineers. 

A key basic concept to understand is the unspent transaction, or utxo. For a brief reminder on the nature of a utxo, read [this section in the Core Technology Discussions section.](../../../basic-docs/start-here/core-technology-discussions/miscellaneous.html#the-utxo-an-elusive-yet-fundamental-concept)

Observe the data structure of a transaction.

<collapse-text hidden="true" title="Full Transaction Structure">

```json
{
  "hex": "0400008085202f890100277b16c44a997e8224cb1779688caa20f101c534e037054daa77aa6bbff6000100000049483045022100f26e8fa0fe08ad5d97fe4b2e56b409ef1126aed537878801eb1a38eb5152031d02205444da469fb12d9351b35e235e87c91db09fdbf9a7ac21c44c845046b672eac401feffffff02b8374c000000000023210275610ca15c4688cfebef16f84bce3691dc309591e23fc7298cf3683d9c3fd1efac404b4c00000000001976a914f3f476150b5a0f65a0972520653e6523dc2bd5ac88ac8dffff5cb8dd01000000000000000000000000",
  "txid": "6d3b67086ef6964e4022654938e71eb5a248aa5a1853b999381126c7d4dd0364",
  "overwintered": true,
  "version": 4,
  "versiongroupid": "892f2085",
  "locktime": 1560280973,
  "expiryheight": 122296,
  "vin": [
    {
      "txid": "00f6bf6baa77aa4d0537e034c501f120aa8c687917cb24827e994ac4167b2700",
      "vout": 1,
      "address": "RMhKqTr1ssari1wFoVFSSjdLsBXPkDdAac",
      "scriptSig": {
        "asm": "3045022100f26e8fa0fe08ad5d97fe4b2e56b409ef1126aed537878801eb1a38eb5152031d02205444da469fb12d9351b35e235e87c91db09fdbf9a7ac21c44c845046b672eac4[ALL]",
        "hex": "483045022100f26e8fa0fe08ad5d97fe4b2e56b409ef1126aed537878801eb1a38eb5152031d02205444da469fb12d9351b35e235e87c91db09fdbf9a7ac21c44c845046b672eac401"
      },
      "value": 0.10000000,
      "valueSat": 10000000,
      "address": "RMhKqTr1ssari1wFoVFSSjdLsBXPkDdAac",
      "sequence": 4294967294
    }
  ],
  "vout": [
    {
      "value": 0.04995000,
      "valueSat": 4995000,
      "n": 0,
      "scriptPubKey": {
        "asm": "0275610ca15c4688cfebef16f84bce3691dc309591e23fc7298cf3683d9c3fd1ef OP_CHECKSIG",
        "hex": "210275610ca15c4688cfebef16f84bce3691dc309591e23fc7298cf3683d9c3fd1efac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": [
          "RMhKqTr1ssari1wFoVFSSjdLsBXPkDdAac"
        ]
      }
    },
    {
      "value": 0.05000000,
      "valueSat": 5000000,
      "n": 1,
      "scriptPubKey": {
        "asm": "OP_DUP OP_HASH160 f3f476150b5a0f65a0972520653e6523dc2bd5ac OP_EQUALVERIFY OP_CHECKSIG",
        "hex": "76a914f3f476150b5a0f65a0972520653e6523dc2bd5ac88ac",
        "reqSigs": 1,
        "type": "pubkeyhash",
        "addresses": [
          "RXX78ba9g6aXuNLfeHTN24WhPWj3jWqyia"
        ]
      }
    }
  ],
  "vjoinsplit": [
  ],
  "valueBalance": 0.00000000,
  "vShieldedSpend": [
  ],
  "vShieldedOutput": [
  ],
  "blockhash": "002536f5e1cb5b9cad3952e45523d64b17bc56808483f7dc6cdfd7882d58d60d",
  "height": 122276,
  "confirmations": 1,
  "rawconfirmations": 1,
  "time": 1560281131,
  "blocktime": 1560281131
}
```

</collapse-text>

This transaction has an id, which is given as one of the first key-value pairs.

```json
"txid": "6d3b67086ef6964e4022654938e71eb5a248aa5a1853b999381126c7d4dd0364"
```

The term, `txid`, stands for transaction id.

Within this transaction there are two arrays. One contains the vins and the other contains the vouts.

A vin and a vout are short for "vector in" and "vector out". 

The vins and vouts can be considered to be sub-transactions that take place within the main transaction.

##### Observing the vin

The vins in a transaction consume unspent values from previous transactions.

Observe the first (and only) vin in this transaction.

```json
  "vin": [
    {
      "txid": "00f6bf6baa77aa4d0537e034c501f120aa8c687917cb24827e994ac4167b2700",
      "vout": 1,
      "address": "RMhKqTr1ssari1wFoVFSSjdLsBXPkDdAac",
      "scriptSig": {
        "asm": "3045022100f26e8fa0fe08ad5d97fe4b2e56b409ef1126aed537878801eb1a38eb5152031d02205444da469fb12d9351b35e235e87c91db09fdbf9a7ac21c44c845046b672eac4[ALL]",
        "hex": "483045022100f26e8fa0fe08ad5d97fe4b2e56b409ef1126aed537878801eb1a38eb5152031d02205444da469fb12d9351b35e235e87c91db09fdbf9a7ac21c44c845046b672eac401"
      },
      "value": 0.10000000,
      "valueSat": 10000000,
      "address": "RMhKqTr1ssari1wFoVFSSjdLsBXPkDdAac",
      "sequence": 4294967294
    }
  ],
```

This vin takes funds from an address, `RMhKqTr1ssari1wFoVFSSjdLsBXPkDdAac`.

The amount of funds the vin takes from that address is `"value": 0.10000000`.

##### Observe the vouts

To spend these funds, the transaction creates the vouts.

Observe the two vouts of this transaction.

```json
  "vout": [
    {
      "value": 0.04995000,
      "valueSat": 4995000,
      "n": 0,
      "scriptPubKey": {
        "asm": "0275610ca15c4688cfebef16f84bce3691dc309591e23fc7298cf3683d9c3fd1ef OP_CHECKSIG",
        "hex": "210275610ca15c4688cfebef16f84bce3691dc309591e23fc7298cf3683d9c3fd1efac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": [
          "RMhKqTr1ssari1wFoVFSSjdLsBXPkDdAac"
        ]
      }
    },
    {
      "value": 0.05000000,
      "valueSat": 5000000,
      "n": 1,
      "scriptPubKey": {
        "asm": "OP_DUP OP_HASH160 f3f476150b5a0f65a0972520653e6523dc2bd5ac OP_EQUALVERIFY OP_CHECKSIG",
        "hex": "76a914f3f476150b5a0f65a0972520653e6523dc2bd5ac88ac",
        "reqSigs": 1,
        "type": "pubkeyhash",
        "addresses": [
          "RXX78ba9g6aXuNLfeHTN24WhPWj3jWqyia"
        ]
      }
    }
  ],
```

The first vout sends `0.04995000` coins to the same address we saw in `vin0`.

The second vout sends `0.05000000` coins to a new address.

If we take the total value of all vins and subtract the total value of all vouts, we see that there is `0.00005000` difference. 

By design, any leftover amount not claimed by a vout is given to the miner that mines the block that contains this transaction. This is the mining fee.

##### Making Inferences 

To summarize, the utxo takes `0.1` coins from an address, sends `0.04995` back to the same address, and then sends `0.05` coins to a new address. The leftover amount is automatically given to the miner of the block.

This suggests that the user who created this transaction desired to send `0.05` coins to the new address. The user may have created this transaction using the [<b>sendtoaddress</b>]() API method.

From here, the software daemon took control. The software found that within the user's wallet was an existing value of `0.1` coins. This became the vin for the transaction. The first vout the software created was sent back to the address in the user's own wallet. This `0.04995000` value is the "change" from the transaction. The second vout contains the `0.05` the user intended to send to the new address.
 
#### Utxo is an Unspent Vout

A vout that can be spent, but has not yet been spent, is a utxo.

To determine whether a vout is spent, the developer cannot look directly at the data in a transaction. Rather, the developer makes a requst to the software to look at all following transactions on the blockchain.

If there is a later transaction that has a vin that consumes the `0.05` vout, that would indicate that the vout is spent. If there is no such transaction, then the vout is still a utxo.

A transaction can have multiple vouts, and therefore each transaction can technically contain multiple utxos.

Often times, in conversation developers may call a full transaction a "utxo," for simplicity's purposes. Yet, for developers to truly understand the underlying concept, they should understand that "utxo" refers to a vout, not to a txid.

#### A Utxo is Not Spent Until Confirmation

A utxo is not considered spent under any circumstances until the transaction that spends it receives confirmation from the Smart Chain's consensus mechanism.

Therefore, transactions sent to the [<b>mempool</b>](https://en.bitcoin.it/wiki/Protocol_documentation#mempool) are technically still unspent transactions, even if the user is fairly certain the transaction will be confirmed in the next block.

A useful comparison here can be found by observing people seeking to attend a ticketed event, such as a music concert. To gain acceptance into the music hall, a person must first have a ticket. We compare this to the creation of a txid. The person must wait in line. This is similar to the mempool. The person must have their ticket stamped, and this is akin to the consensus mechanism approving the transaction. Then the person may enter the music hall. This is the transaction becoming a part of the blockchain history.

The essence of blockchain technology is that a utxo can only be spent once. In building modules for the Antara Framework, we constantly keep this principle in mind, and the consensus mechanism is our guide.

## Formation of a Transaction

Contrary to what one may think, a blockchain transaction is not a simple accounting entry that says, "Address X pays Y amount of funds to address Z." Rather, a transaction also contains a Bitcoin script that must be satisfied before the requested funds can be spent.

The manner in which transactions are created has evolved over time. Originally, the process consisted only of a "Pay to Pubkey" script, or "P2PK" for brevity.

In a P2PK transaction, the software checks the cryptographic signature of the public key attempting to spend funds and if the signature is correct the transaction is approved. 

These simple transactions are common in coinbase transactions. (Recall that a coinbase transaction is the transaction that mints new coins onto a blockchain. Coinbase transactions are most frequently encountered as block rewards for miners/stakers, and in the Gensis Block of a chain.)

If the reader would like a more thorough technical explanation of P2PK transactions, tutorials and explanations abound across the web. [Here is one such example.](https://learnmeabitcoin.com/glossary/p2pk)

#### Quantum Computers, Cold Addresses, and Change

As the early Bitcoin community gained experience, Satoshi Nakamoto foresaw a potential danger. Far in the future, a quantum computer will be able to break the encryption protection of any pubkey address and thereby steal funds.

To solve this problem, Satoshi invented a method to have a "cold address." Cold addresses are based on a pubkey, but there are various cryptographic functions that separate the two. 

A user can send their funds to a cold address without revealing the associated pubkey. This allows the user to keep their pubkey private, and thus protect their funds from being spent even by a quantum computer, so long as the relationship between the cold address and the pubkey remains a secret.

Naturally, to spend their funds, the user must utilize their pubkey to create the transaction signature, and thus they reveal the relationship between the cold address and the pubkey. Once the secret is revealed, the cold address no longer offers any protection against quantum computers. 

This encouraged Satoshi to redesign the Bitcoin protocol so that, by default, each time a utxo is spent the leftover amount in the utxo is sent to a new cold address. This is the reason for the "change" addresses that a user sees in their wallet each time they send funds on a default Bitcoin-based blockchain. 

#### Smart Chain and CryptoConditions' Pubkey Parameter Disables Change Addresses

An astute reader may note that in the above example transaction, the "change" did not go to a new address, but rather to the same address from which the `0.1` coins were taken. The reason for this pertains to CryptoConditions (CC), as the transaction was performed on a Smart Chain that utilizes CryptoConditions.

When using CC technology, the user typically must provide a designated pubkey via the [<b>pubkey</b>]() launch parameter. The reason for this will be discussed later. 

A side effect of using this <b>pubkey</b> parameter is that once this is set, the software will stop creating new "change" addresses with each transaction. Instead, the software will send the "change" back to the same cold address that is associated with the pubkey.

If a user wants to keep funds safe from quantum computers, there are separate CC-related modules that provide protection. For example, [the upcoming Dilithium Antara Module.](https://komodoplatform.com/dilithium-quantum-secure-blockchain/)

#### Pay to Pubkey Hash Transactions 

Transactions that send funds to a cold address are called "Pay to Pubkey Hash" transactions, or P2PKH for brevity. 

When performing a P2PKH transaction, the protocol has a few extra steps to perform. The protocol must check that the hash of the pubkey (which is included as a part of the cold address) is appropriately matched to the pubkey itself. The structure of a P2PKH transaction includes opreturns that instruct the daemon to perform these verification steps.

The Internet contains many thorough explanations of P2PKH transactions. For more information, [here is one such tutorial.](https://learnmeabitcoin.com/glossary/p2pkh)

Once a cold address is associated with a pubkey, the Bitcoin protocol no longer attempts to use these quantum-secure P2PKH transactions, as they require an extra 25 bytes of data space. Instead, the protocol reverts to the original P2PK transactions.

CryptoConditions typically requires the [<b>ac_pubkey</b>](../../../basic-docs/antara/antara-setup/antara-customizations.html#ac-pubkey) Antara Customization parameter to be enabled. One of the effects of this parameter is that each time a user makes a transaction, the "change" is automatically sent back not to a new cold address, but rather to the pubkey included in the `ac_pubkey` parameter. Therefore, as user transactions are already always returning to a default pubkey, the Antara Module developer can simply skip P2PKH transactions altogether and use only P2PK transactions instead. 

#### Pay to Script Hash Payments

In addition to P2PK transactions, the original Bitcoin protocol allowed for any type of script opcode in transactions. This seemed like a promising idea at first, but developers quickly discovered that this level of freedom also brought instability. Satoshi limited the options available, and P2PK and P2PKH become the overwhelming majority of all transctions.

The community still desired the freedom to execute scripts as a part of transactions, and this eventually led to the Pay to Script Hash, or P2SH, standard.

This method allows the user to lock their funds to the hash of a script.  The script itself is typically designed to ensure that the funds are spent in a secure manner, and this is often through a P2PK or P2PKH transaction that is included in the script. 

To unlock the funds, a user provides the original script. The blockchain daemon checks that the script matches the hash, executes the script, and the funds are unlocked.

For more information about P2SH transactions, [a useful tutorial can be found here.](https://learnmeabitcoin.com/glossary/p2sh)

#### Understanding Op Codes

Each of the above transactions relies on an operation code, also called "opcode", to execute.

For example, the P2PKH transaction relies on the OP_CHECKSIG opcode `172` to execute. The opcode is included as a part of the transaction data, typically as a header and in hex format.

When the daemon detects the opcode in the raw data, the daemon understands what is being asked by the developer and performs the appropriate action.

Originally, Bitcoin had many opcodes available. Satoshi disabled a large number of opcodes for stability reasons. To see a list of current opcodes in Bitcoin, [visit the Bitcoin wiki.](https://en.bitcoin.it/wiki/Script#Opcodes) 

#### A New Op Code: OP_CheckCryptoCondition 

The CryptoConditions standard itself relies on a new opcode, OP_CHECKCRYPTOCONDITION, or OP_CCC for brevity.

This opcode is not included in the Bitcoin protocol. Rather, the OP_CCC standard was originally written and designed by the Interledger team. The full, original OP_CCC specification is a thirty-three page document, [which you can see here.](https://tools.ietf.org/html/draft-thomas-crypto-conditions-04)

There is no need to read and master the entire original proposal, however, as Komodo's Antara Framework automates much of the underlying aspects. The primary takeaway is that the developer uses OP_CCC to create a "<b>CryptoConditions transaction</b>," also called a "<b>CC transaction</b>" for brevity.

A CC transaction includes several special features. This can include a logical condition that must be met for the utxo the transaction creates to be spent in the future. A CC transaction can also include a fulfillment of the logical conditions set forth in a previous CC transaction. The binary encodings of these CC transactions can be used in a Smart Chain utxo. These features are the foundation of a CC-related Antara Module.

OP_CCC provides many relatively convenient use cases, and the developer can expand on these use cases when necessary. For example, a standard use case of OP_CCC is a `1of1` CC script. This type of CC transaction requires only 1 signature, and is accompanied by a few custom constraints. Many of the current default Antara Modules rely on the `1of1` script OP_CCC.

A more intricate use case of OP_CCC, on the other hand, can be found in the upcoming Payments Module. This module uses a `1of2` CC script, which allows for one of two signatures to sign a CC transaction, and the script also features several customized constraints.

----------

[<b>Link to Next Tutorial in the Advanced Series</b>](../../../basic-docs/antara/antara-tutorials/advanced-series-2.html)

# Advanced Series — Antara Module Development Basics

## The Eval Code

In the Komodo source code, each Antara Module has an associated arbitrary number, called an "eval" code. This code can be any digit between `0` and `255`, there can be only one code per module, and each code is currently one byte in size. To add a new Antara Module, the developer begins by adding a new eval code to the table of all active eval codes on their Smart Chain. 

We define all eval codes in the [~/komodo/src/cc/eval.h](https://github.com/jl777/komodo/tree/jl777/src/cc/eval.h) file. The following eval codes represent the essential, default modules in a Smart Chain.

```C
#define FOREACH_EVAL(EVAL)             \
        EVAL(EVAL_IMPORTPAYOUT, 0xe1)  \
        EVAL(EVAL_IMPORTCOIN,   0xe2)  \
        EVAL(EVAL_ASSETS,   0xe3)  \
        EVAL(EVAL_FAUCET, 0xe4) \
        EVAL(EVAL_REWARDS, 0xe5) \
        EVAL(EVAL_DICE, 0xe6) \
        EVAL(EVAL_FSM, 0xe7) \
        EVAL(EVAL_AUCTION, 0xe8) \
        EVAL(EVAL_LOTTO, 0xe9) \
        EVAL(EVAL_MOFN, 0xea) \
        EVAL(EVAL_CHANNELS, 0xeb) \
        EVAL(EVAL_ORACLES, 0xec) \
        EVAL(EVAL_PRICES, 0xed) \
        EVAL(EVAL_PEGS, 0xee) \
        EVAL(EVAL_TRIGGERS, 0xef) \
        EVAL(EVAL_PAYMENTS, 0xf0) \
        EVAL(EVAL_GATEWAYS, 0xf1)
```

As the eval code must range between `0` and `255`, a Smart Chain can have up to 256 total modules. The developer of a Smart Chain can determine which modules to add from the available modules in the ecosystem. At this time, we do not yet have 256 total modules, and therefore there is no need to choose.

#### Validation Code

The developer adds validation code that will be executed any time the daemon encounters a transaction bearing the relevant module's eval code.

This is where the true power of CC begins. When validating a normal transaction, the daemon has access only to information included in the transaction itself. With a CC transaction, however, the daemon is running arbitrary code, and therefore anything is possible. The validation code can look trough the blockchain history, observe transactions in the mempool, and even utilize Antara's cross-chain technology.

Technically, OP_CCC scripts do not have a required structure. The scripts only need to follow the general structure of the initial layout. The developer may follow the general guideline, as provided in our templates and tutorials. This allows the developer to code and debug their OP_CCC related modules in an efficient manner.

#### Flexbile Pubkey Expression

To understand how CryptoConditions (CC) manages addresses and scripts, the developer should first understand a few basic concepts regarding pubkeys.

Originally, Bitcoin pubkeys were 64 bytes, as opposed to the 33 byte pubkeys of today. The 64 byte pubkeys had a left half and a right half which were used for internal functions in the daemon. Using cryptographic methods, a developer could derive the left half of the function from the right half, and vice versa. 

Early Bitcoin developers took advantage of the ability to derive one half of the pubkey from the other, and compressed the pubkey to a smaller size. They also instituted prefixes that informed the daemon whether the pubkey was odd, even, or large (`02`, `03`, and `04` respectively). In the end, the developers compressed the 64 byte pubkey into a 33 byte version.

Today, there are multiple ways to express a pubkey. There are compressed and uncompressed versions of the pubkey, and the pubkey can also be expressed as two different base58 encoded addresses. All of these are associated with the same private key.

#### Pubkeys and CC Addresses 

When working with software based on the Bitcoin protocol, a common problem a developer encounters is found in creating an address that is associated with a script. A frequent solution is to hash the script and use the hash as the address. Komodo uses this solution in the Antara CC implementation. Using this method, the CC script serves as the CC address.

With this in mind, the essential structure of a CC script is as follows. (The automatically generated content is handled by the daemon's internal functions and can be ignored.)

```
evalcode + pubkey + automatically generated content
```

Each CC script utilizes the eval code of the module to which the CC script belongs. Since the CC script includes both the pubkey and the module's unique eval code, a pubkey makes a unique CC address for each module.

Funds that are sent to a CC address can be spent only by the module with the appropriate eval code, and therefore funds created and associated with an eval code maintain scarcity within this module.

A common and simple CC script exists in nearly all of the default Antara Modules. The structure of this script consists of a single signature from a pubkey and CC validation. This is essentially the equivalent of a P2PK Bitcoin script; the CC validation returns `true` or `false`, whereas the P2PK Bitcoin script returns `1` or `0`.

#### Global CC Address

By convention, each Antara Module has a global CC address where the privkey is publicly available. As usual, spending from this global CC address requires that the spender meet all validation rules set forth by the developer. Therefore, the lack of privacy for the private key is not an issue. 

One purpose for this global CC address is to create a repository that is global (within the module) for information regarding specific instances of this module on the chain.

For example, typically the design of an Antara Module requires that each time a user initiates an instance of the module, the user also sends a small amount of funds to this global CC address. This transaction contains data about the instance the user desires to create. Other users on the network can retrieve the data in this global CC address, and thereby gain knowledge about the current state of all module instances on the Smart Chain.

## Vector Inputs and Outputs

A transaction in the Bitcoin protocol consists of input and output vectors, called "vins" and "vouts" for brevity. The vins take funds from utxos, combine them into one "spend" transaction, and create new vouts. Some of the vouts may be new utxos.

```
vin0 + vin1 + ... + vin[n-1] -> vout0 + vout1 + ... vout[n-1]
```

Each of the vouts has a spend script that must be satisfied before the vout can be spent. 

Suppose vout0 is a normal utxo with a small amount of funds and the receiver of this utxo desires to spend it. They create a new transaction with a vin that consumes vout0. This vin must satisfy any scripts that are contained in vout0.

#### CC Enhances the Script Between Vin and Vout to Advanced Levels

A key power of CryptoConditions (CC) is the ability to enhance the script that must be satisfied between a vin and a vout. In CC, the vout contains the logical condition, and the vin contains the logical fulfillment.

With access to arbitrary code, CC allows the Bitcoin protocol to rival the "smart contracts" common on other platforms. Yet, CC accomplishes this without requiring the virtual-machine counterpart that other smart-contract platforms require. Instead, the consensus mechanism is directly engaged with the scripts in the vins and vouts of transactions.

The Bitcoin protocol's consensus mechanism is constantly placed under the most intense of pressure in the industry, and therefore is likely the most reliable consensus mechanism available. The ability to engage the consensus mechanism in arbitrary code while not changing the consensus mechanism itself grants Antara security and stability. The utxo system of the Bitcoin protocol also reduces the likelihood that modules themselves will contain bugs internally. (The reader should note that CC cannot eliminate attack vectors altogether.)

#### The Many Possibilities of OC_CHECKCRYPTOCONDITION

Consider the implications of the combination of possibilities contained in this new opreturn, OP_CCC. As there can be up to 256 eval codes per Smart Chain, there can be up to 256 different types of CC outputs per chain. Each CC transaction can contain multiple vins and vouts, each of which provides CC related fulfillments and conditions. Also, each module has a globally available CC address to allow for chain-wide functionality, making the possibilities per vin or vout 257. 

Observe the essential structure of a transaction with 3 vins and 2 vouts.

```
vin0 + vin1 + vin2 -> vout0 + vout1
```

With the possibilities of OP_CCC, the combination allows for 1.12e+12 possibile combinations.

```
257 * 257 * 257 * 257 * 257 = 1.12e+12
```

This is a dramatic increase in the possibilities over the limits of the original Bitcoin protocol. 

While the possibilities of a transaction are essentially limitless, the developer must create validation code that ensures the module and its transactions function as intended. Therefore, in practice the developer often limits the possibilities to `1` to `3` types per vin or vout.

## Introduction to the Remote Procedure Call (RPC)

A Remote Procedure Call (RPC) allows a module developer the ability to offer easy access to their module's functionality. The role of the RPC calls are to create properly signed raw transactions that are ready for broadcasting.

The developer places the command name of each RPC they desire to create into a table in the CC source code. From this table, the built-in komodo-cli software is able to access and execute the RPC. In this manner, developers of all skills levels can integrate Antara Modules into other software.  

Antara Modules can have any RPCs the developer desires, or even have no RPCs. By convention, each Antara Modules has a few default RPCs: `<CC_Name>address`, `<CC_name>list`, and `<CC_name>info`. For example, the Dice module has, `diceaddress`, `dicelist`, and `diceinfo`. Respectively, these RPCs return information about a CC-related address, the list of all instances of this module on the Smart Chain, and information about the chain-wide state of the module.  

## Creating a Global CC Address

The following code from the Faucet module serves as an example of the manner in which we begin the creation of a global CC address for this module.

```C
const char *FaucetCCaddr = "R9zHrofhRbub7ER77B7NrVch3A63R39GuC";
const char *FaucetNormaladdr = "RKQV4oYs4rvxAWx1J43VnT73rSTVtUeckk";
char FaucetCChexstr[67] = { "03682b255c40d0cde8faee381a1a50bbb89980ff24539cb8518e294d3a63cefe12" };
uint8_t FaucetCCpriv[32] = { 0xd4, 0x4f, 0xf2, 0x31, 0x71, 0x7d, 0x28, 0x02, 0x4b, 0xc7, 0xdd, 0x71, 0xa0, 0x39, 0xc4, 0xbe, 0x1a, 0xfe, 0xeb, 0xc2, 0x46, 0xda, 0x76, 0xf8, 0x07, 0x53, 0x3d, 0x96, 0xb4, 0xca, 0xa0, 0xe9 };
```

For a template of this logic pattern, view the [CCcustom.cpp](https://github.com/jl777/komodo/tree/jl777/src/cc/CCcustom.cpp) file.

[<b>Link to CCcustom.cpp file</b>](https://github.com/jl777/komodo/tree/jl777/src/cc/CCcustom.cpp)

Note that at the bottom of the file there is a switch statement. There, the above values are copied into an in-memory data structure for each CC type. This allows the entire CC codebase to access the global CC addresses in a standard manner.

To create a global CC address for a new module, follow these steps.

#### Create a value using getnewaddress

With the `komodod` daemon running, use the [<b>getnewaddress</b>](../basic-docs/smart-chains/smart-chain-api/wallet.html#getnewaddress) RPC with `komodo-cli` to get a new address. (You may use any Komodo Smart Chain, such as the KMD main chain, for this procedure.)

Copy this value into the first line of the code. For example, in the Faucet code above the result is as follows.

```C
const char *FaucetNormaladdr = "RKQV4oYs4rvxAWx1J43VnT73rSTVtUeckk";
```

#### Retrieve the pubkey using validateaddress

Use the [<b>validateaddress</b>](../basic-docs/smart-chains/smart-chain-api/util.html#validateaddress) RPC with `komodo-cli` to obtain the pubkey of the new normal address from the previous step.

Place the returned value into the `<CChexstr>[67]` line of code.

```C
char FaucetCChexstr[67] = { "03682b255c40d0cde8faee381a1a50bbb89980ff24539cb8518e294d3a63cefe12" };
```

#### Restart the Daemon with the pubkey 

Stop the daemon and restart with the [<b>pubkey</b>](../basic-docs/smart-chains/smart-chain-setup/common-runtime-parameters.html#pubkey) launch parameter enabled. Use the pubkey from the <b>validateaddress</b> RPC as the pubkey value.

#### Ensure the Myprivkey Function is Properly Enabled

Check that the `if ( 0 )` statement is enabled in the  `Myprivkey()` function in the `/src/cc/CCutils.cpp` file.

#### Obtain the CCaddress

<!-- I didn't think the <CC>address RPC call was enabled at this point, unless the RPCs are implemented? -->

Execute the `<CC_name>address` RPC call and use the returned value to complete the `<CC_Name>CCaddr` line of code.

```
const char *FaucetCCaddr = "R9zHrofhRbub7ER77B7NrVch3A63R39GuC";
```

#### Obtain the privkey in Hex Format

From the response returned by the `<CC_name>address` RPC, use the hex value of the private key to complete the appropriate line of code.

```
uint8_t FaucetCCpriv[32] = { 0xd4, 0x4f, 0xf2, 0x31, 0x71, 0x7d, 0x28, 0x02, 0x4b, 0xc7, 0xdd, 0x71, 0xa0, 0x39, 0xc4, 0xbe, 0x1a, 0xfe, 0xeb, 0xc2, 0x46, 0xda, 0x76, 0xf8, 0x07, 0x53, 0x3d, 0x96, 0xb4, 0xca, 0xa0, 0xe9 };
```

<!-- How do we have a new pubkey from this? -->

Stop the daemon and restart it using the new pubkey.

#### Add the First RPC

<!-- This should be part of its own section? Also, still confused about how to execute <CC>address above, since we create the RPC below. -->

Add a line to the `/src/rpcserver.h` file to create the `<CC_name>address` function for the module.

Update the commands array in the `/src/rpcserver.cpp` file.

#### Copy the Existing Default RPCs to the New Module

From the `/src/wallet/rpcwallet.cpp` file, copy and paste the existing RPC functions to create new versions for the new module. Change the eval code and customize the functions as desired.

Add an entry into the `/src/cc/eval.h` file.

<!-- Anything here about testing to ensure that it works properly, or anything? -->

## Introduction to Validation

A large portion of Antara Module customization pertains to the manner in which the validation code constrains CC transaction input.

The CC validation code is called at the time that the consensus mechanism is validating a CC transaction. The consensus mechanism only calls the CC validation code and waits for a response of `true` or `false`. Whether or not the CC validation code is effective is a matter for the developer to resolve. 

The developer is responsible for properly designing both the validation code and the RPC implementations. Both should work together to ensure that RPCs cannot create transactions that should not exist, and the CC validation code should only validate proper transactions.

The CC validation code is already locked in the main loop of the Bitcoin protocol at the time the code is called. Care should be taken with the CC validation code to ensure that the code does not cause a deadlock on the chain.

------------

[<b>Link to Next Tutorial in Advanced Series</b>](../../../basic-docs/antara/antara-tutorials/advanced-series-3.html)
# Advanced Series — Preparing for Heir Development

This tutorial in the series assists the reader in preparing to later build a full simplified prototype of the default [<b>Heir Antara Module.</b>](../../../basic-docs/fluidity/fluidity-api/heir.html)

The primary aim for buildling the Heir prototype is to give the developer direct engagement with Antara Module development, with a focus on the CryptoConditions (CC) aspects. This process will give the developer a better grasp of the broad potential of the Antara framework.

Furthermore, in the process of completing this tutorial the developer will learn how the source code is organized.

## A Conceptual Understanding of the Intended Product

To gain an idea of the intended result, read the introduction of the Heir Module API. (Read until the start of the section named <b>Heir Module Flow</b> and then pause.)

[Link to Introduction to the Heir Antara Module](../basic-docs/fluidity/fluidity-api/heir.html#introduction)

The basic concept to understand is that the Heir module allows the owner of a Smart Chain digital asset to designate an inheritor of the asset, should the owner become inactive on the chain.

In terms of design, this is a relatively straightforward Antara Module, which is one reason we use it here.

## Complete the Heir Module Flow Section (Optional)

Before we begin the development process, it may be helpful to first experiment with the flow of RPC commands for the existing Heir module.

This section is optional, but recommended.

At this point in the tutorial series, the reader can either create a new default Smart Chain to test the Heir Module, or they may use an existing Smart Chain, such as RICK.

[Link to instructions to create a new default Smart Chain.](../../../basic-docs/smart-chains/smart-chain-tutorials/create-a-default-smart-chain.html#creating-a-new-smart-chain)

The reader will need to create a new default Smart Chain either way as a part of the tutorial, but if the reader chooses to use the RICK Smart Chain for this optional step, the reader has the opportunity to observe another Antara Module in action. This presents a learning opportunity.

The module we refer to here is the [<b>Faucet Antara Module</b>](../../../basic-docs/antara/antara-api/faucet.html)

#### On the Relevant of the Faucet Module

The Faucet Module allows a user to tap into existing funds on a public Smart Chain.  This module provides a simple example of the nature of an Antara Module for our study.  

Faucet allows a user to lock an arbitrary amount of funds within an Antara address. Other users on the network are able to withdraw funds from this Antara address in small portions. To prevent spam requests, Faucet requires a small amount of proof-of-work from the requesting user's node.

From this outline, we observe the basic business logic of the Faucet module. The module involves storing funds in a designated address, the creation of a faucet that can disburse funds, and the ability to limit the rate at which funds are withdrawn.

Compare this to our desired Heir module. The Heir module's business logic must allow a designated address the ability to inherit designated blockchain funds.

In both cases, the module's business logic is bound to transactions.

#### Launch the RICK Smart Chain (Optional)

The live community test chain, <b>RICK</b>, has the Heir Module enabled and can serve the purpose of providing a live demonstration.

Launch the chain as follows.

```bash
./komodod -pubkey=$pubkey -ac_name=RICK -ac_supply=90000000000 -ac_reward=100000000 -ac_cc=3 -addnode=138.201.136.145 &
```

#### Create a pubkey

Use the following guide to create an Antara pubkey and address on the <b>RICK</b> Smart Chain.

[<b>Link to Antara pubkey creation guide</b>](../../../basic-docs/antara/antara-tutorials/understanding-antara-addresses.html#creating-and-launching-with-a-pubkey)

#### Retrieve RICK Funds Using the Faucet Module

To obtain funds on the RICK Smart Chain we utilize the Faucet Antara Module.

```bash
./komodo-cli -ac_name=RICK faucetget
```

This returns a raw transaction that you must now broaadcast using [<b>sendrawtransaction</b>](../../../basic-docs/smart-chains/smart-chain-api/rawtransactions.html#sendrawtransaction)

Wait a few moments, and then use the [<b>getinfo</b>](../basic-docs/komodo-api/control.html#getinfo) method to verify that your wallet now contains RICK funds.

#### Complete Each API Method of the Heir Module

With funds in your wallet, you are prepared to experiment with the API commands available in the Heir Module Flow section. We recommend experimenting with each command until you have executed each at least once.

[<b>Link to Heir Module Flow</b>](../basic-docs/fluidity/fluidity-api/heir.html#introduction)

## Transactions as a Data Source

Transactions are a data source for Antara-based software.

Transactions can store data in multiple forms. In the simplest form, transaction data records the movement of coins from one address to another. However, blockchain transactions are capable of storing additional data beyond simple coin movement.

When we desire to place additional data into a transaction, we place this data into an <b>OP_RETURN</b>, or "<b>opreturn</b>" for short.

Observe the following transaction data structure for the existing Heir module:

##### Command

```bash
./komodo-cli -ac_name=HELLOWORLD heirfund 0 5 MyDogHeir 037736c263991316c6a23397a982a1f8c18ae8642e944448162a93a824c31f9299 100 'http://billionaire.com/mywill md5=5385639869'
```

##### Response (annotated) 

<collapse-text hidden="true" style="margin-top: 1rem;" title="Full Response">

```json5
{
  "txid": "9307989767c1d10b3c97834c7e9f50583387907848bc9776b4b77a705791864c",
  "overwintered": false,
  "version": 1,
  "locktime": 0,

    // List of transaction inputs
        // These are the references to the transaction outputs of older transactions
        // The transactions of older outputs are spent in this transaction input

  "vin": [
    {
      "txid": "e5af0f5993d64e68c655e3ca9309d5fd4f10906032ab587fc2142673a3a73109",
      "vout": 0,
      "scriptSig": {
        "asm": "3045022100bae36ff4c95978379391bf1330d964d9cb6bd767386f427099185838ae30a9660220448463c41fa2a4628bde304c922c6d52618f5c427b243dfb24da9c14590118b7[ALL]",
        "hex": "483045022100bae36ff4c95978379391bf1330d964d9cb6bd767386f427099185838ae30a9660220448463c41fa2a4628bde304c922c6d52618f5c427b243dfb24da9c14590118b701"
      },
      "sequence": 4294967295
    },
    {
      "txid": "0a97509be8c178c5c13903844d187148f0c10d309b7a2e260a629ea724d39395",
      "vout": 0,
      "scriptSig": {
        "asm": "3045022100b931e2928b882ebb6adafb906d3480cc3e8537f92190dd355e548bac7405e9ca022047b2c3fc8fadb8483156d05b1acbba97b4bcb357b47fefb5e3ea602205e38f5c[ALL]",
        "hex": "483045022100b931e2928b882ebb6adafb906d3480cc3e8537f92190dd355e548bac7405e9ca022047b2c3fc8fadb8483156d05b1acbba97b4bcb357b47fefb5e3ea602205e38f5c01"
      },
      "sequence": 4294967295
    }
  ],

  // List of transaction outputs

  "vout": [
    {
      "value": 5.00000000,
      "valueZat": 500000000,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c8020676da179ba51a7f6398418c272945433aed27c6d255297a4724693abb5adfa2181031210008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c8020676da179ba51a7f6398418c272945433aed27c6d255297a4724693abb5adfa2181031210008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": [
          "RDTm14n15gjwcRaj4BD94NTkJdRiRsV7N7"
        ]
      }
    },

    // This is a cryptocondition output
    // It contains a fingerprinted condition

    {
      "value": 0.00010000,
      "valueZat": 10000,
      "n": 1,
      "scriptPubKey": {
        "asm": "a22c8020286b36b233cc03c91652560f4ecf9404bcf10b61033916d67edf4a216c92cf758103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c8020286b36b233cc03c91652560f4ecf9404bcf10b61033916d67edf4a216c92cf758103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": [
          "RDVHcSekmXgeYBqRupNTmqo3Rn8QRXNduy"
        ]
      }
    },

    // A normal output (i.e. not a cryptocondition) with a standard OP_CHECKSIG script

    {
      "value": 999994.06084534,
      "valueZat": 99999406084534,
      "n": 2,
      "scriptPubKey": {
        "asm": "02d3431950c2f0f9654217b6ce3d44468d3a9ca7255741767fdeee7c5ec6b47567 OP_CHECKSIG",
        "hex": "2102d3431950c2f0f9654217b6ce3d44468d3a9ca7255741767fdeee7c5ec6b47567ac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": [
          "RN727JeeiZ6NXic7PUKTCiHT1HvuBN4RDa"
        ]
      }
    },

    // Normal output with a standard OP_CHECKSIG script

    {
      "value": 0.99980000,
      "valueZat": 99980000,
      "n": 3,
      "scriptPubKey": {
        "asm": "02d3431950c2f0f9654217b6ce3d44468d3a9ca7255741767fdeee7c5ec6b47567 OP_CHECKSIG",
        "hex": "2102d3431950c2f0f9654217b6ce3d44468d3a9ca7255741767fdeee7c5ec6b47567ac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": [
          "RN727JeeiZ6NXic7PUKTCiHT1HvuBN4RDa"
        ]
      }
    },

    // At the end of the output array there is an opreturn output with serialized data
    // This is created by the Anatara Heir module

    {
      "value": 0.00000000,
      "valueZat": 0,
      "n": 4,
      "scriptPubKey": {
        "asm": "OP_RETURN ea462102d3431950c2f0f9654217b6ce3d44468d3a9ca7255741767fdeee7c5ec6b4756721037736c263991316c6a23397a982a1f8c18ae8642e944448162a93a824c31f92996400000000000000094d79446f67486569722c687474703a2f2f62696c6c696f6e616972652e636f6d2f6d7977696c6c206d64353d35333835363339383639",
        "hex": "6a4c85ea462102d3431950c2f0f9654217b6ce3d44468d3a9ca7255741767fdeee7c5ec6b4756721037736c263991316c6a23397a982a1f8c18ae8642e944448162a93a824c31f92996400000000000000094d79446f67486569722c687474703a2f2f62696c6c696f6e616972652e636f6d2f6d7977696c6c206d64353d35333835363339383639",
        "type": "nulldata"
      }
    }

  ],
  "vjoinsplit": [
  ]
}
```

</collapse-text>

The <b>opreturn</b> is the last output in a transaction, and this output is never spendable under any circumstances. The <b>opreturn</b> is the location where all Antara Module data is stored. We will demonstrate how this is accomplished further on.

The opreturn vout contains two key-value pairs that are related to each other, `asm` and `hex`. The first, `asm`, is simply a less encoded version of the `hex` value.

In the above example data structure, note how the value for the key, `asm`, begins with `OP_RETURN ... `, and is followed by additional hex-encoded data. The additional hex-encoded data is arbitrary, and can be used for any purposes a developer sees fit.

Taking the value in the fully encoded key-value pair, `hex`, here is an approximate breakdown of the data.

| Translation | Hex Value |
| ----------- | --------- |
| 6a | OP_RETURN |
| 4c85 | Encoded length of the following data. This value is not a string, the value is encoded in the Smart Bitcoin variable length format, and the value is not directly readable. | 
| ea | Stands for "EVAL_HEIR". The eval code here tells the daemon that this is an Antara Module, and that the specific module is HEIR |
| 46 | Stands for "F", which is a letter marker to indicate that this Heir transaction is a "Funding" transaction |
| 210... | The remaining portion of the hex encoded data is not related to the core software, but rather to the arbitrary data designed by the developer. Maximum data length is 10000 bytes |

In all modules, some of the hex-encoded data can be decoded using the [<b>decodeccopret</b>](../../../basic-docs/smart-chains/smart-chain-api/util.html#decodeccopret) command on the data contained in the `hex` key-value pair. In our example, the decoded data is as follows.

```json5
{
    "result": "success",
    "OpRets": [
        {
            "eval_code": "EVAL_HEIR",
            "function": "F"
        }
    ]
}
```

When an Antara Module instance begins its life cycle an initial transaction is created. In our example, the transaction we see above is an initial transaction of a full, non-simplified Heir module.

Note that the transaction takes value from normal inputs and sends it to CC outputs, as indicated in the `type` key-value pair.

#### Value Taken From Normal vins

<collapse-text hidden="true" style="margin-top: 1rem;" title="Normal vins">

```json5
  "vin": [
    {
      "txid": "e5af0f5993d64e68c655e3ca9309d5fd4f10906032ab587fc2142673a3a73109",
      "vout": 0,
      "scriptSig": {
        "asm": "3045022100bae36ff4c95978379391bf1330d964d9cb6bd767386f427099185838ae30a9660220448463c41fa2a4628bde304c922c6d52618f5c427b243dfb24da9c14590118b7[ALL]",
        "hex": "483045022100bae36ff4c95978379391bf1330d964d9cb6bd767386f427099185838ae30a9660220448463c41fa2a4628bde304c922c6d52618f5c427b243dfb24da9c14590118b701"
      },
      "sequence": 4294967295
    },
    {
      "txid": "0a97509be8c178c5c13903844d187148f0c10d309b7a2e260a629ea724d39395",
      "vout": 0,
      "scriptSig": {
        "asm": "3045022100b931e2928b882ebb6adafb906d3480cc3e8537f92190dd355e548bac7405e9ca022047b2c3fc8fadb8483156d05b1acbba97b4bcb357b47fefb5e3ea602205e38f5c[ALL]",
        "hex": "483045022100b931e2928b882ebb6adafb906d3480cc3e8537f92190dd355e548bac7405e9ca022047b2c3fc8fadb8483156d05b1acbba97b4bcb357b47fefb5e3ea602205e38f5c01"
      },
      "sequence": 4294967295
    }
  ],
```

</collapse-text>

#### Value Sent to CC vouts

<collapse-text hidden="true" style="margin-top: 1rem;" title="Normal vins">

```json5

    ...

    {
      "value": 5.00000000,
      "valueZat": 500000000,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c8020676da179ba51a7f6398418c272945433aed27c6d255297a4724693abb5adfa2181031210008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c8020676da179ba51a7f6398418c272945433aed27c6d255297a4724693abb5adfa2181031210008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": [
          "RDTm14n15gjwcRaj4BD94NTkJdRiRsV7N7"
        ]
      }
    },
    {
      "value": 0.00010000,
      "valueZat": 10000,
      "n": 1,
      "scriptPubKey": {
        "asm": "a22c8020286b36b233cc03c91652560f4ecf9404bcf10b61033916d67edf4a216c92cf758103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c8020286b36b233cc03c91652560f4ecf9404bcf10b61033916d67edf4a216c92cf758103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": [
          "RDVHcSekmXgeYBqRupNTmqo3Rn8QRXNduy"
        ]
      }
    },

    ...

```

</collapse-text>

#### Key Takeaways

The important aspect to note here is that an initial transaction of a module instance typically takes value from normal inputs and sends it to CC outputs.

As time progresses, more transactions on the Smart Chain are performed under this module instance. Each of the module instance's transactions spends from the previous transaction outputs associated with the instance and creates new unspent transactions. This process effectively creates a [linked-list data structure.](https://en.wikipedia.org/wiki/Linked_list)

With each transaction, the <b>opreturn</b> output is never spent, and remains in the blockchain as a source of Antara Module data (read only).

-----------

[<b>Link to Next Tutorial in Advanced Series</b>](../../../basic-docs/antara/antara-tutorials/advanced-series-4.html)
# Advanced Series — Final Conceptual Discussion

Up to this point in the tutorial series we have discussed the general concepts of the Antara Framework and we have discussed initial preparations to build a simplified prototype of the Heir Antara Module.

This section of the tutorial series reviews many of the conceptual aspects of the Antara Framework while also diving more thoroughly into technical details.

This is the final conceptual discussion necessary before we begin writing code.

## Understanding CryptoConditions

According to the industry-wide CryptoConditions standard, a CryptoCondition is a logical expression evaluated on electronic signatures and hashes of transaction data. 

CryptoConditions are stored in the scripts of transactions and are evaluated by a supporting CryptoCondition C library. 

In a Komodo Smart Chain, the default CC library is included during the installation procedure.

<!-- Sidd: Can we get a directory location here regarding the CC library on a default Smart Chain -->

#### Antara Extensions to CryptoConditions

In addition to the industry-standard CryptoCondition (CC) library, Komodo's implementation of CC integrates the ability to add arbitrary code into a Smart Chain's consensus mechanism. This allows developers to create essentially an unlimited number of application-specific transaction-validation rules.

For example, in the Heir Module, if the heir attempts to claim funds, the validation code checks whether the owner of the fund has shown recent activity, according to a specified amount of time. The owner can show activity by either adding to or spending from the fund. If the owner has not shown signs of activity, the validation code allows the heir to claim the funds.

Through CryptoConditions and Antara's extensions, the consensus mechanism can rule over the outcome of the cryptocondition logic and arbitrary validation code across the Smart Chain's decentralized network of nodes.

#### Makeup of a CryptoCondition

A CryptoCondition consists of two parts:

- <b>Part I: A condition that must be met</b>
  - This is stored in the transaction output's `scriptPubKey`
- <b>Part II: A fulfillment</b>
  - This is stored in the `scriptSig` field of the input of the transaction that spends the above output


The <b>condition</b> (Part I) contains data that checks the CryptoCondition in "fingeprinted" form. 

The term, "fingerprinted," comes from the industry-wide standard CC library. To fingerprint data, the CC library acquires the target data, combines it with other data that the developer does not need to manage, and then creates a hash, or "fingerprint."

For example, a condition can be a requirement that only a specific fingerprinted `pubkey` be allowed to spend this transaction output.

The <b>fulfillment</b> (Part II) contains instructions and data about how the consensus mechanism should evaluate the CryptoCondition. For example, the fulfillment could include an instruction to check a spending-transaction's electronic signature as well as the the `pubkey` associated with this signature.

To spend a CC output of a transaction, a node on the network sends a spending transaction that contains a CC input that fulfills the CC output's condition. The consensus mechanism of the Smart Chain checks that the fulfillment is correct. For this it uses the C CryptoCondition library to evaluate the fulfillment of the spending transaction. The result of this evaluation is checked against the condition stored in the previous transaction output.


For our example above of an electronic signature, the consensus mechanism runs the logical conditions and fulfillments of the CryptoCondition to verify the electronic signature with the provided pubkey. Then the validation logic calculates the fingerprint of the pubkey and checks it against the condition.

In adding Cryptoconditions to the Antara framework, Komodo extended the original CC protocol by adding an additional aspect beyond the inputs and outputs. This additional part is called the <b>EVAL</b> CryptoCondition, or eval code.

Each Antara Module has its own unique eval code. The eval code is a number between 0 and 255, and it identifies the specific Antara Module that is associated with a CC transaction. When the consensus validation logic encounters the Antara Module's eval code in a transaction input, the validation logic calls the module's validation function.

The process of validation of an Antara Module's transaction is depicted on the diagram below:

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; float: right; display: block;">

<img style="border: 1rem solid white; margin: 1rem 0rem 1rem 0rem;" src="/cc-verify-work-v2.3.png">

</div>

#### The Simplest form of a CryptoCondition

The simplest CryptoCondition evaluates an electronic signature of a spending-transaction's `scriptsig`. Assuming the evaluation is successful, the spending-transaction is then able to spend funds from the output of another transaction.

At first glance, you may be confused about why a CryptoCondition is useful in this event, as a normal blockchain protocol can already accomplish this task.

The answer is that there is an important difference in the CryptoCondition implementation. When a CryptoCondition transaction output is spent, the Antara Module's code can enforce additional validation logic. This is accomplished via the eval code that is stored as a part of the CryptoCondition's inputs and outputs. We will describe this further in the Heir Module development section.

The ability to enforce additional logic is the key difference that illuminates the power of Antara. For example, additional arbitrary validation code can include logic that allows a user to spend the output only at the appropriate time. The transaction output can be spent only via a spending transaction that has the matching fulfillment, and both the CryptoCondition and the Antara Module validation code evaluate to `true`.

Even the basic CryptoCondition features offer more complex logical expressions than a normal Bitcoin Script. For example, with CC a spending transaction could be required to have signatures from at least `M` of `N` acceptable `pubkeys`.

As logical conditions and subconditions can be added to a CryptoCondition as desired, the developer can utilize both the CryptoConditions features and customized module's validation code to build complex logic that governs the movement of Smart Chain assets. In this sense, Antara is an advanced evolution of the basic Bitcoin Script security features, such as pubkey or pubkey hash scripts. We will examine validation code in greater detail later in this tutorial.

In this section, we became acquainted with the concept of logical conditions that are associated with transaction outputs, and logical fulfillments associated with spending-transactions. These two elements make up the rudimentary aspect of a CryptoCondition.

There are yet other elements of an Antara-based CryptoCondition. One element is called the `EVAL` code, and it is stored in the CryptoCondition's inputs and outputs. We will touch on this topic soon.

#### Antara Module as Data and Business Logic Layer of Business Application

An Antara Module can be described as a combination of a data layer and a business-logic layer in an application. The data layer is the collection of transactions related to the Antara Module, and the business-logic layer is the module's arbitrary code.

These two layers tie in with other layers in an Antara-based software application. For example, the software external to the blockchain could include a presentation layer, consisting of a Graphical User Interface (GUI) and other visual elements. External applications interact with an Antara Module via its RPC calls.

Also, there can often be an additional oracle layer, wherein oracle software connects nodes to external data sources across the Internet. This can be the case in Antara-based software applications that make use of the [<b>Oracles</b>](../basic-docs/fluidity/fluidity-api/oracles.html#introduction) Antara Module.

#### A Global CC Address in the Antara Framework

Recall that each Antara Module has an associated global CC address. The private key to this global CC address is publicly available. The address can be used for such tasks as sharing funds between users of this module, and anyone can attempt to spend funds from this address.

The following is an example of a global CC address created and assigned for the Heir module.

```cpp
const char *HeirCCaddr = "RDVHcSekmXgeYBqRupNTmqo3Rn8QRXNduy";
const char *HeirNormaladdr = "RTPwUjKYECcGn6Y4KYChLhgaht1RSU4jwf";
char HeirCChexstr[67] = { "03c91bef3d7cc59c3a89286833a3446b29e52a5e773f738a1ad2b09785e5f4179e" };
uint8_t HeirCCpriv[32] = { 0x9d, 0xa1, 0xf8, 0xf7, 0xba, 0x0a, 0x91, 0x36, 0x89, 0x9a, 0x86, 0x30, 0x63, 0x20, 0xd7, 0xdf, 0xaa, 0x35, 0xe3, 0x99, 0x32, 0x2b, 0x63, 0xc0, 0x66, 0x9c, 0x93, 0xc4, 0x5e, 0x9d, 0xb9, 0xce };
```

| Function | Description |
| -------- | ----------- |
| HeirCCaddr | the global CC address itself |
| HeirCChexstr | the pubkey |
| HeirCCpriv | the privkey for the global CC address |
| HeirNormaladdr | The normal address for the same pubkey and privkey. Spending from this address does not validation by the Antara Module |

In the Antara codebase, the global CC address is sometimes called the "unspendable" address. This is likely a reference to the fact that for any user to spend funds from this address, the spending transaction must pass the module's validation code.

For example, the global CC address could store funds shared between several users. As a global CC address's privkey is publicly available, anyone might try to spend these funds. This is where the Antara validation code will exercise control over whom is allowed to spend funds, and by which rules. The RPC aspect of the Antara Module must prevent the creation of inappropriate transactions as well.

A transaction can also send a nominal fee to the global CC address with the intention of turning this transaction's output into a search key (called a marker). To ensure these markers remain publicly visible forever, the module's validation code can disable spending for these markers. With this combination, the developer can use the `SetCCunspents` SDK function to enumerate all transactions in the global CC address, and thus discover the module's transaction history.

## Antara Development Checklist

Development requirements for each Antara Module:

- Allocate a new `EVAL` code for your contract
- Assign a global address for the module
- Define the module's transactions
  - This includes the structure of their inputs, outputs, and opreturn format
- Implement the common RPC functions that nearly all modules feature
  - These are typically functions for retrieving a list of all of the module's initial transactions, and for retrieving user addresses and the global CC address
- Implement the module's specific RPC functions
  - These are used to create the module-related transactions and to return relevant information about the module's data and state
- Implement the module's validation code

## Antara Module Architecture

From an architectural standpoint, an Antara Module is simply a C/C++ source file.

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; float: right; display: block;">

<img src="/CC-Antara-arch-v2.3.png" style="border: 0.5rem solid white; margin: 1rem 0rem 1rem 0rem;" >

</div>

There are two parts to the module's source file: the implementation of RPC's and the validation code. You also need to inform the basic komodod source code of your new Antara Module through the following steps.

- Allocate a new eval code for your Antara Module in `src/cc/eval.h`
- add your module's global addresses and the validation code entry function into the registry of Antara Modules in `src/cc/CCcustom.cpp`

#### RPC Implementations

The first part of the Antara's module source file consists of the implementation of all Remote Procedure Calls (RPC's) for this module. These typically either perform transactions or query information about state and data.

The developer must also implement high-level functions for any desired RPC commands that are called by the RPC engine and are responsible for converting the RPC data to native C++ data types.

These functions should be added into an existing source in the `/src/rpc` directory. Alternatively, the developer might create his own RPC source file.

A reference to the RPC-command functions should be added to the global RPC command table in the `/src/rpc/server.cpp` source file.

With this properly completed, the Smart Chain daemon's compiler will automatically make each RPC available at the command line through the `komodo-cli` software and via the `curl` utility.

Essentially all modules have at least these two RPC's.

- XXXXlist
  - This lists all initial transactions relevant to the module
- XXXXinfo
  - This RPC typically also requires an additional input -- a transaction ID for which information is desired
  - When called, the method then returns information about this transaction ID

Include other RPC implementations as desired.

#### Antara Module Validation Code

The main purpose of Antara Module validation code is two-fold. First, it ensures that the structure of the sequence of an Antara Module related transactions and their data is accurate. Second, the validation code prevents inappropriate Antara-related transactions from entering the chain. In other words, module validation code should protect against malicious transactions, and this is the code's most important task.

Antara Module Validation code is triggered anytime a node attempts to add a CC spending-transaction to the chain.

A module's validation code is activated only when a transaction has at least one CC input that bears the module's `EVAL` code inside the <b>scriptSig</b> in the transaction.

A module's initial transaction may not have a CC input. When this happens, the validation code is not triggered. Therefore, the transaction may be handled by the normal blockchain protocol.

As an aside, when the developer needs to write code that validates a spending transaction that spends a utxo that has no CC inputs, the code must first validate the utxo as well. If the result of the validation of the utxo is `false`, then the code can also reject the spending transaction. We will delve into this topic in thorough detail further in the tutorial.

#### The EVAL Code

A unique 8-bit `EVAL` code is attached to each Antara Module. The `EVAL` code is used by the core Smart Chain daemon's transaction-validation code to route any relevant transactions to the appropriate module's validation code.

The `EVAL` code itself is actually a simple CryptoCondition. The CryptoCondition tests for the byte value and, if the value is `true`, routes the result according to the core Smart Chain daemon's code.

### Antara Module Transaction Structure

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; float: right; display: block;">

<img style="border: 1rem solid white;" src="/cc-tx-structure-for-guide-v3.2.png">

</div>

A CryptoCondition (CC) input is called a "vin" and a CryptoCondition output is called a "vout".

A CC transaction has one or more vins and one or more vouts.

When creating a CC transaction, the transaction's vins can consume the vouts of previous transactions that were either related to CC, or not related.

When they are not related to CC, the vin of the current transaction does not need to include a CC fulfillment.

However, if the current transaction's vins are consuming vouts from a CC-related transaction, then the current transaction's vins must contain logical fulfillments that meet the requirements of the previous transaction's CC vouts. Also, the current transaction's CC vins contain the transaction id (txid) of the previous transaction.

A CC transaction typically also has an opreturn vout that contains module data.

#### Antara Module SDK

Komodo is building an SDK for Antara Module development. The SDK is still in the early stages. Some of the SDK functions are already available, and can be found in the following source files:

- CCtx.cpp
- CCutils.cpp
- cc.cpp
- eval.cpp

We will return to the SDK functions when we discuss the Heir module development process.

-----------------

[<b>Link to Next Tutorial in Advanced Series</b>](../../../basic-docs/antara/antara-tutorials/advanced-series-5.html)
# Advanced Series — Developing the Heir Module Prototype

## Heir Module Development

Having finished an overview of the Antara development layout, we are now prepared to create a simplified prototype of the [Heir Module](../basic-docs/fluidity/fluidity-api/heir.html#introduction).

#### Links to Heir Source Code and Building Instructions

A complete working example of this simplified Heir CC module tutorial can be found at the following link. We invite the reader to download and review the final code while progressing through the tutorial.

[Link to Simplified Heir Module](https://github.com/dimxy/komodo/tree/heir-simple)

The source files are found in the following directories.

- src/cc/heir.cpp
- src/cc/CCheir.h
- src/wallet/rpcwallet.cpp
- src/rpc/server.cpp
- src/rpc/server.h

#### Downloading and Installing From Source

At this time, the reader will need to have the Komodo Smart Chain source code available. The reader begins with this default source code and adds to it to create a new Antara Module.

Instructions to download and build Komodo software is found here.

[Link to Instructions for Building from Source](../../../basic-docs/smart-chains/smart-chain-setup/installing-from-source.html#linux)

## Begin Development

Our tasks are the following:

- Add a new `EVAL` code to represent this module
- Create a global CC address
- Define the Heir Module transactions
  - vouts, or logical conditions
  - vins, or logical fulfillments
- Implement the RPC interface
- Create the validation code

## Create the EVAL Code

In a previous section of this advanced series, we discussed the nature of creating a new EVAL code for an Antara Module.

[<b>Link to EVAL code instructions here.</b>](../../../basic-docs/antara/antara-tutorials/advanced-series-2.html#the-eval-code)

Review the above linked section and attempt to create an EVAL code on your own for this simplified Heir Module.

When you are finished with your attempt, compare your results with the downloadable files for this tutorial.

[<b>Link to EVAL code source file in simplified Heir Module downloadables.</b>](https://github.com/dimxy/komodo/blob/heir-simple/src/cc/eval.h)

## Global CC Address

We also recently discussed the method of adding a Global CC Address as a part of initiating a new Antara Module.

[<b>Link to Global CC Address instructions here.</b>](../../../basic-docs/antara/antara-tutorials/advanced-series-2.html#creating-a-global-cc-address)

Review the above linked section and attempt to create a Global CC Address on your own. 

When you are finished with your attempt, compare your results with the downloadable files for this tutorial.

<!--

Sidd: Please correct the link below, if needed.

-->

[<b>Link to Global CC Address file in simplified Heir Module downloadables.</b>](https://github.com/dimxy/komodo/blob/heir-simple/src/cc/CCcustom.cpp)

## Heir Module Transactions

We require three types of module transactions

- an initial transaction with which a user creates the fund for inheritance
- a transaction for additional funding
- a transaction for spending funds by the owner or heir

#### The Initial Transaction: Creating a Fund

| Input/Output | Description |
| ------------ | ----------- |
| `vins.*` | <b>Normal input</b> <br> - The `*` notation implies that this can apply to any number of inputs <br> - These vins are typical of core blockchain software and not related to CC |
| `vout.0` | <b>The `1of2` CC address that holds the funds that belong to the owner and, once available, to the heir</b> |
| `vout.1` | <b>The transaction fee to account for the `vout.0` amount above</b> <br> - The amount in `vout.1` is used as a marker. We will discuss markers and their uses cases further on in the tutorial |
| `vout.2` | <b>Normal change</b> <br> - Recall that `change` is the leftover amount from the original utxo that the user does not intend to send to the destination address, and which the user desires to keep <br> - Any amount of leftover funds not included in the `change` utxo is forfeited to the miner of the block; this is how miners receive their mining fee |
| `vout.n-1` | <b>OP_RETURN EVAL_HEIR 'F' ownerpk heirpk inactivitytime heirname</b> <br> - This is the is the opreturn vout, and it contains any data relevant to the module <br> - The 'F' is a flag that indicates that this transaction is a "Funding" CC transaction <br> - `ownerpk` and `heirpk` respectively represent the pubkeys of the owner and heir <br> - Concerning `inactivitytime`, the owner should either make a donation to or spend from the `1of2` address within the `inactivitytime` amount of time to prevent opening the `1of2` address to the heir for spending. <br> - `heirname` is the name of this instance of the Heir Module |

Through a funding transaction, the owner of the initial funds creates a "plan," which we can also call a "contract," and deposits funds for future spending.

The initial funds are taken from the normal `vout` values of a utxo. The initial transaction of this plan can be the beginning of the relationship between the funds in the utxo and the Heir Module.

The main funds for the plan are allocated to `vout.0` of our CC transaction.

By design, and setting aside issues of timing, we desire that either the owner or the inheritor of the funds should be able to spend this utxo. We assume that the owner has one address, and the inheritor has another. To achieve this, we use an advanced CryptoConditions feature that states that either of two addresses can spend the funds. This is called a `1of2` CryptoCondition, and it is placed as a logical condition into `vout.0`. 

A fee is allocated to `vout.1`. This is used as a marker. The marker allows a developer to use a special SDK function, `SetCCunspents()`, to create a list of all initial transactions for the module.

As usual, out of the remaining amount of our initial utxo, we need to send all that we desire to keep to our `change` address.

Also, we need to leave an amount as an incentive for the miner. Any remainder beyond the sum total of our new `vout` values will automatically be allocated in this manner. We typically leave `10000` satoshis of our Smart Chain coin, by convention.

Note the `F` letter in the opreturn structure. The `F` stands for "fund." By convention, the first byte of any opreturn is the `EVAL` code. The second byte is the transaction functional id, we use it to understand the transaction data structure in the opreturn.

We also stored other relevant data in the opreturn:

- The owner and inheritor pubkeys
- Inactivity time
  - this is the amount of seconds during which the owner must exhibit activity to maintain sole control over the funds
  - If the owner does not spend funds during this time period, the inheritor will gain the ability to spend these funds as well
- The descriptive name of this funding plan

#### The Add Coins Transaction

| Input/Output | Description |
| ------------ | ----------- |
| `vins.*` | normal inputs |
| `vout.0` | the funding CC `1of2` address for the owner and heir. This address consists of two parts: the owner and heir pubkeys. Either owner or heir can spend this vout |
| `vout.1` | normal change |
| `vout.n-1` | OP_RETURN 'A' fundingtxid HasHeirSpendingBegun |

This transaction serves the purpose of adding more funds to the owner's address. The transaction uses normal coin inputs (non-CC) and sends them to the CC `1of2` address.

We include the transaction id (txid) of the initial transaction in the opreturn to bind the add transaction to the plan.

Note the functional id, `A`. This flag indicates that this transaction is an `add` type of funding transaction.

#### The Claim Coins Transaction

| input/output | description |
| ------------ | ----------- |
| vin.0 | normal input transaction fee |
| vin.1+ | input from CC `1of2` address |
| vout.0 | normal output, sent to the owner or the heir address |
| vout.1 | `change` to CC `1of2` address |
| vout.2 | `change` to user's address from transaction fee input, if any |
| vout.n-1 | OP_RETURN EVAL_HEIR `C` fundingtxid HasHeirSpendingBegun |

This transaction allows either the owner or the heir to spend funds from this plan instance.

To pay the transaction fee to the miners, the transaction has a normal input that draws from the wallet of the transaction creator.

The transaction also has a CC input for spending the claimed value from the `1of2` fund address.

As for outputs, the claimed value is sent to the claimer's normal address, allowing the claimer to spend funds as usual. Unspent or leftover "change" from the transaction is returned to the `1of2` address.

We also indicate the normal `change`.

The functional id, `C`, in the opreturn indicates that this is a "claim" type transaction.

We also include all the same opreturn data as in the `A` transaction, include the `fundingtxid` and the `HasHeirSpendingBegun` flag.

## Heir Module RPC Implementations

#### heirfund

For a user to call the `heirfund` RPC, the user will need to supply the name of the RPC and its parameters as arguments.

We model the syntax as follows:

```bash
./komodo-cli -ac_name=YOURCHAIN heirfund amount name heirpubkey inactivitytime
```

##### Descriptions of the heirfund Syntax

| Argument | Type | Description |
| -------------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ |
| amount         | (number)           | The initial funding amount, in coins or tokens <br> - This parameter is considered to be the amount of tokens if the tokenid parameter is present)   |
| name           | (string)           | The name of the heir funding plan (arbitrary)                                                                                                    |
| heirpubkey     | (string)           | The heir's public key (in hexademical)                                                                                                           |
| inactivitytime | (number)           | The time (in seconds) that must pass without the owner executing an `heiradd` or `heirclaim` method, after which the address unlocks to the heir |

#### Adding the Command to the Source File

To add a new command to `komodo-cli` we open the `src/server.cpp` source file add a new element to the `vRPCCommands` array.

```cpp
    { "heir",       "heirfund",   &heirfund,      true },
```

| Object | Description |
| ------ | ----------- |
| heir | a common name for all heir contract RPC calls |
| heirfund | the name of the new command |
| &heirfund | the address of the RPC interface function |
| true | indicates that the command description will be shown in the help command output; placing `false` here would hide this RPC from the help menu |

#### Add the RPC Function Declaration

We add the RPC function declaration in the `rpc/server.h` source file.

The declaration in this file is essentially the same across all RPC functions.

```cpp
UniValue heirfund(const UniValue& params, bool fHelp);
```

### The Two Levels of an RPC Implementation

There are two levels to an RPC implementation.

The first level is a short RPC function that has the same name as the RPC command itself (such as `heirfund`).

The body of this level is added to a source file in the `rpc/` subdirectory in the source code (for this example, we added the RPC functions for Heir Module in the wallet/rpcwallet.cpp).

Creating a new RPC source file for each Antara Module's RPC functions is considered a best practice.

This function checks the RPC parameters and the needed environment, and then forwards the RPC to the second level.

To begin the RPC command, we declare the `heirfund` function and clear the global error object.

```cpp
// heirfund command rpc-level implementation, src/wallet/rpcwallet.cpp
UniValue heirfund(const UniValue& params, bool fHelp)

    CCerror.clear(); // clear global error object
```

Recall that a Smart Chain must have the [<b>ac_cc</b>](../basic-docs/smart-chains/smart-chain-setup/smart-chain-customizations.html#ac-cc) and [<b>ac_ccenable</b>](../basic-docs/smart-chains/smart-chain-setup/smart-chain-customizations.html#ac-ccenable) customization parameters properly initiated for any Antara Module to function.

Therefore, we check that the wallet and Heir Module features are available in the Smart Chain. We also check the RPC parameter's required number:

Ensure that the wallet object is initialized:

```cpp
    if (!EnsureWalletIsAvailable(fHelp))
        return NullUniValue;
```

Ensure that the chain parameters needed for Antara Modules are correctly set. For example, [<b>addressindex</b>]() and [<b>spentindex</b>]() should both be enabled. Also, ensure that the Heir Module is enabled on this chain.

```cpp
    if (ensure_CCrequirements(EVAL_HEIR) < 0)
        throw runtime_error("to use CC contracts, you need to launch daemon with valid -pubkey= for an address in your wallet\n");
    // output help message if asked or params count is incorrect:
    if (fHelp || params.size() != 4 )
        throw runtime_error("heirfund funds heirname heirpubkey inactivitytime\n");
```

Lock the user's wallet:

```cpp
    LOCK2(cs_main, pwalletMain->cs_wallet);
```

The `UniValue` object is a special type used to pass data in RPC calls. The `UniValue` object is native to all blockchains based on the Bitcoin protocol. For parameters, UniValue requires an array of UniValue objects.

We must convert these UniValue objects into normal C/C++ language types, and then pass them to the second level of our module implementation.

Convert the parameters from the UniValue type to their basic C++ types and add checks to ensure that the converted parameter values are correct.

This content is abbreviated. [For links to the full source code and example files, click here.](../../../basic-docs/antara/antara-tutorials/heir-module-tutorial.html#links-to-heir-source-code-and-building-instructions)

Note the method for parsing the hex representation of the pubkey parameter and converting it to a `CPubKey` object.

```cpp
    CAmount amount = atof(params[0].get_str().c_str()) * COIN;  // Note conversion from satoshis to coins through a multiplication of 10E8
    if( amount < 0 )
    	throw runtime_error("amount cant be negative");
    std::string name = params[1].get_str();
    std::vector<uint8_t> vheirpubkey = ParseHex(params[2].get_str().c_str());
    CPubKey heirpk = pubkey2pk(vheirpubkey);
    int64_t inactivitytime = atoll(params[3].get_str().c_str());
```

Finally, call the Heir Module code, pass our values (now in C++ type format), and set these as the value of the final `result` object. Bear in mind that the returned value from the Heir Module code, `HeirFund`, returns a hexadecimal value.

```cpp
    UniValue result = HeirFund(amount, name, heirpk, inactivitytime);
    RETURN_IF_ERROR(CCerror);  // use a macro to throw runtime_error if CCerror is set in HeirFund()
    return result;
}
```

[See the linked source code (line number is approximate.)](https://github.com/dimxy/komodo/blob/heir-simple/src/wallet/rpcwallet.cpp#L7740)

### Second Level Implementation

The second level of the RPC implementation is the transaction creation code. This resides in the `src/cc/heir.cpp` source file.

#### Implementing heirfund transaction creation
The following content displays the skeleton of the <b>heirfund</b> RPC implementation.

[For links to the full source code and example files, click here.](../../../basic-docs/antara/antara-tutorials/heir-module-tutorial.html#links-to-heir-source-code-and-building-instructions)

```cpp
// heirfund transaction creation code, src/cc/heir.cpp
std::string HeirFund(int64_t amount, std::string heirName, CPubKey heirPubkey, int64_t inactivityTimeSec)
{
```

Create a mutable version of a transaction object.

```cpp
    CMutableTransaction mtx = CreateNewContextualCMutableTransaction(Params().GetConsensus(), komodo_nextheight());
```

Declare and initialize an `CCcontract_info` object with Heir Module variables, such as our global CC address, our global private key, etc.

```cpp
    struct CCcontract_info *cp, C;
    cp = CCinit(&C, EVAL_HEIR);
```

#### Adding Inputs to the Transaction

Add inputs to the transaction that are enough to make a deposit of the requested amount to the Heir fund. Also add one fee to serve as a marker, and another for the miners.

By tradition, we use a constant fee of `10000` satoshis.

We use the `pubkey` from the komodod `-pubkey` launch parameter as the destination address for the funds withdrawn from the `1of2` plan address.

We use a function in the CC SDK, `AddNormalinputs`, to add the normal inputs to the mutable transaction.

```cpp
    const int64_t txfee = 10000;
    CPubKey myPubkey = pubkey2pk(Mypubkey());
    if (AddNormalinputs(mtx, myPubkey, amount+2*txfee , 60) > 0) {
```

The parameters passed to the `AddNormalinputs()` function are:

- The transaction itself
- The user's pub
- The total value for the funding amount
- he marker and the miner fees
- The limit on the quantity of utxos the daemon can take from the wallet of the user
  - Naturally, only utxos that are available via the wallet's private keys can be used for these inputs

#### Adding Outputs to the Transaction

According to our specification, we need two outputs: one for the funding deposit and one for the marker.

Here, we use two CC SDK functions that are designed to create CC vouts.

The first is `MakeCC1of2vout`. This creates a CC vout with a threshold of `2` addresses that can spend from the plan funds. We supply as arguments the two potential addresses, represented here as `myPubkey` and `heirPubkey`.

`MakeCC1vout` creates a vout with a simple CryptoCondition which sends a transaction fee to the Heir Module global CC address. (This is returned by the `GetUnspendable()` function call below.) We need the global CC address so that we can both mark the transaction, and to find all Heir funding plans.

You will always need some kind of marker for any instance of an Antara Module plan for at least the initial transaction. Otherwise, you might lose the instance's data in the blockchain.

We call this a <b>marker pattern</b> in Antara development, and we will explore this later in the tutorial.

This first statement creates a vout with a threshold CryptoCondition. This allows spending via one of two possible pubkeys. The statment then adds this vout to the transaction.

Note the eval code, `EVAL_HEIR`. This triggers the Heir validation code whenever a Heir Module transaction occurs.

The second statement creates a marker vout with a simple CryptoCondition. There is a small fee sent to the Heir Module's global CC address. The statement then adds this vout to the transaction. This vout will be used for retrieving the list of all instances of the Heir Module via the <b>heirlist</b> RPC.

```cpp
        mtx.vout.push_back( MakeCC1of2vout(EVAL_HEIR, amount, myPubkey, heirPubkey) );
        mtx.vout.push_back( MakeCC1vout(EVAL_HEIR, txfee, GetUnspendable(cp, NULL)) );
```

Finish the creation of the transaction by calling the `FinalizeCCTx` function along with its parameters from the `cp` object, the `mtx` object itself, the owner's pubkey, and the transaction fee amount.

Note the cast to `uint8_t` for the constants `EVAL_HEIR` and `F` function id. This is important, as the cast supposes a one-byte size for the serialization of these values. If this size was not inferred, then the type would be an `int`.

Also, an opreturn object with the data from this module instance is passed. To create the opreturn object, serialize the needed ids and variables to a `CScript` object.

```cpp
        std::string rawhextx = FinalizeCCTx(0, cp, mtx, myPubkey, txfee,
            CScript() << OP_RETURN << (uint8_t)EVAL_HEIR << (uint8_t)'F' << myPubkey << heirPubkey << inactivityTimeSec << heirName));
        return rawhextx;
    }
```

In case the `AddNormalinputs()` function cannot find sufficient owner coins for the requested amount (including the transaction fee), we set the `CCerror` error object.

```cpp
    CCerror = "not enough coins for requested amount and txfee";
    return std::string("");
}
```

Note that we do not need to add the normal change output here because the `FinalizeCCTx` function adds the change output for us.

`FinalizeCCTx` also builds the transaction input `scriptSigs` (both normal and CC aspects), adds tx signatures to them, and returns a signed transaction in hexadecimal encoding.

Also note the `E_MARSHAL()` function. This serializes variables of various supported types to a byte array. The byte array is then serialized to a `CScript` object. The object is stored in the `scriptPubKey` transaction field in the last opreturn vout with transaction data.

There is also the mirror `E_UNMARSHAL()` function. This is used for unpacking opreturn data from a CScript object to C++ variables, and for further processing.

The returned transaction is ready to be sent to the Smart Chain network using the [<b>sendrawtransaction</b>](../basic-docs/smart-chains/smart-chain-api/rawtransactions.html#sendrawtransaction) RPC.

#### Implementing the heirclaim RPC

As before, this implementation has two levels. The first level checks the required environment and converts the parameters. The second level creates the final transaction.

##### heirclaim syntax

```bash
./komodo-cli -ac_name=YOURCHAIN heirclaim fundingtxid amount
```

##### Add the RPC command to komodo-cli

Add a new command to `komodo-cli` by adding a new element into the `vRPCCommands` array in the source file `src/server.cpp`.

```cpp
    { "heir",       "heirclaim",   &heirclaim,      true },
```

Using the previous section of the tutorial as an example, add an `heirclaim` RPC implementation in the `src/rpc/wallet.cpp` source file.

Add the `heirclaim` declaration in the `src/rpc/server.h` header file.

```cpp
// heirclaim command rpc-level implementation, src/wallet/rpcwallet.cpp

UniValue heirclaim(const UniValue& params, bool fHelp)
{
    CCerror.clear(); // clear global error object
```

Check that the wallet is available.

In case the user asks for help via the `--help` parameter, or in case the parameters are not correctly submitted, print a `help` message to the console.

Also check that cc contract requirements are satisfied:

```cpp
    if (!EnsureWalletIsAvailable(fHelp))
        return NullUniValue;
    if (fHelp || params.size() != 2)
	throw runtime_error("heirclaim txfee funds fundingtxid\n");
    if (ensure_CCrequirements(EVAL_HEIR) < 0)
	throw runtime_error("to use CC contracts, you need to launch daemon with valid -pubkey= for an address in your wallet\n");
```

Lock the wallet:

```cpp
    LOCK2(cs_main, pwalletMain->cs_wallet);
```

Convert the parameters from `UniValue` to `c++` type:

```cpp
    uint256 fundingtxid = Parseuint256((char*)params[0].get_str().c_str());
    CAmount amount = atof(params[1].get_str().c_str()) * COIN;  // Note conversion from satoshis to coins by multiplication by 10E8
```

Call the `HeirClaim` transaction creation function and return the created transaction in hexadecimal.

```cpp
    UniValue result = HeirClaim(fundingtxid, amount);
    RETURN_IF_ERROR(CCerror);  // use a macro to throw runtime_error if CCerror is set in HeirFund()
    return result;
}
```
#### Transaction creation code for heirclaom RPC

Implement the `HeirClaim` transaction creation code in the `src/cc/heir.cpp` source file.

```cpp
// heirclaim transaction creation function, src/cc/heir.cpp
std::string HeirClaim(uint256 fundingtxid, int64_t amount)
{
```

Start with creating a mutable transaction object:

```cpp
    CMutableTransaction mtx = CreateNewContextualCMutableTransaction(Params().GetConsensus(), komodo_nextheight());
```

Initialize the `cp` object:

```cpp
    struct CCcontract_info *cp, C;
    cp = CCinit(&C, EVAL_HEIR);
```

Find the most recent owner transaction to calculate the owner's inactivity time. The helper function, `FindLatestOwnerTx()`, returns the latest transaction id, the `owner` and `heir` public keys, `inactivity time setting` value, and the `hasHeirSpendingBegun` flag value.

```cpp
    const int64_t txfee = 10000;
    CPubKey ownerPubkey, heirPubkey;
    int64_t inactivityTimeSec;
    uint8_t hasHeirSpendingBegun;
    uint256 latesttxid = FindLatestOwnerTx(fundingtxid, ownerPubkey, heirPubkey, inactivityTimeSec, hasHeirSpendingBegun);
    if( latesttxid.IsNull() )   {
        CCerror = "no funding tx found";
        return "";
    }
```

Check whether the inactivity time of the owner has surpassed the amount designated in the plan. The `CCduration` CC SDK function returns the time (in seconds) since the confirmation of the block that bears the provided transaction to the chain-tip block.

If `hasHeirSpendingBegun` is already `true`, there is no need to also check the owner's inactivity time.

```cpp
    int32_t numBlocks; // not used
    bool isAllowedToHeir = (hasHeirSpendingBegun || CCduration(numBlocks, latesttxid) > inactivityTimeSec) ? true : false;
    CPubKey myPubkey = pubkey2pk(Mypubkey());  // pubkey2pk sdk function converts pubkey from a byte array to CPubKey object
    if( myPubkey == heirPubkey && !isAllowedToHeir )    {
        CCerror = "spending funds is not allowed for heir yet";
        return "";
    }
```

Create the claim transaction inputs and outputs.

Add normal inputs for the transaction fee:

```cpp
    if (AddNormalinputs(mtx, myPubkey, txfee, 3) <= txfee)    {
        CCerror = "not enough normal inputs for txfee";
        return "";
    }
```

Get the address of the `1of2` threshold CryptoCondition output (where the funds were deposited). Add CC inputs for the requested amount.

```cpp
    char coinaddr[65];
    GetCCaddress1of2(cp, coinaddr, ownerPubkey, heirPubkey);
```

Add CC inputs for this address with the use of a custom function:

```cpp
    int64_t inputs;
    if( (inputs = Add1of2AddressInputs(mtx, fundingtxid, coinaddr, amount, 64)) < amount )   {
        CCerror = "not enough funds claimed";
        return "";
    }
```

Add a normal output to receive the claimed funds, and a CC change output for the remaining amount.

```cpp
    mtx.vout.push_back(CTxOut(amount, CScript() << ParseHex(HexStr(myPubkey)) << OP_CHECKSIG));
    if (inputs > amount)
        mtx.vout.push_back(MakeCC1of2vout(EVAL_HEIR, inputs - amount, ownerPubkey, heirPubkey));
```

Add normal change (if any), add OP_RETURN data, and sign the transaction:

```cpp
     return FinalizeCCTx(0, cp, mtx, myPubkey, txfee, CScript() << OP_RETURN << E_MARSHAL(ss << (uint8_t)EVAL_HEIR << (uint8_t)'C' << fundingtxid << (myPubkey == heirPubkey ? (uint8_t)1 : hasHeirSpendingBegun)));
}
```

In the opreturn we add a pair of standard ids: the CC `EVAL` code, the functional id, and the `fundingtxid` to serve as the funding plan identifier.

The `hasHeirSpendingBegun` value is a special flag. When this value is changed to `1`, it indicates that the heir has spent funds in the fund at least once. Therefore, it is no longer necessary to check the inactivity time of the owner.

Once `hasHeirSpendingBegun` is set to `true`, this flag should also be set to `true` in the following transaction OP_RETURN values.

#### Implementations for heiradd, heirlist and heirinfo

- `heiradd` allows a user to add more funding to a plan.
- `heirlist` is a standard RPC for all CC modules. This RPC outputs a list of all initial transaction IDs, which serve as the identifiers for each plan.
- `heirinfo` provides some data about a funding plan

The implementation for these RPCs can be found in the github repository with the source code of this contract.

[RPC implementation can be found here.](https://github.com/dimxy/komodo/blob/heir-simple/src/wallet/rpcwallet.cpp)

[Transaction creation and retrieval code can be found here.](https://github.com/dimxy/komodo/blob/heir-simple/src/cc/heir.cpp)

## Heir Module Helper Functions

#### Simplified Add1of2AddressInputs() Function Implementation

```cpp
// add inputs from cc threshold=2 cryptocondition address to transaction object, src/cc/heir.cpp
int64_t Add1of2AddressInputs(CMutableTransaction &mtx, uint256 fundingtxid, char *coinaddr, int64_t amount, int32_t maxinputs)
{
    int64_t totalinputs = 0L;
    int32_t count = 0;
```

By default, the CC SDK function, `SetCCunspents`, fills the provider vector with a list of unspent cc outputs of the provided `coinaddr` Bitcoin address.

For our Heir Module, we pass the `1of2` address where the plan's funds are stored.

```cpp
    std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue>> unspentOutputs;
    SetCCunspents(unspentOutputs, coinaddr, true);  // get a vector of cc uxtos for the address in coinaddr[]
```

Iterate through the returned uxtos and add those that are appropriate to the transaction's vin array:

```cpp
    for (std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue>>::const_iterator it = unspentOutputs.begin(); it != unspentOutputs.end(); it++) {
         CTransaction tx;
         uint256 hashBlock;
         std::vector<uint8_t> vopret;
```

Load the current uxto's transaction and check whether it has an opreturn in the back of the array of outputs.

```cpp
         if (GetTransaction(it->first.txhash, tx, hashBlock, false) && tx.vout.size() > 0 && GetOpReturnData(tx.vout.back().scriptPubKey, vopret) && vopret.size() > 2)
         {
              uint8_t evalCode, funcId, hasHeirSpendingBegun;
              uint256 txid;
```

Check that the uxto matches this plan.

```cpp
              if( it->first.txhash == fundingtxid ||   // if this is our contract instance coins
                  E_UNMARSHAL(vopret, { ss >> evalCode; ss >> funcId; ss >> txid >> hasHeirSpendingBegun; }) && // unserialize opreturn
                  fundingtxid == txid  ) // it is a tx from this funding plan
              {
```

To add the utxo to the transaction's vins, set the utxo's vout number and transaction id in the transactions vins. Pass an empty call to the `CScript()` function in the `scriptSig` parameter. This will be filled by the `FinalizeCCtx` function.

```cpp
                  mtx.vin.push_back(CTxIn(it->first.txhash, it->first.index, CScript()));
                  totalinputs += it->second.satoshis;
```

Stop once sufficient CC inputs are found.

In the event that the `amount` parameter is `0`, add all available inputs to calculate all available funds.

```cpp
                  if( amount > 0 && totalinputs >= amount || ++count > maxinputs )
                      break;
              }
         }
    }
```

Return the total amount of inputs added to the transaction's vin array:

```cpp
    return totalinputs;
}
```

#### Simplified Implementation of the FindLatestOwnerTx() Function

To calculate the owner-inactivity time and to enable the heir to claim the funds, we implement the function, `FindLatestOwnerTx()`.

This function iterates through the transactions of this plan, (which we can also call this instance of the Heir Module) and finds the owner's latest transaction. We pass into this function the initial funding txid of the plan we desire to inspect.

The function returns the pubkeys of both the owner and the heir, the owner inactivity time, and a flag that indicates whether the heir has already spent funds from the `1of2` address.

All returned values of the function are retrieved from the transactions' opreturns.

```cpp
// find the latest owner transaction id
// this function also returns some values from the initial and latest transaction opreturns
// Note: this function is also called from validation code (use non-locking calls)

uint256 FindLatestOwnerTx(uint256 fundingtxid, CPubKey& ownerPubkey, CPubKey& heirPubkey, int64_t& inactivityTime, uint8_t &hasHeirSpendingBegun)
{
    uint8_t eval, funcId;
```

Initialize the flag as though the heir has not yet spent any of their plan's funds.

```cpp
    hasHeirSpendingBegun = 0;
```

Initialize the following variables.

```cpp
    CTransaction fundingtx;
    uint256 hashBlock;
    std::vector<uint8_t> vopret;
    std::string name;
```

Load the initial funding transaction, check whether it has a correct opreturn, and de-serialize it.

Check the transaction rules. Return an empty id if the funding transaction cannot not be loaded or is incorrect.

```cpp
    if (!myGetTransaction(fundingtxid, fundingtx, hashBlock) ||  // NOTE: use non-locking version of GetTransaction as we may be called from validation code
        fundingtx.vout.size() == 0 ||    // no vouts, even opreturn
        !GetOpReturnData(fundingtx.vout.back().scriptPubKey, vopret) ||   // could not get opreturn from the last vout
        !E_UNMARSHAL(vopret, ss >> eval; ss >> funcId; ss >> ownerPubkey; ss >> heirPubkey; ss >> inactivityTime; ss >> name;) ||  // could not unmarshal opreturn
        eval != EVAL_HEIR ||   // incorrect eval code in 1st byte
        funcId != 'F')    // incorrect funcid in the 2nd byte
        return zeroid;
```

Initialize the CC contract object for the Heir Module's `EVAL` code.

```cpp
    struct CCcontract_info *cp, C;
    cp = CCinit(&C, EVAL_HEIR);
```

Declare the `coinaddr` array and use the `GetCCaddress1of2` function to pass the array the `1of2` address that holds our funds.

```cpp
    char coinaddr[64];
    GetCCaddress1of2(cp, coinaddr, ownerPubkey, heirPubkey);
```

Get the vector with uxtos for the `1of2` address.

```cpp
    std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue>> unspentOutputs;
    SetCCunspents(unspentOutputs, coinaddr, true);
```

Iterate through the returned uxto's to find the last funding or spending owner transaction:

```cpp
    int32_t maxBlockHeight = 0;
    uint256 latesttxid = fundingtxid;   // set to initial txid
    for (std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue>>::const_iterator it = unspentOutputs.begin(); it != unspentOutputs.end(); it++)
    {
        CTransaction vintx;
        uint256 blockHash;
        std::vector<uint8_t> vopret;
        uint8_t eval, funcId, flagopret;
        uint256 txidopret;

        int32_t blockHeight = (int32_t)it->second.blockHeight;
```

Retrieve the transaction from the returned array. Check and unmarshal the transaction's opreturn and check whether this transaction is from the relevant Heir plan.

```cpp
        if (myGetTransaction(it->first.txhash, vintx, blockHash) &&     // NOTE: use non-locking version of GetTransaction as we may be called from validation code
            vintx.vout.size() > 0 &&
            GetOpReturnData(vintx.vout.back().scriptPubKey, vopret) &&
            E_UNMARSHAL(vopret, ss >> eval; ss >> funcId; ss >> txidopret; ss >> flagopret) &&
            eval == EVAL_HEIR &&
            (funcId == 'C' || funcId == 'A') &&
            fundingtxid == txidopret )   {
```

As the `SetCCunspents` function does not return uxtos in chronological order, order them by block height to find the latest utxo.

```cpp
            if (blockHeight > maxBlockHeight) {
```

Check whether this transaction indicates owner activity. Use a pair of CC SDK functions, `TotalPubkeyNormalInputs()` and `TotalPubkeyCCInputs()`, that iterate through the vin array to find if the transaction was signed with the owner's pubkey.

```cpp
                if (TotalPubkeyNormalInputs(vintx, ownerPubkey) > 0 || TotalPubkeyCCInputs(vintx, ownerPubkey) > 0) {
```

If this transaction represents owner activity, reset the latest txid to this current txid.

Set the flag for the transaction opreturn.

```cpp
                    latesttxid = it->first.txhash;
		    hasHeirSpendingBegun = flagopret;
                    maxBlockHeight = blockHeight;
                }
            }
        }
    }
```

Return the latest owner txid.

```cpp
    return latesttxid;
}
```

## Heir Module Validation

#### Simplified Validation Function Implementation

Validation provides the logic control of spent Antara-module value, and validation also provides the data added to the Smart Chain.

Recall that validation code is invoked for a transaction at the time the CC-related value is spent (as opposed to only being invoked at the time the value is added). We trigger the invocation of this validation function when at least one transaction input is a CC input bearing this module's `EVAL` code.

Validation code typically is not called for the CC module's initial transaction. Instead, we invoke validatation at the time the initial transaction is spent in a second transaction.

One way to invoke validation for the first transaction when performing the second transaction is to load the initial transaction and validate it first. If the initial transaction turns out to be invalid, it can remain in the chain and is otherwise ignored. In this case, if a CC marker is used, it can be cleared and the transaction is removed from the RPC list output.

#### Guidelines for Validation

In our Heir Module prototype, we have three transactions to validate: the initial funding, the adding transaction that adds more funds, and the transaction that claims the funds. The first and second of these transactions do not have any CC vins, and therefore all are validated together with the transaction that claims the funds.

Here are several common aspects of a module that require validation:

- The basic transaction structure
- The basic data structure in the OP_RETURN
  - Validation here ensures data integrity in the chain
  - All OP_RETURNs should contain the `EVAL` code and functional id in the first two bytes
- Avoid all foreseeable attack vectors
  - Ensure DOS attacks are eliminated, especially in the event of a malformed transaction
  - Check the array size before use of any transaction
- Check the previous Heir Module transactions which this transaction spends and which have no cc inputs. This is accomplished by retrieving the transaction id from the opreturn and loading and validating the previous transaction

#### Heir Module Validation Rules

The following are the aspects of validation the Heir Module requires.

- The initial funding transaction 
  - Validate that the `1of2` address accurately matches `pubkeys` in the opreturn
- The claiming transaction 
  - Validate that this transaction spends transactions from the same funding plan. This funding transaction id's values from the opreturn outputs of the previous transactions should match. (the previous transactions are often referred as `vintx` in code) 
- Validate whether the heir is allowed to spend the funds
  - Check whether the flag indicates that the Heir is already spending the funds
  - Check whether enough time has passed since the last time the owner was active on the chain
- When validating, separate the owner's funding transaction from any other contributions to the `1of2` address
    - Although the Heir Module is initiated based on the owner's initial transaction, nothing prevents other users on the Smart Chain from contributing funds
    - Therefore, when validating, for each utxo contained in the `1of2` address, calculate whether or not the utxo's vins contain the owner's pubkey
- During the course of validation, we fully check opreturn format

This validation logic is performed in the `HeirValidate()` function. The function is invoked whenever a CC transaction bearing the appropriate eval code occurs on the chain. When this eval code appears, the consensus mechanism calls the `HeirValidate()` function, executes the indicated validation code, and adds the transaction to the chain.

#### HeirValidate() Implementation

Explanation of code:

- Transaction-validation entry function
  - (This is actually a callback)
- Parameters
  - `cpHeir` - Pointer to the module's variable structure
  - `eval` - Pointer to the CC dispatching object
    - Used to return invalid state
  - `tx` - The transaction itself
  - `nIn` - Not used in validation code

```cpp
bool HeirValidate(struct CCcontract_info* cpHeir, Eval* eval, const CTransaction& tx, uint32_t nIn)
{
```

Check that the basic transaction structure has the opreturn with the correct basic `evalcode` and `funcid`.

::: tip

There is no need to check the function ids of the (`F`) funding transaction or the (`A`) add transaction, as these transactions have no Heir CC vins. Therefore, we do not create validation code for them.

:::

```cpp
    std::vector <uint8_t> vopret;
    if( tx.vout.size() < 1 || !GetOpReturnData(tx.vout.back().scriptPubKey, vopret) || vopret.size() < 2 || vopret.begin()[0] != EVAL_HEIR ||
        vopret.begin()[1] != 'C')

        // interrupt the validation and return invalid state:

        return eval->Invalid("incorrect or no opreturn data");  // note that you should not return simply 'false'
```

Decode the transaction's opreturn with the `E_UNMARSHAL` function. This function places the opreturn serialized data into several variables. One of them, the `fundingtxid` variable, is the transaction id (txid) of the initial funding transaction. We will use it further to find the latest owner transaction to check when the owner was last active on the chain.

```cpp
    uint8_t evalcode, funcId;
    uint256 fundingtxid; //initialized to null
    uint8_t hasHeirSpendingBegun;
    if (!E_UNMARSHAL(vopret, ss >> evalcode; ss >> funcId; ss >> fundingtxid; ss >> hasHeirSpendingBegun;))
        // return invalid state if unserializing function returned false:
        return eval->Invalid("incorrect opreturn data");
```

Check that the `fundingtxid` is a valid txid:

```cpp
    if( fundingtxid.IsNull() )
        return eval->Invalid("incorrect funding plan id in tx opret");
```

Here we come to a good place to load the initial transaction, check whether it exists, and whether it has a correctly formed opreturn.

Call the `FindLatestOwnerTx()` function. This function obtains the opreturn parameters and the `hasHeirSpendingBegun` flag, and checks the initial transaction.

```cpp
    CPubKey ownerPubkey, heirPubkey;
    int64_t inactivityTimeSec;
    uint8_t lastHeirSpendingBegun;
    uint256 latesttxid = FindLatestOwnerTx(fundingtxid, ownerPubkey, heirPubkey, inactivityTimeSec, lastHeirSpendingBegun);
    if (latesttxid.IsNull()) {
        return eval->Invalid("no or incorrect funding tx found");
    }
```

Log in the terminal that the daemon process is in the validation code:

```cpp
    std::cerr << "HeirValidate funcid=" << (char)funcId << " evalcode=" << (int)cpHeir->evalcode << std::endl;
```
Prepare for validation rules that are specific for each function id (`F`, `A`, and `C`).

```cpp
    switch (funcId) {
```

For `F` and `A`, we return an invalid response, as the process should never be able to access these function ids.

```cpp
    case 'F':
    case 'A':
        return eval->Invalid("unexpected HeirValidate for heirfund");
```

Validation for the claiming transaction.

- Check whether we are spending the correct funding transactions
  - For example, check that the transactions are from the correct module instance, as identified by the `fundingtxid`
  - If incorrect, return `false`
- If the heir is claiming the funds, check that he is allowed to do so
  - For example, check the inactivity time of the owner and whether the heir has already spent funds from the `1of2` address
- Check whether the new flag, `hasHeirSpendingBegun`, is set correctly

Both of the following support functions, `CheckSpentTxns` and `CheckInactivityTime`, are in the `heir.cpp` source file.

[Link to heir.cpp source file](https://github.com/dimxy/komodo/blob/heir-simple/src/cc/heir.cpp]

```cpp
    case 'C':
        if (!CheckSpentTxns(cpHeir, eval, tx, fundingtxid))
            return false;
        if (!CheckInactivityTime(cpHeir, eval, tx, latesttxid, inactivityTimeSec, heirPubkey, lastHeirSpendingBegun, hasHeirSpendingBegun) )
            return false;
        break;
```

For unsupported function ids, return an invalid state.

```cpp
    default:
        std::cerr << "HeirValidate() illegal heir funcid=" << (char)funcId << std::endl;
        return eval->Invalid("unexpected HeirValidate funcid");
    }
```

If all rules pass, return a valid state.

```cpp
    return eval->Valid();
}
```

#### Validation Code Errors

During the development of validation code, you will likely receive validation errors when any CC module validation function returns an invalid state.

For example, when sending a raw transaction, the daemon checks the transaction while adding it to the mempool.

During this process, if the CC validation code returns an invalid state you will see the following error:

```cpp
error code: -26
error message:
16: mandatory-script-verify-flag-failed (Script evaluated without error but finished with a false/empty top stack element)
```

When this happens, check the server output for a more specific error description. The first line of the output contains the `eval->invalid()` message from your validation code.

```cpp
CC Eval EVAL_HEIR Invalid: incorrect opreturn data spending tx 4b6e1ed868cf941dabf9edc7f675321bdb4258692ba02f56dc21100f88981ac4
ERROR: CScriptCheck(): 7961fe4f9f3bdabef154404ea8ec7a11be1546febc34efe67faede8d930c0749:1 VerifySignature failed: Script evaluated without error but finished with a false/empty top stack element
ERROR: AcceptToMemoryPool: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags 7961fe4f9f3bdabef154404ea8ec7a11be1546febc34efe67faede8d930c0749
```

--------------

[<b>Link to Next Tutorial in Advanced Series</b>](../../../basic-docs/antara/antara-tutorials/advanced-series-6.html)
# Advanced Series — Miscellaneous

This last tutorial in the Advanced Series provides miscellaneous information that our development team considered to be useful for prospective developers. 

Congratulations on finishing the Advanced Series. Make sure to reach out to the Komodo team to see if there are any bounties that you can fill with your new ability to create Antara Modules. And we welcome you to the Komodo ecosystem as a prepared developer. We look forward to seeing what you create.

## Terminology

| Term | Definition |
| ---- | ---------- |
| CryptoCondition, or CC | An encoded expression, coupled with a supporting C library, that allows the Smart Chain's consensus mechanism to check several types of logical conditions based on electronic signatures and hashes |
| Antara module | A collection of customized code that a developer adds into the default daemon to add unique functionality, including customized consensus rules and more |
| CC input | A transaction input, CC encoded. Typically spends value from a CC output |
| CC output | A transaction output, CC encoded |
| funding plan | The txid of an Antara Module's initial transaction, it is the identifier for all of the Antara module's CC transactions, related to this funding plan |
| normal inputs | Inputs spending value from normal transaction outputs (not CC outputs) |
| normal outputs | Not CC outputs, but normal transaction outputs (pubkey, pubkey hash, etc.) |
| OP_RETURN, opreturn | A special output in a transaction that holds user and module data. The output is prepended by  an OP_RETURN script opcode and therefore spending from this output is impossible |
| tx, txn | Short for "transaction" |
| txid | Transaction id; a hash of a transaction |
| unspendable address | The global cc contract address, for which its public and private key are commonly known. This address is used for conditionally sharing funds between contract users. As the address's private key is not a secret, by default anyone can spend value from this address. However, CC validation code often applies business logic conditions and checks to ensure that only transactions that meet the given criteria are actually able to spend funds in this address |
| vin | An input, or an array of inputs, in a transaction structure (tx.vin) |
| vout | An output, or an array of outputs, in a transaction structure (tx.vout) |

## CC contract patterns

The following are useful patterns during Antara module development.

#### Baton Pattern

The baton pattern allows the developer to organize a single-linked list in a Smart Chain.

To traverse a linked list using the baton method, start with the first transaction in any plan instance and iterate through the other transactions to collect properties in their opreturns.

### Marker Pattern

The marker pattern is used to place a mark on all similar transactions. This is accomplished by sending a small value to a common fixed address. Typically, we use the global CC address.

You can also create either a normal marker or a CC marker for the purpose of finding transactions related to your module.

When using normal markers, there is a small problem that is easily solved. The global CC address allows any user to spend its funds, and therefore anyone can spend your marker transaction. To overcome this, use the CC SDK function, `Settxids()`, to retrieve all transactions with markers in the CC contract list function.

Another method is to create an unspendable CC marker. In this method, send a small value to a CC output with a well-known address. To retrieve the list of CC-marker transactions, use the CC SDK function, `SetCCunspents()`. This returns a list of transactions with unspent outputs for that known address.

When using the unspendable CC marker method, in the validation code you should disable spending from this address.  This prevents a scenario where spending from the address causes you to lose markers. (For example, if you were to allow for spending from this address using a burn transaction, the burn transactions would take the burned markers into a hidden state, thus removing the markers from the list of initial transactions.)

In all cases, the CC module validation code should disable unauthorized attempts to spend any markers.

Concerning the method that relies on the CC marker, if the global CC address is used for storing not only the marker value, but also other funds, you need to ensure that marker values are not spent.

A code example for finding transactions marked with a normal marker:

```cpp
    std::vector<std::pair<CAddressIndexKey, CAmount> > addressIndex;
    struct CCcontract_info *cp, C;
    cp = CCinit(&C, <some eval code>);
    SetCCtxids(addressIndex, cp->normaladdr, false);
    for (std::vector<std::pair<CAddressIndexKey, CAmount> >::const_iterator it = addressIndex.begin(); it != addressIndex.end(); it++) 	{
        CTransaction vintx;
        uint256 blockHash;
        if( GetTransaction(it->first.txhash, vintx, blockHash, false) ) {
            // check tx and add its txid to a list
        }
    }
```

Many other Antara modules contain examples for finding marked transactions in any CC module standard list function.

::: tip

The <b>SetCCtxids()</b> function requires that the Smart Chain [<b>txindex</b>](../basic-docs/smart-chains/smart-chain-setup/common-runtime-parameters.html#txindex) launch parameter NOT be adjusted beyond the default and automatic settings.

:::

A code example for finding transactions marked with an unspendable CC marker:

```cpp
    std::vector<std::pair<CAddressIndexKey, CAmount> > addressIndex;
    struct CCcontract_info *cp, C;
    cp = CCinit(&C, <some eval code>);
    SetCCunspents(addressIndexCCMarker, cp->unspendableCCaddr, true);
    for (std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> >::const_iterator it = addressIndexCCMarker.begin(); it != addressIndexCCMarker.end(); it++) {
        CTransaction vintx;
        uint256 blockHash;
        if( GetTransaction(it->first.txhash, vintx, hashBlock, false) ) {
            // check tx and add its txid to a list
        }
    }
```

::: tip

The <b>CCunspents()</b> function requires the Smart Chain [<b>addressindex</b>](../basic-docs/smart-chains/smart-chain-setup/common-runtime-parameters.html#addressindex) and [<b>spentindex</b>](../basic-docs/smart-chains/smart-chain-setup/common-runtime-parameters.html#spentindex) launch parameters to be set to `1`.

:::

#### Txidaddress Pattern

You can use the txidaddress pattern to send value to an address from which the value should never again be spent.

A function CCtxidaddr is available for creating an address that is not associated with any known private key. It creates a public key with no private key from a transaction id.

For example, the [<b>Payments</b>]() Antara Module uses `CCtxidaddr` to create a non-spendable txidpk from the `createtxid`. Furthermore, the module also uses the `GetCCaddress1of2` function to create a `1of2` address from both the Payments module global pubkey and txid-pubkey.

This allows the module to collect funds on a special CC address that is intended only for a particular type of creation transaction. Funds are sent to this address via the `MakeCC1of2vout` function. Only the Payments module global pubkey and txid-pubkey can successfully create transaction that can be sent to this special address.

For this RPC, we also use the `vData` optional parameter to append the opreturn directly to the `ccvout` itself, rather than an actual opreturn as the last `vout` in a transaction. 

<!-- 

dimxy6 seems this looks very much like yet another pattern 

sidd: would you like to rename it and/or add in a separate headline? Feel free to do so, if that would be best.
-->

```cpp
opret = EncodePaymentsMergeOpRet(createtxid);
CPubKey txidpk = CCtxidaddr(txidaddr, createtxid);
std::vector<std::vector<unsigned char>> vData = std::vector<std::vector<unsigned char>>();
if ( makeCCopret(opret, vData) )
    mtx.vout.push_back(MakeCC1of2vout(EVAL_PAYMENTS, inputsum-PAYMENTS_TXFEE, Paymentspk, txidpk, &vData));
GetCCaddress1of2(cp, destaddr, Paymentspk, txidpk);
CCaddr1of2set(cp, Paymentspk, txidpk, cp->CCpriv, destaddr);
rawtx = FinalizeCCTx(0, cp, mtx, mypk, PAYMENTS_TXFEE, CScript());
```

Using a modification to the `IsPaymentsvout` function, we can now spend a `ccvout` in the Payments module back to its own address, without needing a `markervout` or an opreturn.

```cpp
int64_t IsPaymentsvout(struct CCcontract_info *cp, const CTransaction& tx, int32_t v, char *cmpaddr, CScript &ccopret)
{
    char destaddr[64];
    if ( getCCopret(tx.vout[v].scriptPubKey, ccopret) )
    {
        if ( Getscriptaddress(destaddr, tx.vout[v].scriptPubKey) > 0 && (cmpaddr[0] == 0 || strcmp(destaddr, cmpaddr) == 0) )
            return(tx.vout[v].nValue);
    }
    return(0);
}
```

In place of the `IsPayToCryptoCondition()` function we can use the `getCCopret()` function. This latter function is a lower level of the former call, and will return any `vData` appended to the `ccvout` along with a `true`/`false` value that would otherwise be returned by the `IsPayToCryptoCondition()` function.

In validation, we now have a totally different transaction type than the types that are normally available. This new type allows us to have different validation paths for different `ccvouts`, and it allows for multiple `ccvouts` of different types per transaction.

```cpp
if ( tx.vout.size() == 1 )
{
    if ( IsPaymentsvout(cp, tx, 0, coinaddr, ccopret) != 0 && ccopret.size() > 2 && DecodePaymentsMergeOpRet(ccopret, createtxid) )
    {
        fIsMerge = true;
    } else return(eval->Invalid("not enough vouts"));
}
```

## Various Tips and Tricks in Antara Module Development

#### Test Chain Mining Issue

On a test chain consisting of two nodes, we do not recommend that you set both nodes to mine. When there are only two nodes, a blockchain struggles more to achieve consensus, and the chain can quickly stop syncing properly. Instead, have only one node mine for the two-node test chain.

#### Limits on AddNormalInputs() Function Calls per Transaction

Keep the number of `AddNormalInputs()` function calls to one for each block of code that creates a transaction.

As an example of why we should not exceed more than one call, we can look at the `FillSell()` function. This function calls `AddNormalInputs()` two times at once. The first time the `AddNormalInputs()` function must add a txfee and the second time it adds coins to pay for tokens.

Let us suppose we have only two utxos in our wallet, one for `9,000,000` satoshis and another for `10,000` satoshis. In this case, when we execute the `FillSell()` function our large uxto is added during the first call and then we receive an error in the second call, `filltx not enough utxos`.

Instead, we recommend that the developer place only one I think it is always better to combine these calls into a single call.

#### Troubleshooting Node Syncing on Test CC Chain

Sometimes, a developer may find after developing a new CC module that a node cannot sync with other nodes in their test network. Executing the [<b>getpeerinfo</b>](../basic-docs/smart-chains/smart-chain-api/network.html#getpeerinfo) shows fewer synced blocks than synced heads. The developer may also see errors in the console log on the malfunctioning node.

When this happens, the cause is most commonly rooted in the CC module's validation code. For example, the developer may have changed validation rules, and in so doing may have rendered old transactions invalid in the node's state.

A quick remedy in this situation is to [manually delete the blockchain data on the malfunctioning node and resync the network.](../basic-docs/smart-chains/smart-chain-setup/smart-chain-maintenance.html#manually-deleting-blockchain-data) Old transactions should pass validation, assuming the new validation code takes their situation into account.

When resyncing the node is not a viable solution, another option is to use code logging and the gdb debug software to investigate the cause of failure.

Yet another solution, if necessary, is to setup the validation code to only be effective after a certain block height. See the following example.

```cpp
if (strcmp(ASSETCHAINS_SYMBOL, "YOURCHAIN") == 0 && chainActive.Height() <= 501)
    return true;
```

You may also use the hidden `reconsiderblock` komodo-cli command to restart the malfunctioning node's syncing process at a desired block height.

#### Deadlocks in Validation Code

If komodod hangs while executing Antara module validation code, consider that some blockchain functions use locks. The combination of your validation code and the locks could be causing deadlocks in the consensus mechanism. If this is the case, use functions that are non-locking instead.

For example, the `GetTransaction()` function is a locking function. Instead, use `myGetTransaction()` or `eval->GetConfirmed()`.
# Komodo Developer Path | Preparation

## Introduction

The following six guided tutorials cover introductory topics for a new developer in the Komodo ecosystem. This tutorial here guides the reader in creating and installing the necessary environment for the tutorials.

The tutorials rely extensively on downloadable "docker images" of Komodo software. A downloadable docker image is an entirely self-contained virtual machine that holds installations of the software necessary to complete the tutorials.

The developer does not need to alter or make any additions to the Komodo source code itself as a part of these tutorials.

#### Full Overview of Komodo Developer Path Tutorials

The following is a brief summary of the docker tutorial stages.

- Install Development Environment
- Create a New Blockchain (10 minutes)
- Integrate the Faucet Module (5 minutes)
- Connect Your Programming Language to the Tutorials (10 minutes)
- Make an NFT (5 minutes)
- Build a Token DEX (30 minutes)
- Sync the community testnet blockchain RICK (or MORTY)
- Retrieve test coins from a website faucet
- Use a mobile wallet to send coins between your dev node and a community blockchain
- Repeat the tutorials and test with colleagues

#### Menu Options in Docker Images

The options from the main menu of the docker image are the following.

- TUTORIALS
  - Go through the tutorials, including starting a blockchain, run a faucet, create a token dex, use a MuSig Schnorr Signature
- RICK
  - dPoW community testnet blockchain
- MORTY
  - dPoW community testnet blockchain
- MAINT
  - For basic maintenance of this guided tutorial application
- EXIT
  - Return to shell

## Rapid Summary (TL;DR)

If the reader is in a hurry and does not have time to follow all of the instructions in Part I, the following three terminal commands accomplish the essential aspects of the full tutorial's objectives.

```bash
docker pull komodocakeshop/dev-allinone-learn-kmd
```

```bash
docker run -it -p 127.0.0.1:9253:9253 komodocakeshop/dev-allinone-learn-kmd
```

```bash
learn-kmd
```

After the last command, follow the onscreen instructions.

From here, the reader may optionally skip all of the following content and proceed directly to the next article in this tutorial series.

## The Unique Nature of the Docker-Image Tutorials

These guided tutorials are different from many other developer tutorials in the Komodo documentation.

Normally, a developer builds the Komodo software from source. In the tutorials here, however, the developer downloads a "docker image."

A docker image can be described as a complete, self-contained virtual machine that already bears all necessary software installed. This includes the Komodo software, the Zcash parameters, and any necessary instances of Smart Chains.

Once the docker image is downloaded and initiated in the terminal, the developer can utilize all installed software as normal.

In this tutorial, the docker container contains two starting nodes.

If the reader is not familiar with docker, do not worry. These tutorials use docker only as a development tool, and not as a complex deployment strategy. 

The tutorial's image uses the default docker network. Advanced docker users are welcome to adjust docker settings as desired.

#### Sending Commands to the Docker Image's Seed Node

The developer uses a text console within the docker container to controll the blockchain seed node during the guided tutorials. This text console interfaces with the `127.0.0.1` Remote Procedure Call (RPC) server.

The guided tutorial features a preset chain called `TUT1`. The parameters of this chain are an initial coin supply of `1000` and an RPC port of `9253`.

The `docker run` command specifies the RPC port as a passthrough port. This makes the port available outside the docker image, should the developer choose to integrate the docker image's Smart Chain, `TUT1`, with an external programming environment, such as Python or Node.js. 

Supported languages include all languages that can call RPC commands in the terminal, as well as those that can implement tools such as curl, postman, insomnia, and other similar development tools.

The docker image is suitable for testing only; do not use the image in a production setting.

The mining node RPC port is not passed through the docker container at runtime because it is randomly generated. The developer can reconfigure this setting, but the tutorials do not cover this topic.

## Install Docker

#### Estimated Time: 2 Minutes

The following instructions are written for an Ubuntu 18.04 (LTS) user with root privileges.

After completing the following steps, a non-privileged user may continue to use the docker image without further requiring the `sudo` command. 

```bash
sudo apt update
```

```bash
sudo apt install apt-transport-https ca-certificates curl software-properties-common
```

```bash
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
```

```bash
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
```

```bash
sudo apt update
```

```bash
apt-cache policy docker-ce
```

```bash
sudo apt install docker-ce
```

```bash
sudo systemctl status docker
```

```bash
sudo usermod -aG docker ${USER}
```

```bash
sudo su - ${USER}
```

## Download Komodo Image

#### Estimated Time: 3 Minutes

The "all-in-one" Komodo image is available for development only.

This image includes Komodo software and the Zcash parameters.

```bash
docker pull komodocakeshop/dev-allinone-learn-kmd
```

#### (Optional) Install the Reduced-Size Docker Image

If the reader already has the Zcash parameters installed, a smaller docker image is available. Use of this image is entirely optional; the only benefit it serves is a reduced storage-space footprint.

```bash
docker pull komodocakeshop/dev-learn-kmd
```

#### Check the Local Image

Once downloaded, check that the image is in your local docker catalogue using the `docker images` command.

#### Command

```bash
$ docker images
```

#### Expected Response

```bash
REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE
komodocakeshop/dev-learn-kmd   latest          3792dab98cce        2 days ago          992MB
```

## Start Komodo Development Container

#### Estimated Time: 10 seconds

Start the container.

This drops into a bash prompt that is ready to start the guided tutorials.

```bash
docker run -it -p 127.0.0.1:9253:9253 komodocakeshop/dev-allininone-learn-kmd
```

#### (Optional, for Smaller Docker Image Only) Mount the Local Zcash Parameters

For users relying on pre-existing Zcash parameters and using the smaller Komodo docker image, mount the parameters as a read-only volume.

```bash
docker run -it -p 127.0.0.1:9253:9253 -v /home/${USER}/.zcash-params:/root/.zcash-params:ro komodocakeshop/dev-learn-kmd
```

## Follow The Guided Tutorial Blockchain Starter Kit 

#### Estimated Time: 4 minutes

The guided tutorial starts by automatically creating two sets of randomly generated keys that should be used throughout the tutorials.

Alternatively, run everything from command line using the komodo-cli.

## Begin Guided Tutorial

#### Estimated Time: 20 seconds

Type `learn-kmd` to start the guided tutorials.

```bash
learn-kmd
```

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; display: block;">

<img src="/2019-06-24-tutorial-1-img-1.png">

</div>

The "quick start" menu opens with the following screen.

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; display: block;">

<img src="/2019-06-24-tutorial-1-img-2.png">

</div>

-------------------------------

[<b>Click here to proceed to the next tutorial in this series</b>](../../../basic-docs/antara/antara-tutorials/overview-of-development-on-komodo-part-1.md)
# Komodo Developer Path | Create a Blockchain

## Create a Blockchain 

#### Estimated Time: 10 minutes

The following tutorial uses the Komodo tutorial docker image to create a blockchain. This tutorial is part of a series.

[<b>To return to the previous tutorial, click here.</b>](../../../basic-docs/antara/antara-tutorials/overview-of-development-on-komodo-part-0.md)

#### Select the Appropriate Tutorial from the Menu

Begin with the first guided tutorial by selecting `TUTORIALS` and then `TUT1` from the menu. The following screen should appear. Note the detailed instructions onscreen. You may follow these through the tutorial.

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; display: block;">

<img src="/2019-06-24-tutorial-1-img-8.png">

</div>

#### Create a Seed Node 

##### Estimated Time: < 1 Minute

The guided tutorial interface follows these screens:

- From the `SEED-MENU` select `SPINUP-SEEDNODE`

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; display: block;">

<img src="/2019-06-24-tutorial-1-img-9.png">

</div>

- Enter `1000` coins as the supply when prompted
- Use the `SEED-GETINFO` menu item to query the chain's current state
  - At this time, you will notice that although our `TUT1` chain has started, the `GETINFO` menu item replies that the chain has `0` blocks
  - This is due to the fact that the chain is still waiting for a mining node to mine blocks

Return to the main `TUT1` menu.

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; display: block;">

<img src="/2019-06-24-tutorial-1-img-10.png">

</div>

## Create Mining Node

##### Estimated Time: < 1 Minute

The `TUT1` chain is designed as a blocks-on-demand Smart Chain. This type of chain uses a Proof of Work consensus mechanism for the first 128 blocks, thus forcing the mining of these first blocks, regardless of the number of transactions occurring on the chain. After block 128, the chain stops automatically mining blocks and instead waits until there are a few transactions in the mempool. This style of chain saves computing resources.

For the `TUT1` chain these settings are managed within the pre-built docker image. Later, you will learn how to adjust these settings manually. 

While the settings of the Smart Chain are set to blocks-on-demand, a node on the network has to indicate a desire to mine for the process to begin. Follow the instructions below to launch a mining node on `TUT1`.

Go `BACK` in the menu until you see the options for both `SEED-MENU` and `MINING-MENU`

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; display: block;">

<img src="/2019-06-24-tutorial-1-img-3.png">

</div>

Select `MINING-MENU`, then `SPINUP-MININGNODE`.

Enter `1000` coins as the supply when prompted (we assume here that you entered 1000 coins earlier).

Use the `GETINFO` command to query blockchain state. The chain will still have `0` blocks, but should have `1` connection. This is the connection to the seed node.

## Start Mining

##### Estimated Time: < 1 Minute

- From the `MINING MENU` select `MINING-START`
  - The mining process now begins
  - Mining the first several blocks requires 30 to 90 seconds
- From the `MINING MENU` select `MINER-GETMININGINFO`
  - This queries the mining state of both the network and this node
  - You may see approximately 1.0 solutions per second (`localsolps`)
  - You should see the number of blocks increase when you repeat the `MINER-GETMININGINFO` menu item

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; display: block;">

<img src="/2019-06-24-tutorial-1-img-4.png">

</div>


## Validate An Address

##### Estimated Time: < 1 Minute

The guided tutorial in the docker image automatically creates a blockchain address for the user during the startup process. 

Typically, when blockchain software creates an address for a user, the address is automatically imported into the user's wallet so that the user can use it.

In these tutorials, however, we generate an address that is not automatically imported. This gives you a chance to import the address yourself under the tutorial guidance.

Make sure that you are still in the `MINING-MENU` menu.

Enter the `WALLET` section.

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; display: block;">

<img src="/2019-06-24-tutorial-1-img-11.png">

</div>

- Select `VALIDATE` to call the [<b>validateaddress</b>](../../../basic-docs/komodo-api/util.html#validateaddress) Remote Procedure Call (RPC) method.

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; display: block;">

<img src="/2019-06-24-tutorial-1-img-12.png">

</div>

The results should be similar to the following.

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; display: block;">

<img src="/2019-06-24-tutorial-1-img-5.png">

</div>

Note the `address` in the response. This is the address that was generated for this tutorial.

However, note that the `ismine` value is `false`. (`ismine` stands for "is mine".)

The private key that was automatically generated by the docker image needs to be imported. 

## Import Private Key for the Wallet

In the guided tutorials, you do not need to manage the private key directly. However, this is a good time to become familiar with the concept.

A private key could look like the following.

```
E9873D79C6D87DC0FB6A5778633389_SAMPLE_PRIVATE_KEY_DO_NOT_IMPORT_F4453213303DA61F20BD67FC233AA33262
```

When you enter a private key such as the above into the blockchain software, the automated encryption will match this address with a public key, also called a "pubkey". 

A pubkey can look like the following.

```
04fe53c78e36b86aae8082484a4007b706d5678cabb92d178fc95020d4d8dc41ef44cfbb8dfa7a593c7910a5b6f94d079061a7766cbeed73e24ee4f654f1e51904
```

The public key is the address that receives and holds money. The private key unlocks the address and allows the user to spend money.

Keep the private key private at all times. Never share it - not even with a member of the Komodo team.

<!--

Sidd:

Mylo, we should simply show the address and the private key as a part of the docker tutorial.

-->

To import the private key that was automatically generated for you, select `WALLET`, then `IMPORT-DEV-WALLET`.

This automatically executes the [<b>importprivkey</b>](../../../basic-docs/komodo-api/wallet.html#importprivkey) RPC method, importing the private key and thus the address.

Now, when funds are sent to this address, your wallet has the keys necessary to spend them.

## Check the Wallet Balance

##### Estimated Time: < 1 Minute

From within the `WALLET` menu, select `BALANCE`.

This automatically executes the [<b>getbalance</b>](../../../basic-docs/komodo-api/wallet.html#getbalance) RPC method.  

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; display: block;">

<img src="/2019-06-24-tutorial-1-img-6.png">

</div>

Note that your wallet has the full `1000` coins, and a little extra.

These `1000` coins were mined into your address as a reward for mining the first block of the blockchain. This is called the Genesis Block.

The extra fraction of a coin should be of an amount similar to the displayed `.12532156` above.

This extra fraction of a coin comes in part as a reward for the blocks mined.

By default, each block mined on a Komodo Smart Chain rewards the miner with `0.001` coins.

At the time the screenshot above was taken, the mining node had mined approximately `125` blocks, thus accounting for the extra fraction of a coin.

## List Unspent Transactions (Utxos)

##### Estimated Time: < 1 Minute

The mining node holds the funds. The funds are represented on the blockchain as "unspent transactions," or "utxos." 

Utxos can be difficult for a complete beginner to understand.

A utxo is similar in nature to a dollar bill in your physical wallet. You can have many bills in your wallet, and the total amount of bills you have determines your total amount in your wallet.

Likewise, you can have many utxos in your digital wallet, and the total value of all utxos determines the total amount in your digital wallet.

If you would like a full explanation, [read this post on the Komodo blog](https://komodoplatform.com/whats-utxo/), or read section III of the [Komodo Whitepaper](https://komodoplatform.com/whitepaper).

In this guided tutorial, we will automatically execute a command that allows us to look at the utxos in our wallet. 

Still within the `WALLET` submenu, choose the `LISTUNSPENT` option. This executes the [<b>listunspent</b>]() RPC method. The result should be similar to the following.

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; display: block;">

<img src="/2019-06-24-tutorial-1-img-7.png">

</div>

The number of utxos here will differ according to the number of blocks your mining node has mined. Each block mined generates a new utxo in your wallet.

## Stop Mining

##### Estimated Time: < 1 Minute

The [<b>setgenerate</b>]() RPC method tells a node to start and stop mining.

Within the `MINING` menu, choose the `MINING-STOP` menu item.

The screen will flash and then return to the `MINING` menu. This indicates that mining is stopped.

Recall that in this guided tutorial there are only two nodes on the `TUT1` blockchain, and that only one of the nodes is a mining node.

As we have stopped the mining node, the blockchain itself is stopped. If we were to attempt to use the other node to send a transaction to the blockchain, no node would mine this transaction, and therefore the transaction would wait indefinitely for confirmation.

## (Optional) Shut Down Both Nodes

If you would like to exit the tutorial at this time, you may shut down both nodes from within the docker menu.

- `MINING-MENU` -> `SHUTDOWN-NODE-MINER`
- `SEED-MENU` -> `SHUTDOWN-NODE-SEED` 

Otherwise, you may proceed with the tutorial series by clicking on the link below.

--------

[<b>Link to the next tutorial in this series</b>](../../../basic-docs/antara/antara-tutorials/overview-of-development-on-komodo-part-2.md)
# Komodo Developer Path | Using a Faucet

#### Total Estimated Time: 5 minutes

This tutorial is part of a series. 

[<b>To return to the previous tutorial, click here.</b>](../../../basic-docs/antara/antara-tutorials/overview-of-development-on-komodo-part-1.md)

## Introduction

In the non-digital world, a faucet is a tap fitting of your regular bathroom or kitchen water supply. Faucets sometimes drip. 

A blockchain faucet is based on this concept. The digital faucet drips small amounts of coins to people that send a request to the faucet.

In this tutorial, we use a Komodo technology called an Antara Module to create a faucet on our `TUT1` Smart Chain. 

There are many types of Antara Modules, and the [Faucet Antara Module]() is but one of them.

Transferring funds via the faucet will allow us to perform other tasks further in the tutorials.

#### The Expected Current State of Our TUT1 Smart Chain

- The mining node has ~1000 coins
- The mining node has several utxos
  - One large utxo with approximately 1000 coins
  - Many small utxos, each having 0.0001 coins
    - These utxos are rewards for mining blocks 
- Both the mining node and the seed node should be running
  - If you stopped the nodes at the end of the last tutorial, restart them using the `SPINUP` functions found within each node's menu
- The mining node should be set to mine
  - To restart the mining node, use the `MINING-START` function in the `MINING-MENU` section

#### Next Steps in the Tutorial

- On the mining node we send some of our funds to the chain's built-in faucet
  - To accomplish this, in this guided tutorial we use an automated version of the [<b>faucetfund</b>]() Remote Procedure Call (RPC)
- On the seed node, which currently has 0 coins, we send a request to the faucet for funds

## Send All Funds to Self 

##### Estimated Time: 2 minutes

We first consolidate all the utxos in our wallet, both large and small, into a single utxo. We send this consolidated utxo to the Antara Module that acts as a faucet.

The reason we first consolidate the utxos into one is related to a subtle nuance of Antara Module technology. One requirement of all funds entering an Antara Module is that they must have been spent at least once before. This requirement simplifies some of the underlying code of an Antara Module.

All the utxos in our current mining wallet were generated either in the first block, or they were generated as a part of a mining reward. Therefore, they have not yet been spent.

To consolidate them in the guided tutorial, we use an automated version of the [<b>sendtoaddress</b>]() RPC.

- Enter the `MINING-MENU`
- Enter the `WALLET` submenu and select `SENDALLSELF`
  - This tutorial function performs several automated tasks
  - First, the function checks our total balance using the <b>getinfo</b> RPC
  - The function gathers the address that we saw earlier in the <b>validateaddress</b> RPC
  - Finally, the function sends the entire amount to this address using the <b>sendtoaddress</b> RPC
  - This sends everything in our wallet in a circular loop back into our wallet

Wait for this transaction to be mined in a block. (This process is also called "confirming a transaction.")

One way to check the status of the transaction is to use the `LIST` function from the last tutorial. Right after performing the `SENDALLSELF` function, you will have zero utxos in your wallet. Once a utxo reappears in your wallet, you know that the transaction is successfully mined.

::: tip

When you finally have a utxo in your wallet again, you will notice that you have two utxos instead of one. This may be surprising, but this provides a good opportunity to learn about "dust."

The mathematics behind blockchain technology are complex, and transactions are rarely able to have perfectly clean total amounts. There is often a remnant of funds in the amount of a tiny fraction of a coin. These leftover funds remain in your wallet as a separate utxo, and as they are typically of such little value, they are effectively useless. This is why they are called "dust."

:::

## Send Funds to the Faucet 

##### Estimated Time: 1 minute

In this guided tutorial, we use an automated version of the [<b>faucetfund</b>]() RPC. This takes any number of coins we choose from our wallet and sends them to the Faucet Antara Module.

Once the funds are in the module, other users on the chain can request to have some of the funds. The funds are disbursed in small amounts, and the module has a feature that discourages users from spamming the faucet to drain all of the funds at once.

- From the `MINING-MENU`, select `FAUCET`
- Select the `FUNDFAUCET` function
- Enter `200` as the amount of coins to send
  - (This amount is arbitrary. We choose `200` for simplicity's sake.)

## Claim a Small Amount of Funds from the Faucet

##### Estimated Time: 5 Minutes

Use the `BACK` function on each page until you again reach the option to choose between the `MINING-MENU` and the `SEED-MENU`. 

Choose the `SEED-MENU`.

#### Validate the Seed Wallet

Just as before, we want to make sure that we've imported our tutorial private key before we send any funds to any address.

- Select `WALLET` and then `VALIDATE`
- If the proper `ismine` is `false`, we need to import the private key
- From the `WALLET` submenu, select `IMPORT-DEV-WALLET`
  - This automatically performs the <b>importprivkey</b> RPC for us

#### Claim Funds from the Faucet

- Return to the `SEED-MENU` section.
- Select `FAUCET`
- Select `GETFUNDS` 

The `GETFUNDS` function in this guided tutorial is yet another automated version of an RPC. This time, the RPC is the [<b>faucetget</b>]() method. 

The <b>faucetget</b> method requests funds from the `TUT1` faucet.

The Antara Module software automatically checks a few things to make sure that we are not attempting to spam and drain the faucet. One task the Antara Module requires is a small amount of work from our computer. The CPU of our computer will perform a few complicated encryption calculations. This may take a few seconds to perform.

The time and electricity this consumes from our computer helps to offset any incentive a malicious actor would have when trying to drain the faucet.

The Antara Module will also check to make sure that our `SEED` node's wallet history is relatively fresh. The `SEED` node is entirely separate from the `MINING` node's data directory, and therefore no issues are detected.

## Check for the Returned Coins 

##### Estimated Time: 1 minute

There are many RPCs available to check the balance of a wallet. 

A common RPC is the [<b>getinfo</b>](). This checks many aspects of the Smart Chain's current state, including the wallet's balance. 

One of the most common RPC's is the [<b>getbalance</b>]() method. This returns only information about the wallet's balance.

A final example is the [<b>]listunspent</b>]() RPC, which returns infromation about all utxos in the user's wallet. 

- In the `SEED-MENU` section, select `SEED-GETINFO` to perform an automated <b>getinfo</b> RPC
  - In the response, look for the `balance` property
  - There should be at least `0.1` coins in your wallet
- In the `SEED-MENU` section once again, select `WALLET`
- Within the `WALLET` submenu, select the `BALANCE` function to perform an automated <b>getbalance</b> RPC
- Also within the `WALLET` submenu, select `LIST` to perform the automated <b>listunspent</b> RPC

----------------------

[<b>Link to next tutorial section</b>]()
# Komodo Developer Path | Connecting to Another Programming Environment

#### Total Estimate Time: ~10-20 Minutes

This tutorial is part of a series. 

[To return to the previous tutorial, click here.]()

## Introduction

Until now we have relied on automated functions in the guided tutorials for assistance in executing Remote Procedure Calls (RPC's). Such RPC's include <b>getinfo</b>, <b>listunspent</b>, <b>faucetfund</b>, and more.

The very purpose of an RPC is to allow another programming environment to access the functionality of the software. For example, an RPC allows Python or JavaScript source code to send a secure call to the Komodo Smart Chain with a request to perform an action, and to return information about the result.

All RPC's are available in any mainstream programming language, and we are now prepared to experiment with this feature.

In this tutorial, we focus on the most essential aspect of this process, the Unix `curl` command. Using `curl` to access Komodo software from the source code of another environment is relatively straightforward, depending upon the programming language itself. 

The guided-tutorial software that holds our `TUT1` Smart Chain has an exposed RPC port that we use to connect to our seed node.

#### Inquiring About Language Wrappers

Before we continue with the tutorial, there is a tangential point to mention.

In the Komodo community, for many popular programming languages there are available enhancements beyond the `curl` command. These enhancements allow a developer to more easily integrate with Komodo. 

In these languages, someone from the Komodo community has created a language "wrapper." A wrapper essentially allows a developer to import all the Komodo RPC calls directly into the source files of their chosen language.

Therefore, the developer can often simply call the Komodo RPC suite into the source file and access each RPC on demand.

For information regarding availability of language wrappers for your preferred language, please reach out to our team and to the community on [Discord.](https://komodoplatform.com/discord)

## Obtaining the Necessary Passwords and Credentials

##### Estimated Time: 1 minute

The Smart Chain software controls access to all your valuable assets. Allowing other software on your node to access and manipulate these assets is a potential security risk. Therefore, the Smart Chain software requires a password and username from any software that attempts to access the Smart Chain's exposed port.

These credentials are called the rpcpassword, rpcuser, and rpcport.

The file that holds these values is typically installed in a `~/komodo/COINNAME/COINNAME.conf` file. You can change the values in this file before launching the Komodo software, and they will be loaded at runtime.

In our guided tutorial, the name of our coin is `TUT1`, and therefore the name of the credential file is `TUT1.conf`. 

We have placed the `TUT1.conf` file for the `SEED` node in a different location, to allow for the underlying tutorial software to function properly.

Here is the location: `/root/.komodo/TUT1/TUT1.conf`

<!--

Sidd: The function below doesn't return the RPC port. 

Alternatively, the `SEED-MENU` also features a function to display, or "dump," the credentials: `DUMP-RPCCREDENTIALS`. Executing this function will kill the guided-tutorial software. Execute `learn-kmd` at the terminal prompt to re-enter the software.

-->

Obtain your `TUT1` RPC credentials and copy/paste them into a nearby location before continuing with the tutorial.

## Using curl

##### Estimated Time: 5 minutes

#### Conceptualizing the curl Command

A `curl` command must be sent to the Komodo software daemon through a Unix shell, or terminal.

When using `curl` from another programming environment, the developer's source code first opens an instance of a Unix terminal. This is typically achieved through some type of environment enhancement. For example, a JavaScript developer might use Node.js to open a Unix terminal instance. The specific Node.js function the developer would use is [<b>child_process.exec().</b>](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)

The developer's source file then creates a `curl` command that fulfills the intended purposes of the developer's software, and sends this `curl` command to the Komodo software daemon.

The `curl` command sends a json reply, which the developer captures in their source code and utilizes in any manner the developer desires.

#### Installing jq

The returned json object is provided without human-friendly json formatting.

To make json responses easier to read, Komodo developers typically make use of a third-party software called "jq".

[You can download and install jq at this link.](https://stedolan.github.io/jq/)

Once installed, with each `curl` command simply include a pipe and a call to jq, along with any desired jq optional parameters. Komodo developers typically include the  `-r` parameter for raw outputs, to help jq interpret the raw string.

## The Anatomy of a curl Command

Observe the anatomy of a sample `curl` command, as executed in the terminal. For this example, we use the <b>getinfo</b> RPC. 

#### Command

```bash
curl -s --user user3044755432:passd30f503069f140e8e0ffe4d3f1645a8eae8e923b20e6011630cc98880ec5c47320 --data-binary "{\"jsonrpc\": \"1.0\", \"id\": \"curl test\", \"method\": \"getinfo\", \"params\": []}" -H 'content-type: text/plain;' http://127.0.0.1:9253/ | jq -r '.result'
```

| Property | Description |
| -------- | ----------- |
| curl | the name of the Unix command |
| -s | the "silent" option; this prevents the shell from returning extraneous information about the command's progress |
| --user | informs the shell that there will be a username and a password directly following this property |
| userXXXX:passXXXX | the rpcuser and rpcpassword, as provided in the coin's .conf file |
| --data-binary | informs the shell that additional data should be included with the curl command, and that the data should be sent exactly as it is provided |
| "{ | begin the string that contains the data object; everything within this string is sent directly to the Komodo daemon for processing |
| \"jsonrpc\": \"1.0\" | informs the Komodo daemon that it is receiving a json rpc object, and that the object is formatted according to version 1.0 of the Komodo RPC's source code |
| \"id\": \"curl test\" | informs the daemon that the json object sent is a curl command |
| \"method\": \"getinfo\" | informs the daemon that the developer is using the [<b>getinfo</b>]() RPC |
| \"params\": [] | provides the required or optional parameters that accompany the Komodo RPC; in this case, the <b>getinfo</b> RPC does not have any parameters, and therefore the array is empty |
| }" | end of the string that contains the data object |
| -H | informs the shell that there is an extra http header to include |
| 'content-type: text/plain;' | the http character set parameter; states that the header is provided in plain-text format |
| http://127.0.0.1:9253/ | the http destination. The 127.0.0.1 tells the shell to serve the content to the node's localhost server. The :9253 extension is the rpcport, as provided in the coin's .conf file |
| \| jq -r | instructs the shell to pipe the response through the jq software; the -r instruction informs jq that this is a raw object |


The response to the <b>getinfo</b> RPC `curl` command is as follows. Note that this is a json string and the developer must actively convert the response into a json object. For example, in JavaScript the appropriate function is `JSON.parse()`.

#### Response

```json
{ 
 "version": 2001526, 
 "protocolversion": 170007, 
 "KMDversion": "0.4.0a", 
 "synced": false, 
 "notarized": 0, 
 "prevMoMheight": 0, 
 "notarizedhash": "0000000000000000000000000000000000000000000000000000000000000000", 
 "notarizedtxid": "0000000000000000000000000000000000000000000000000000000000000000", 
 "notarizedtxid_height": "mempool", 
 "KMDnotarized_height": 0, 
 "notarized_confirms": 0, 
 "walletversion": 60000, 
 "balance": 0, 
 "blocks": 0, 
 "longestchain": 0, 
 "timeoffset": 0, 
 "tiptime": 1231006505, 
 "connections": 1, 
 "proxy": "", 
 "difficulty": 1, 
 "testnet": false, 
 "keypoololdest": 1561227622, 
 "keypoolsize": 101, 
 "paytxfee": 0, 
 "relayfee": 1e-06, 
 "errors": "", 
 "pubkey": "030746f79b31d1bb46aa10ee8ee72a06eba7375ca0aca411fa684936457363cdad", 
 "CCid": 2, 
 "name": "TUT1", 
 "sapling": -1, 
 "p2pport": 9252, 
 "rpcport": 9253, 
 "magic": 230635964, 
 "premine": 1000 
}
```

## Mine on the Seed Node Using curl

Use `curl` to tell the `SEED` node to begin mining the `TUT1` Smart Chain. Use the [<b>setgenerate</b>]() RPC for this function. 

Note that this RPC requires parameters in the `curl` command: `\"params\": [true,1]`

#### Command

```bash
curl -s --user user3044755432:passd30f503069f140e8e0ffe4d3f1645a8eae8e923b20e6011630cc98880ec5c47320 --data-binary "{\"jsonrpc\": \"1.0\", \"id\": \"curl test\", \"method\": \"setgenerate\", \"params\": [true,1]}" -H 'content-type: text/plain;' http://127.0.0.1:9253/ | jq -r '.result'
```

The <b>setgenerate</b> RPC always returns `null` as a response.

#### Response

```json
null
```

## Discover the State of Mining on the Seed Node

Use the [<b>getmininginfo</b>]() RPC to ensure that the command executed successfully. 

#### Command

```bash
curl -s --user user3044755432:passd30f503069f140e8e0ffe4d3f1645a8eae8e923b20e6011630cc98880ec5c47320 --data-binary "{\"jsonrpc\": \"1.0\", \"id\": \"curl test\", \"method\": \"getmininginfo\", \"params\": []}" -H 'content-type: text/plain;' http://127.0.0.1:9253/ | jq -r '.result'                  
```

#### Response

```json
{ 
 "blocks": 1, 
 "currentblocksize": 1000, 
 "currentblocktx": 0, 
 "difficulty": 1, 
 "errors": "", 
 "genproclimit": 1, 
 "localsolps": 1.041666666666667, 
 "networksolps": 0, 
 "networkhashps": 0, 
 "pooledtx": 0, 
 "testnet": false, 
 "chain": "main", 
 "staking": false, 
 "generate": true, 
 "numthreads": 1 
}
```

## Stop Mining on the Seed Node

To instruct the node to cease mining, we again use the [<b>setgenerate</b>]() RPC, but this time we provide the parameter as `false`.

```bash
curl -s --user user3044755432:passd30f503069f140e8e0ffe4d3f1645a8eae8e923b20e6011630cc98880ec5c47320 --data-binary "{\"jsonrpc\": \"1.0\", \"id\": \"curl test\", \"method\": \"setgenerate\", \"params\": [false]}" -H 'content-type: text/plain;' http://127.0.0.1:9253/ | jq -r '.result'       
```

#### Response

```bash
null
```

--------------------

[Proceed to next tutorial article in the series.]()

# Komodo Developer Path | Understanding Tokens

## Introduction

Each Smart Chain in the Komodo ecosystem can act as a fully tokenizable platform. This provides many opportunities to the developer in creating on-chain assets that represent varying types of value for their users.

For example, tokens can be used to represent real world assets, and users can then trade these tokens using Komodo's [Token DEX]() and [AtomicDEX]() features. The developer could also create tokens that provide incentives to their audience. Or, tokens can represent collectible assets. These are but a few examples of the usefulness of on-chain tokenization. 

## Conceptualizing Tokens

#### A Token is a Satoshi

All Smart Chain coins abide by the Bitcoin-protocol standard wherein 1 coin is divisible for up to eight decimal places: `1.00000000`. The smallest unit of a Smart Coin therefore is `0.00000001` coins. By convention it is called a "satoshi," in honor of the inventor of the Bitcoin protocol.

On a Smart Chain, each individual token is derived from one individual satoshi. Therefore, each coin can be transformed into 100,000,000 tokens. 

At the time of the creation of these tokens, the creator can define their properties, grant meta data to them, and establish the nature of their scarcity. 

All of this functionality is established and secured through the [Tokens Antara Module]().

#### Fungible Token Creation

With `0.1` of our `TUT1` tutorial coins, we can create `10,000,000` tokens in one creation transaction using the [<b>tokencreate</b>](../../../basic-docs/antara/antara-api/tokens.html#tokencreate) RPC.

In the process of creation we can choose a name for these tokens.

All of the tokens created from this single transaction are fungible one with another, and maintain scarcity across the Smart Chain.

*(It is even possible with Antara technology to maintain token scarcity across multiple chains, but this is an advanced topic that we do not cover here.)*

#### Non-Fungible Token Creation

Alternatively, rather than creating a large collective of many fungible tokens, you could instead create non-fungible tokens. To achieve this, use the <b>tokencreate</b> RPC to create one token at a time. Each token requires `1` satoshi, plus transaction fees.

#### Attaching Data to Tokens

We can attach meta data to the tokens at their creation. 

The maximum size of data that can fit in a single Komodo transaction is `10000` bytes. This is enough to include all sorts of data, and even simple images.

The developer is naturally free to use their imagination in the design of this data. For example, you can describe their purpose and add a json data structure that informs other software of the properties of this token.

Advanced developers can even add functionality to allow the tokens to gain new data over time as they are passed through transactions.

## Create a Token Set on TUT1 Smart Chain

In our guided tutorial, we now create `50,000` tokens that we give the name `GOLD`.

- Enter the `SEED-MENU`
- Select the `TOKENS` submenu
- Select `CREATE`
- Enter the name `GOLD`
- Use `0.0005` tokens
- For the short description `Some GOLD tokens`

This creates 50,000 GOLD tokens by sending 0.0005 TUT1 coins to the [Tokens Antara Module.]()

Wait a minute or so for the transaction to be mined and then use the `GETINFO` function to check the balance of our wallet. There are now `0.0993` coins remaining from the `0.1` coins we had previously.

We used `0.0005` coins to create the tokens. 

We had a fee paid to the miners of `0.0001` coins. 

We also had another fee of `0.0001` coins that were sent to a special address in the Tokens Antara Module, called the "global address." The transaction for this fee had a small amount of data that permanently tells the entire `TUT1` Smart Chain community that we created these tokens. Therefore, if other users or developers want to learn about our `GOLD` tokens, they have a starting point in this global address.

## Seed or Mining Node RPC: tokenlist & tokeninfo to find details of the tokens

To see our tokens afterwards, we can use the [<b>tokenlist</b>]() and [<b>tokeninfo</b>]() RPC's.

In our guided tutorial, we have automated functions available to make this simpler.

- `SEED-MENU` > `TOKENS` > `LIST`
- `SEED-MENU` > `TOKENS` > `INFO` > `GOLD`

`LIST` calls the <b>tokenlist</b> RPC. This returns an array of token ids. A "token id" is the id of the transaction that created the token. We use this token id nearly every time hereafter when we transact with these tokens.

`INFO` calls the <b>tokeninfo</b> RPC. This RPC requires the token id of the token we desire to inspect. In our case, we chose the `GOLD` token.

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; display: block;">

<img src="/2019-06-24-tutorial-4-img-1.png">

</div>

## Create SILVER Tokens

Repeat the process to create `SILVER` tokens.

- `SEED-NODE` > `TOKENS` > `CREATE`
- Name: `SILVER`
- Amount: `0.002`
- Description: `Some SILVER tokens`

Wait for confirmation and then verify that our `0.0993` TUT1 balance is reduced to `0.0971`.

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; display: block;">

<img src="/2019-06-24-tutorial-4-img-2.png">

</div>

## Create ROCK Tokens

- `TOKENS` > `CREATE`
- Name: `ROCK`
- Amount: `0.04`
- Description: `Some ROCK Tokens`

Use the `LIST` function to find the token id for `ROCK`, and then use the `TOKENS` > `ROCK` function to retrieve the token's full information. We see the token id included as a part of the returned data.

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; display: block;">

<img src="/2019-06-24-tutorial-4-img-3.png">

</div>

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; display: block;">

<img src="/2019-06-24-tutorial-4-img-4.png">

</div>

## Create a Non-Fungible Token

Switch to the mining node.

Recall that to create a non-fungible token, we simply use only one satoshi of the coin.

- `MINING-MENU` > `TOKENS`
- `TOKENS` > `CREATE`
- Name: `NFT1`
- Amount: `0.00000001`
- Description: `First unique token`

## Compare the Tokens on One Node Against the Other

Check the balance of the `NFT1` token on both the `SEED` node and the `MINING` node.

- `TOKENS` > `BALANCE` > `NFT1`

Note that the balance is different for the two.

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; display: block;">

<img src="/2019-06-24-tutorial-4-img-6.png">

</div>

<div style="clear: both; margin-top: 1rem; margin-bottom: 1rem; display: block;">

<img src="/2019-06-24-tutorial-4-img-7.png">

</div>

## Tutorial Series Conclusion

Thank you for following along on this introductory tutorial.

We have covered many topics using our guided-tutorial software.

To learn more about any particular aspect, visit the links below.

If you are ready to proceed with the next tutorials in our educational series, return to the [<b>Learning Launchpad</b>]() section.

- Create a new Smart Chain
  - [<b>Create a Default Smart Chain</b>](../../../basic-docs/smart-chains/smart-chain-tutorials/create-a-default-smart-chain.html#creating-a-new-smart-chain)
  - [<b>ac_name</b>]()
- Create a coin supply
  - [<b>ac_supply</b>]()
- Create and use a faucet
  - [<b>Faucet Antara Module</b>]()
- Mine transactions
  - [<b>setgenerate</b>]()
- Create fungible and non-fungible tokens
  - [<b>Tokens Antara Module </b>]()
# Gateways Module Tutorial

## Tutorial

In this tutorial, we will create a gateway that can serve to represent KMD. The following are the steps in the gateway-creation process:

- Create a new asset chain and provide representative tokens
- Prepare a special oracle to monitor Komodo's chain state
- Bind the tokens and the oracle to our gateway
- Deposit KMD into the gateway
- Exchange tokens with other tokens on-chain
- Use the tokens to withdraw KMD

Please ensure that you have the KMD main chain downloaded and synced before continuing further in the guide.

Also, please open an empty text file and save all output transaction ids and hex-encoded data from each step. You will need the information at various stages.

#### Manually Compile and Install Komodo From Source

For this tutorial, please compile and install Komodo software from the source repositories.

[Information on manual installations can be found at this linked documentation.](https://docs.komodoplatform.com/komodo/installation.html)

#### Create a New Blockchain

For this tutorial we will create a temporary asset chain called `HELLOWORLD` for educational purposes.

Make sure that the total `ac_supply` of this asset chain is fairly large. `777777` coins will do for our purposes.

[Follow these linked instructions](../installations/creating-asset-chains.html#creating-a-new-asset-chain) before continuing.

Recall also that a user must have a `pubkey` enabled when interacting with a Custom Consensus asset chain. [View this linked material for an explanation.](../customconsensus/custom-consensus-instructions.html#creating-and-launching-with-a-pubkey)

If desired, the reader may use an existing asset chain instead of a temporary educational chain. [Follow this link](https://github.com/jl777/komodo/blob/master/src/assetchains.old) for a list of asset-chain launch parameters.

#### Create a Token to Represent an External Cryptocurrency

For the GatewaysCC module to function it must have access to tokens that can represent an external cryptocurrency. We use the [Tokens](../customconsensus/tokens.html) CC module to this effect.

#### Decide the Number of Tokens to Create

We want the number of total tokens to be the maximum possible amount of the represented cryptocurrency that we expect to hold.

Each token is created not from a full coin, but rather from a satoshi.

For example, `1` HELLOWORLD coin creates `100000000` tokens.

The HELLOWORLD satoshis should pair on a one-to-one basis with KMD satoshis.

For our purposes, we will use `1000` coins of HELLOWORLD.

#### Creating the tokens

To create the tokens, execute the following command:

```bash
./komodo-cli -ac_name=HELLOWORLD tokencreate KMD 1000 KMD_equivalent_token_for_gatewaysCC
```

This creates a `100000000000` token supply of on-chain tokens with the name of `KMD`, which represent the external cryptocurrency, `KMD`.

For more details on the above command, see [tokencreate.](../customconsensus/tokens.html#tokencreate)

This command returns a hex value as a response:

````json
{
  "result": "success",
  "hex": "01000000022c223cfc9c3349aed24ca89e44af6fcdb030150443bd6ac55e2080ce4b097c3002000000484730440220316605c400c47e2d5aa6104ac5c5229e71683b8db9482efa1655d257690d338802202344f254b208a6d724f52f4503531cf005a8ca68119bde4b6cb281ab9fccaf1101ffffffff80e66c0c47311449c5effc2782134006f05fd31e79659bc4b0608d7e247e280c0000000049483045022100ec494d3fa5c76fe0382e83980affdfd091509fb4e18b20fff8c095374e6b6bee022015ddaf95dc8b03e8cbba00ff7a377b80a7bd2200a68669718c329c617549757701ffffffff0400a0724e18090000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401cc1027000000000000232102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702acc01f66fa15090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000396a37e3632103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc0354414b0e54657374696e672070686173652e00000000" } ```
````

Select the hex value (`01000000022c223c...`) and copy it (CTRL + SHFT + C).

Broadcast this value using [sendrawtransaction:](../komodo-api/rawtransactions.html#sendrawtransaction)

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction insert_hex
```

This returns a string, and this string is our `tokenid`.

```bash
315d16c2dddd737f8a48f81499908897b53d05d20fb1344e349e304fb603f6bf
```

Copy the `tokenid` into the text editor we opened at the beginning of the tutorial and keep it available for future use.

Watch the mempool using [getrawmempool](../komodo-api/blockchain.html#getrawmempool) to verify that the `tokenid` is successfully mined:

```bash
./komodo-cli -ac_name=HELLOWORLD getrawmempool
```

Once the `tokenid` disappears from the mempool the transaction is mined.

If this asset chain were receiving full dPoW security services, at this point it would be appropriate to wait for notarization. We can use [getinfo](../komodo-api/control.html#getinfo) to watch for the `notarizations` property to increase:

```bash
./komodo-cli -ac_name=HELLOWORLD getinfo
```

On this educational asset chain, however, we can continue without waiting for notarization.

We can check to see that our token is successfully created on the chain using [tokeninfo:](../customconsensus/tokens.html#tokeninfo)

```bash
./komodo-cli -ac_name=HELLOWORLD tokeninfo insert_token_id
```

We can check the balance of our `pubkey` using [tokenbalance:](../customconsensus/tokens.html#tokenbalance)

```bash
./komodo-cli -ac_name=HELLOWORLD tokenbalance insert_tokenid insert_pubkey
```

#### Create an Oracle

We use the [oracles](../customconsensus/oracles.html) Custom Consensus module to add external data to the blockchain.

The name of our oracle should be identical to the name of our tokens, `KMD`, and the data format must start with `Ihh` (height, blockhash, merkleroot):

Create the oracle using [oraclescreate:](../customconsensus/oracles.html#oraclescreate)

```bash
./komodo-cli -ac_name=HELLOWORLD oraclescreate KMD blockheaders Ihh
```

This returns a hex value:

```json
{
  "result": "success",
  "hex": "010000000185b76ed0fbdb9ee2bdb5693f491b6ea23de6498f42c6e83f9f36c1eaf411dd990200000049483045022100aa198a2ae959ee191e1359df48867480bf5a1a5bd4fa76b4398481c89ff3095102205034824dcd56b312183acd65c27a002a13dae84f5d22c767f1efaae09ef63a5c01ffffffff0310270000000000002321038c1d42db6a45a57eccb8981b078fb7857b9b496293fe299d2b8d120ac5b5691aac378740a804000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000001c6a1aec43064e5957544852014c0e5765617468657220696e204e594300000000"
}
```

Broadcast the returned hex data using [sendrawtransaction:](../komodo-api/rawtransactions.html#sendrawtransaction)

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction insert_hex_data
```

This returns a transaction id, which is the `oracleid`:

```bash
0df7c4d844f08dba08abd4bb174558739f17cfe268feb005fb6333b3761d9203
```

Record this in the text editor.

To prepare for the oraclefeed dApp, use [oraclesregister](../customconsensus/oracles.html#oraclesregister) to register as a publisher for the oracle. This must be done on a node which can post KMD block headers and which can execute withdrawal transactions:

```bash
./komodo-cli -ac_name=HELLOWORLD oraclesregister insert_oracleid data_fee_in_satoshis`
```

This returns a hex value (not shown for brevity), which we now broadcast:

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction insert_hex_value
```

Retrieve the data publisher's `pubkey` using [oraclesinfo:](../customconsensus/oracles.html#oraclesinfo)

```bash
./komodo-cli -ac_name=HELLOWORLD oraclesinfo insert_oracleid
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "txid": "46e2dc958477160eb37de3a1ec1bb18899d77f5b47bd52b8a6f7a9ce14729157",
  "name": "KMD",
  "description": "blockheaders",
  "format": "Ihh",
  "marker": "RNFz9HAuzXhAjx6twEJzcHXconzChfiNM6",
  "registered": [
    {
      "publisher": "03810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5",
      "baton": "RWg43P8s8RtJatAGNa2kV8N2abhQqH93w9",
      "batontxid": "99dd11f4eac1369f3fe8c6428f49e63da26e1b493f69b5bde29edbfbd06eb785",
      "lifetime": "0.00000000",
      "funds": "0.00000000",
      "datafee": "0.01000000"
    }
  ]
}
```

</collapse-text>


The property, `"publisher"`, in the entry, `"registered"`, of the returned json object is the data publisher's `pubkey`, also called the `publisherpubkey`.

Subscribe to the oracle using [oraclessubscribe](../customconsensus/oracles.html#oraclessubscribe) to receive utxo information for data publishing.

The frequency of data-publishing transactions we can perform in a block is equal to the number of active subscriptions committed to the oracle. Therefore, we must have at least one subscription for the oracle to allow publishing.

```bash
./komodo-cli -ac_name=HELLOWORLD oraclessubscribe insert_oracleid insert_publisherpubkey insert_amount_of_funds_to_add
```

This returns a hex value (not shown for brevity), which we now broadcast:

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction insert_hex_value
```

::: warning Note
Execute the <b>oraclessubscribe</b> and <b>sendrawtransaction</b> methods several times and with the same amount. This gives us the opportunity to broadcast more than one sample of data per block. In our example, we want to publish data for more than one KMD-height per block.
:::

Verify the oracle information to ensure it is properly established:

```bash
./komodo-cli -ac_name=HELLOWORLD oraclesinfo insert_oracleid
```

#### Activating Gateway Binding

We now create a gateway and bind our information to it, using the [gatewaysbind](../customconsensus/gateways.html#gatewaysbind) method.

This method requires that we decide how many total gateway signatures we desire (`N`), and how many signatures are required to withdraw funds (`M`).

For our educational example, we may set both `N` and `M` equal to `1`, for simplicity.

As a part of this command we will need to indicate the `pubtype`, `p2shtype`, and `wiftype` values for our chosen coin. For KMD, these values are `60`, `85` and `188` respectively.

```bash
./komodo-cli -ac_name=HELLOWORLD gatewaysbind insert_tokenid insert_oracleid KMD insert_tokensupply 1 1 insert_gatewayspubkey 60 85 188
```

This method returns a hex value (not shown for brevity), which we now broadcast:

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction insert_hex_value
```

The broadcast returns a transaction id, also called the `bindtxid`. Copy this information into the text editor.

Assuming all is properly created and executed, we may now review our new gateway using [gatewaysinfo:](../customconsensus/gateways.html#gatewaysinfo)

```bash
./komodo-cli -ac_name=HELLOWORLD gatewaysinfo insert_bindtxid
```

Use the returned information to verify that the `tokenid` and `oracleid` match the information in our text editor.

#### Assemble an Oracle dApp

An oracle dApp automates the transfer of merkleroot data to our oracle. The Komodo software suite includes built-in tools for creating an oracle dApp.

Change into the correct directory (this command assumes we installed Komodo in the default directory):

```bash
cd  ~/komodo/src/
```

Compile the dApp:

```bash
gcc cc/dapps/oraclefeed.c -lm -o oraclefeed
```

Run the dApp:

```bash
./oraclefeed HELLOWORLD insert_oracleid insert_mypubkey Ihh insert_bindtxid &
```


<collapse-text hidden title="Response">


```bash
(succesfull oraclization of KMD heights):
KMD ht.1023334 <- 669d0f009eaf85900be0d54fa1b5f455d49edfc1d9dcfe71c43b8be19b7927dda3ecd20c0175bc7b8eb98d857baeeef6a18fc7d6b58bd34b4eb00beaa18c5842bbe5566a
broadcast HELLOWORLD txid.(9484283d8d4bf28b4053e21e7b7e8210eb59c41668e9c7280c4e6c4fbf61579a)
KMD ht.1023335 <- 679d0f00173d5dc169a64bba92e5765fde848cc620a700295ecce8837cb2a13b05000000ed71033532278f72c8f64990e27f0cb185310df163b3278faf267e87d12bf84b
broadcast HELLOWORLD txid.(837c132ab47f1ac1eee2e03828a9818369b919c1de128b99958ac95ffdc96551)
KMD ht.1023336 <- 689d0f0006a53215d5a07d9ee1c9206dcdccacd1c364968b555c56cdf78f9f0c40f87d08b30fdf63299d25bd9a09a3b3fb8a26800a0a4f6e93ca6cd8cb41b98b756dd937
broadcast HELLOWORLD txid.(f33d5ffaec7d13f14605556cee86262299db8fad0337d1baefadc59ec24b6055)
```

</collapse-text>


#### Using the Gateway

With our gateway created and our oracle dApp running as a background process, we are finally prepared to test our gateway.

First, we need the `gatewaysDepositAddress`. This is the address where we will deposit our KMD on the main KMD chain.

```bash
./komodo-cli -ac_name=HELLOWORLD gatewaysinfo insert_bindtxid
```

<collapse-text hidden title="Example Response">

```json
{
  "result": "success",
  "name": "Gateways",
  "pubkey": "024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0",
  "coin": "KMD",
  "oracletxid": "ba26ba27dc17a017a2c0915378c0a8430e468dffb42c4fc1cd36abf69c88388b",
  "taddr": 0,
  "prefix": 60,
  "prefix2": 85,
  "deposit": "RXEXoa1nRmKhMbuZovpcYwQMsicwzccZBp",
  "tokenid": "07646d72dec393f486f8a116facd9b8a575dcf00ec99f819151fd1784015941b",
  "totalsupply": "1.00000000",
  "remaining": "1.00000000",
  "issued": "0.00000000"
}
```
</collapse-text>

The `deposit` property contains the `gatewaysDepositAddress`. When we send funds to this address, we receive in return HELLOWORLD KMD tokens to an on-chain address that we indicate as follows.

Use the [z_sendmany](../komodo-api/wallet.html#z-sendmany) method to send funds to two addresses simultaneously. The first address is the `pubkey` that corresponds to our pubkey on the HELLOWORLD asset chain which will receive tokens. The second address is the `gatewaysDepositAddress` on the KMD chain. We send a nominal amount into the first address, and the amount we wish to have available for trading into the second address. This is done on the external chain -- in this case, KMD.

```bash
./komodo-cli z_sendmany "insert_address_where_KMD_funds_are_currently_held" '[{"address":"addressOfPubkeyForTokenizedKmd","amount":0.0001},{"address":"gatewaysDepositAddress","amount":0.1}]'
```

The returned string is the `operation_id`. Use this with the [z_getoperationstatus](../komodo-api/wallet.html#z-getoperationstatus) method.

```bash
./komodo-cli z_getoperationstatus '["insert_operation_id"]'
```

Execute this every few seconds until the `status` property reads `success`. Once this occurs, find the `txid` value. This is our `cointxid`, and we copy this into our text editor.

Wait for the transaction to be mined. Once confirmed, execute the [gettransaction](../komodo-api/wallet.html#gettransaction) method with the `cointxid` to obtain more information we will need later.

```bash
./komodo-cli gettransaction insert_cointxid
```

Via the returned information from the `gettransaction` method, we can verify the addresses were correct by looking at the `vout` properties. At the bottom, there is a `hex` value. Copy the value to the text editor for later.

In the returned results there is also a `blockhash` value, which we can use to find out the height of the block which contains the `cointtxid` by using the method below. 

/komodo-cli getblock insert_cointxid | jq '.height'

Next, execute the following command for more information:

```bash
 ./komodo-cli gettxoutproof '["insert_cointxid"]' 
 ```

This returns a `proof` value. Transfer this to the text editor.

We now have the necessary data to execute the [gatewaysdeposit](../customconsensus/gateways.html#gatewaysdeposit-2) method on the HELLOWORLD asset chain.

The `gatewaysdeposit` method broadcasts the relevant data on the asset chain so that the gateway nodes may validate the information and prepare to distribute the KMD tokens.

Here is the information we need for this call:

- `BINDTXID`: our bindtxid
- `HEIGHT`: the `height` value of the `blockhash` containing the `cointxid` transaction
- `COIN`: KMD for this example
- `COINTXID`: the `cointxid` returned from `z_sendmany`
- `CLAIMVOUT`: the `vout` of the claim (this value should be 0, as it is our first use)
- `DEPOSITHEX`: the `hex` value that is found by executing `gettransaction` on the cointxid
- `PROOF`: the `proof` value returned after executing `gettxoutproof` on the cointxid
- `DESTPUB`: the public key where the KMD tokens should be received on the asset chain (the same pubkey used earlier to retrieve the first address for the z_sendmany method)
- `AMOUNT`: the amount of the deposit (in this case 0.1)

```bash
./komodo-cli -ac_name=HELLOWORLD  gatewaysdeposit BINDTXID HEIGHT COIN COINTXID CLAIMVOUT DEPOSITHEX PROOF DESTPUB AMOUNT
```

Successfully executing this command will return a hex value.

Broadcast the hex data:

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction insert_hex_data
```

The broadcast returns a transaction id. Copy this to the text editor. It is the `deposittxid`.

::: warning Note
For the deposit to process successfully, the oraclefeed dApp must first process the block height of the z_sendmany transaction through the oracle
:::

#### Claim the Funds on the Asset Chain

To claim the funds we must spend the marker and the deposit asset, and perform the claim.

This method is only available to the owner of the `privkey` corresponding to the pubkey used previously in the `gatewaysdeposit` method. The pubkey should be the `-pubkey=$PUBKEY` parameter used to launch the daemon.

- `BINDTXID`: our bindtxid
- `COIN`: KMD for this example
- `DEPOSITTXID`: the transaction id returned from the `gatewaysdeposit` call
- `DESTPUB`: the public key where these tokens should be received on the asset chain
- `AMOUNT`: the amount of the deposit (in this case 0.1)

```bash
./komodo-cli -ac_name=HELLOWORLD gatewaysclaim BINDTXID COIN DEPOSITTXID DESTPUB AMOUNT
```

Broadcast the returned hex value:

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction insert_hex_data
```

Once this transaction is successfully confirmed, the gateway will credit tokens to our indicated pubkey. These tokens are now usable as regular Token CC tokens.

::: warning Note
For the claim to process successfully, the deposit and bind transaction must be confirmed first. This requires either 101 confirmations, or if the chain has dPoW, 1 notarization.
:::

#### Withdrawing KMD Funds

When finished with our tokens, we may send them to the gateway and withdraw the corresponding KMD funds via the [gatewayswithdraw](../customconsensus/gateways.html#gatewayswithdraw) method. Only the current owner of the KMD funds may execute the `gatewayswithdraw` method for these funds.

::: tip
Recall that for the gateway to function, the oracle dApp must be running.
:::

Before we execute `gatewayswithdraw`, we must first import the private key for the `gatewaysdeposit address` on node which has oraclefeed dApp running (this is needed only once).

Find the `gatewayDepositAddress` in the `deposit` property of the returned values of the following command:

```bash
./komodo-cli -ac_name=HELLOWORLD gatewaysinfo insert_bindtxid
```

Find the private key returned from this command:

```bash
./komodo-cli -ac_name=HELLOWORLD dumprivkey insert_gatewayDepositAddress
```

Execute the following commands on the node running the oraclefeed dApp:

```bash
./komodo-cli importprivkey "insert_private_key" "label" false
```

Information for the next command:

- `BINDTXID`: our bindtxid
- `COIN`: KMD for this example
- `WITHDRAWPUB`: the pubkey where the withdrawn coins should appear on the external chain; in this case, the KMD pubkey
- `AMOUNT`: the amount to withdraw

```bash
./komodo-cli -ac_name=HELLOWORLD gatewayswithdraw insert_bindtxid KMD insert_withdraw_pubkey insert_desired_withdraw_amount
```

Once executed, the remaining portion of the withdrawal process should happen automatically.

Congratulations, you have successfully completed the cycle of the Gateways CC module.

## Full Example

The following content provides the full terminal input and output of a complete gateway cycle.

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD tokencreate KMD 1 testing
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "010000000100ab0161028985d24b473d758ee9cbb944006c27b69eb6ec5b0625e7c72bdab400000000494830450221008914c99e55f8471d7985db10fead22d4abdd52670709da9c962e20a1dd77064c022022e1900ab245872eede0439e3acbd8e481304a9ba71039590ee4ca452a628fa801ffffffff0400e1f50500000000302ea22c802090bc95b90831a7837c7ef178f6fd47f26a933bcf8de56da4a2f62894ab6c73fc8103120c008203000401cc1027000000000000232102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702ace0707c48180900002321024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0ac0000000000000000326a30e36321024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0034b4d440774657374696e6700000000"
}
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000100ab0161028985d24b473d758ee9cbb944006c27b69eb6ec5b0625e7c72bdab400000000494830450221008914c99e55f8471d7985db10fead22d4abdd52670709da9c962e20a1dd77064c022022e1900ab245872eede0439e3acbd8e481304a9ba71039590ee4ca452a628fa801ffffffff0400e1f50500000000302ea22c802090bc95b90831a7837c7ef178f6fd47f26a933bcf8de56da4a2f62894ab6c73fc8103120c008203000401cc1027000000000000232102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702ace0707c48180900002321024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0ac0000000000000000326a30e36321024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0034b4d440774657374696e6700000000
```


<collapse-text hidden title="Response">


```bash
315d16c2dddd737f8a48f81499908897b53d05d20fb1344e349e304fb603f6bf
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD tokeninfo 315d16c2dddd737f8a48f81499908897b53d05d20fb1344e349e304fb603f6bf
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "tokenid": "315d16c2dddd737f8a48f81499908897b53d05d20fb1344e349e304fb603f6bf",
  "owner": "024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0",
  "name": "KMD",
  "supply": 100000000,
  "description": "testing"
}
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD oraclescreate KMD testing Ihh
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "010000000100d7be6a83f6398b2b30315d6a9fb6af048971fbdc233e36fb4307fde654ab5a0000000049483045022100a0155127857c36c35d72e718f052a8a6b2ac5003f8a67e622c006f2f071e5d020220087febeac78eba36a2b6c92a860f32141f9dc453f77988f9da6cfaa14d1e9d9001ffffffff0310270000000000002321038c1d42db6a45a57eccb8981b078fb7857b9b496293fe299d2b8d120ac5b5691aace051724e180900002321024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0ac0000000000000000146a12ec43034b4d44034968680774657374696e6700000000"
}
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000100d7be6a83f6398b2b30315d6a9fb6af048971fbdc233e36fb4307fde654ab5a0000000049483045022100a0155127857c36c35d72e718f052a8a6b2ac5003f8a67e622c006f2f071e5d020220087febeac78eba36a2b6c92a860f32141f9dc453f77988f9da6cfaa14d1e9d9001ffffffff0310270000000000002321038c1d42db6a45a57eccb8981b078fb7857b9b496293fe299d2b8d120ac5b5691aace051724e180900002321024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0ac0000000000000000146a12ec43034b4d44034968680774657374696e6700000000
```


<collapse-text hidden title="Response">


```bash
9e2b634427c209afb844d05e20f10f9ea799b3a1e8763cb5ba89084e20ab7e40
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD oraclesregister 9e2b634427c209afb844d05e20f10f9ea799b3a1e8763cb5ba89084e20ab7e40 10000
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "010000000100da09e69ee37b713b3bbc5e4cf5f7b9525766af13c86fd5bddb246aff675cbe000000004847304402202d1aa9c1c39ed4428f381d727780fdd6fddfeef616595b7add6b0c7dac66e35f022070c227072ea93b099941daa1b5a2a41afa84ea955a536727c2307c10dc5aa53c01ffffffff041027000000000000232102407eab204e0889bab53c76e8a1b399a79e0ff1205ed044b8af09c22744632b9eac1027000000000000302ea22c802070f8ca74a159596583083b3744665976848f8c9f2e6d61b962e66c8a0d6b225d8103120c008203000401ccd02a724e180900002321024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0ac00000000000000004f6a4c4cec52407eab204e0889bab53c76e8a1b399a79e0ff1205ed044b8af09c22744632b9e21024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0102700000000000000000000"
}
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000100da09e69ee37b713b3bbc5e4cf5f7b9525766af13c86fd5bddb246aff675cbe000000004847304402202d1aa9c1c39ed4428f381d727780fdd6fddfeef616595b7add6b0c7dac66e35f022070c227072ea93b099941daa1b5a2a41afa84ea955a536727c2307c10dc5aa53c01ffffffff041027000000000000232102407eab204e0889bab53c76e8a1b399a79e0ff1205ed044b8af09c22744632b9eac1027000000000000302ea22c802070f8ca74a159596583083b3744665976848f8c9f2e6d61b962e66c8a0d6b225d8103120c008203000401ccd02a724e180900002321024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0ac00000000000000004f6a4c4cec52407eab204e0889bab53c76e8a1b399a79e0ff1205ed044b8af09c22744632b9e21024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0102700000000000000000000
```


<collapse-text hidden title="Response">


```bash
b0bbe39a33e794ecff5af817440c0cd7d92479cca74f3c763f88111383015d73
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD oraclesinfo 9e2b634427c209afb844d05e20f10f9ea799b3a1e8763cb5ba89084e20ab7e40
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "txid": "9e2b634427c209afb844d05e20f10f9ea799b3a1e8763cb5ba89084e20ab7e40",
  "name": "KMD",
  "description": "testing",
  "format": "Ihh",
  "marker": "RVzbTDynxQysZbYXURkq5W3TjnevyWX1fA",
  "registered": [
    {
      "publisher": "024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0",
      "baton": "RMYk1vLfWGi3aVxjGJYaAyYNZkZUvmoFJ6",
      "batontxid": "b0bbe39a33e794ecff5af817440c0cd7d92479cca74f3c763f88111383015d73",
      "lifetime": "0.00000000",
      "funds": "0.00000000",
      "datafee": "0.00010000"
    }
  ]
}
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD oraclessubscribe 9e2b634427c209afb844d05e20f10f9ea799b3a1e8763cb5ba89084e20ab7e40 024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0 1
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "010000000100e078a6ecd74f0b1609656ea3e7ee54c4a95ae66bfd19929c2e2cdc781b0f410000000049483045022100d48c862acde5e8756d11ef14ea9aaae26cf3da4344b49eb0e496b639c91499e602204dd685b86aae4dd8685e0b14b53c8a2957f5980a61f36d30eb8886726894570401ffffffff0400e1f50500000000302ea22c8020d5ad5ece52f2a6c9dd46cd4e658abce5dc1881e9c470d5cdf1f3f71199996f788103120c008203000401cc1027000000000000232102407eab204e0889bab53c76e8a1b399a79e0ff1205ed044b8af09c22744632b9eace0707c48180900002321024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0ac00000000000000004f6a4c4cec53407eab204e0889bab53c76e8a1b399a79e0ff1205ed044b8af09c22744632b9e21024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff000e1f5050000000000000000"
}
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000100e078a6ecd74f0b1609656ea3e7ee54c4a95ae66bfd19929c2e2cdc781b0f410000000049483045022100d48c862acde5e8756d11ef14ea9aaae26cf3da4344b49eb0e496b639c91499e602204dd685b86aae4dd8685e0b14b53c8a2957f5980a61f36d30eb8886726894570401ffffffff0400e1f50500000000302ea22c8020d5ad5ece52f2a6c9dd46cd4e658abce5dc1881e9c470d5cdf1f3f71199996f788103120c008203000401cc1027000000000000232102407eab204e0889bab53c76e8a1b399a79e0ff1205ed044b8af09c22744632b9eace0707c48180900002321024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0ac00000000000000004f6a4c4cec53407eab204e0889bab53c76e8a1b399a79e0ff1205ed044b8af09c22744632b9e21024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff000e1f5050000000000000000
```


<collapse-text hidden title="Response">


```bash
2e0192ed35349009581cb6be842283b472247abbbeff62d8daef6fc2acfdf808
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD gatewaysbind 315d16c2dddd737f8a48f81499908897b53d05d20fb1344e349e304fb603f6bf 9e2b634427c209afb844d05e20f10f9ea799b3a1e8763cb5ba89084e20ab7e40 KMD 100000000 1 1 024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0 60 85 188
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "010000000101069d6ef8a20a726959a9802151f3367558a3e2360bb5620cf269c5949777430000000048473044022065e97dc3e0f8aee9c6bc041c728c18ab021c174b8570a8c332a170ec7a94773f022023c19d04002940298ae961d1c155e889df29ae9976bb61cfebd87715de3d7fbf01ffffffff031027000000000000302ea22c802091abda62a548f9c7f5beb19d16f01714ae3d4e526f3266fc8d347d6123f3d77b8103120c008203000401cce051724e180900002321024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0ac0000000000000000796a4c76f142034b4d443c5500bff603b64f309e344e34b10fd2053db59788909914f8488a7f73ddddc2165d3100e1f5050000000001010121024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0407eab204e0889bab53c76e8a1b399a79e0ff1205ed044b8af09c22744632b9e00000000"
}
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000101069d6ef8a20a726959a9802151f3367558a3e2360bb5620cf269c5949777430000000048473044022065e97dc3e0f8aee9c6bc041c728c18ab021c174b8570a8c332a170ec7a94773f022023c19d04002940298ae961d1c155e889df29ae9976bb61cfebd87715de3d7fbf01ffffffff031027000000000000302ea22c802091abda62a548f9c7f5beb19d16f01714ae3d4e526f3266fc8d347d6123f3d77b8103120c008203000401cce051724e180900002321024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0ac0000000000000000796a4c76f142034b4d443c5500bff603b64f309e344e34b10fd2053db59788909914f8488a7f73ddddc2165d3100e1f5050000000001010121024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0407eab204e0889bab53c76e8a1b399a79e0ff1205ed044b8af09c22744632b9e00000000
```


<collapse-text hidden title="Response">


```bash
897a4e52749eb4a89d251f85cce16cbff6b09209d900b191610d68bf631f8d0d
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD gatewaysinfo 897a4e52749eb4a89d251f85cce16cbff6b09209d900b191610d68bf631f8d0d
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "name": "Gateways",
  "pubkey": "024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0",
  "coin": "KMD",
  "oracletxid": "9e2b634427c209afb844d05e20f10f9ea799b3a1e8763cb5ba89084e20ab7e40",
  "taddr": 0,
  "prefix": 60,
  "prefix2": 85,
  "deposit": "RXEXoa1nRmKhMbuZovpcYwQMsicwzccZBp",
  "tokenid": "315d16c2dddd737f8a48f81499908897b53d05d20fb1344e349e304fb603f6bf",
  "totalsupply": "1.00000000",
  "remaining": "1.00000000",
  "issued": "0.00000000"
}
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD dumpprivkey RXEXoa1nRmKhMbuZovpcYwQMsicwzccZBp
```


<collapse-text hidden title="Response">


```bash
DONOTUSE_privkey_STRING
```

</collapse-text>


Command:

```bash
./komodo-cli importprivkey "privkey" "label" false
```


<collapse-text hidden title="Response">


```bash
(corresponding address to privkey)
```

</collapse-text>


Command:

```bash
./oraclefeed HELLOWORLD 9e2b634427c209afb844d05e20f10f9ea799b3a1e8763cb5ba89084e20ab7e40 024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0 Ihh 897a4e52749eb4a89d251f85cce16cbff6b09209d900b191610d68bf631f8d0d
```


<collapse-text hidden title="Response">


```bash
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   671  100   671    0     0  41937      0 --:--:-- --:--:-- --:--:-- 41937
BTC/USD 3836.4150
Powered by CoinDesk (https://www.coindesk.com/price/) 3836.41500000
coin.KMD vs KMD
set refcoin RXEXoa1nRmKhMbuZovpcYwQMsicwzccZBp <- KMD [./komodo-cli] M.1 of N.1
broadcast HELLOWORLD txid.(8553c068743984692dfa91bee2ce27749352c9b2aef5a06b011f1d3bd263eada)
KMD ht.1116166 <- 060811006a039b728c305c8d98b42801cde542386fc3fba3a7dbcdfbb97e6e88a891d909976d2c4de105822f03f6b81d35f3075e08bb098553bfbd3709127aac112a7819
```

</collapse-text>


#### Example Continues - From Gateway USER Node

Make a Deposit

```bash
./komodo-cli listaddressgroupings
```


<collapse-text hidden title="Response">


```bash
[
    [
      "RFUL6arBgucq9TUPvTaUTnpQ2DkrcxtSxx",
      0.26455000
    ]
]
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD getaccountaddress ""
```


<collapse-text hidden title="Response">


```bash
RBm4FN3JhjhbVFaGKJ8DQgtgPHKXvhFMs3
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD gatewaysinfo 897a4e52749eb4a89d251f85cce16cbff6b09209d900b191610d68bf631f8d0d
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "name": "Gateways",
  "pubkey": "024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0",
  "coin": "KMD",
  "oracletxid": "9e2b634427c209afb844d05e20f10f9ea799b3a1e8763cb5ba89084e20ab7e40",
  "taddr": 0,
  "prefix": 60,
  "prefix2": 85,
  "deposit": "RXEXoa1nRmKhMbuZovpcYwQMsicwzccZBp",
  "tokenid": "315d16c2dddd737f8a48f81499908897b53d05d20fb1344e349e304fb603f6bf",
  "totalsupply": "1.00000000",
  "remaining": "1.00000000",
  "issued": "0.00000000"
}
```

</collapse-text>


Command:

```bash
./komodo-cli z_sendmany "RFUL6arBgucq9TUPvTaUTnpQ2DkrcxtSxx" '[{"address":"RBm4FN3JhjhbVFaGKJ8DQgtgPHKXvhFMs3","amount":0.0001},{"address":"RXEXoa1nRmKhMbuZovpcYwQMsicwzccZBp","amount":0.1}]'
```


<collapse-text hidden title="Response">


```bash
opid-fbe98b01-a870-4bd5-9bc9-b937b08c79b5
```

</collapse-text>


Command:

```bash
./komodo-cli z_getoperationstatus '["opid-fbe98b01-a870-4bd5-9bc9-b937b08c79b5"]'
```


<collapse-text hidden title="Response">


```json
[
  {
    "id": "opid-fbe98b01-a870-4bd5-9bc9-b937b08c79b5",
    "status": "success",
    "creation_time": 1543366284,
    "result": {
      "txid": "907812ee8d2762b589f6ca88ee8ba18a65ebf5c7486c472df7395628d22d0d98"
    },
    "execution_secs": 0.007361979,
    "method": "z_sendmany",
    "params": {
      "fromaddress": "RFUL6arBgucq9TUPvTaUTnpQ2DkrcxtSxx",
      "amounts": [
        {
          "address": "RBm4FN3JhjhbVFaGKJ8DQgtgPHKXvhFMs3",
          "amount": 0.0001
        },
        {
          "address": "RXEXoa1nRmKhMbuZovpcYwQMsicwzccZBp",
          "amount": 0.1
        }
      ],
      "minconf": 1,
      "fee": 0.0001
    }
  }
]
```

</collapse-text>


Wait until this height is oraclized by the `oraclefeed` dApp.

Find the `height` and `hex` values here:

Command:

```bash
./komodo-cli getrawtransaction 907812ee8d2762b589f6ca88ee8ba18a65ebf5c7486c472df7395628d22d0d98 1
```


<collapse-text hidden title="Response">


```json
{
  "hex": "010000000197d6ea16c68dc5db95b72e029a0e23cb403ae0a33b561b863963cfd9cbfec747000000006b483045022100aca47515602989979b514b6211c375e4d0d9471dd8297c5238c12245ad01dd830220191105caf1b63313c6988194f5f03fd6f70d4a30edc7820add1185d35edff1bb012102924664b536f3710a8e8abea38bb4bf71b470a653a4dceabd50df08d7b2a38436ffffffff0310270000000000001976a9141b355cb6b76cab1b16cb873db8828fe5d2521ae488ac80969800000000001976a914f0d1fc29f8962ac2805a1659192d9ad26794d22988ac38c7fa00000000001976a91482804b943dd6a2008af73f8ba40449c062f0935188ac50e6fd5b",
  "txid": "907812ee8d2762b589f6ca88ee8ba18a65ebf5c7486c472df7395628d22d0d98",
  "overwintered": false,
  "version": 1,
  "locktime": 1543366224,
  "vin": [
    {
      "txid": "47c7fecbd9cf6339861b563ba3e03a40cb230e9a022eb795dbc58dc616ead697",
      "vout": 0,
      "address": "RFUL6arBgucq9TUPvTaUTnpQ2DkrcxtSxx",
      "scriptSig": {
        "asm": "3045022100aca47515602989979b514b6211c375e4d0d9471dd8297c5238c12245ad01dd830220191105caf1b63313c6988194f5f03fd6f70d4a30edc7820add1185d35edff1bb[ALL] 02924664b536f3710a8e8abea38bb4bf71b470a653a4dceabd50df08d7b2a38436",
        "hex": "483045022100aca47515602989979b514b6211c375e4d0d9471dd8297c5238c12245ad01dd830220191105caf1b63313c6988194f5f03fd6f70d4a30edc7820add1185d35edff1bb012102924664b536f3710a8e8abea38bb4bf71b470a653a4dceabd50df08d7b2a38436"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 0.0001,
      "interest": 0.0,
      "valueSat": 10000,
      "n": 0,
      "scriptPubKey": {
        "asm": "OP_DUP OP_HASH160 1b355cb6b76cab1b16cb873db8828fe5d2521ae4 OP_EQUALVERIFY OP_CHECKSIG",
        "hex": "76a9141b355cb6b76cab1b16cb873db8828fe5d2521ae488ac",
        "reqSigs": 1,
        "type": "pubkeyhash",
        "addresses": ["RBm4FN3JhjhbVFaGKJ8DQgtgPHKXvhFMs3"]
      }
    },
    {
      "value": 0.1,
      "interest": 0.0,
      "valueSat": 10000000,
      "n": 1,
      "scriptPubKey": {
        "asm": "OP_DUP OP_HASH160 f0d1fc29f8962ac2805a1659192d9ad26794d229 OP_EQUALVERIFY OP_CHECKSIG",
        "hex": "76a914f0d1fc29f8962ac2805a1659192d9ad26794d22988ac",
        "reqSigs": 1,
        "type": "pubkeyhash",
        "addresses": ["RXEXoa1nRmKhMbuZovpcYwQMsicwzccZBp"]
      }
    },
    {
      "value": 0.16435,
      "interest": 0.0,
      "valueSat": 16435000,
      "n": 2,
      "scriptPubKey": {
        "asm": "OP_DUP OP_HASH160 82804b943dd6a2008af73f8ba40449c062f09351 OP_EQUALVERIFY OP_CHECKSIG",
        "hex": "76a91482804b943dd6a2008af73f8ba40449c062f0935188ac",
        "reqSigs": 1,
        "type": "pubkeyhash",
        "addresses": ["RMBDcZbvjhfureuAaobJmKJLSApAVbBx6g"]
      }
    }
  ],
  "vjoinsplit": [],
  "blockhash": "00000006396dff8e9eb78217f17dbf83711d9066a91f25917cc504c76a83a85f",
  "height": 1116196,
  "confirmations": 1,
  "rawconfirmations": 1,
  "time": 1543366322,
  "blocktime": 1543366322
}
```

</collapse-text>


Command:

```bash
./komodo-cli gettxoutproof '["907812ee8d2762b589f6ca88ee8ba18a65ebf5c7486c472df7395628d22d0d98"]'
```


<collapse-text hidden title="Response">


```bash
04000000380b8fd2b9bdf570358980a4c9fc94e418ac656913999b5f9a016ec5afc46b0b188320f231637a0ded0b0bdada1f34c81ad5873b8c3f096b2014018af13f43980000000000000000000000000000000000000000000000000000000000000000b2e6fd5ba786061d57fff87a00000000000046430000000000000200000000000000000000000000fd40050035435dd2c1df5c20cb48e0617b6cee81f5349f0735b36fe93f17f82d678ad3eb374d0e398b049fddcb21a4d7ddf7345867c6a363eddcfe61f31d49dbc35652794c60da61bd5f164fd554f17b5bd669f636744412822af2ebd0f318dacb71514720164c59c392ef2b1ccc3a5dc5c9c83cd37a11f98b97c8f5170a357a972ec3cacbeb0dab34b757354883b46a598f2b93fcd735b4163db6b2b037f7d7d71a773e909ac4ce3f1228012d5bebfd9edad9842ae8c6cddf6942c543594b85013591a604c4223a3d2e007ed25f5994e9d8f6b6a704daf57cad41aea9609923612eee2fc55ad075c91c23a8cc46af9a45a7390c537d2e2302994239ae44230537ceaa2188e7f4eb6a0ab55471d152b9177e9fd90843504f29d3e92fd3d7142caae018b51318ec6b86083b7e2d155ce868f6b673b13cf1ed59107d15c6c84201441dde14074930f4755ec64975f354a99bd957021c073768f575dde3ab020dd73b488e2d03d57bc414a16d45b3e2052b24fb2360ec5f73524525fc59d2151b89310b19764541b801ad72171085bc6275832222484b8d7ee6ed91ab6a544c45af5c4d8445b0624f04a234aec6997eecf007f0e971eea33b21e45ba8f72825fa84605cdfa929aeb6dc425f2612000e7ce2ba04ff8c53061154eb38cba7f6d0bfe5dab031dadea2095e01e93f9e063d0b42e412f865572625f77aa8b10b58f7b0428ea0ff530ea10d37150496bb181e37fc5814ad524ce4618955e9158b6aebb956b02b961f920ee48eb5a08efc39d27fc2fd4ec175e38798bcca7331a7b5da2ca6c56fcb98e740c2f471eac6b67ced78125c5fcecd4f76eac1d76233aa58ed808e398b9e2b1eaa74e773d18276b732239403ce0c452cb26f0f34156a0a63e007ccfbd76f168fb941fbd2fbe23b57e519835c804ace6e22e281b3d0adda7c4b93a87d94500103315c780fe91ee67320a422eecb4a6daedc2d774567bfebc1d5b72fa693178f3443aa1eb47f18d6931f7b0fc6ec151caad4eae5f787c2a963c3963ffc924ba66a7ea1754763faf2884de0c86a0f75fe7f8dfb1265b449184668cb7348520810cf731663f5180ac31642d6b135d5ce7de88ba63d6db3d6c5dfa19492281dfed3b3765451717f3497ac2b4c040e2e4e77219b2586c227cd138b8d94ccc273fbfbb51a35523870c503e2d8527b840ced11917075e8a41ae9616f1df8d41df5bae39c6d6de5bb8d43d401bb9089723db59f0f06aa4fdf4145a905812ef799eb574abb9985de878a289e5f4b1256ca2121d553465f44065580cb5bde170459d1c22e8d388cbec9e37dc3cca07e489a9859942a9ccef4a5e45eed7228b94c86d10a233b5a1ddfcb1735cb9b16de6e8f49f3c841796acba31a8e9c90b531952ed03bd72e0b00fa3373ea4bc845d7469afae305639c772285a5223bf2d86a12c92312dc19db86400c6760b9e75af40ce4c16278bba8a804d5a69b88290dd4c2b43423bee9eb97c54261f956a32d80fdd3f421d1199ee45d42ad657e928be2e9fa54d844cff60b06bc525ce54daca9689e0616bfdbdbc36e09bea11a276d25d3ca9a80ed7109183784dfd1d23b7c791a7913a633e2d28948c655e68ade706654e38f717fe29119af4282430c8d1f702a52ea189f1e9e6faafb213205a195dab1c2d01dc6a3711f671ea118e8a3c995632903c58ebbd4eae5dbc4555b24c1649e89e03efb92134b9e24fb9fc649462f928d992fa33d45edcb4ef13f0d5c2cb6663e7dbf2414b5ed617e56b8715ace6910807e4a901ba603dab4092f9eeb46566ec3f38f3a1789c60822530c390d19b1d939217b7a691abb91454fce76cccf3557ddb3fc55bd4f44761aa9363db0f38360adf60e743ba3b902788bb254637f6074df62460400000003a973b7134b7fcbcb1fe70fdfaaf056c209a9f5dd77800eb37b065ca8317cbb3a980d2dd2285639f72d476c48c7f5eb658aa18bee88caf689b562278dee127890445df562c183ed7279f2f8e37ba249447439884d5b7030eac6485112eb07ea2d010b
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD gatewaysdeposit 897a4e52749eb4a89d251f85cce16cbff6b09209d900b191610d68bf631f8d0d 1116196 KMD 907812ee8d2762b589f6ca88ee8ba18a65ebf5c7486c472df7395628d22d0d98 0 010000000197d6ea16c68dc5db95b72e029a0e23cb403ae0a33b561b863963cfd9cbfec747000000006b483045022100aca47515602989979b514b6211c375e4d0d9471dd8297c5238c12245ad01dd830220191105caf1b63313c6988194f5f03fd6f70d4a30edc7820add1185d35edff1bb012102924664b536f3710a8e8abea38bb4bf71b470a653a4dceabd50df08d7b2a38436ffffffff0310270000000000001976a9141b355cb6b76cab1b16cb873db8828fe5d2521ae488ac80969800000000001976a914f0d1fc29f8962ac2805a1659192d9ad26794d22988ac38c7fa00000000001976a91482804b943dd6a2008af73f8ba40449c062f0935188ac50e6fd5b 04000000380b8fd2b9bdf570358980a4c9fc94e418ac656913999b5f9a016ec5afc46b0b188320f231637a0ded0b0bdada1f34c81ad5873b8c3f096b2014018af13f43980000000000000000000000000000000000000000000000000000000000000000b2e6fd5ba786061d57fff87a00000000000046430000000000000200000000000000000000000000fd40050035435dd2c1df5c20cb48e0617b6cee81f5349f0735b36fe93f17f82d678ad3eb374d0e398b049fddcb21a4d7ddf7345867c6a363eddcfe61f31d49dbc35652794c60da61bd5f164fd554f17b5bd669f636744412822af2ebd0f318dacb71514720164c59c392ef2b1ccc3a5dc5c9c83cd37a11f98b97c8f5170a357a972ec3cacbeb0dab34b757354883b46a598f2b93fcd735b4163db6b2b037f7d7d71a773e909ac4ce3f1228012d5bebfd9edad9842ae8c6cddf6942c543594b85013591a604c4223a3d2e007ed25f5994e9d8f6b6a704daf57cad41aea9609923612eee2fc55ad075c91c23a8cc46af9a45a7390c537d2e2302994239ae44230537ceaa2188e7f4eb6a0ab55471d152b9177e9fd90843504f29d3e92fd3d7142caae018b51318ec6b86083b7e2d155ce868f6b673b13cf1ed59107d15c6c84201441dde14074930f4755ec64975f354a99bd957021c073768f575dde3ab020dd73b488e2d03d57bc414a16d45b3e2052b24fb2360ec5f73524525fc59d2151b89310b19764541b801ad72171085bc6275832222484b8d7ee6ed91ab6a544c45af5c4d8445b0624f04a234aec6997eecf007f0e971eea33b21e45ba8f72825fa84605cdfa929aeb6dc425f2612000e7ce2ba04ff8c53061154eb38cba7f6d0bfe5dab031dadea2095e01e93f9e063d0b42e412f865572625f77aa8b10b58f7b0428ea0ff530ea10d37150496bb181e37fc5814ad524ce4618955e9158b6aebb956b02b961f920ee48eb5a08efc39d27fc2fd4ec175e38798bcca7331a7b5da2ca6c56fcb98e740c2f471eac6b67ced78125c5fcecd4f76eac1d76233aa58ed808e398b9e2b1eaa74e773d18276b732239403ce0c452cb26f0f34156a0a63e007ccfbd76f168fb941fbd2fbe23b57e519835c804ace6e22e281b3d0adda7c4b93a87d94500103315c780fe91ee67320a422eecb4a6daedc2d774567bfebc1d5b72fa693178f3443aa1eb47f18d6931f7b0fc6ec151caad4eae5f787c2a963c3963ffc924ba66a7ea1754763faf2884de0c86a0f75fe7f8dfb1265b449184668cb7348520810cf731663f5180ac31642d6b135d5ce7de88ba63d6db3d6c5dfa19492281dfed3b3765451717f3497ac2b4c040e2e4e77219b2586c227cd138b8d94ccc273fbfbb51a35523870c503e2d8527b840ced11917075e8a41ae9616f1df8d41df5bae39c6d6de5bb8d43d401bb9089723db59f0f06aa4fdf4145a905812ef799eb574abb9985de878a289e5f4b1256ca2121d553465f44065580cb5bde170459d1c22e8d388cbec9e37dc3cca07e489a9859942a9ccef4a5e45eed7228b94c86d10a233b5a1ddfcb1735cb9b16de6e8f49f3c841796acba31a8e9c90b531952ed03bd72e0b00fa3373ea4bc845d7469afae305639c772285a5223bf2d86a12c92312dc19db86400c6760b9e75af40ce4c16278bba8a804d5a69b88290dd4c2b43423bee9eb97c54261f956a32d80fdd3f421d1199ee45d42ad657e928be2e9fa54d844cff60b06bc525ce54daca9689e0616bfdbdbc36e09bea11a276d25d3ca9a80ed7109183784dfd1d23b7c791a7913a633e2d28948c655e68ade706654e38f717fe29119af4282430c8d1f702a52ea189f1e9e6faafb213205a195dab1c2d01dc6a3711f671ea118e8a3c995632903c58ebbd4eae5dbc4555b24c1649e89e03efb92134b9e24fb9fc649462f928d992fa33d45edcb4ef13f0d5c2cb6663e7dbf2414b5ed617e56b8715ace6910807e4a901ba603dab4092f9eeb46566ec3f38f3a1789c60822530c390d19b1d939217b7a691abb91454fce76cccf3557ddb3fc55bd4f44761aa9363db0f38360adf60e743ba3b902788bb254637f6074df62460400000003a973b7134b7fcbcb1fe70fdfaaf056c209a9f5dd77800eb37b065ca8317cbb3a980d2dd2285639f72d476c48c7f5eb658aa18bee88caf689b562278dee127890445df562c183ed7279f2f8e37ba249447439884d5b7030eac6485112eb07ea2d010b 02d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d 0.1
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "01000000010db4b1686d1f27de5e2a11c793dfd30f09b296754f95ae8649858cca97d5b07a0000000049483045022100ad6bc26f0c66b89f5d63aff251c78965a50201f909a997b8ed6469da0334aa0c0220136d71f5ad1f4496785df81864f9be3ae7b8dd012dae08d59fd544869eacb3ba01ffffffff041027000000000000302ea22c80205fd998129698de9cf1455f4f4795794c9e57bf1fd5f28598b5e6c0322de5d0358103120c008203000401cc1027000000000000232102980d2dd2285639f72d476c48c7f5eb658aa18bee88caf689b562278dee127890acd02a724e18090000232102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9dac0000000000000000fd04096a4d0009f144034b4d440d8d1f63bf680d6191b100d90992b0f6bf6ce1cc851f259da8b49e74524e7a890121024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0012fea85ecfda42975a2aaed72e946792df41a486033af8dc45ab1e4ddcb34b1b424081100980d2dd2285639f72d476c48c7f5eb658aa18bee88caf689b562278dee12789000000000fdfd360604000000380b8fd2b9bdf570358980a4c9fc94e418ac656913999b5f9a016ec5afc46b0b188320f231637a0ded0b0bdada1f34c81ad5873b8c3f096b2014018af13f43980000000000000000000000000000000000000000000000000000000000000000b2e6fd5ba786061d57fff87a00000000000046430000000000000200000000000000000000000000fd40050035435dd2c1df5c20cb48e0617b6cee81f5349f0735b36fe93f17f82d678ad3eb374d0e398b049fddcb21a4d7ddf7345867c6a363eddcfe61f31d49dbc35652794c60da61bd5f164fd554f17b5bd669f636744412822af2ebd0f318dacb71514720164c59c392ef2b1ccc3a5dc5c9c83cd37a11f98b97c8f5170a357a972ec3cacbeb0dab34b757354883b46a598f2b93fcd735b4163db6b2b037f7d7d71a773e909ac4ce3f1228012d5bebfd9edad9842ae8c6cddf6942c543594b85013591a604c4223a3d2e007ed25f5994e9d8f6b6a704daf57cad41aea9609923612eee2fc55ad075c91c23a8cc46af9a45a7390c537d2e2302994239ae44230537ceaa2188e7f4eb6a0ab55471d152b9177e9fd90843504f29d3e92fd3d7142caae018b51318ec6b86083b7e2d155ce868f6b673b13cf1ed59107d15c6c84201441dde14074930f4755ec64975f354a99bd957021c073768f575dde3ab020dd73b488e2d03d57bc414a16d45b3e2052b24fb2360ec5f73524525fc59d2151b89310b19764541b801ad72171085bc6275832222484b8d7ee6ed91ab6a544c45af5c4d8445b0624f04a234aec6997eecf007f0e971eea33b21e45ba8f72825fa84605cdfa929aeb6dc425f2612000e7ce2ba04ff8c53061154eb38cba7f6d0bfe5dab031dadea2095e01e93f9e063d0b42e412f865572625f77aa8b10b58f7b0428ea0ff530ea10d37150496bb181e37fc5814ad524ce4618955e9158b6aebb956b02b961f920ee48eb5a08efc39d27fc2fd4ec175e38798bcca7331a7b5da2ca6c56fcb98e740c2f471eac6b67ced78125c5fcecd4f76eac1d76233aa58ed808e398b9e2b1eaa74e773d18276b732239403ce0c452cb26f0f34156a0a63e007ccfbd76f168fb941fbd2fbe23b57e519835c804ace6e22e281b3d0adda7c4b93a87d94500103315c780fe91ee67320a422eecb4a6daedc2d774567bfebc1d5b72fa693178f3443aa1eb47f18d6931f7b0fc6ec151caad4eae5f787c2a963c3963ffc924ba66a7ea1754763faf2884de0c86a0f75fe7f8dfb1265b449184668cb7348520810cf731663f5180ac31642d6b135d5ce7de88ba63d6db3d6c5dfa19492281dfed3b3765451717f3497ac2b4c040e2e4e77219b2586c227cd138b8d94ccc273fbfbb51a35523870c503e2d8527b840ced11917075e8a41ae9616f1df8d41df5bae39c6d6de5bb8d43d401bb9089723db59f0f06aa4fdf4145a905812ef799eb574abb9985de878a289e5f4b1256ca2121d553465f44065580cb5bde170459d1c22e8d388cbec9e37dc3cca07e489a9859942a9ccef4a5e45eed7228b94c86d10a233b5a1ddfcb1735cb9b16de6e8f49f3c841796acba31a8e9c90b531952ed03bd72e0b00fa3373ea4bc845d7469afae305639c772285a5223bf2d86a12c92312dc19db86400c6760b9e75af40ce4c16278bba8a804d5a69b88290dd4c2b43423bee9eb97c54261f956a32d80fdd3f421d1199ee45d42ad657e928be2e9fa54d844cff60b06bc525ce54daca9689e0616bfdbdbc36e09bea11a276d25d3ca9a80ed7109183784dfd1d23b7c791a7913a633e2d28948c655e68ade706654e38f717fe29119af4282430c8d1f702a52ea189f1e9e6faafb213205a195dab1c2d01dc6a3711f671ea118e8a3c995632903c58ebbd4eae5dbc4555b24c1649e89e03efb92134b9e24fb9fc649462f928d992fa33d45edcb4ef13f0d5c2cb6663e7dbf2414b5ed617e56b8715ace6910807e4a901ba603dab4092f9eeb46566ec3f38f3a1789c60822530c390d19b1d939217b7a691abb91454fce76cccf3557ddb3fc55bd4f44761aa9363db0f38360adf60e743ba3b902788bb254637f6074df62460400000003a973b7134b7fcbcb1fe70fdfaaf056c209a9f5dd77800eb37b065ca8317cbb3a980d2dd2285639f72d476c48c7f5eb658aa18bee88caf689b562278dee127890445df562c183ed7279f2f8e37ba249447439884d5b7030eac6485112eb07ea2d010b2102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d809698000000000000000000"
}
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 01000000010db4b1686d1f27de5e2a11c793dfd30f09b296754f95ae8649858cca97d5b07a0000000049483045022100ad6bc26f0c66b89f5d63aff251c78965a50201f909a997b8ed6469da0334aa0c0220136d71f5ad1f4496785df81864f9be3ae7b8dd012dae08d59fd544869eacb3ba01ffffffff041027000000000000302ea22c80205fd998129698de9cf1455f4f4795794c9e57bf1fd5f28598b5e6c0322de5d0358103120c008203000401cc1027000000000000232102980d2dd2285639f72d476c48c7f5eb658aa18bee88caf689b562278dee127890acd02a724e18090000232102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9dac0000000000000000fd04096a4d0009f144034b4d440d8d1f63bf680d6191b100d90992b0f6bf6ce1cc851f259da8b49e74524e7a890121024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0012fea85ecfda42975a2aaed72e946792df41a486033af8dc45ab1e4ddcb34b1b424081100980d2dd2285639f72d476c48c7f5eb658aa18bee88caf689b562278dee12789000000000fdfd360604000000380b8fd2b9bdf570358980a4c9fc94e418ac656913999b5f9a016ec5afc46b0b188320f231637a0ded0b0bdada1f34c81ad5873b8c3f096b2014018af13f43980000000000000000000000000000000000000000000000000000000000000000b2e6fd5ba786061d57fff87a00000000000046430000000000000200000000000000000000000000fd40050035435dd2c1df5c20cb48e0617b6cee81f5349f0735b36fe93f17f82d678ad3eb374d0e398b049fddcb21a4d7ddf7345867c6a363eddcfe61f31d49dbc35652794c60da61bd5f164fd554f17b5bd669f636744412822af2ebd0f318dacb71514720164c59c392ef2b1ccc3a5dc5c9c83cd37a11f98b97c8f5170a357a972ec3cacbeb0dab34b757354883b46a598f2b93fcd735b4163db6b2b037f7d7d71a773e909ac4ce3f1228012d5bebfd9edad9842ae8c6cddf6942c543594b85013591a604c4223a3d2e007ed25f5994e9d8f6b6a704daf57cad41aea9609923612eee2fc55ad075c91c23a8cc46af9a45a7390c537d2e2302994239ae44230537ceaa2188e7f4eb6a0ab55471d152b9177e9fd90843504f29d3e92fd3d7142caae018b51318ec6b86083b7e2d155ce868f6b673b13cf1ed59107d15c6c84201441dde14074930f4755ec64975f354a99bd957021c073768f575dde3ab020dd73b488e2d03d57bc414a16d45b3e2052b24fb2360ec5f73524525fc59d2151b89310b19764541b801ad72171085bc6275832222484b8d7ee6ed91ab6a544c45af5c4d8445b0624f04a234aec6997eecf007f0e971eea33b21e45ba8f72825fa84605cdfa929aeb6dc425f2612000e7ce2ba04ff8c53061154eb38cba7f6d0bfe5dab031dadea2095e01e93f9e063d0b42e412f865572625f77aa8b10b58f7b0428ea0ff530ea10d37150496bb181e37fc5814ad524ce4618955e9158b6aebb956b02b961f920ee48eb5a08efc39d27fc2fd4ec175e38798bcca7331a7b5da2ca6c56fcb98e740c2f471eac6b67ced78125c5fcecd4f76eac1d76233aa58ed808e398b9e2b1eaa74e773d18276b732239403ce0c452cb26f0f34156a0a63e007ccfbd76f168fb941fbd2fbe23b57e519835c804ace6e22e281b3d0adda7c4b93a87d94500103315c780fe91ee67320a422eecb4a6daedc2d774567bfebc1d5b72fa693178f3443aa1eb47f18d6931f7b0fc6ec151caad4eae5f787c2a963c3963ffc924ba66a7ea1754763faf2884de0c86a0f75fe7f8dfb1265b449184668cb7348520810cf731663f5180ac31642d6b135d5ce7de88ba63d6db3d6c5dfa19492281dfed3b3765451717f3497ac2b4c040e2e4e77219b2586c227cd138b8d94ccc273fbfbb51a35523870c503e2d8527b840ced11917075e8a41ae9616f1df8d41df5bae39c6d6de5bb8d43d401bb9089723db59f0f06aa4fdf4145a905812ef799eb574abb9985de878a289e5f4b1256ca2121d553465f44065580cb5bde170459d1c22e8d388cbec9e37dc3cca07e489a9859942a9ccef4a5e45eed7228b94c86d10a233b5a1ddfcb1735cb9b16de6e8f49f3c841796acba31a8e9c90b531952ed03bd72e0b00fa3373ea4bc845d7469afae305639c772285a5223bf2d86a12c92312dc19db86400c6760b9e75af40ce4c16278bba8a804d5a69b88290dd4c2b43423bee9eb97c54261f956a32d80fdd3f421d1199ee45d42ad657e928be2e9fa54d844cff60b06bc525ce54daca9689e0616bfdbdbc36e09bea11a276d25d3ca9a80ed7109183784dfd1d23b7c791a7913a633e2d28948c655e68ade706654e38f717fe29119af4282430c8d1f702a52ea189f1e9e6faafb213205a195dab1c2d01dc6a3711f671ea118e8a3c995632903c58ebbd4eae5dbc4555b24c1649e89e03efb92134b9e24fb9fc649462f928d992fa33d45edcb4ef13f0d5c2cb6663e7dbf2414b5ed617e56b8715ace6910807e4a901ba603dab4092f9eeb46566ec3f38f3a1789c60822530c390d19b1d939217b7a691abb91454fce76cccf3557ddb3fc55bd4f44761aa9363db0f38360adf60e743ba3b902788bb254637f6074df62460400000003a973b7134b7fcbcb1fe70fdfaaf056c209a9f5dd77800eb37b065ca8317cbb3a980d2dd2285639f72d476c48c7f5eb658aa18bee88caf689b562278dee127890445df562c183ed7279f2f8e37ba249447439884d5b7030eac6485112eb07ea2d010b2102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d809698000000000000000000
```


<collapse-text hidden title="Response">


```bash
07d79e39354cc38a76dfe2ca8a5fb711432192237608ea066621662f13e0c08e
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD gatewaysclaim 897a4e52749eb4a89d251f85cce16cbff6b09209d900b191610d68bf631f8d0d KMD 07d79e39354cc38a76dfe2ca8a5fb711432192237608ea066621662f13e0c08e 02d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d 0.1
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "01000000030a9a982a898012f4cc982796f381f16c9e2e5fe28e0be58ad59c7c90409530f8020000004847304402207959e4befae9e917cde7d6ba6f5e62e4cf679858b1a5c8b1eb270b1c7eac7c7e0220503ea9a24245db21b4db8ae68e48da6c5d33ef436371c6d03872d45d1364047c01ffffffffc6fc3b75a37a6ed10507a1bb73f2c5d5c8f75bcb358b0aa4bab3b80b5aa39f19010000007b4c79a276a072a26ba067a565802103ea9c062b9652d8eff34879b504eda0717895d27597aaeb60347d65eed96ccb408140d4c46b8282d42d7e7ebe99361264c21b9ee221b7b3a47e1549e06bf06659fa194298618a2969a421543753a5994ebc3944e93ac6072a233ab617b229b3922a52a100af038001f1a10001ffffffff8ec0e0132f66216606ea08762392214311b75f8acae2df768ac34c35399ed707000000007b4c79a276a072a26ba067a565802102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d8140f3938953c9087e1e25c31263c5a717dd59d2f7d6f0815cfd7c0cb01a6c4d586b630b11cca1e60a19036d937095941660e488a07494fc721471d4a53f5eb89a25a100af038001f1a10001ffffffff048096980000000000302ea22c8020abd72b18452f1bc72f4312dbb1cd341b7c7f38a994ddacd8b35412231f01cb088103120c008203000401cc804a5d0500000000302ea22c802091abda62a548f9c7f5beb19d16f01714ae3d4e526f3266fc8d347d6123f3d77b8103120c008203000401cc1027000000000000232102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9dac0000000000000000936a4c90e374bff603b64f309e344e34b10fd2053db59788909914f8488a7f73ddddc2165d31034b4d440d8d1f63bf680d6191b100d90992b0f6bf6ce1cc851f259da8b49e74524e7a898ec0e0132f66216606ea08762392214311b75f8acae2df768ac34c35399ed7072102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d809698000000000000000000"
}
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 01000000030a9a982a898012f4cc982796f381f16c9e2e5fe28e0be58ad59c7c90409530f8020000004847304402207959e4befae9e917cde7d6ba6f5e62e4cf679858b1a5c8b1eb270b1c7eac7c7e0220503ea9a24245db21b4db8ae68e48da6c5d33ef436371c6d03872d45d1364047c01ffffffffc6fc3b75a37a6ed10507a1bb73f2c5d5c8f75bcb358b0aa4bab3b80b5aa39f19010000007b4c79a276a072a26ba067a565802103ea9c062b9652d8eff34879b504eda0717895d27597aaeb60347d65eed96ccb408140d4c46b8282d42d7e7ebe99361264c21b9ee221b7b3a47e1549e06bf06659fa194298618a2969a421543753a5994ebc3944e93ac6072a233ab617b229b3922a52a100af038001f1a10001ffffffff8ec0e0132f66216606ea08762392214311b75f8acae2df768ac34c35399ed707000000007b4c79a276a072a26ba067a565802102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d8140f3938953c9087e1e25c31263c5a717dd59d2f7d6f0815cfd7c0cb01a6c4d586b630b11cca1e60a19036d937095941660e488a07494fc721471d4a53f5eb89a25a100af038001f1a10001ffffffff048096980000000000302ea22c8020abd72b18452f1bc72f4312dbb1cd341b7c7f38a994ddacd8b35412231f01cb088103120c008203000401cc804a5d0500000000302ea22c802091abda62a548f9c7f5beb19d16f01714ae3d4e526f3266fc8d347d6123f3d77b8103120c008203000401cc1027000000000000232102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9dac0000000000000000936a4c90e374bff603b64f309e344e34b10fd2053db59788909914f8488a7f73ddddc2165d31034b4d440d8d1f63bf680d6191b100d90992b0f6bf6ce1cc851f259da8b49e74524e7a898ec0e0132f66216606ea08762392214311b75f8acae2df768ac34c35399ed7072102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d809698000000000000000000
```


<collapse-text hidden title="Response">


```bash
9bf287d544c6f5597ccf67641398718398cd79fde02caa32a4b338b5a923cb61
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD tokenbalance 315d16c2dddd737f8a48f81499908897b53d05d20fb1344e349e304fb603f6bf
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "CCaddress": "RTjscp9uKYQ8bT3jmShC8mEbuz3qwtGWor",
  "tokenid": "315d16c2dddd737f8a48f81499908897b53d05d20fb1344e349e304fb603f6bf",
  "balance": 10000000
}
```

</collapse-text>


#### User Withdraws Funds

```bash
./komodo-cli -ac_name=HELLOWORLD gatewayswithdraw 897a4e52749eb4a89d251f85cce16cbff6b09209d900b191610d68bf631f8d0d KMD 0271bc6b553f5f763ca7f64457710f8a0b3f5273b2941edc5091ca41cec39b7328 0.1
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "01000000020e2778e5c0917b00a995ffd0e027ac896492b70b2004ca0096d5309bc1d695ce0000000048473044022072bd3e74c1fb6a56111fc34caab1d605cedfbcb0a9dcd1a4c8d0dae9db61d43902205ccea739077b3374559353af3392e637b7c462ca699f9b9dba786b5398491b4201ffffffff8425c1bf730444ceac45a47376164d66a156e6c2a48116ec14cd17a88f8ab8e5010000007b4c79a276a072a26ba067a565802102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d814051e39b89bace8226f3ca1779b754f2b57ee480e9636b16322bb36a89ec22de967ea66cdc906debb5f6b7c26a51ac2d089966aeb92d07aacc43507b1555c02313a100af038001f1a10001ffffffff058096980000000000302ea22c802091abda62a548f9c7f5beb19d16f01714ae3d4e526f3266fc8d347d6123f3d77b8103120c008203000401cc102700000000000023210271bc6b553f5f763ca7f64457710f8a0b3f5273b2941edc5091ca41cec39b7328ac1027000000000000302ea22c802091abda62a548f9c7f5beb19d16f01714ae3d4e526f3266fc8d347d6123f3d77b8103120c008203000401ccd02a724e18090000232102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9dac0000000000000000536a4c50f157bff603b64f309e344e34b10fd2053db59788909914f8488a7f73ddddc2165d31034b4d44210271bc6b553f5f763ca7f64457710f8a0b3f5273b2941edc5091ca41cec39b7328809698000000000000000000"
}
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 01000000020e2778e5c0917b00a995ffd0e027ac896492b70b2004ca0096d5309bc1d695ce0000000048473044022072bd3e74c1fb6a56111fc34caab1d605cedfbcb0a9dcd1a4c8d0dae9db61d43902205ccea739077b3374559353af3392e637b7c462ca699f9b9dba786b5398491b4201ffffffff8425c1bf730444ceac45a47376164d66a156e6c2a48116ec14cd17a88f8ab8e5010000007b4c79a276a072a26ba067a565802102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d814051e39b89bace8226f3ca1779b754f2b57ee480e9636b16322bb36a89ec22de967ea66cdc906debb5f6b7c26a51ac2d089966aeb92d07aacc43507b1555c02313a100af038001f1a10001ffffffff058096980000000000302ea22c802091abda62a548f9c7f5beb19d16f01714ae3d4e526f3266fc8d347d6123f3d77b8103120c008203000401cc102700000000000023210271bc6b553f5f763ca7f64457710f8a0b3f5273b2941edc5091ca41cec39b7328ac1027000000000000302ea22c802091abda62a548f9c7f5beb19d16f01714ae3d4e526f3266fc8d347d6123f3d77b8103120c008203000401ccd02a724e18090000232102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9dac0000000000000000536a4c50f157bff603b64f309e344e34b10fd2053db59788909914f8488a7f73ddddc2165d31034b4d44210271bc6b553f5f763ca7f64457710f8a0b3f5273b2941edc5091ca41cec39b7328809698000000000000000000
```


<collapse-text hidden title="Response">


```bash
79d41ffefa359a7ae2f62adf728a3ec3f3d2653889780ed9776bf9b74fe9a6fe
```

</collapse-text>

# Introduction to Antara Tutorials

Welcome to the Antara tutorial documentation.

This section contains tutorials that are specifically designed for the aspects of Komodo Smart Chain software that deal with the Antara framework. 

The Antara framework encompasses many of the enhancements and innovations that Komodo adds to upstream technologies. Aspects of Antara include the Antara Customizations for a Smart Chain and Antara Modules, which allow for advanced blockchain functionality.

For tutorials regarding other Komodo software, such as <b>AtomicDEX</b>, which offers cross-chain atomic-swap compatibility, please see the respective documentation centers.

For a targeted learning approach to Komodo's Smart Chain software, please see the Learning Launchpad.

[<b>Link to Learning Launchpad</b>](../../../basic-docs/start-here/learning-launchpad/learning-path-outlines.html)

# Musig Module Tutorial

## Installation

MuSig is currently only available on MacOS and Linux operating systems.

Please check with the Komodo team on [Discord](https://komodoplatform.com/discord) for information regarding Windows functionality.

### Install Dependencies

Ensure that local repositories are up to date:

```bash
sudo apt-get update && sudo apt-get upgrade -y
```

Install Dependencies:

```bash
sudo apt-get install build-essential pkg-config libc6-dev m4 g++-multilib autoconf libtool ncurses-dev unzip git python zlib1g-dev wget bsdmainutils automake libboost-all-dev libssl-dev libprotobuf-dev protobuf-compiler libgtest-dev libqt4-dev libqrencode-dev libdb++-dev ntp ntpdate software-properties-common curl libcurl4-gnutls-dev cmake clang libsodium-dev -y
```

### Build instructions

Build `komodod` by executing the following series of commands. Each line should be executed separately:

```bash
git clone https://github.com/jl777/komodo
cd komodo
git checkout jl777
./zcutil/fetch-params.sh
./zcutil/build.sh -j$(nproc)
```

Compile the appropriate library:

```bash
cd src/cc
./makecclib
cp sudokucc.so ../libcc.so
cd ../..
make -j$(nproc)
```

### Update

Update the `komodod` daemon by executing the following series of commands. Each line should be executed separately:

```bash
cd komodo
git checkout jl777
git pull
cd src/cc
./makecclib
cd ../..
make -j$(nproc)
```

### Launch the Asset Chain

Change into the `~/komodo/src` directory:

```bash
cd ~/komodo/src
```

Launch the MuSig asset chain using the following launch parameters.

```bash
./komodod -ac_name=MUSIG -ac_supply=100000 -ac_reward=10000000 -pubkey=<yourpub> -ac_cclib=sudoku -ac_cc=2 -addnode=5.9.102.210 &
```

### Obtain a Pubkey

Without a pubkey, the MuSig asset chain will not function properly on the user's local machine. Follow these instruction for obtaining and setting a pubkey:

- [Instructions for obtaining and setting a pubkey](../customconsensus/custom-consensus-instructions.html#creating-and-launching-with-a-pubkey)

Once the asset chain is relaunched with the new pubkey included as a launch parameter, the MuSig asset chain is prepared for use.

### Acquire Funds for Testing

::: tip Note

The reader should launch the asset chain with a pubkey whose private key is already imported to the wallet. If this is not the case, restart the asset chain with an appropriate pubkey, or use the [importprivkey](../komodo-api/wallet.html#importprivkey) method to import the private key of the desired pubkey.

:::

The MuSig asset chain has an available faucet. The faucet allows a user to obtain a nominal amount of funds for testing and orientation purposes.

Ensure that the terminal's working directory is in the `~/komodo/src` directory:

```bash
cd ~/komodo/src
```

Execute the `faucetget` method:

```bash
./komodo-cli -ac_name=MUSIG faucetget
```

This method returns a hex value in the terminal. Select the entire hex value and copy it to the clipboard. (Use `CTRL + SHFT + C` to copy within the terminal)

Broadcast the hex value using the `sendrawtransaction` method:

```bash
./komodo-cli -ac_name=MUSIG sendrawtransaction <hex copied from the above response>
```

Wait for the transaction to be confirmed.

Once the broadcast transaction is confirmed, check the balance using the `getbalance` method:

```bash
./komodo-cli -ac_name=MUSIG getbalance
```

There should be a small amount of funds in the balance.

## Full Example

The aim of this example is to create a `20f2` MuSig pubkey, fund it, and spend from it.

To accomplish this, two nodes are necessary.

In this MuSig example we use the following pubkeys on our two nodes:

- Node1's daemon is launched using the pubkey: `0225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270a`
- Node2's daemon is launched using the pubkey: `02d3431950c2f0f9654217b6ce3d44468d3a9ca7255741767fdeee7c5ec6b47567`

The `EVALCODE` for the MuSig module is `18`.

For this example, we use [the normal array formatting for `cclib` methods](../komodo-api/cclib.html#cclib-formatting), as we are not creating a bash script.

Steps 1 through 5 and 11 through 12 need to be executed only on the first node.

#### Step 1: combine

Use the [combine](../customconsensus/musig.html#combine) method to create a `combined_pk` address:

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib combine 18 '["0225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270a","02d3431950c2f0f9654217b6ce3d44468d3a9ca7255741767fdeee7c5ec6b47567"]'
```


<collapse-text hidden title="Response">


```json
{
  "pkhash": "8897e150bfb07d3f967ffadb4b0f3c84ea73a94c0d715c4b7e6d9c816c5113a9",
  "combined_pk": "03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a",
  "result": "success"
}
```

</collapse-text>


Copy the values of `pkhash` and `combined_pk` and save them in a secure location for later use.

#### Step 2: send

Use the [send](../customconsensus/musig.html#send) method to send `1` coin to the `combined_pk` address:

Command:

```bash
./komodo-cli -ac_name=MUSIG  cclib send 18 '["03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a",1]'
```


<collapse-text hidden title="Response">


```json
{
  "hex": "0400008085202f890b02b1bdd8707f82bc6f4cdeb4756eb04dfc3cc7a4b5ac38a388c0205cf8f31a0e0000000048473044022004de31b5132f03f761fc0d0d9761efbf77bb27b07ee99f2cc54928e2150f1f16022069381b36bb9839cc9cb3e1d584e00dbd52efadf7e2f3fa092e0bcca839cdce6801ffffffff04949d5bf1722c5df04f58cf2c7e662f32ab65de2f7990ce4c734df4f2991eb60000000049483045022100ab3ab2bb95ef095763dd3eeb56961d1234aa25efd91a30fa14e397717368e6a0022048d7f8268463cfb44f34467bd77eb2aee962eaec09a079741c75c5de898b4f6c01ffffffff0476a06188887bf93bec4e64a3a5681b5e271cb7055a11d0667dc565e498b6190000000048473044022022ef03c33b5942b1af16f7e4a9acd2aa485d73f6f6b5e0a01e15f70238cd85cd022063779c69511ee4eba179b40ce28d80da22d43f19110be2a9a97d0b47d6a5cca201ffffffff045587699381853735482dbfb1fe25dda8d5a7a238c05b872ecfcd97be38232f00000000484730440220051e6047dd9e82b004c29a2837bf127f94caa638c65d96c761371c18ff36170002204e73ddfbbe748f295d7a93e46d942618f291d302b7a666b78b49ab38594a89ac01ffffffff0426d8098ed0c5ee19ac8d4254ec9887ab7a231c68a8d9b024a50f417f0a94ff0000000049483045022100ebd193262a04f8c9cf1872527d2a7d4933222f8ce8ea11add90e263c483ca56a02204a29902ae6b31dc41f84b5ffad3b2076755ad19f25be47479704b2ab5e37463a01ffffffff040e294b76ca4492909b75b829566b3702b35245595e8c4806b7ef6a7f612dd6000000004847304402201573d230af50aa6d326b607ac6ba77bb15c1a143256e5141197ce6729195b0e602201301be6ad22ba5599597205cdfb7e2cf6823ce4597e5b902b6d4336958e0fbe101ffffffff03d9a453070627c94d940f57b40829713ee6b6bce4d801e591117c801221225900000000494830450221009d5eec551265274ade816fdb3a0dfee20e716a7d3f56155b698a9d0c41ccd11202202e811c4611ebf982b34db8a43002c759c54a077023ced1498421c4af2b12a0f901ffffffff03ce7cb872bdfdf264576c45ed899c00731959051cade1a19b088eabc02e07780000000049483045022100a9c8c795e34a393fafb839ef4bbf11e4adf04b4c8a8493ef0bd2353e7a1ddd430220251ff7eb5ca3d2ed4ee4145906532af803caaed756ff3d21e86ac4876333067e01ffffffff030d66186013342f71335bc67d0d87240b4a27809e67ba55e01dd72e7ae1b0af0000000049483045022100d4c82867562aa040a7695ffd53056018e0dc3a071d971b3774cdb8511b0f49aa022029b72c5af1b9c16e27d81827d478910ec3135415037cf2b3492922ff618538bc01ffffffff02f9b92abfa0324272e0ce465b856e6d9b53e3e2e0828934c8a0c8c2c10e67d5000000004847304402205df4c99c581bfe95ea95740320b16c423531663b42e25b97315d3126250c24a202206dff5da29fbb0fe21ae6ce3da7bac1e502feb8fdd7b803c0fafa6541e80ec0ff01ffffffff02bd8679e8383e6d9c4a10917b68b8918ed3f518fe2deef5b23e0012461fbf370000000049483045022100a04210427173ea0721f3cf859b99328c8e234ba39250c033aebfb37fb2c5a1d502200d5cb16ed0dccc5dfc0385a8763340cf98a162e863994069354a5fee187b8bd401ffffffff031008f60500000000302ea22c8020c71ddb3aac7f9b9e4bdacf032aaa8b8e4433c4ff9f8a43cebb9c1f5da96928a48103120c008203000401cc604898000000000023210225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270aac0000000000000000266a2412782103d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a000000003f0800000000000000000000000000",
  "txid": "09daa45cb6e17028f9568347291a993cbf29c152a527b53e9ac0925d4900c293",
  "result": "success"
}
```

</collapse-text>


Copy the `hex` value to your clipboard.

#### Step 3: Broadcast the hex Value and Retrieve the sendtxid

Use the [sendrawtransaction](../komodo-api/wallet.html#sendrawtransaction) method to broadcast the raw hex value:

Command:

```bash
./komodo-cli -ac_name=MUSIG  sendrawtransaction 0400008085202f890b02b1bdd8707f82bc6f4cdeb4756eb04dfc3cc7a4b5ac38a388c0205cf8f31a0e0000000048473044022004de31b5132f03f761fc0d0d9761efbf77bb27b07ee99f2cc54928e2150f1f16022069381b36bb9839cc9cb3e1d584e00dbd52efadf7e2f3fa092e0bcca839cdce6801ffffffff04949d5bf1722c5df04f58cf2c7e662f32ab65de2f7990ce4c734df4f2991eb60000000049483045022100ab3ab2bb95ef095763dd3eeb56961d1234aa25efd91a30fa14e397717368e6a0022048d7f8268463cfb44f34467bd77eb2aee962eaec09a079741c75c5de898b4f6c01ffffffff0476a06188887bf93bec4e64a3a5681b5e271cb7055a11d0667dc565e498b6190000000048473044022022ef03c33b5942b1af16f7e4a9acd2aa485d73f6f6b5e0a01e15f70238cd85cd022063779c69511ee4eba179b40ce28d80da22d43f19110be2a9a97d0b47d6a5cca201ffffffff045587699381853735482dbfb1fe25dda8d5a7a238c05b872ecfcd97be38232f00000000484730440220051e6047dd9e82b004c29a2837bf127f94caa638c65d96c761371c18ff36170002204e73ddfbbe748f295d7a93e46d942618f291d302b7a666b78b49ab38594a89ac01ffffffff0426d8098ed0c5ee19ac8d4254ec9887ab7a231c68a8d9b024a50f417f0a94ff0000000049483045022100ebd193262a04f8c9cf1872527d2a7d4933222f8ce8ea11add90e263c483ca56a02204a29902ae6b31dc41f84b5ffad3b2076755ad19f25be47479704b2ab5e37463a01ffffffff040e294b76ca4492909b75b829566b3702b35245595e8c4806b7ef6a7f612dd6000000004847304402201573d230af50aa6d326b607ac6ba77bb15c1a143256e5141197ce6729195b0e602201301be6ad22ba5599597205cdfb7e2cf6823ce4597e5b902b6d4336958e0fbe101ffffffff03d9a453070627c94d940f57b40829713ee6b6bce4d801e591117c801221225900000000494830450221009d5eec551265274ade816fdb3a0dfee20e716a7d3f56155b698a9d0c41ccd11202202e811c4611ebf982b34db8a43002c759c54a077023ced1498421c4af2b12a0f901ffffffff03ce7cb872bdfdf264576c45ed899c00731959051cade1a19b088eabc02e07780000000049483045022100a9c8c795e34a393fafb839ef4bbf11e4adf04b4c8a8493ef0bd2353e7a1ddd430220251ff7eb5ca3d2ed4ee4145906532af803caaed756ff3d21e86ac4876333067e01ffffffff030d66186013342f71335bc67d0d87240b4a27809e67ba55e01dd72e7ae1b0af0000000049483045022100d4c82867562aa040a7695ffd53056018e0dc3a071d971b3774cdb8511b0f49aa022029b72c5af1b9c16e27d81827d478910ec3135415037cf2b3492922ff618538bc01ffffffff02f9b92abfa0324272e0ce465b856e6d9b53e3e2e0828934c8a0c8c2c10e67d5000000004847304402205df4c99c581bfe95ea95740320b16c423531663b42e25b97315d3126250c24a202206dff5da29fbb0fe21ae6ce3da7bac1e502feb8fdd7b803c0fafa6541e80ec0ff01ffffffff02bd8679e8383e6d9c4a10917b68b8918ed3f518fe2deef5b23e0012461fbf370000000049483045022100a04210427173ea0721f3cf859b99328c8e234ba39250c033aebfb37fb2c5a1d502200d5cb16ed0dccc5dfc0385a8763340cf98a162e863994069354a5fee187b8bd401ffffffff031008f60500000000302ea22c8020c71ddb3aac7f9b9e4bdacf032aaa8b8e4433c4ff9f8a43cebb9c1f5da96928a48103120c008203000401cc604898000000000023210225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270aac0000000000000000266a2412782103d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a000000003f0800000000000000000000000000
```


<collapse-text hidden title="Response">


```bash
09daa45cb6e17028f9568347291a993cbf29c152a527b53e9ac0925d4900c293
```

</collapse-text>


The returned value is our `sendtxid`. Copy this to a secure location for later use.

#### Step 4: Obtain the change_script Value

Use the [getrawtransaction](../komodo-api/rawtransactions.html#getrawtransaction) method to decode the raw transaction. 

Command:

```bash
./komodo-cli -ac_name=MUSIG getrawtransaction 09daa45cb6e17028f9568347291a993cbf29c152a527b53e9ac0925d4900c293 1
```

In the response there are a series of `vout` values, each of which has an array of json objects. Search for the `vout` value that has the `"type":"pubkey"` key pair listed. In this object, retrieve the `hex` value from the `scriptPubkey`:

```json

... (omitted for brevity) ...

"vout": [

    ... (omitted for brevity) ...

    {
      "value": 0.09980000,
      "valueSat": 9980000,
      "n": 1,
      "scriptPubKey": {
        "asm": "0225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270a OP_CHECKSIG",
        "hex": "210225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270aac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": [
          "RUfCUd3UryKJ49baQvSuAs42wakNunvvfT"
        ]
      }
    },

    ... (omitted for brevity) ...

  ]

... (omitted for brevity) ...

```

This `hex` is our `change_script` value. Save this to a secure location for later use.

#### Step 5: calcmsg

Use the `calcmsg` method to calculate the `msg` value. The `calcmsg` method needs the `sendtxid` and `change_script` values retrieved from previous commands.

**cclib calcmsg 18 '["insert_sendtxid_here","insert_change_script_here"]'**

Command:

```bash
./komodo-cli -ac_name=MUSIG  cclib calcmsg 18 '["09daa45cb6e17028f9568347291a993cbf29c152a527b53e9ac0925d4900c293","210225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270aac"]'
```


<collapse-text hidden title="Response">


```json
{
  "msg": "3ef43614242afd3c57e02a75a3bc99342fea7c731f6190b791c0f99826789603",
  "result": "success"
}
```

</collapse-text>


Copy the `msg` value to a secure location for later use.

#### Step 6: session

From this point forward, all steps should be executed on both nodes 1 and 2.

After each step performed on each node, copy the relevant data to the opposing node.

##### Node 1

The following `session` command requires an array of arguments. The arguments are as follows:

1. `ind`: the index of the signatory in the set. In this example our current node, Node 1, is `0`
2. `numsigners`: the number of pubkeys participating in the multi-signature transaction
3. `combined_pk`: the `combined_pk` address, retrieved previously
4. `pkhash`: the `pkhash` value, retrieved previously
5. `msg`: the `msg` to be signed, retrieved previously

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib session 18 '[0,2,"03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a","8897e150bfb07d3f967ffadb4b0f3c84ea73a94c0d715c4b7e6d9c816c5113a9","3ef43614242afd3c57e02a75a3bc99342fea7c731f6190b791c0f99826789603"]'
```


<collapse-text hidden title="Response">


```json
{
  "myind": 0,
  "numsigners": 2,
  "commitment": "a886a3a3c57efec161f6f72554b66f837de89ffdabe0acc46ae4cd59aab8129e",
  "result": "success"
}
```

</collapse-text>


Copy the value of `commitment` both to a secure location and to Node 2.

##### Node 2

Execute the same command as before, only change the `ind` value from `0` to `1` to indicate Node 2.

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib session 18 '[1,2,"03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a","8897e150bfb07d3f967ffadb4b0f3c84ea73a94c0d715c4b7e6d9c816c5113a9","3ef43614242afd3c57e02a75a3bc99342fea7c731f6190b791c0f99826789603"]'
```


<collapse-text hidden title="Response">


```json
{
  "myind": 1,
  "numsigners": 2,
  "commitment": "2854473733147ebdbf2fb70b956c8086c9d7659ca0093627fe0371098f8bc003",
  "result": "success"
}
```

</collapse-text>


Copy the `commitment` value both to a secure location and to Node 1.

#### Step 7: commit

##### Node 1

The `commit` method requires an array of arguments. The arguments are as follows:

1. `pkhash`: the `pkhash` value, retrieved previously
2. `ind`: the index of the opposite node. In our example, Node 2 is `1`
3. `commitment`: the `commitment` value from the opposing node

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib commit 18 '["8897e150bfb07d3f967ffadb4b0f3c84ea73a94c0d715c4b7e6d9c816c5113a9",1,"2854473733147ebdbf2fb70b956c8086c9d7659ca0093627fe0371098f8bc003"]'
```


<collapse-text hidden title="Response">


```json
{
  "added_index": 1,
  "myind": 0,
  "nonce": "0379f6f42cf4c2cb30d064a6cac22ab6ffb3d93388d49b07f0623ff9bc8d191f89",
  "result": "success"
}
```

</collapse-text>


Copy the `nonce` value both to a secure location and to Node 2.

##### Node 2

Execute the same command as before, only change the value of `ind` to `0` to indicate Node 1.

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib commit 18 '["8897e150bfb07d3f967ffadb4b0f3c84ea73a94c0d715c4b7e6d9c816c5113a9",0,"a886a3a3c57efec161f6f72554b66f837de89ffdabe0acc46ae4cd59aab8129e"]'
```


<collapse-text hidden title="Response">


```json
{
  "added_index": 0,
  "myind": 1,
  "nonce": "02402fe26abd7ed2cf22d872a6b22ced4309aac8ec273b9c89e0f8f5b77f1574db",
  "result": "success"
}
```

</collapse-text>


Copy the `nonce` value both to a secure location and to Node 1.

#### Step 8: nonce

##### Node 1

The `nonce` method requires an array of arguments. The arguments are as follows:

1. `pkhash`: the `pkhash` value, retrieved previously
2. `ind`: the index of the opposing node. In our example, the index of Node 2 is `1`.
3. `nonce`: the `nonce` from the opposing node

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib nonce 18 '["8897e150bfb07d3f967ffadb4b0f3c84ea73a94c0d715c4b7e6d9c816c5113a9",1,"02402fe26abd7ed2cf22d872a6b22ced4309aac8ec273b9c89e0f8f5b77f1574db"]'
```


<collapse-text hidden title="Response">


```json
{
  "added_index": 1,
  "myind": 0,
  "partialsig": "dc913a9e7532c8edf2f822f482afdcf48c61919bf905fb77f6684a2d7e58d972",
  "result": "success"
}
```

</collapse-text>


Copy the `partialsig` value both to a secure location and to Node 2.

##### Node 2

Execute the same command, only change the `ind` value to `0` to indicate Node 1, and change the `nonce` to the value retrieved from Node 1.

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib nonce 18 '["8897e150bfb07d3f967ffadb4b0f3c84ea73a94c0d715c4b7e6d9c816c5113a9",0,"0379f6f42cf4c2cb30d064a6cac22ab6ffb3d93388d49b07f0623ff9bc8d191f89"]'
```


<collapse-text hidden title="Response">


```json
{
  "added_index": 0,
  "myind": 1,
  "partialsig": "9e964dfd402f973ea1e9407e19918b1c3897ff6544d60dcdb19cfb0e5bc4c0c1",
  "result": "success"
}
```

</collapse-text>


Copy the `partialsig` value both to a secure location and to Node 1.

#### Step 9: partialsig

##### Node 1

The `partialsig` method requires an array of arguments. The arguments are as follows:

1. `pkhash`: the `pkhash` value, retrieved previously
2. `ind`: the index of the opposing node. In our example, the index of Node 2 is `1`
3. `partialsig`: the `partialsig` retrieved from the opposing node

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib partialsig 18 '["8897e150bfb07d3f967ffadb4b0f3c84ea73a94c0d715c4b7e6d9c816c5113a9",1,"9e964dfd402f973ea1e9407e19918b1c3897ff6544d60dcdb19cfb0e5bc4c0c1"]'
```


<collapse-text hidden title="Response">


```json
{
  "added_index": 1,
  "result": "success",
  "combinedsig": "4b3a9b2b162802bc6c2cca2d22e70ab1cf738a9d4f5692f4f881d0cce0319c137b27889bb562602c94e163729c4168120a4ab41a8e936909e832e6af09e758f2"
}
```

</collapse-text>


Copy the `combinedsig` value both to a secure location and to Node 2.

##### Node 2

Execute the same command, but change the `ind` value to `0` to indicate Node 1, and change the `partialsig` to the value retrieved from Node 1 previously.

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib partialsig 18 '["8897e150bfb07d3f967ffadb4b0f3c84ea73a94c0d715c4b7e6d9c816c5113a9",0,"dc913a9e7532c8edf2f822f482afdcf48c61919bf905fb77f6684a2d7e58d972"]'
```


<collapse-text hidden title="Response">


```json
{
  "added_index": 0,
  "result": "success",
  "combinedsig": "4b3a9b2b162802bc6c2cca2d22e70ab1cf738a9d4f5692f4f881d0cce0319c137b27889bb562602c94e163729c4168120a4ab41a8e936909e832e6af09e758f2"
}
```

</collapse-text>


Copy the `combinedsig` value to a secure location.

If the values of `combinedsig` produced by both nodes is the same, then you have followed the example without any errors to this point. Visually verify that this `combinedsig` value matches with the `combinedsig` value returned on Node 1.

#### Step 10: verify

##### Node 1

The `verify` method requires an array of arguments. The arguments are as follows:

1. `msg`: the `msg` value, retrieved previously
2. `combined_pk`: the `combined_pk` value, retrieved previously
3. `combinedsig`: the `combinedsig` value, retrieved previously

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib verify 18 '["3ef43614242afd3c57e02a75a3bc99342fea7c731f6190b791c0f99826789603","03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a","4b3a9b2b162802bc6c2cca2d22e70ab1cf738a9d4f5692f4f881d0cce0319c137b27889bb562602c94e163729c4168120a4ab41a8e936909e832e6af09e758f2"]'
```


<collapse-text hidden title="Response">


```json
{
  "msg": "3ef43614242afd3c57e02a75a3bc99342fea7c731f6190b791c0f99826789603",
  "combined_pk": "03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a",
  "combinedsig": "4b3a9b2b162802bc6c2cca2d22e70ab1cf738a9d4f5692f4f881d0cce0319c137b27889bb562602c94e163729c4168120a4ab41a8e936909e832e6af09e758f2",
  "result": "success"
}
```

</collapse-text>


##### Node 2

Execute the same command on Node 2.

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib verify 18 '["3ef43614242afd3c57e02a75a3bc99342fea7c731f6190b791c0f99826789603","03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a","4b3a9b2b162802bc6c2cca2d22e70ab1cf738a9d4f5692f4f881d0cce0319c137b27889bb562602c94e163729c4168120a4ab41a8e936909e832e6af09e758f2"]'
```


<collapse-text hidden title="Response">


```json
{
  "msg": "3ef43614242afd3c57e02a75a3bc99342fea7c731f6190b791c0f99826789603",
  "combined_pk": "03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a",
  "combinedsig": "4b3a9b2b162802bc6c2cca2d22e70ab1cf738a9d4f5692f4f881d0cce0319c137b27889bb562602c94e163729c4168120a4ab41a8e936909e832e6af09e758f2",
  "result": "success"
}
```

</collapse-text>


The response from both nodes should display a `"result": "success"` key pair. If this is not the case, you made an error in a previous step.

#### Step 11: spend

::: tip Note
Currently, each node will output different raw transaction values, as both nodes are attempting to spend funds to their own wallets. Of the two, the node that broadcasts its returned raw transaction value first will receive the coins. The other node does not need to create or broadcast a transaction value.
:::

##### Node 1

We are now prepared to execute the `spend` method.

The `spend` method requires an array of arguments. The arguments are as follows:

1. `sendtxid`: the `sendtxid`, retrieved previously
2. `change_script`: the `change_script` value, retrieved previously
3. `combinedsig`: the `combinedsig` value, retrieved previously

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib spend 18 '["09daa45cb6e17028f9568347291a993cbf29c152a527b53e9ac0925d4900c293","210225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270aac","4b3a9b2b162802bc6c2cca2d22e70ab1cf738a9d4f5692f4f881d0cce0319c137b27889bb562602c94e163729c4168120a4ab41a8e936909e832e6af09e758f2"]'
```


<collapse-text hidden title="Response">


```json
{
  "msg": "3ef43614242afd3c57e02a75a3bc99342fea7c731f6190b791c0f99826789603",
  "combined_pk": "03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a",
  "combinedsig": "4b3a9b2b162802bc6c2cca2d22e70ab1cf738a9d4f5692f4f881d0cce0319c137b27889bb562602c94e163729c4168120a4ab41a8e936909e832e6af09e758f2",
  "hex": "0400008085202f890193c200495d92c09a3eb527a552c129bf3c991a29478356f92870e1b65ca4da09000000007b4c79a276a072a26ba067a5658021032d29d6545a2aafad795d9cf50912ecade549137163934dfb2895ebc0e211ce8a8140878ae4c7520e729e74339e1d463d8aabc1e63c0f726c868adcf7ceab268ef62870596c7c87bdd9382bd364749662ffc79e6ee094a155678b7c2127480960b631a100af03800112a10001ffffffff0200e1f5050000000023210225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270aac0000000000000000686a4c6512792103d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a404b3a9b2b162802bc6c2cca2d22e70ab1cf738a9d4f5692f4f881d0cce0319c137b27889bb562602c94e163729c4168120a4ab41a8e936909e832e6af09e758f200000000460800000000000000000000000000",
  "txid": "332373cd0e4cbdddd3916e827a408ba4a175eb5039cc5a43725a50b83cb74e52",
  "result": "success"
}
```

</collapse-text>


Copy the `hex` value to a secure location.

##### Node 2

In this example, our desire is to receive the transferred coins on Node 1, not on Node 2.

Therefore, it is not necessary to execute the `spend` method again, nor is it necessary for Node 2 to execute the following step.

#### Step 12: sendrawtransaction

##### Node 1

Broadcast the `hex` value using [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction):

```bash
./komodo-cli -ac_name=MUSIG sendrawtransaction "0400008085202f890193c200495d92c09a3eb527a552c129bf3c991a29478356f92870e1b65ca4da09000000007b4c79a276a072a26ba067a5658021032d29d6545a2aafad795d9cf50912ecade549137163934dfb2895ebc0e211ce8a81401272d03e011f002a464aa75e8c3d093d45a2c4865b7b334998c8dc2fbaa814c17a2f34c9746d2921483b884d577b86465095ce64a4716b4b5d2f0b578860e149a100af03800112a10001ffffffff0200e1f5050000000023210225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270aac0000000000000000686a4c6512792103d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a404b3a9b2b162802bc6c2cca2d22e70ab1cf738a9d4f5692f4f881d0cce0319c137b27889bb562602c94e163729c4168120a4ab41a8e936909e832e6af09e758f200000000470800000000000000000000000000"
```

Once the broadcast transaction is mined and notarized, the MuSig transaction is complete.

You have now successfully executed a full cycle of the MuSig module.


# Overview of Antara Modules - Part I

## Introduction

Welcome to an <b>Overview of Antara Modules - Part I.</b>

Part I of this discussion covers the basic aspects of Antara modules, without delving deeply into the technical aspects of the technology.

The conversation should be attainable for a normal developer in the Komodo ecosystem, as well as for non-developers who otherwise possess experience in the blockchain industry.

A later discussion, [<b>Overview of Antara Modules - Part II</b>](../../../basic-docs/antara/antara-tutorials/antara-conceptual-overview.html), covers additional conceptual aspects of this technology. Part II is not required, but recommended for anyone who intends to utilize Antara technology in a development environment.

## Smart Contracts on the Komodo Platform

Komodo is built on the Bitcoin protocol, which features a simple programming language, called Bitcoin Script, that allows a developer to perform rudimentary scripting tasks.

Traditionally, Bitcoin Script is considered to be incapable of supporting the complex "smart contracts" found on other blockchain platforms. This limitation is mostly from the fact that Bitcoin Script is (intentionally) not Turing complete.

Now, the capabilities of extending Bitcoin Script into a competitive, and arguably stronger, method for creating smart-contract-like modules is changing through Komodo's Antara Framework. This framework integrates a broader technology, called CryptoConditions, which allows for complex utxo-based logic.

As is often the case, Komodo Platform is leading the blockchain industry in this brand new technology. This section will explain Antara's implementation of CryptoConditions, how it works, and how utxo-based smart contracts will dramatically alter the blockchain landscape.

## A Brief Review of Bitcoin Script

The very first block in the Bitcoin blockchain was mined on or around January 3, 2009. Since then, this revolutionary technology has exploded, forever changing the way we think of money and currency. We owe many of these developments to Satoshi Nakamoto and his original Bitcoin-core code.

The Bitcoin-core code itself is written in C++. A time-tested and well-known programming language, C++ is Turing complete and can therefore do all that any other Turing complete programming language can do.

However, Bitcoin transactions are not executed with C++. Instead, transactions are carried out with a special protocol called Bitcoin Script. This scripting language has a number of "opcodes", or commands, that tell nodes how to deal with any specific transaction request.

While most computer programming languages are considered Turing complete, Bitcoin Script is not. It’s widely accepted that this was an intentional decision. But before we can discuss the relative merits of making a programming language Turing complete, let’s take a moment to understand what exactly "Turing complete" means.

## Turing Completeness

In 1936, a British computer scientist and mathematician named Alan Turing published an academic paper called “On Computable Numbers, with an Application to the Entscheidungsproblem.” It is a seminal essay in the fields of computer science and computational theory.

In the essay, Turing describes a hypothetical machine that, when granted a few basic assumptions, can theoretically “compute any computable sequence.” This basically means it can solve any mathematical problem that uses only computable numbers. According to Turing’s definition, “a number is computable if its decimal can be written down by a machine.”

Turing called this device a “universal machine” but it is now better known as a “Turing machine.”

Turing machines are generally described in this way: Imagine a simple device that can read and write numbers. This device also has the ability to store data. (Turing assumes that the device has an infinitely large storage capacity, but this is not essential to understanding the concept of Turing completeness.)

Now, imagine that this simple machine moves from left to right along a thin, infinitely long piece of tape. It reads a number, decides what to do based on a series of instructions to which it is bound, and then executes the instructions accordingly.

In simply reading numbers, executing commands, and writing numbers, this simple machine can solve any computational sequence. It may take an arbitrarily long period of time but, theoretically, the machine would eventually solve the problem.

So what does all of this actually mean? Why is it important?

The idea of something being “Turing complete” is derived from this idea of a Turing machine. While we know that no machine has an infinitely large memory, we can use the basic theoretical framework to decide whether or not a machine can solve any computable sequence.

It is in this sense that computer languages are said to be Turing complete. A language is Turing complete if it can solve any mathematical problem made up of computable numbers.

As we noted above, Bitcoin Script is not Turing complete. This means that there are some problems and sequences that Bitcoin Script is not capable of solving.

## Gas-based Smart Contract Platforms

This is where the gas-based smart contract platforms of Ethereum, EOS, NEO, and many other blockchain platforms enter the picture. We will focus on Ethereum, as it is the originator of this model, and it is currently the most popular.

In December 2013, Vitalik Buterin released [Ethereum’s first white paper.](https://github.com/ethereum/wiki/wiki/White-Paper) One of the major contributions Ethereum offered was a Turing complete programming language, called Solidity, that can be used to write smart contracts.

In fact, Buterin makes this perfectly clear on the first page of the white paper:

“What Ethereum intends to provide is a blockchain with a built-in fully fledged Turing-complete programming language that can be used to create 'contracts' that can be used to encode arbitrary state transition functions, allowing users to create any of the systems described above, as well as many others that we have not yet imagined, simply by writing up the logic in a few lines of code.”

In many ways, Ethereum's 'smart-contract' language is an improvement over Bitcoin Script. It allows “systems which automatically move digital assets according to arbitrary pre-specified rules”, and this opened up a new world of possibilities for blockchain technology.

At the same time, Turing completeness creates a few vulnerabilities. Let’s discuss.

## Pros and Cons of Turing Completeness

Any Turing complete programming language has the ability to create “loops.” A loop just means that a certain operation or set of commands can be written once but commanded to execute an arbitrary number of times.

In a language that is not Turing complete, like Bitcoin Script, loops are not available. A programmer needs to copy and paste the same piece of code `X` number of times when he wants a computer to execute the operation `X` times.

While loops are beneficial in some ways, they also present vulnerabilities. A programmer may accidentally write an infinite loop into a smart contract, unnecessarily burdening the network with an infinite number of meaningless operations to perform.

If malicious spammers want to attack an unprepared network that runs on a Turing-complete language, they can unleash a great number of smart contracts each bearing infinite loops. These pointless, endless operations can cause crippling congestion.

To avoid this possibility, Buterin introduced the idea of “gas” to the Ethereum network.

## Gas: A Way to Avoid Infinite Loops

In short, users must pay a fee for every single operation that they want the network’s nodes to perform. These fees are simply called “gas.” Gas prices discourage malicious actors from spamming the network. It also encourages developers to write efficient contracts that require as few processes as possible.

Moreover, gas prevents an accidental infinite loop from wreaking havoc on the network, because once all the gas is used up, the network stops processing the contract. The loop runs out of gas and the nodes stop executing the loop.

An important benefit the gas-based platform brought to the world is that it broke the barrier for allowing developers to decentralize software execution in a p2p environment.

For example, in a non-decentralized p2p software application, users typically must rely on a centralized server or other impersonal third-party to maintain sanity in the execution of software instructions. Decentralized applications, "dApps", allow users to interact with software while relying not on a centralized server, but on the decentralized blockchain.

## The Problem with the Gas-based Model

While the concept of gas is a clever innovation, it also makes complex applications prohibitively expensive, and it hinders innovation and audience growth.

If a particular contract or dApp needs the network to perform a large number of operations to function as designed, it costs too much money to keep it running.

Take these two competing statements from Buterin by way of illustration. In January of 2014 he said, “...Our goal is to provide a platform for decentralized applications – an android of the cryptocurrency world, where all efforts can share a common set of APIs, trustless interactions and no compromises.” [But later, in July 2018, Buterin had this to say:](https://www.coindesk.com/vitalik-ethereum-app-builders-screwed-scaling-limits/) “If you want to build a decentralized Uber and Lyft on top of an unscalable Ethereum, you are screwed. Full stop.”

The "Uber" reference is to a popular phone app where users can hail and share a freelance-taxi service. On average, this app processes 12 financial transactions per second. At the time of Buterin's statement, Ethereum can process 15 transactions per second. Let's make a rough analysis of the cost to maintain this one dApp on Ethereum.

The value of the gas fees for an Uber-like decentralized app would have to cover ~80% of the cost of maintaining the Ethereum blockchain (`(12 txs / 15 txs) * 100 = 80%`). Today (cr. 2018-2019), it costs about [\$150,000 USD per hour](http://www.crypto51.app/) to maintain the Ethereum hash rate. The dApp developer and their end-users would be responsible for 80% of this, so they would have to pay gas fees of at least $120,000 per hour, which translates to ~$30 per second.

Therefore, looking only at the costs, and not at the lack of space for multiple dApps, we begin to see the enormous flaws of the gas-based model. While existing large corporations and their customer bases may be able to afford this financial burn rate, it is difficult to conceive of a startup that can afford it. The ongoing gas fees to continually maintain the functionality of this dApp are simply too expensive.

All this is assuming that the dApp only processes one transaction per ride, per customer. If the dApp is instead a game that has a looping function, the gas fees can grow even more absurd.

Furthermore, all dApps on the Ethereum platform have to share the same gas, and the same blockchain, and this compounds the problem. If an existing business running a dApp on the platform becomes suddenly popular, the surge of people wanting to use the dApp must purchase gas, and this causes the price of gas to rapidly rise. The burst of activity can also cause the blockchain to grind to a halt.

While the spike in the price of gas can be advantageous for financial speculation, it is arguably terrible for everything else. For example, a startup business that wants to serve a new customer base using the same gas-based platform must now convince their potential customers to purchase the platform's gas at an unpredictably high price.

Until blockchain technology is capable of processing potentially billions, if not trillions, of transactions per second on a single blockchain, the gas-based blockchain platform is fundamentally flawed for today's market. The more popular a gas-based platform becomes, the more difficult, expensive, and prohibitive it is for businesses to develop on it, and for users to buy into it.

Having observed crucial flaws in the currently popular gas-based smart-contract platform, we are now prepared to turn to the smart-contract solution Komodo proposes.

## Introducing Antara Modules

Recall that Satoshi Nakamoto's Bitcoin Script is not Turing complete. This choice was deliberate. Leaving Bitcoin Script in a simple form was a quicker, safer alternative to a Turing complete language. This is true because it removes the possibility of infinite loops clogging the Bitcoin network.

However, at the same time, the lack of Turing completeness also prevented smart-contract-like functionality on Bitcoin-protocol based blockchains — until now.

Komodo now offers Antara Modules. These modules allow for the same functionalities found in smart contracts, and even more advanced features. This new technology is compatible with Bitcoin-protocol based blockchains, and this includes all Komodo Smart Chains.

Furthermore, Antara Modules gain more usefulness when combined with Komodo's unique design. Recall that Komodo is built not to require all developers and users to function on the main Komodo blockchain. Rather, Komodo empowers developers with their own independent blockchain, each secured with the hash rate of Bitcoin. This facilitates an interconnected network between all Smart Chains through Komodo's other technologies, such as atomic-swaps, cross-chain syncing, and more.

This combination of Komodo technologies overcomes the challenges of the currently popular, gas-based, single-blockchain platforms.

With Antara Modules, the developer can maintain interactivity with the Komodo ecosystem, while also being able to run on a private blockchain. Because the developer has the full blockchain all to themselves, they are able to safely occupy the full transaction capacity without fear of interruption by activity elsewhere in the ecosystem. Developers of highly active blockchains can even split their single blockchain into multiple blockchains, using the Antara framework.

Likewise, end-users of a blockchain service in the Komodo ecosystem need only purchase the currency of the developer's Smart Chain; there is no need to purchase KMD. Therefore, for the end-user, the price of participating in the developer's business is tied only to the design and success of the developer's blockchain software, and not to the unpredictability of the ecosystem at large.

In short, if you want to use blockchain technology to compete with the Uber taxi app, Komodo is the platform for you.

## Antara Modules are Based on Utxo Technology

Antara Modules function in a completely different manner from the popular gas-based model of other platforms. Before we can explain how Antara Modules work, we must first briefly explain the concept of an "unspent transaction", also called a "utxo," for short. Utxos are integral to a blockchain's functionality, but many users do not know they exist.

A utxo is simply a bill of value sitting in your digital wallet — much like the many small fiat dollar bills you may have sitting in your physical wallet. The collection of utxos in your digital wallet make up the total balance.

For example, a user could have in their digital wallet a utxo worth 1 KMD, another utxo worth 2 KMD, and another worth 7 KMD. Altogether, in the software interface the user would see that they have 10 KMD total. Most users would never know that they actually have three separate utxos that make up the full balance, as utxos are typically managed automatically by blockchain software.

When the user spends money, the blockchain software automatically splits the money they spend into new utxos. If our user desires to spend 6 KMD, the software splits the 7 KMD utxo into two pieces: a 6 KMD utxo is sent to the destination address, as the user instructed, and the remaining 1 KMD is returned to the user as "change."

The user now has a 1 KMD utxo, a 2 KMD utxo, and another 1 KMD utxo. The total that they see in their wallet is 4 KMD.

## Antara Modules: Utxo-based Smart Contracts

Coming to this from a programmer's perspective, a utxo is a programmable object. As with many objects, it allows software to add and subtract properties from it, including properties that allow for Turing-complete programming. In Komodo, utxos allow us to create a smart-contract functionality that is dramatically cheaper to utilize, and more secure in practice; than the gas-based models of other platforms.

In its simplest form, an Antara Module locks a utxo in a publicly-known address and prevents it from being spent until a certain set of conditions are met. Once the conditions are fulfilled, the utxo is unlocked and sent to the appropriate address. The idea behind it really is that simple.

It is fundamentally different than the gas-based model. In the gas-based model, a user has a total balance and they instruct their blockchain software to execute a smart-contract either until the contract is complete, or their total balance is gone.

With Komodo's Antara Modules, a user locks a series of utxos in a contract with a set of instructions that must be met before the utxo can be sent to its final destination.

This is a dramatically more secure setup. Only the utxos that have been indicated as belonging to an instance of an Antara Module can be spent. This is different from the gas-based model, where a bug in the software can (and frequently does) allow a faulty smart contract to drain the full balance of a wallet.

Before diving any deeper into Antara Modules, we need to understand a few things about Bitcoin Scripts.

## How Antara Modules Interact with Bitcoin Script

There are several different ways to execute a Bitcoin payment. In particular, there are pay-to-pubkey payments, pay-to-pubkey-hash payments, and pay-to-script-hash payments. These three payment types represent the overwhelming majority of Bitcoin transactions, and each type of payment is limited in the possibilities it allows to the user and the developer.  

Now, Komodo has implemented an additional type of payment script that designates a utxo as belonging to a specific instance of an Antara Module. In other words, this new payment script puts constraints on the utxo. The name of this new script is called a "CryptoCondition," and we explore the specifications of this script in later articles.

#### Antara Modules Maintain Scarcity Within the Module

Every Antara Module has its own unique code, called an "EVAL" code, and this keeps funds in one module separate from another, and separate from the main Smart Chain's coins.

When a user spends funds in a manner that links a utxo with an Antara Module, the utxo is locked to this EVAL code in the utxo-data structure.

This keeps the utxo associated with the Antara Module, and thus the utxo is not free to enter into another Antara Module unles the current module allows this behavior.

#### A User Has a Unique Address for Each Antara Module
For each Antara Module, the user has a unique address that can only be used with funds created as a part of this module. This keeps funds that are created within an Antara Module separate from funds that are created in other Antara Modules. In this manner, there is never any confusion about where funds are sent.

#### Each Module Has a Global Address

Each Antara Module also has a global address that is known and usable by everyone. Even the private key to this address is public.

Making the private key public allows users to interact with the module using lite-mode software (i.e. syncing the blockchain is not required). Also, the global address serves as a repository of information for all users within the module.

The global address allows all users to query the state of the module and discover current and past behavior.

#### Developers Set the Rules for Each Module-Related Transaction

At the same time, the funds within this module cannot be moved until all the conditions of the module are satisfied.

For example, the module can require that funds only be spent to a specific and approved address, as set in advance by a group of collaborating users. This is similar to the Bitcoin Lightning Network's intended effect, yet dramatically simpler in design.

With these rules in place, an Antara Module effectively becomes a miniature consensus mechanism. The module forces consensus for its participants, just like the master consensus mechanism of the Smart Chain.

Now let's take a closer look at the many advantages of Antara Modules.

## Advantages Of Antara Modules

#### Access to Established and Turing Complete Languages

Antara Modules are hard-coded into the Komodo code base, which means they can be written in C and C++. They can also be written in any compiled programming language that can create a linkable library capable of calling and being called by C/C++ functions. In that sense, Komodo’s utxo-based contracts are language agnostic.

The C and C++ programming languages are widely understood, time-tested, and, perhaps most importantly, Turing complete. Thus, utxo-based smart contracts can be programmed to do anything that any other existing program or application is able to do.

#### No Need for a Virtual Machine

Because Antara Modules on Komodo run in the daemon, developers can avoid the limitations and hassles of having to run code in a virtual machine, as is the case with the many gas-based smart contract platforms. On Komodo, you have far more speed, flexibility, and power. This is made possible by our unique design of connecting independent blockchains together, rather than forcing all users to run on a layer-one main chain.

#### Utxos are More Secure Than Balance-Based Programming

Utxo-based modules are more secure than balance-based smart contracts. This is true in several ways. For example, because Komodo’s modules are utxo-based, it is far more difficult, if not impossible, to use a module to flood the main chain's coin supply with illegitimate coins.

This is not the case with balance-based smart contracts. Because the smart contracts are linked to balances, rather than blockchain-enforced utxos, a malicious actor can manipulate balances to disastrous ends. We have seen this happen again and again and again.

#### RPCs Make Module Consumption Easy

Utxo-based smart contracts are also essentially an extension of the Bitcoin protocol, so a series of Remote Procedure Calls (RPCs) can be established. With an RPC, a normal developer can bring the functionality of an existing Antara Module into a foreign software environment with a simple command.

With many Antara Modules, a Graphic User Interface (GUI) can allow non-technical users to make use of the technology without needing to work through the command line. Eventually, once a large variety of RPC calls are available, a normal developer should be able to build decentralized software using RPC calls alone.

#### Instantaneous Confirmation

A challenge that many developers face in the blockchain industry is the aspect of creating software that must wait for decentralized consensus before the software's users can assume finality.

Antara Modules allow the developer to overcome this challenge. Antara Modules allow for zero-confirmation micro-payments. These micro-payments are secured by Komodo’s delayed Proof of Work security mechanism. The payments are fully peer-to-peer, and are considered confirmed as soon as they are initiated.

#### No Need for Gas

Antara Modules do not require a shared “gas” coin for every process executed. Recall that the smart contracts and dApps built on Ethereum must pay in Ethereum's ecosystem-wide gas (Ether) for every single step of progress. The tremendous expense placed on common users and developers makes complex blockchain-based software nigh impossible.

Komodo, on the other hand, is far more scalable as the cost of blockchain processing is tied only to an individual Smart Chain's native coin, and not to the main Komodo coin (KMD) that ties the ecosystem together. 

## Difficult to Create, but Easy to Reuse

Creating a new Antara Module is more difficult than creating a new smart contract on a gas-based platform. However, the functionality of a module need only be programmed once, and then other users in the Komodo ecosystem can reuse the finished module.

Building and designing a new Antara Module requires a strong proficiency in blockchain technology and in advanced programming techniques. The module must be stable and secure enough to withstand the pressure of the wild-open Internet.

However, once created, other users may rely on the module's RPC commands to utilize the module's functionality without having to understand how the module functions.

For example, consider how the MuSig Antara Module serves non-blockchain developers. This module relies on Antara to enable a complicated technology called Schnorr Signatures, which are a new method for creating multi-signature blockchain transactions. The RPC's for this module allow any developer of essentially any skill level to adopt the MuSig functionality into the developer's software without having to gain an in-depth understanding of Schnorr technology.

[See the MuSig module documentation here](../customconsensus/musig.html#introduction)

As the library of available modules grows, so too do the advantages to the many types of developers in the Komodo ecosystem. For this reason, members of the Komodo community express gratitude to the more experienced blockchain developers who build and share Antara Modules via open-source ideology.

## Komodo is Developing and Testing Default Modules

The Komodo team has already created many Antara Modules that are freely available for all developers in the Komodo ecosystem. The team is also exhaustively testing the Antara Modules' code prior to implementation, to ensure a quality and bug-free environment.

Once complete, the modules are embedded into the default source code of a Komodo Smart Chain. This technology is provided using open-source philosophy, and thus anyone can verify the code of the modules.

If you would like to have an Antara Module available that is not already in the code base, submit a Pull Request to the Komodo repository on Github with the details of your desired module. If accepted, Komodo will write the module and make it available to all users during our next hard fork. This occurs on an annual or semi-annual basis.

To our knowledge, no other blockchain project has successfully implemented utxo-based contracts on a live chain. Considering atomic swaps, on-demand scalability, cross-chain interoperability syncing, and utxo-based modules, the Komodo team continues to develop technologies at the bleeding edge of the blockchain industry.

Join us for Part II of this discussion. Part II delves a little deeper into the methods of Antara Module functionality, and continues preparing the developer for Antara Module utilization.

[<b>Link to Part II of an Overview of Antara Modules</b>](../../../basic-docs/antara/antara-tutorials/antara-conceptual-overview.html#introduction)
# Overview of Antara Modules - Part II

## Introduction

Welcome to an <b>Overview of Antara Modules - Part II.</b>

The following content is provided for developers desiring to discover deeper levels of potential in Komodo software. The content covers technical aspects of Antara Modules that are not necessary for a common user to understand. Learning this content can help any developer in the Komodo ecosystem utilize or create new Antara Modules.

#### Assumptions for this Content

This discussion is intended for developers who feel confident in at least one mainstream programming language, and who understand the core concepts of blockchain and Komodo technology.

Other readers, such as business or marketing developers, may also find the content useful, although some topics may be difficult to understand. We invite any interested reader to reach out to our team on [Discord](https://komodoplatform.com/discord) with questions.

Consider reading the following resources, if necessary.

- [Overview of Antara Modules - Part I](../../../basic-docs/antara/antara-tutorials/antara-overview.html#introduction)
- [The Komodo Whitepaper](https://komodoplatform.com/whitepaper)
- [Mastering Bitcoin](https://github.com/bitcoinbook/bitcoinbook)

#### Before We Begin: A Brief Note for Non-Blockchain Developers

Creating a new Antara Module is challenging. Fortunately, not every developer in the Komodo ecosystem is expected to program new modules from scratch. Rather, Komodo anticipates that many developers will consume existing modules without attempting to create new modules. 

Each module built on the Antara framework can be designed to have Remote Procedure Calls (RPC's) that can be called quickly and easily from other software and programming languages.

A good example can be seen in the MuSig module. This module uses the Antara framework to enable a complicated and useful technology called Schnorr Signatures. The RPC's for this module allow any developer of essentially any skill level to adopt MuSig functionality into their software without having to gain an in-depth understanding of Schnorr technology.

[See the MuSig module documentation here](../customconsensus/musig.html#introduction)

As the library of available modules grows, so too do the advantages to the many types of developers in the Komodo ecosystem.

## Understanding the Problem that Antara Modules Solve

Antara is Komodo's technology framework that developers use while creating decentralized software. Antara Modules are but one aspect of the wider Antara framework. The modules are a crucial element of the framework, as they allow any capable developer to directly add arbitrary code into the Smart Chain itself.

The reader may better understand the purpose and use case of Antara Modules by first understanding the key problem that they solve.

#### A Consensus Mechanism Is Not Easy to Create or Change

Adding new code into a blockchain's consensus mechanism (CM) is a challenging task. Creating an entirely new CM is more difficult by an order of magnitude. Yet, despite these facts, often when an experienced developer first approaches blockchain technology with creative intent, their initial impulse is to dive directly into the CM itself. As time passes, the developer can come to a realization that they are attempting to solve a problem that is too large for any one person.

Consider the Bitcoin consensus mechanism. This protocol is approximately ten years old and receives perhaps more attention than all other blockchain protocols combined. Every year, thousands upon thousands of the world's most intelligent developers, mathematicians, and cryptographers pore over the intricacies of this profitable technology. Yet, despite this valuable insight, mistakes in the code continue to reveal themselves: in 2018, the Bitcoin Core and Bitcoin Cash teams together [discovered a flaw in the code](https://www.coindesk.com/the-latest-bitcoin-bug-was-so-bad-developers-kept-its-full-details-a-secret) that would have allowed a malicious user to print an arbitrary number of new Bitcoins.

<!-- below: need a link to that flow path for the "viable use case for a blockchain" flow path -->

Mistakes in the code of a CM can cause economic instability, and volatility of this nature can wreak havoc on the lives of the CM's users. For this reason, seasoned blockchain engineers often avoid changing the CM altogether, once it is relatively stable.

For those few projects that create a useful and unique consensus mechanism, a new challenge immediately presents itself. If the CM relies on a Proof of Work type model, the project team must attract a sufficient number of miners. If the CM is more akin to Proof of Stake, the team must ensure the blockchain's total stake is distributed in a manner that ensures trustlessness. Neither of these tasks are easy to achieve.

In light of these challenges, the blockchain engineer finds themselves confronted with a paradox. The engineer desires to create something new, and at the same time, they cannot easily change the core software.

#### A Popular, But Flawed Solution: The Decentralized Virtual Machine

A popular solution to this paradox is to associate the consensus mechanism (CM) with a virtual machine (VM). This method was made popular by the Ethereum project.

In this model, the CM's design can be similar to existing and stable CM's, but it has one difference. The CM listens to instructions given by an external VM that is decentralized across all validating nodes. While code inside the VM can be arbitrary, the CM does not listen to the code's execution. Instead, the CM only listens to the same data as before: the history of transactions and associated meta data.

This solution is more effective than writing an entirely new CM, yet the solution is limited. The limitations include: the requirement of working in the mandatory VM programming language, such as Solidity; an excessive dependency on the core-software development team; volatile economics, and a lack of blockchain processing and storage capacity.

The requirement of the limited programming language derives from security concerns. All validating nodes in the decentralized VM must run all blockchain-related code in the ecosystem. Having this code written in a unique language designed for the VM reduces the available opportunities to malicious actors. While the limitation provides baseline security, the customized and often unstable nature of the VM programming language can make the creative process difficult. Also, the need to master a new language adds an additional burden to the developer.

The dependency on the blockchain's core engineers also slows creative progress for ecosystem developers. When the ecosystem developer discovers a new core-level technology that would increase the developer's productivity and creativity, they must convince the main chain's core-software team to implement the new feature. The core-software engineers, however, may have conflicting interests, as their decisions must meet the needs of all developers and users in their ecosystem.

In many of the VM-based models, economics for blockchain usage can be volatile. The underlying "gas" token that the VM requires (such as Ether) can change in price and value according to the interests of the uneducated masses. This may sound advantageous to a speculator, but a practical business will find that the volatility scares away new users.

The fact that the VM frequently relies on a single blockchain further hinders developers and users. Block space can be in short supply due to high demand on popular chains. Furthermore, data that is entirely irrelevant to the developer can become required baggage.

These challenges make the VM model unpleasant for many experienced blockchain engineers. In fact, before Komodo existed, these very concerns inspired the Komodo engineers to avoid the VM model in search of a better solution. 

Antara Modules provide this solution through Komodo's integration of a technology called CryptoConditions.

## CryptoConditions: An Industry-Wide Standard

CryptoConditions is a technology that allows for arbitrary logical conditions and fulfillments to be evaluated as a part of consensus. This allows for a Smart Chain's consensus mechanism to evaluate the results of arbitrary code and update state in the blockchain's data in a decentralized and secure fashion.

CryptoConditions technology is not a new concept. The [Interledger](https://interledger.org/) team originally proposed this technology in 2016.

The [original proposal](https://tools.ietf.org/html/draft-thomas-crypto-conditions-01) was that it would be an open-source industry-wide standard format. The Interledger team does not seem to have continued exploring the technology beyond the original proposal.

Komodo, on the other hand, found the CryptoConditions concept to be intriguing. In 2018, Komodo adopted this open-source technology into the suite of offerings in our Antara framework.

Our implementation uses many of the key ideas put forth by the Interledger team, and at the same time we depart in several significant ways. Those who are curious for specific details on this topic can explore the open-source code in the respective repositories.

The important takeaway is that Antara Modules rely on a core technology called, CryptoConditions (CC). This technology allows a developer to add arbitrary logical conditions and fulfillment to their Smart Chain, and to rely on the consensus mechanism to ensure state integrity in a decentralized environment.

## Creativity at the Consensus Level, Without Losing the Consensus Mechanism

Antara Modules and CryptoConditions together allow a developer to add arbitrary code at the consensus level, and within the core software's daemon, without interfering with the existing consensus mechanism (CM). This grants the developer the ability to add core-level features and innovations without waiting for the approval of other members of the Komodo ecosystem. Combined with Komodo's Bitcoin-hash rate security, the simplicity of Antara Modules provides the developer with a competitive level of creative freedom.

The entry point between Antara Modules and the CM is a new Bitcoin-script [operation code](https://bitcoin.org/en/glossary/op-code), "OP_CHECKCRYPTOCONDITIONS", or OP_CCC for short. When executed, OP_CCC is able to initiate additional arbitrary code that is written in any programming language, assuming the language can call and execute C/C++ code in return. The arbitrary code is separate from the CM, thus maintaining the CM's reliability. When the arbitrary code completes, OP_CCC returns a `true` or `false` statement to the daemon. If the returned OP_CCC value is `true`, the daemon performs a transaction.

The transaction can contain meta data in the normal manner. Therefore, these transactions can also implement other data-storage features of Komodo software. Examples include the [key-value storage](../komodo-api/blockchain.html#kvupdate) feature, the [Oracles CC Module](../customconsensus/oracles.html#introduction), or the native `vout` and `batontxid` key-value pairs. 

With access to the meta data established, Antara Modules are able to act as an application-state manager. State-related data is held in utxos that are accessible to the CM. As application-state management is based on the utxo model, the management also follows the CM's rules for consensus. This powerful combination allows the developer to collect, organize, and act upon data in a securely decentralized manner.

In addition, once the data is notarized, it can also be called by other Komodo-based Smart Chains, depending on the manner in which the developer(s) form their chain. This allows developers to form clusters of blockchains to enhance their software, as opposed to relying on a single blockchain, or on a single child chain. The speed and data-storage capabilities of a cluster are thus exponentially greater than the offerings of many VM-based competitors.

Also of note is the simplicity of the Antara Module architecture. All new code created for an individual Antara Module is contained in an optional library. Modules from the library are included in compilation only on participating blockchains. In this manner, developers who desire a module's functionality can include the necessary libraries, and those who do not require the module can avoid this excess baggage.

The Komodo daemon has no need of an external VM. This eliminates what would otherwise be a cumbersome requirement for the developer and the core engineers. At the same time, the daemon offers all the capabilities of a VM-based blockchain — ⁠and arguably more.

## Antara Modules In Action: Accomplishing Years' Worth of Work In But A Weekend

Examples of the power of Antara Modules can be found by observing existing modules. Consider how Antara allowed the Komodo ecosystem to swiftly and easily upgrade the Komodo consensus mechanism (CM) to include quantum-proofing capabilities.

In years past, other blockchain projects in the cryptocurrency community had focused on manually upgrading their CM for quantum-proofing protection. Although this feature appeared to be an advantage, this was not true. Adding customized code to the CM itself to protect addresses from quantum-capable computers was a time-consuming and expensive process.

Paradoxically, once the new quantum-proof CM was achieved, it only served to isolate the project team. The code itself was untested and unreliable, and the users of the cryptocurrency community had to endure these roadblocks. Furthermore, the customized CM was often incompatible with much of the activity in the open-source blockchain ecosystem; for each industry-wide technological advancement, the team often had to adapt their customized CM on their own.

Komodo's engineers chose not to spend energy building a new quantum-proof CM, but rather they worked to add Antara Modules first. Once this technology was available, the Komodo core software team took existing quantum-proofing technology, read summaries published by academics and researchers, and created a new Antara Module to add quantum-proofing functionality to the Komodo CM.

The time between project initiation and releasing a beta version for community testing was approximately one weekend. Only one core developer's attention was required. The Komodo daemon remains compatible with all other software features as before, able to quickly adopt new ideas from others in the open-source community as soon as they arrive. At the same time, users who desire quantum proofing for their long-term financial interests have a module readily available, and users who are not interested have not experienced an interruption in their blockchain services.

The ability to adopt the ideas of others quickly, while maintaining the accomplishments, security, and compatibilities of one's predecessors, makes Antara Modules a wise choice for experienced developers who wish to have the most advanced technology available without a significant hassle.
# Rogue Module Tutorial

The Rogue Fluidity module is a Fluidity implementation of the classic Unix game, Rogue.

This tutorial documentation is associated with the Rogue API documentation. 

[<b>Link to Rogue API documentation</b>](../basic-docs/fluidity/fluidity-api/rogue.html#rogue)

## Introduction

The Rogue Fluidity module serves as a proof-of-concept to demonstrate Fluidity's capabilities as a blockchain-based gaming technology.

The Rogue module is based on the classic [Rogue](http://www.livingroguelike.com/rl-games/the-original-rogue-information-and-how-to-play-online/) game. As such, it can be categorized as a [Roguelike.](http://www.livingroguelike.com/roguelike-info-discussions/what-is-a-roguelike/)

The core aspects of Rogue gameplay occur on the blockchain. These aspects include such data as character health points, items, movement, attacks, and other relevant game states.

Komodo's Rogue implementation makes use of the classic on-screen visual representation of gameplay. This interface relies on ASCII characters to represent characters, items, and other in-game objects and actions.

The procedures to launch and finish a game require the execution of various methods (RPCs). To make the game more easy to start and finish for players who are not comfortable with the terminal, the Komodo team has created a Terminal User Interface (TUI).

The following installation and walkthrough tutorials can assist the reader in testing Rogue. For more information, please reach out to our community on [Discord](https://komodoplatform.com/discord). The #cc-rogue channel is available for questions and assistance.

## Installation

### Requirements

Rogue is available for modern MacOS, Linux, and Windows operating systems.

### Download Software Bundles

Komodo provides downloadable software bundles that contain all necessary components. The user need only download and unzip the contents for their appropriate operating system and they are ready for gameplay.

Software bundles can be found in the link below:

[Link to software bundles](https://github.com/tonymorony/komodo_customconsensus_tui/releases)

Please feel free to ask on our #cc-rogue channel on [Discord](https://komodoplatform.com/discord) for updates and assistance.

### Compile Rogue Software Manually

The following instructions are necessary only for users/developers who wish to compile Rogue software from source code. Users who have already downloaded the software bundles linked above do not need to compile source code manually.

#### Install Dependencies

##### Linux

```bash
sudo apt-get update && sudo apt-get upgrade -y
sudo apt-get install build-essential pkg-config libc6-dev m4 g++-multilib autoconf libtool ncurses-dev unzip git python zlib1g-dev wget bsdmainutils automake libboost-all-dev libssl-dev libprotobuf-dev protobuf-compiler libgtest-dev libqt4-dev libqrencode-dev libdb++-dev ntp ntpdate software-properties-common curl libcurl4-gnutls-dev cmake clang libsodium-dev -y
```

##### MacOS (OSX)

Use the terminal to ensure the MacOS XCode tools are installed:

```bash
xcode-select --install
```

Ensure the latest version of `brew` is installed. If necessary, execute the following command:

```bash
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
```

Once `brew` is installed, execute each of the following commands:

```bash
brew update
brew upgrade
brew tap discoteq/discoteq; brew install flock
brew install autoconf autogen automake
brew install gcc@6
brew install binutils
brew install protobuf
brew install coreutils
brew install wget
```

##### Windows

Playing Rogue on Windows requires an installation of MinGW, which can be downloaded here:

[Link to MinGW](http://www.mingw.org/)

Once installed, use a Debian cross-compilation setup and run the following commands in Linux:

```bash
sudo apt-get install build-essential pkg-config libc6-dev m4 g++-multilib autoconf libtool ncurses-dev unzip git python python-zmq zlib1g-dev wget libcurl4-gnutls-dev bsdmainutils automake curl cmake mingw-w64
curl https://sh.rustup.rs -sSf | sh
source $HOME/.cargo/env
rustup target add x86_64-pc-windows-gnu
```

#### Clone & Compile Komodo

##### Linux

```bash
cd ~
git clone https://github.com/jl777/komodo
cd komodo
git checkout FSM
./zcutil/fetch-params.sh
./zcutil/build.sh -j$(nproc)
```

##### MacOS

```bash
cd ~
git clone https://github.com/jl777/komodo
cd komodo
git checkout FSM
./zcutil/fetch-params.sh
./zcutil/build-mac.sh -j8
```

##### Windows

```bash
git clone https://github.com/jl777/komodo
cd komodo
git checkout FSM
./zcutil/fetch-params.sh
./zcutil/build-win.sh -j8
#This can take some time.
```


::: tip
Change the `8` in the `-j8` portion of the last command to any number of processor threads desired and/or appropriate for your machine.
:::

##### Update `komodod`

```bash
cd ~/komodo
git checkout FSM
git pull
./zcutil/build.sh -j$(nproc)
```

#### Launch the `ROGUE` chain and Set `pubkey` Value

##### Step 1 - Start the chain

Start the ROGUE chain with the following command in a terminal window and wait for the daemon to sync. Keep this terminal open and the daemon running for the duration of your Rogue gameplay.

```bash
cd ~/komodo/src
./komodod -ac_name=ROGUE -ac_supply=1000000 -addnode=5.9.102.210  -ac_cclib=rogue -ac_perc=10000000 -ac_reward=100000000 -ac_cc=60001 -ac_script=2ea22c80203d1579313abe7d8ea85f48c65ea66fc512c878c0d0e6f6d54036669de940febf8103120c008203000401cc -daemon
```

##### Step 2

Open a new terminal. This terminal can be used to execute all remaining installation and gameplay commands.

```bash
./komodo-cli -ac_name=ROGUE getnewaddress
```

The returned value is a ROGUE address. We need to find the associated pubkey for this address.

##### Step 3

Use the `validateaddress` method with the address.

```bash
./komodo-cli -ac_name=ROGUE validateaddress insert_address_here
```

The `validateaddress` method will return information similar to the following:

```JSON
{
  "isvalid": true,
  "address": "RPCeZmqW4Aam52DFLmMraWtu5CuXPxqk92",
  "scriptPubKey": "76a91498b5caa42ffe9868844c51ba6e085e5e7e92fc2588ac",
  "segid": 13,
  "ismine": true,
  "iswatchonly": false,
  "isscript": false,
  "pubkey": "02f183a71e93dfa7672ce7212187e45eabcf4077fed575348504b20295751ab1a2",
  "iscompressed": true,
  "account": ""
}
```

Look for the `pubkey` value:

```bash
"pubkey": "02f183a71e93dfa7672ce7212187e45eabcf4077fed575348504b20295751ab1a2",
```

This is the `pubkey` for our address.

##### Step 4

Set the pubkey for the ROGUE Smart Chain.

```bash
./komodo-cli -ac_name=ROGUE setpubkey 02f183a71e93dfa7672ce7212187e45eabcf4077fed575348504b20295751ab1a2
```


<collapse-text hidden title="Response">


```JSON
{
  "address": "RPCeZmqW4Aam52DFLmMraWtu5CuXPxqk92",
  "ismine": true,
  "pubkey": "02f183a71e93dfa7672ce7212187e45eabcf4077fed575348504b20295751ab1a2"
}
```

</collapse-text>


The pubkey is now set.

To reuse this pubkey in the future, include the pubkey as a [pubkey](../installations/common-runtime-parameters.html#pubkey) launch parameter.

Include the `pubkey` in the `-pubkey` launch parameter as follows:

```bash
cd ~/komodo/src
./komodod -ac_name=ROGUE -pubkey=02f183a71e93dfa7672ce7212187e45eabcf4077fed575348504b20295751ab1a2 -ac_supply=1000000 -addnode=5.9.102.210  -ac_cclib=rogue -ac_perc=10000000 -ac_reward=100000000 -ac_cc=60001 -ac_script=2ea22c80203d1579313abe7d8ea85f48c65ea66fc512c878c0d0e6f6d54036669de940febf8103120c008203000401cc -daemon
```

#### Installing the TUI (Optional)

Komodo offers an unofficial Terminal User Interface (TUI) to allow players to launch and conclude a game without having to interact with the module's API commands. The TUI software is provided for testing and ease-of-use purposes only.

Use of the TUI is optional, but recommended for most players.

The TUI software can be found in the downloadable software bundles:

[Link to downloadable software bundles](https://github.com/tonymorony/komodo_customconsensus_tui/releases)

## Walkthrough for API

Under normal circumstances, a user does not need to manually execute methods in the terminal to launch and conclude a game. Rather, the downloadable software bundles contain all necessary tools to play.

For users/developers who need a reference for the manual process, the following walkthroughs provide detailed step-by-step instructions.

- [Single-Player Mode Walkthrough](../customconsensus/rogue.html#single-player-mode-walkthrough)
- [Multi-Player Mode Walkthrough](../customconsensus/rogue.html#multi-player-mode-walkthrough)

### Single-Player Mode Walkthrough

#### Step 1

Open a new terminal and navigate to the `~/komodo/src` directory:

```bash
cd ~/komodo/src
```

#### Step 2

Create a new game via the [newgame](../customconsensus/rogue.html#newgame) method. For this example, we choose to have a single player with a `0` buy-in requirement.

Methods for ROGUE require the use of the [cclib](../komodo-api/cclib.html#cclib) method. The Rogue module's required `EVALCODE` for the `cclib` method is `17`.

Command:

```bash
./komodo-cli -ac_name=ROGUE cclib newgame 17 "[1]"
```


<collapse-text hidden title="Response">


```JSON
{
  "name": "rogue",
  "method": "newgame",
  "maxplayers": 1,
  "buyin": 0.00000000,
  "type": "newbie",
  "hex": "0400008085202f89010061c9741f0451fcbec05ff789eef49487f4e50dcfbe05534b3f37167e9be400010000007b4c79a276a072a26ba067a56580210223b2b9d35fb6383bbbc0dd6668825c91713bc21081b9ce33df3d7edbafa883058140aa48a0604d4d2eb76efd21639b26897fa3c036edd8dd4ca3d91c1f9cce294ec55071aab6187326ee1b1e80a1a3d22f72dd393fb65f009a619e8cf7fb0632a52ca100af03800111a10001ffffffff061027000000000000302ea22c80203d1579313abe7d8ea85f48c65ea66fc512c878c0d0e6f6d54036669de940febf8103120c008203000401cc1027000000000000302ea22c80203d1579313abe7d8ea85f48c65ea66fc512c878c0d0e6f6d54036669de940febf8103120c008203000401cc40420f0000000000302ea22c80208958791fdd38bdf532c97f1691fd231a3f1f5c0c3cd28b68d7383c8b1078828e81031210008203000401cc1027000000000000302ea22c80208958791fdd38bdf532c97f1691fd231a3f1f5c0c3cd28b68d7383c8b1078828e81031210008203000401cc00b8880000000000302ea22c80203d1579313abe7d8ea85f48c65ea66fc512c878c0d0e6f6d54036669de940febf8103120c008203000401cc0000000000000000106a0e114700000000000000000100000000000000341d00000000000000000000000000",
  "txid": "09d702b9bf678ee9d4efc29354566b4453e2e4ebdf7bac3496e667e8d435fe70",
  "result": "success"
}
```

</collapse-text>


The ROGUE software currently broadcasts the `hex` value automatically. It is not necessary to use the `sendrawtransaction` method.

The returned transaction id `txid` is the `gametxid`. Save this for future use.

#### Step 3

Check the game's state using the [gameinfo](../customconsensus/rogue.html#gameinfo) method:

Command:

```bash
./komodo-cli -ac_name=ROGUE cclib gameinfo 17 '["09d702b9bf678ee9d4efc29354566b4453e2e4ebdf7bac3496e667e8d435fe70"]'
```


<collapse-text hidden title="Response">


```JSON
{
  "name": "rogue",
  "method": "gameinfo",
  "gametxid": "09d702b9bf678ee9d4efc29354566b4453e2e4ebdf7bac3496e667e8d435fe70",
  "result": "success",
  "height": 7462,
  "start": 7462,
  "starthash": "0006b3ede92cd36bd50f7eca8bfffcb9a32254d1f24193517447752b004b582a",
  "seed": 3767108440867690538,
  "run": "./komodo-cli -ac_name=ROGUE cclib register 17 '["09d702b9bf678ee9d4efc29354566b4453e2e4ebdf7bac3496e667e8d435fe70"]'",
  "alive": 0,
  "numplayers": 0,
  "maxplayers": 1,
  "buyin": 0.00000000,
  "players": [
  ]
}
```

</collapse-text>


In the returned json object, observe the `run` value. This lists the specific command that must be executed in the terminal to register the game.

#### Step 4

Register the `gametxid` using the [register](../customconsensus/rogue.html#register) method:

```bash
./komodo-cli -ac_name=ROGUE cclib register 17 '["09d702b9bf678ee9d4efc29354566b4453e2e4ebdf7bac3496e667e8d435fe70"]'
```


<collapse-text hidden title="Response">


```JSON
{
  "name": "rogue",
  "method": "register",
  "maxplayers": 1,
  "buyin": 0.00000000,
  "type": "newbie",
  "hex": "0400008085202f890170fe35d4e867e69634ac7bdfebe4e253446b565493c2efd4e98e67bfb902d70902000000a74ca5a281a1a0819ca28194a067a56580210223b2b9d35fb6383bbbc0dd6668825c91713bc21081b9ce33df3d7edbafa8830581407c0a8458a64c5653b279bbff6f50d23474819c720330510f80294a7a6789d6a11bbb49efb610c8402b67d7323be456bd0b7e787856882cb16a58409b05e42e6aa129a5278020446b52761bffb00eaa7a055c9994987ce2120a551fb4dfd01ffae1ffbee6b56b8103020000af03800111a10001ffffffff02301b0f0000000000302ea22c802039784572269885d080d1990f4eea2b3a93b285b10887d66ccc5f63e0026b0be781031210008203000401cc0000000000000000446a42115270fe35d4e867e69634ac7bdfebe4e253446b565493c2efd4e98e67bfb902d709000000000000000000000000000000000000000000000000000000000000000000000000401d00000000000000000000000000",
  "txid": "0896bf6cdabb31d90aa470ba8b85b01193bbca07b44618f8cadc0ed12d4ea749",
  "result": "success"
}
```

</collapse-text>



#### Step 5

Check the game's current state again using the [gameinfo](../customconsensus/rogue.html#gameinfo) method. Use the `gametxid` as an argument:

```bash
./komodo-cli -ac_name=ROGUE cclib gameinfo 17 '["09d702b9bf678ee9d4efc29354566b4453e2e4ebdf7bac3496e667e8d435fe70"]'
```


<collapse-text hidden title="Response">


```JSON
{
  "name": "rogue",
  "method": "gameinfo",
  "gametxid": "09d702b9bf678ee9d4efc29354566b4453e2e4ebdf7bac3496e667e8d435fe70",
  "result": "success",
  "height": 7462,
  "start": 7462,
  "starthash": "0006b3ede92cd36bd50f7eca8bfffcb9a32254d1f24193517447752b004b582a",
  "seed": 3767108440867690538,
  "run": "cc/rogue/rogue 3767108440867690538 09d702b9bf678ee9d4efc29354566b4453e2e4ebdf7bac3496e667e8d435fe70",
  "alive": 1,
  "numplayers": 1,
  "maxplayers": 1,
  "buyin": 0.00000000,
  "players": [
    {
      "slot": 0,
      "status": "alive",
      "baton": "0896bf6cdabb31d90aa470ba8b85b01193bbca07b44618f8cadc0ed12d4ea749",
      "batonaddr": "R9dCYMKsDQRCg5CLpvThRser1gbBTmkEHG",
      "batonvout": 0,
      "batonvalue": 0.00990000,
      "batonht": 7469
    }
  ]
}
```

</collapse-text>


Note that the `gameinfo` method now returned a `seed` value, as well as player data.

In the returned json object, find the `run` value. This is the exact command needed to start the game.

#### Step 6 - Play

Wait until the network mines the `register_txid`. Optionally, use the [getrawmempool](../komodo-api/blockchain.html#getrawmempool) method to monitor the status of the transaction.

Once the transaction is mined, execute the `run` command (found in the returned json object earlier) to start the game:

```bash
cc/rogue/rogue 3767108440867690538 09d702b9bf678ee9d4efc29354566b4453e2e4ebdf7bac3496e667e8d435fe70
```

The game is now running and should be visible on-screen.

#### Step 7 - Play the Game

For instructions on in-game controls and objectives, [read this linked section.](../customconsensus/rogue.html#gameplay-documentation)

#### Step 8 - Bailout

If your character is still alive and you would like to leave the game while keeping your profits, follow this procedure to save your character:

To quit the game, type the letter `Q` on the keyboard. This opens a context menu. Type the letter `n` and press `Enter`.

This begins the process of leaving the game, but you are not finished yet.

Wait for the ROGUE network to mine all [`keystrokes`](../customconsensus/rogue.html#keystrokes) transactions. To see a list of all `keystrokes` created, check the `keystrokes.log` file in the `~/komodo/src` directory, and use the [getrawmempool](../komodo-api/blockchain.html#getrawmempool) method to verify when the last `keystrokes` are mined.

When the last transactions are mined, execute the [bailout](../customconsensus/rogue.html#bailout) method to leave the game while keeping the character and items in your `pubkey`, and the method will also transfer your in-game gold to `ROGUE` coins.

For example:

```bash
./komodo-cli -ac_name=ROGUE cclib bailout 17 '["09d702b9bf678ee9d4efc29354566b4453e2e4ebdf7bac3496e667e8d435fe70"]'
```

After the `bailout` transaction is mined the player may view their surviving character(s) via the [players](../customconsensus/rogue.html#players) and [playerinfo](../customconsensus/rogue.html#playerinfo) methods.

#### Step 9: Highlander Victory 

In this walkthrough we have used single-player mode. The following [highlander](../customconsensus/rogue.html#highlander) method is only available if the character manages to capture the `amulet` and safely exit the dungeon. In a normal multi-player game, the `highlander` method is available to either the first player to safely retrieve the `amulet`, or to the last player standing after all others have died.

The player that successfully executes the `highlander` method receives a prize: the collective value of all `ROGUE` coins that were contributed during the buy-in stage.

The `highlander` method is executed as follows:

```bash
./komodo-cli -ac_name=ROGUE cclib highlander 17 '["4fd6f5cad0fac455e5989ca6eef111b00292845447075a802e9335879146ad5a"]'
```

After the `highlander` transaction is mined the player may view their surviving character(s) via the [players](../customconsensus/rogue.html#players) and [playerinfo](../customconsensus/rogue.html#playerinfo) methods.

### Multi-Player Mode Walkthrough

In this walktrough we use two nodes to play a multi-player game of Rogue.

- Node 1 is `player1`
- Node 2 is `player2`

For educational purposes, we execute all methods manually, as opposed to using the [TUI](../customconsensus/rogue.html#installing-the-tui-optional).

#### Step 1: Create a Multi-Player Game

Open a new terminal and navigate to the `~/komodo/src` directory:

```bash
cd ~/komodo/src
```

For this game, we choose the following details:

- the max number of players: `2`
- the cost in `ROGUE` coins of the game `buyin`: `0.1`

Execute the [newgame](../customconsensus/rogue.html#newgame) method on `player1` as follows:

```bash
./komodo-cli -ac_name=ROGUE cclib newgame 17 '["2","0.1"]'
```


<collapse-text hidden title="Response">


```JSON
{
  "name": "rogue",
  "method": "newgame",
  "maxplayers": 2,
  "buyin": 0.10000000,
  "type": "buyin",
  "hex": "0400008085202f89010806e5efe696da16723dc894c191db31a78184a6d1e2f49d1be11baf5a711d15010000007b4c79a276a072a26ba067a56580210223b2b9d35fb6383bbbc0dd6668825c91713bc21081b9ce33df3d7edbafa883058140166b7641979bb086181d30a5e0c9a84591dc8a3455f77858735fc75aa087b7dd4d0745fac898e547a069b5e75273bf0b28c29466b7f41c5800cb888bfff96f52a100af03800111a10001ffffffff081027000000000000302ea22c80203d1579313abe7d8ea85f48c65ea66fc512c878c0d0e6f6d54036669de940febf8103120c008203000401cc40420f0000000000302ea22c80208958791fdd38bdf532c97f1691fd231a3f1f5c0c3cd28b68d7383c8b1078828e81031210008203000401cc40420f0000000000302ea22c80208958791fdd38bdf532c97f1691fd231a3f1f5c0c3cd28b68d7383c8b1078828e81031210008203000401cc1027000000000000302ea22c80208958791fdd38bdf532c97f1691fd231a3f1f5c0c3cd28b68d7383c8b1078828e81031210008203000401cc1027000000000000302ea22c80208958791fdd38bdf532c97f1691fd231a3f1f5c0c3cd28b68d7383c8b1078828e81031210008203000401ccb04e790000000000302ea22c80203d1579313abe7d8ea85f48c65ea66fc512c878c0d0e6f6d54036669de940febf8103120c008203000401cc10270000000000002321027d28d7d59ac499fac55f89b9e06933d66aaf74435c48326d83f8fbc6a7b14e85ac0000000000000000106a0e1147809698000000000002000000000000000dd400000000000000000000000000",
  "txid": "4ccf9ca8b1198b35b48dc7126c6b9648b243c44076e4c4e4fe474b129028abde",
  "result": "success"
}
```

</collapse-text>


Save the returned `txid` value for future use. This is our `gametxid`.

Use the [gameinfo](../customconsensus/rogue.html#gameinfo) method to check information about the game:

```bash
./komodo-cli -ac_name=ROGUE cclib gameinfo 17 '["4ccf9ca8b1198b35b48dc7126c6b9648b243c44076e4c4e4fe474b129028abde"]'
```


<collapse-text hidden title="Response">


```JSON
{
  "name": "rogue",
  "method": "gameinfo",
  "gametxid": "4ccf9ca8b1198b35b48dc7126c6b9648b243c44076e4c4e4fe474b129028abde",
  "result": "success",
  "gameheight": 54265,
  "height": 54265,
  "start": 54270,
  "alive": 0,
  "openslots": 2,
  "numplayers": 0,
  "maxplayers": 2,
  "buyin": 0.10000000,
  "seed": 0,
  "players": [
  ]
}
```

</collapse-text>


As shown in the returned json object, the game has a `maxplayers` value of `2` and an `openslots` value of `0`, as no players have joined.

Note that the `gameheight` value is `54265`. This is the block height at which the `gametxid` was created. 

Also note that the `start` value is `54270`. This is the block height at which the `seed` value will be revealed, allowing players to generate the level design and begin the game. 

#### Step 2: Register for the Game

For our example, `player1` would like to use an existing character that survived a previous game. This allows `player1` to start with all the advantages this character achieved previously, including character statistics and items.

To activate the existing character, `player1` includes the associated `playertxid` for the character when executing the [register](../customconsensus/rogue.html#register) method. (The `playertxid` values of any `pubkey` can be found using the [players](../customconsensus/rogue.html#players) method.)

The player also includes the `gametxid` as the first argument of the `register` method.

```bash
./komodo-cli -ac_name=ROGUE cclib register 17 '["4ccf9ca8b1198b35b48dc7126c6b9648b243c44076e4c4e4fe474b129028abde","8005f81a604df6bbfae91dc8252505df43edbdf06492a2201362cb42dba4d8f2"]'
```


<collapse-text hidden title="Response">


```JSON
{
  "name": "rogue",
  "method": "register",
  "maxplayers": 2,
  "buyin": 0.10000000,
  "type": "buyin",
  "hex": "0400008085202f8903deab2890124b47fee4c4e47640c443b248966b6c12c78db4358b19b1a89ccf4c01000000a74ca5a281a1a0819ca28194a067a56580210223b2b9d35fb6383bbbc0dd6668825c91713bc21081b9ce33df3d7edbafa883058140d68dba89573f717140a84471f1056bc783996ed45b39218425eb0b9dd2f51f2563c8779e21ed4aa62defee170920cd760a5f80dc7a184414a12dec27d6e39990a129a5278020446b52761bffb00eaa7a055c9994987ce2120a551fb4dfd01ffae1ffbee6b56b8103020000af03800111a10001fffffffff2d8a4db42cb621320a29264f0bded43df052525c81de9fabbf64d601af8058001000000804c7ea27ba077a26ba067a5658021027d28d7d59ac499fac55f89b9e06933d66aaf74435c48326d83f8fbc6a7b14e858140ba62fa04393766f2a39bc23c1cded3ac8fa940e2f47747b03376ecf467f2307737812e2927cbbd9787f8632979d5f7575e5f603d0dbaafc8905605b836014b0da100af03800111af038001f2a10001ffffffff0d45d807c5f96bbf021e7186e5632c4ff37cda13f4fbc0861e76d32ae078985a000000004847304402206a20289df3b06cec3154ab48d4a3cb62eb7c27ddbaacd24938307a3a003bb8cf02207f658d0c442b81ced5b44031c76d548185fa33f810fa1a3209d5181e2e46e16a01ffffffff04b0b1a70000000000302ea22c80202ba0b269f75c72a0ce23e03812814b1e76a8fd57b3e75fee8b37bfef2b4ebf3581031210008203000401cc0100000000000000302ea22c80207f0205ad6b02be91baf2a56dcc77381e7b0e19cb9a83dfb9530316958f5b706781032210008203000401cc804a5d05000000002321027d28d7d59ac499fac55f89b9e06933d66aaf74435c48326d83f8fbc6a7b14e85ac00000000000000008c6a4c89f2748005f81a604df6bbfae91dc8252505df43edbdf06492a2201362cb42dba4d8f2012102deaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddeaddead16421152deab2890124b47fee4c4e47640c443b248966b6c12c78db4358b19b1a89ccf4cf2d8a4db42cb621320a29264f0bded43df052525c81de9fabbf64d601af805800000000014d400000000000000000000000000",
  "txid": "20b5cf8249dda9e532d93d63e0b7fc3e28b15fdc606dbf04e06b3afd2cbb023d",
  "result": "success"
}
```

</collapse-text>


In our example, the `player2` node does not have a character from a previous game, and therefore `player2` executes the `register` method with only the `gametxid`.

```bash
./komodo-cli -ac_name=ROGUE cclib register 17 '["4ccf9ca8b1198b35b48dc7126c6b9648b243c44076e4c4e4fe474b129028abde"]'
```


<collapse-text hidden title="Response">


```JSON
{
  "name": "rogue",
  "method": "register",
  "maxplayers": 2,
  "buyin": 0.10000000,
  "type": "buyin",
  "hex": "0400008085202f8902deab2890124b47fee4c4e47640c443b248966b6c12c78db4358b19b1a89ccf4c02000000a74ca5a281a1a0819ca28194a067a56580210223b2b9d35fb6383bbbc0dd6668825c91713bc21081b9ce33df3d7edbafa883058140d6ba58b1f908127a08975c2b894908a5394e17752f3f4fc42f62a84854a6a34e7d36b9b0f5a9e8331b0b763fccd9c751c9768f494a160ba0c173253c598d3459a129a5278020446b52761bffb00eaa7a055c9994987ce2120a551fb4dfd01ffae1ffbee6b56b8103020000af03800111a10001ffffffff0d47edc39292bc46274460312302e9f5fbc7ff8e9e03dfc26fde0c9137030661000000004847304402204b8bb25641221d02db0af6319044c7249fe6e1e3aacf3430f296444bd00780a7022046a53d377dd1746b32ad38482fc3d88aa485fad2e1a7da634d46a753000b3bc601ffffffff04b0b1a70000000000302ea22c8020dab28a48d54ca8ae474d7ff8fefa29aa38739f873f9a2488d5260e481c4d924381031210008203000401cc0100000000000000302ea22c80207f0205ad6b02be91baf2a56dcc77381e7b0e19cb9a83dfb9530316958f5b706781032210008203000401cc7f4a5d05000000002321030c16387fda9c2c3e1b90b272a938424f9eecf16e859887874fb843892c3572abac0000000000000000446a421152deab2890124b47fee4c4e47640c443b248966b6c12c78db4358b19b1a89ccf4c00000000000000000000000000000000000000000000000000000000000000000000000017d400000000000000000000000000",
  "txid": "8c595f0fd053d140bb1449b962ffb31fc983c7de9e19c44fd4b1c3e908d99efa",
  "result": "success"
}
```

</collapse-text>


Wait until the `txid` values returned on both nodes are mined. (Use the [getrawmempool](../komodo-api/blockchain.html#getrawmempool) method to check the transaction's status.)

After the transactions are mined, use the [gameinfo](../customconsensus/rogue.html#gameinfo) method to check the game's status again:

```bash
./komodo-cli -ac_name=ROGUE cclib gameinfo 17 '["4ccf9ca8b1198b35b48dc7126c6b9648b243c44076e4c4e4fe474b129028abde"]'
```


<collapse-text hidden title="Response">


```JSON
{
  "name": "rogue",
  "method": "gameinfo",
  "gametxid": "4ccf9ca8b1198b35b48dc7126c6b9648b243c44076e4c4e4fe474b129028abde",
  "result": "success",
  "gameheight": 54265,
  "height": 54265,
  "start": 54270,
  "starthash": "0009fb977f5d34ff8fbaf5393e17ecc6c590d9f6db120c69b684959922b31fbd",
  "seed": 3928429259918614461,
  "run": "cc/rogue/rogue 3928429259918614461 4ccf9ca8b1198b35b48dc7126c6b9648b243c44076e4c4e4fe474b129028abde",
  "alive": 2,
  "openslots": 0,
  "numplayers": 2,
  "maxplayers": 2,
  "buyin": 0.10000000,
  "seed": 3928429259918614461,
  "players": [
    {
      "slot": 0,
      "status": "registered",
      "baton": "20b5cf8249dda9e532d93d63e0b7fc3e28b15fdc606dbf04e06b3afd2cbb023d",
      "tokenid": "8005f81a604df6bbfae91dc8252505df43edbdf06492a2201362cb42dba4d8f2",
      "batonaddr": "RVuzXY65FyJiPPWSBc9efATh6nb4M9MceR",
      "ismine": false,
      "batonvout": 0,
      "batonvalue": 0.10990000,
      "batonht": 54273,
      "player": {
        "gametxid": "4ccf9ca8b1198b35b48dc7126c6b9648b243c44076e4c4e4fe474b129028abde",
        "batontxid": "20b5cf8249dda9e532d93d63e0b7fc3e28b15fdc606dbf04e06b3afd2cbb023d",
        "playertxid": "8005f81a604df6bbfae91dc8252505df43edbdf06492a2201362cb42dba4d8f2",
        "tokenid": "8005f81a604df6bbfae91dc8252505df43edbdf06492a2201362cb42dba4d8f2",
        "data": "250000000e00000010001000020000000b0000000700000002000000000000003a0000000000000001000000000000000000000000000000000000001000000000000000000000000000000000000000000000005d00000000000000010000000100000000000000000000000600000012000000000000000000000000000000000000000000000029000000ffffffff010000000000000001000000010000000000000012000000000000003278340000000000317833000000000029000000ffffffff010000000200000001000000000000000000000012000000000000003178310000000000317831000000000029000000020000001f000000030000000000000000000000000000001e00000000000000317831000000000032783300000000002f0000000000000001000000080000000000000000000000060000001000000000000000317831000000000031783100000000003d00000000000000010000000200000000000000000000000b000000100000000000000030783000000000003078300000000000",
        "pack": [
          "Some food",
          "+1 ring mail [protection 4]",
          "A +1,+1 mace",
          "A +1,+0 short bow",
          "31 +0,+0 arrows",
          "A staff of slow monster [6 charges](kukui wood)",
          "A ring of sustain strength(obsidian)"
        ],
        "packsize": 7,
        "hitpoints": 14,
        "strength": 16,
        "maxstrength": 16,
        "level": 2,
        "experience": 11,
        "dungeonlevel": 2,
        "chain": "ROGUE",
        "pname": "tester02"
      }
    },
    {
      "slot": 1,
      "status": "registered",
      "baton": "8c595f0fd053d140bb1449b962ffb31fc983c7de9e19c44fd4b1c3e908d99efa",
      "tokenid": "0000000000000000000000000000000000000000000000000000000000000000",
      "batonaddr": "RMYAWp4qQ2RQRAeBHeW3GdD79GjGHkNwE6",
      "ismine": true,
      "batonvout": 0,
      "batonvalue": 0.10990000,
      "batonht": 54276
    }
  ]
}
```

</collapse-text>


The `openslots` value is now `0`, as `2` players have joined. 

Note also that the `start` block height has past, and therefore the `seed` value is available.

Also note that the response includes information about the `playertxid` character provided by `player1` during registration.

The game is prepared. Both players may begin the game using the command found in the returned `run` value. 

```bash
cc/rogue/rogue 3928429259918614461 4ccf9ca8b1198b35b48dc7126c6b9648b243c44076e4c4e4fe474b129028abde
```

#### Step 3: Play and Finish the Game

[View this linked section for instructions on gameplay.](../customconsensus/rogue.html#gameplay-documentation)

In our example, `player1` decides to bail out of the game without waiting until `player2` dies, and without retrieving the `amulet` from the dungeon. 

To exit, `player1` executes the [bailout](../customconsensus/rogue.html#bailout) method:

```bash
./komodo-cli -ac_name=ROGUE cclib bailout 17 '["4ccf9ca8b1198b35b48dc7126c6b9648b243c44076e4c4e4fe474b129028abde"]'
```


<collapse-text hidden title="Response">


```json
{
  "name": "rogue",
  "method": "bailout",
  "myrogueaddr": "RVuzXY65FyJiPPWSBc9efATh6nb4M9MceR",
  "gametxid": "4ccf9ca8b1198b35b48dc7126c6b9648b243c44076e4c4e4fe474b129028abde",
  "hex": "0400008085202f8903bafcee9bbe5536b0a5dc2bdff72f34ceedc4f6dae07cdf9eef973339a095845900000000a74ca5a281a1a0819ca28194a067a5658021027d28d7d59ac499fac55f89b9e06933d66aaf74435c48326d83f8fbc6a7b14e858140542c935c9812a93c4b304123f86f3b71b5a2236edbc7d080dbf9fec1ddd683397935d5990eb2617e304be1560740ff80fdc3d7524c68adfc70cf57e2376b3666a129a5278020446b52761bffb00eaa7a055c9994987ce2120a551fb4dfd01ffae1ffbee6b56b8103020000af03800111a10001ffffffffdeab2890124b47fee4c4e47640c443b248966b6c12c78db4358b19b1a89ccf4c03000000a74ca5a281a1a0819ca28194a067a56580210223b2b9d35fb6383bbbc0dd6668825c91713bc21081b9ce33df3d7edbafa8830581403f6df06683f5788ee5ea9113af44d0d76753e619be4b1ead6a56c9fbabaa5c1e25a26f2c6097398c1f3eb98578eff8c05315d9f49a30f1006b6d8dc72a7d45c2a129a5278020446b52761bffb00eaa7a055c9994987ce2120a551fb4dfd01ffae1ffbee6b56b8103020000af03800111a10001ffffffff04e14b45dfd8f96da57b4cd7207b8349085a9c58e617f559b6a633dc751a83d3010000007b4c79a276a072a26ba067a56580210223b2b9d35fb6383bbbc0dd6668825c91713bc21081b9ce33df3d7edbafa8830581400d139c3302c33098fca9d25e3072ab9ccedb07bb82f79e8f97d35078183cf69c230d64ce52c4f9ba5c1f8f26affeb8ff4646a77240cc38f2af7d24be627c6fb8a100af03800111a10001ffffffff061027000000000000302ea22c8020432de388aabcb6b4e3326351d1d815cee8be9a8d37b055cd1c0cf8782e5c50c08103120c008203000401cc0100000000000000302ea22c8020f29dbf12dea61586c1c7a8c6fe99eaa82a32298686bac7d0f698e91e896f48d481032210008203000401cca04b0000000000002321027d28d7d59ac499fac55f89b9e06933d66aaf74435c48326d83f8fbc6a7b14e85ac50603f0100000000302ea22c80203d1579313abe7d8ea85f48c65ea66fc512c878c0d0e6f6d54036669de940febf8103120c008203000401cc1f4e0000000000002321027d28d7d59ac499fac55f89b9e06933d66aaf74435c48326d83f8fbc6a7b14e85ac0000000000000000fdcf026a4dcb02f26321027d28d7d59ac499fac55f89b9e06933d66aaf74435c48326d83f8fbc6a7b14e851333393238343239323539393138363134343631403463636639636138623131393862333562343864633731323663366239363438623234336334343037366534633465346665343734623132393032386162646511fd4e021151deab2890124b47fee4c4e47640c443b248966b6c12c78db4358b19b1a89ccf4c05524f4755450874657374657230320000000021027d28d7d59ac499fac55f89b9e06933d66aaf74435c48326d83f8fbc6a7b14e85fdf4012c0000000e0000001000100002000000110000000900000001000000000000003a0000000000000001000000000000000000000000000000000000001200000000000000000000000000000000000000000000005d0000000000000001000000010000000000000000000000060000001200000000000000000000000000000000000000000000005d00000000000000010000000000000000000000000000000800000010000000000000003078300000000000307830000000000029000000ffffffff010000000000000001000000010000000000000012000000000000003278340000000000317833000000000029000000ffffffff010000000200000001000000000000000000000012000000000000003178310000000000317831000000000029000000020000001f000000030000000000000000000000000000001e00000000000000317831000000000032783300000000002f0000000000000001000000080000000000000000000000060000001200000000000000317831000000000031783100000000003d00000000000000010000000200000000000000000000000b0000001200000000000000307830000000000030783000000000003f00000000000000010000000800000000000000000000000b000000100000000000000030783000000000003078300000000000000000002dd400000000000000000000000000",
  "txid": "5184b9d50cb70eb3b2f92e53e66ff90777a650e9167f8a133eb13a2da2ae999c",
  "result": "success"
}
```

</collapse-text>


With the `bailout` transaction mined, the `gameinfo` method now returns updated information:

Command:

```bash
./komodo-cli -ac_name=ROGUE cclib gameinfo 17 '["4ccf9ca8b1198b35b48dc7126c6b9648b243c44076e4c4e4fe474b129028abde"]'
```


<collapse-text hidden title="Response">


```JSON
{
  "name": "rogue",
  "method": "gameinfo",
  "gametxid": "4ccf9ca8b1198b35b48dc7126c6b9648b243c44076e4c4e4fe474b129028abde",
  "result": "success",
  "gameheight": 54265,
  "height": 54265,
  "start": 54270,
  "starthash": "0009fb977f5d34ff8fbaf5393e17ecc6c590d9f6db120c69b684959922b31fbd",
  "seed": 3928429259918614461,
  "run": "cc/rogue/rogue 3928429259918614461 4ccf9ca8b1198b35b48dc7126c6b9648b243c44076e4c4e4fe474b129028abde",
  "alive": 1,
  "openslots": 0,
  "numplayers": 2,
  "maxplayers": 2,
  "buyin": 0.10000000,
  "seed": 3928429259918614461,
  "players": [
    {
      "slot": 0,
      "status": "finished",
      "baton": "5184b9d50cb70eb3b2f92e53e66ff90777a650e9167f8a133eb13a2da2ae999c",
      "tokenid": "0000000000000000000000000000000000000000000000000000000000000000",
      "batonaddr": "RVuzXY65FyJiPPWSBc9efATh6nb4M9MceR",
      "ismine": true,
      "batonvout": 0,
      "batonvalue": 0.00010000,
      "batonht": 54297,

    ... (omitted for brevity) ...

```

</collapse-text>


Note that the `alive` property has a value of `1`, indicating that the `player1` character has left and the `player2` character remains. Also note that in the `players` array, the first json object (which describes the `player1` node) has a `status` of `finished`.

Since `player1` left early, `player2` is the last character standing. The [highlander](../customconsensus/rogue.html#highlander) method is now available to him.

`player2` first begins the exit procedure by entering `Q`, then `y + Enter`.

With the exit process in motion, `player2` executes the `highlander` method:

```bash 
./komodo-cli -ac_name=ROGUE cclib highlander 17 '["4ccf9ca8b1198b35b48dc7126c6b9648b243c44076e4c4e4fe474b129028abde"]'
```


<collapse-text hidden title="Response">


```json
{
  "name": "rogue",
  "method": "highlander",
  "myrogueaddr": "RMYAWp4qQ2RQRAeBHeW3GdD79GjGHkNwE6",
  "gametxid": "4ccf9ca8b1198b35b48dc7126c6b9648b243c44076e4c4e4fe474b129028abde",
  "hex": "0400008085202f8906fb01b5159bd9eb16c969a274573312a870eaec6ca921d45cfea828cf4bfdce7400000000a74ca5a281a1a0819ca28194a067a5658021030c16387fda9c2c3e1b90b272a938424f9eecf16e859887874fb843892c3572ab814040b427395fa60eec5d645994bdf49f56479913f76af9a0143a1cedba51bdf40604db488e5f16c22738d007832cce6f5694e0b72a59934af01283241eabfb04f4a129a5278020446b52761bffb00eaa7a055c9994987ce2120a551fb4dfd01ffae1ffbee6b56b8103020000af03800111a10001ffffffffdeab2890124b47fee4c4e47640c443b248966b6c12c78db4358b19b1a89ccf4c04000000a74ca5a281a1a0819ca28194a067a56580210223b2b9d35fb6383bbbc0dd6668825c91713bc21081b9ce33df3d7edbafa8830581401b629f9b61eef6513f07b351a2a3c3ece554204fc355bc5d22cb2df7fa86355908e4d443783f998fdaa98818078a9644f8147391e2b96f53aa025619deab057ba129a5278020446b52761bffb00eaa7a055c9994987ce2120a551fb4dfd01ffae1ffbee6b56b8103020000af03800111a10001ffffffffdeab2890124b47fee4c4e47640c443b248966b6c12c78db4358b19b1a89ccf4c000000007b4c79a276a072a26ba067a56580210223b2b9d35fb6383bbbc0dd6668825c91713bc21081b9ce33df3d7edbafa88305814077ca033d18a0125a269abdacb825d399f950e564eb9ad38f53eadd30213d158349952d30e109b7bfd5f47165e3e05b849c919f028bf447813a006fb76cf8fafba100af03800111a10001ffffffff09d702382f7d9bb899b5c935ec85f17da65df496c0898d5466e852235a99a529010000007b4c79a276a072a26ba067a56580210223b2b9d35fb6383bbbc0dd6668825c91713bc21081b9ce33df3d7edbafa883058140f9885eba23b5f7ce803cd6256afdfda72cdac6e3112c448c9752e378310b4f8e66f18a1a9309d9c848680c0e1656cabb63857426a5e34c831ee7ba8883478d23a100af03800111a10001ffffffff0b295c8f2da505fd2fd76a23e742976855de3476381ea54ea2f4741398f9c8e5010000007b4c79a276a072a26ba067a56580210223b2b9d35fb6383bbbc0dd6668825c91713bc21081b9ce33df3d7edbafa8830581402adefb3329c07c992aa0e5217ec129bbbdea0b60a9ef4dd65a8788833f764012673e9888b28a6cd61e438c95703c93becd0344d59e8b4af0800289b8539e104ca100af03800111a10001ffffffff0b473035d1618096e7856167a47a80e440b05884c2a6f9cc51545ea9bf22477b010000007b4c79a276a072a26ba067a56580210223b2b9d35fb6383bbbc0dd6668825c91713bc21081b9ce33df3d7edbafa883058140586da282bd1f1038c2f34f9bf93543cb0bc315d37d3572d262a6b7d9133533920fdb65118b702435bdbb62e41c4d873e79cc9ce6786ea74686f5c49413358c36a100af03800111a10001ffffffff061027000000000000302ea22c8020432de388aabcb6b4e3326351d1d815cee8be9a8d37b055cd1c0cf8782e5c50c08103120c008203000401cc0100000000000000302ea22c8020b3004eceb8c0082eae35418495dc48c6785dc23d0176e82514c90a41d93198ea81032210008203000401cc343a3101000000002321030c16387fda9c2c3e1b90b272a938424f9eecf16e859887874fb843892c3572abacbc9e3f0100000000302ea22c80203d1579313abe7d8ea85f48c65ea66fc512c878c0d0e6f6d54036669de940febf8103120c008203000401cc2f750000000000002321030c16387fda9c2c3e1b90b272a938424f9eecf16e859887874fb843892c3572abac0000000000000000fd2b026a4d2702f26321030c16387fda9c2c3e1b90b272a938424f9eecf16e859887874fb843892c3572ab1333393238343239323539393138363134343631403463636639636138623131393862333562343864633731323663366239363438623234336334343037366534633465346665343734623132393032386162646511fdaa011148deab2890124b47fee4c4e47640c443b248966b6c12c78db4358b19b1a89ccf4c05524f475545000100000021030c16387fda9c2c3e1b90b272a938424f9eecf16e859887874fb843892c3572abfd58010d0000000c0000001000100001000000020000000600000001000000000000003a0000000000000001000000000000000000000000000000000000001000000000000000000000000000000000000000000000005d00000000000000010000000100000000000000000000000600000012000000000000000000000000000000000000000000000029000000ffffffff010000000000000001000000010000000000000012000000000000003278340000000000317833000000000029000000ffffffff0100000002000000010000000000000000000000120000000000000031783100000000003178310000000000290000000200000022000000030000000000000000000000000000001e00000000000000317831000000000032783300000000003f00000000000000010000000800000000000000000000000b0000001000000000000000307830000000000030783000000000000000000030d400000000000000000000000000",
  "txid": "fc86d6b5f5d3ab98de97d50fbd3853c726197d28a9436aeba66e70dadd541065",
  "result": "success"
}
```

</collapse-text>


The multi-player game is now finished. The `player2` node received the `highlander` prize, including the total `buyin` amount and an increased conversion rate of in-game gold to `ROGUE` coins.

After the `bailout` and `highlander` transactions are mined, the players may view their surviving character via the [players](../customconsensus/rogue.html#players) and [playerinfo](../customconsensus/rogue.html#playerinfo) methods.


## Gameplay Documentation

As Komodo's Rogue implementation is based off of the classic Rogue game, the classic manual provides the basic instructions for the game:

[Link to Classic Rogue Manual Here](https://docs.freebsd.org/44doc/usd/30.rogue/paper.pdf)

After reading the linked manual, there are additional aspects to keep in mind for Komodo's unique implementation.

### Gameplay Modes

Komodo's Rogue features two different game modes. There is one mode for single-player gameplay, where the `maxplayer` value is set to `1`, and one mode for multi-player gameplay, where the `maxplayer` value is greater than `1`.

#### Single-Player Mode

The single-player mode is more limited in nature. In general, this mode is for practicing or farming purposes.

There are no time limits.

As soon as the `register_txid` is confirmed the player may begin to play.

When concluding the game, the conversion of in-game gold to `ROGUE` coins is halved. See the [highlander](../customconsensus/rogue.html#highlander) and [bailout](../customconsensus/rogue.html#bailout) methods for further details.

#### Multi-Player Mode

If more than one player is allowed in the game parameters, the game goes into "Highlander" mode. In this mode, there can be only one winner of each game. The winner is either the last player standing, or the first player to retrieve the `amulet` and successfully exit the dungeon.

Multi-player mode also adds a time limit that is based on the frequency of keystrokes. So long as the players are frequently entering commands, the time limit will expire in approximately one hour. If players are not frequently entering keystrokes, the time limit can vary.

There is a waiting period after the `gametxid` is confirmed. This ensures that no player receives an unfair advantage via advanced knowledge of the start time. The delay is `5` blocks. On a default Smart Chain, this creates a `5` minute wait period. Once the `5` blocks are mined, the Smart Chain automatically reveals a `seed` that is created using blockchain-based provable randomization. The `seed` provides the basis for level-design generation. After the level is generated, the players may begin to play. 

Due to the fact that the entropy (based on the `seed`) was the same for both players during level generation, both players will begin at dungeon-level `1`. However, the generation of levels greater than `1` take into account the gameplay of the characters, and therefore the level designs will be different for each player.

There are two methods for winning the game. The most direct way to win the game is to obtain the `amulet` and return from the dungeon. Alternatively, the player also may win by having the last surviving character. The winner receives all of the `buyin` coins that were originally contributed, as well as an increased conversion ratio for their in-game gold to `ROGUE` reward.

See the [highlander](../customconsensus/rogue.html#highlander) method for further details.

### The Mechanics of Saving, Trading, and Reusing Characters

::: tip Note

Due to the nature of saving and reusing characters, the Komodo implementation of Rogue changes the manner in which the user saves characters. Instead of typing `s` on the keyboard, type `Q + y + Enter`, then execute the [bailout](../customconsensus/rogue.html#bailout) method to conclude the game.

:::

If a player successfully uses either the [highlander](../customconsensus/rogue.html#highlander) or [bailout](../customconsensus/rogue.html#bailout) method to conclude a game, the player may save their character, items, and achieved characteristics. They also convert the character's in-game gold to `ROGUE` coins. The ratio of conversion depends upon the game conditions; see the `highlander` and `bailout` methods for further details.

#### Recalling an Existing Character

When either of these methods are executed, the returned response includes a `playertxid` transaction id. The `playertxid` represents the state of this character at the completion of the game. It is used as an argument for the [register](../customconsensus/rogue.html#register) method when recalling the character, items, and achieved characteristics into a future game. 

The `playertxid` value changes with each game, and therefore only the most recent `playertxid` for a character should be used. To see a complete list of current `playertxid` values belonging to the user's `pubkey`, use the [playerinfo](../customconsensus/rogue.html#playerinfo) method. 

When the user registers an existing character, the game dungeon's difficulty begins at level `1`, and the character has no gold (as it was converted to `ROGUE` coins). Also, even if the character has armor and a wielded weapon in their item list, these items are not equipped by default. The player must equip them at the start of the game by typing the letters `w` for weapon and `W` for armor.

One gameplay element that the Komodo team has changed from classic Rogue is the ability to scale the amount of inventory the character may carry according to the character's strength. The formula is as follows:

```
current max inventory = character strength * 2
```

The highest `max inventory` value is `23` unique letters. Throwable-object packages count as a single item.

If the user bails out of a game while holding more items than they are allowed to carry, the game will automatically flush items from the character's inventory as a part of the `bailout` method.

#### Trading an Existing Character

A character that survived a game is also a non-fungible asset and can be traded on the blockchain. When trading a character, the user does not use the `playertxid` value. Rather, the user employs the `tokentxid` value. This `tokentxid` is used in coordination with the [Tokens CC](../customconsensus/tokens.html#introduction) module for on-chain trading.

The `tokentxid` can be found by using the [playerinfo](../customconsensus/rogue.html#playerinfo) method and submitting the known `playertxid` as an argument. For more information, see the `playerinfo` method.

The `tokentxid` is created at the character's initial creation and does not change throughout the character's life. When the character dies, the `tokentxid` is sent to a burn address, making the character permanently unplayable. 

# Understanding Antara Addresses

The method of transferring module-related assets is often slightly different than the typical Smart Chain transaction.

When making a transaction on a Smart Chain, you normally deal with a sending address and a receiving address. To move coins, you might use methods such as <b>sendtoaddress</b> or <b>z_sendmany</b>.

When using Antara, however, there are a few new types of addresses to keep in mind when working with transactions. It is not necessary to fully understand all of the address types; only a general understanding is needed.

### Creating and Launching With a Pubkey

The first address you must understand is the pubkey. Any user using an Antara based module must have a pubkey indicated in their daemon. This forms the basis for all addresses related to various modules.

<!--

Sidd: We can cut this below, I believe.

Typically, each module will take the pubkey, combine it with a unique and module-specific number called the `EVAL code`, and create a new [Base58Check](https://en.bitcoin.it/wiki/Base58Check_encoding) encoded address from it. This `Base58Check` encoded address will be the address you use for interacting with the specific Antara-based modules.

-->

To get a pubkey, launch the chain with the normal launch parameters and execute the [getnewaddress](../komodo-api/wallet.html#getnewaddress) API command.

```bash
./komodo-cli -ac_name=HELLOWORLD getnewaddress
```

This will return a new address:

```bash
DO_NOT_USE_ADDRESSgg2ionaes1J5L786
```

Now, execute the [validateaddress](../komodo-api/util.html#validateaddress) command.

```bash
./komodo-cli -ac_name=HELLOWORLD validateaddress DO_NOT_USE_ADDRESSgg2ionaes1J5L786
```

This will return a json object with many properties. In the properties you will see:

```bash
"pubkey": "DO_NOT_USE_ADDRESS019a79b0921a1be6d3ca6f9e8a050feb14eb845fe46b9d756"
```

This is will be your module pubkey; you must now indicate it to the daemon.

To do this, first stop the daemon.

```bash
./komodo-cli -ac_name=HELLOWORLD stop
```

Then relaunch your daemon using the required parameters, and make sure to include your pubkey as an additional parameter. For example:

```bash
./komodo-cli -ac_name=HELLOWORLD -ac_supply=777777 -ac_cc=777 -pubkey=DO_NOT_USE_ADDRESS019a79b0921a1be6d3ca6f9e8a050feb14eb845fe46b9d756
```

#### CC Addresses

The daemon will now use the above pubkey as the basis for all addresses used for the different modules.

To discover the addresses the pubkey provides, you will typically use an `address` related API command from the list of available commands of your chosen module. For example, the [<b>faucetaddress</b>](../basic-docs/fluidity/fluidity-api/faucet.html#faucetaddress) command would return a response like this:

```json
{
  "result": "success",
  "FaucetCCaddress": "R9zHrofhRbub7ER77B7NrVch3A63R39GuC",
  "Faucetmarker": "RKQV4oYs4rvxAWx1J43VnT73rSTVtUeckk",
  "GatewaysPubkey": "03ea9c062b9652d8eff34879b504eda0717895d27597aaeb60347d65eed96ccb40",
  "FaucetCCassets": "RQ3ZQycSBM5MPPEopxoEC6R7VLRo1Fmk6f",
  "myCCaddress": "RReGLfH2MTrkeLSepkVy5vnQPE29g7KofS",
  "myaddress": "RJYiWn3FRCSSLf9Pe5RJcbrKQYosaMburP"
}
```

`FaucetCCaddress` is the address that corresponds to the default Faucet module.

<!-- Sidd: Is the above the same as the global CC address? -->

`myCCaddress` is the address your node uses for interacting with the Faucet module. This is the user address for managing funds in an Antara module.

The `myaddress` property is the normal address that corresponds to your pubkey. This is the user's address for the Smart Chain's main coin.  

::: tip

For readers who are curious, the letters "CC" are an abbreviation of an internal technology that all Antara modules use while creating unique addresses.

:::

The use-cases of the different addresses depends on the functionality in question, and the desired outcome.

Also, each module has its own API commands for moving coins or tokens. For example, the Tokens module offers the [<b>tokentransfer</b>](../customconsensus/tokens.html#tokentransfer) method.
# Assets

## Introduction

The Assets Module provides basic distributed exchange (DEX) functionality for trading `tokens` created using the [Tokens]() module.

The Asset Module allows anyone to buy or sell tokens using the Smart Chain's coins.

#### Assets Module Flow

##### Seller's Perspective

- A token owner places a new "ask" request with the <b>tokenask</b> method specifying the amount of tokens they want to sell and the price. The assets module then creates a new token ask order and the specified amount of tokens is locked in the CC Assets global address
- To fulfill the ask, a buyer executes the <b>tokenfillask</b> method. The purchased token amount moves from the global CC address to the buyer's token CC address. At the same time, the required amount of coins move from the buyer to seller's address. This process can be repeated so long as tokens remaining in the ask order
- At any time, the creator of an order can cancel it via the <b>tokencancelask</b> method. The remaining tokens will return to their token CC address

##### Buyer's Perspective

- A buyer places a new bid using the <b>tokenbid</b> method. The bid specifies the amount of tokens and the price. The Assets Module creates a new token bid order and the specified amount of coins is locked in the modules' global CC address.
- A willing seller executes the <b>tokenfillbid</b> method. The token amount sold moves from the seller's token CC address to the buyer's token CC address. At the same time, the locked coins move from the global CC address to the seller's address. This process can be repeated so long as tokens remain in the bid order
- At any time, the creator of an order can cancel it via the <b>tokencancelbid</b> method. The remaining coins will return to their token CC address

To retrieve a current list of all active orders, use the <b>tokenorders</b> or <b>mytokenorders</b> methods.

## assetsaddress

**assetsaddress (pubkey)**

The `assetsaddress` method returns information about a asset address according to a specific `pubkey`. If no `pubkey` is provided, the `pubkey` used to launch the daemon is the default.

### Arguments

| Structure | Type               | Description                       |
| --------- | ------------------ | --------------------------------- |
| pubkey    | (string, optional) | the pubkey of the desired address |

### Response

| Structure           | Type     | Description                                                                                                                      |
| ------------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------- |
| result              | (string) | whether the command executed successfully                                                                                        |
| AssetsCCaddress     | (string) | taking the token contract's EVAL code as a modifier, this is the public address that corresponds to the token contract's privkey |
| AssetsNormalAddress | (string) | the unmodified public address generated from the token contract's privkey                                                        |
| myCCaddress         | (string) | taking the token contract's EVAL code as a modifier, this is the CC address from the pubkey of the user                          |
| myaddress           | (string) | the public address of the pubkey used to launch the chain                                                                        |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD assetsaddress 028702e30d8465d6aa85f35d2f58c06a6ee17f23f376b56044dadf7b793f2c12b9
```

<collapse-text hidden title="Response">

Response:

```json
{
  "result": "success",
  "AssetsCCaddress": "RGKRjeTBw4LYFotSDLT6RWzMHbhXri6BG6",
  "AssetsNormalAddress": "RFYE2yL3KknWdHK6uNhvWacYsCUtwzjY3u",
  "myCCaddress": "RG6mr23tQ9nUhmi5GEnYqjfkqZt9x2MRXz",
  "myaddress": "RDjG4sM1y4udiJSszF6BLotqUnZX79Rom9"
}
```

</collapse-text>

## mytokenorders

**mytokenorders [evalcode]**

The `mytokenorders` method displays the public on-chain orders created by the user's pubkey, which is set in `-pubkey` parameter of komodod.

The additional `evalcode` parameter allows the display of orders for non-fungible tokens bound to this evalcode.

The Response from this method is similar to the response from the `tokenorders` method.

## tokenask

**tokenask numtokens tokenid price**

The `tokenask` method posts a public ask order.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

### Arguments

| Structure | Type     | Description                                                                    |
| --------- | -------- | ------------------------------------------------------------------------------ |
| numtokens | (number) | the number of tokens to request in the order                                   |
| tokenid   | (string) | the txid that identifies the token                                             |
| price     | (number) | the price to pay for each token (units are in coins of the parent asset chain) |

### Response

| Structure | Type     | Description                                                                                          |
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1:

```bash
./komodo-cli -ac_name=HELLOWORLD tokenask 1000 c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59 1
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "010000000248403cd63777a2086206592c096ddfa1d4ba2647673b330610968eace2cf7b540200000049483045022100bde9eaf43a43fe252530bcf346be3e336e86f0171b817977d38d6ebd4bb0756e0220735f3292ef012fd56f7476700f5649b23aacf2387f4fa5a537e1b6c6daa6c1d101ffffffff4f2016d356282fca9d8278aa04fbdbed98ac6af0bf7a479959c5bb91f95e8ef5020000007b4c79a276a072a26ba067a5658021028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e278140fe6a2cd6fdb5a359d5d6eea9bcf34e5b7d8e2def612afe9c01af1129b006e68344d8f9905ea5f226cdb1556659df0c8741e8e3def1238761721b66718dabe92ca100af038001e3a10001ffffffff03e803000000000000302ea22c80201ab400e039122028345520ba041ac3e6ec81ad28d8415e78d760d55f41097dd58103120c008203000401cc5087b00e000000002321028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e27ac00000000000000004f6a4c4ce373c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b5900e876481700000021028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e2700000000"
}
```

</collapse-text>

Step 2: Use sendrawtransaction to broadcast the order

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000248403cd63777a2086206592c096ddfa1d4ba2647673b330610968eace2cf7b540200000049483045022100bde9eaf43a43fe252530bcf346be3e336e86f0171b817977d38d6ebd4bb0756e0220735f3292ef012fd56f7476700f5649b23aacf2387f4fa5a537e1b6c6daa6c1d101ffffffff4f2016d356282fca9d8278aa04fbdbed98ac6af0bf7a479959c5bb91f95e8ef5020000007b4c79a276a072a26ba067a5658021028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e278140fe6a2cd6fdb5a359d5d6eea9bcf34e5b7d8e2def612afe9c01af1129b006e68344d8f9905ea5f226cdb1556659df0c8741e8e3def1238761721b66718dabe92ca100af038001e3a10001ffffffff03e803000000000000302ea22c80201ab400e039122028345520ba041ac3e6ec81ad28d8415e78d760d55f41097dd58103120c008203000401cc5087b00e000000002321028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e27ac00000000000000004f6a4c4ce373c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b5900e876481700000021028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e2700000000
```

<collapse-text hidden title="Response">

```bash
8d5bb0ae5cc8406b8b12fff04437c748495f4f8852ae124e6a137bc130d3be64
```

</collapse-text>

## tokenbid

**tokenbid numtokens tokenid price**

The `tokenbid` method posts a public bid order.

To fill the order, the parent chain's coin must be used.

The method returns a raw hex, which must be broadcast using [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) to complete the command.

The `sendrawtransaction` method then returns a `txid`, which is the identification method of the bid order, and should be saved for future use.

### Arguments

| Structure | Type     | Description                                                                    |
| --------- | -------- | ------------------------------------------------------------------------------ |
| numtokens | (number) | the number of tokens to request in the order                                   |
| tokenid   | (string) | the txid that identifies the token                                             |
| price     | (number) | the price to pay for each token (units are in coins of the parent asset chain) |

### Response

| Structure | Type     | Description                                                                                          |
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD tokenbid 1000 c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59 1
```

<collapse-text hidden title="Response">

```bash
0100000001484256677a6417030dd99716a47b8c9cb06fba6e57ff4617e9932a6cde2972830100000049483045022100fc1926401b27ba044bbf17c36f36030adae52a188594efc75fe42861ab0b997802205e729d6f5587e5a5296b5649a154ce1fe3c581078fac7ae4e2b4577978c05c8901ffffffff0300e8764817000000302ea22c80201ab400e039122028345520ba041ac3e6ec81ad28d8415e78d760d55f41097dd58103120c008203000401cc10d262684a0300002321028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e27ac00000000000000004f6a4c4ce362c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59e80300000000000021028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e2700000000`
```

</collapse-text>

Use `sendrawtransaction` to publish order

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 0100000001484256677a6417030dd99716a47b8c9cb06fba6e57ff4617e9932a6cde2972830100000049483045022100fc1926401b27ba044bbf17c36f36030adae52a188594efc75fe42861ab0b997802205e729d6f5587e5a5296b5649a154ce1fe3c581078fac7ae4e2b4577978c05c8901ffffffff0300e8764817000000302ea22c80201ab400e039122028345520ba041ac3e6ec81ad28d8415e78d760d55f41097dd58103120c008203000401cc10d262684a0300002321028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e27ac00000000000000004f6a4c4ce362c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59e80300000000000021028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e2700000000
```

<collapse-text hidden title="Response">

```bash
5fc8c472bc0e5f994b5a9a3fda23af1a3e1cfd746b902d7216352732e6adba05
```

</collapse-text>

The response is the transaction id.

## tokencancelask

**tokencancelask tokenid asktxid**

The `tokencancelask` method cancels a specific `ask`/`sell` order that you created.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

### Arguments

| Structure | Type     | Description                                       |
| --------- | -------- | ------------------------------------------------- |
| tokenid   | (string) | the txid that identifies the token                |
| asktxid   | (string) | the txid that identifies the original ask request |

### Response

| Structure | Type     | Description                                                                                          |
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1: Issue the call and get your raw transaction HEX value

```bash
./komodo-cli -ac_name=HELLOWORLD tokencancelask 9217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e 7194ae293330af80fdbe4b4b2c8b51194f12e334b4a0489288288c1b7336a65c
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "010000000234c335a46dadea8e42420b0e284f5577cfbcb7764a8d5c3b61312b71c5b14d0800000000494830450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601ffffffff5ca636731b8c28889248a0b434e3124f19518b2c4b4bbefd80af303329ae9471000000007b4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001ffffffff030a00000000000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401ccf078724e18090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000246a22e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e00000000"
}
```

</collapse-text>

Step 2: Broadcast using `sendrawtransaction`

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000234c335a46dadea8e42420b0e284f5577cfbcb7764a8d5c3b61312b71c5b14d0800000000494830450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601ffffffff5ca636731b8c28889248a0b434e3124f19518b2c4b4bbefd80af303329ae9471000000007b4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001ffffffff030a00000000000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401ccf078724e18090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000246a22e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e00000000
```

<collapse-text hidden title="Response">

```bash
21d152480275568e3f82a5049d8b30308e3739ebd98171e075a75fea504364cd
```

</collapse-text>

The response is the transaction id.

Step 3 (optional): Decode the raw transaction (check if the values are sane)

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 010000000234c335a46dadea8e42420b0e284f5577cfbcb7764a8d5c3b61312b71c5b14d0800000000494830450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601ffffffff5ca636731b8c28889248a0b434e3124f19518b2c4b4bbefd80af303329ae9471000000007b4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001ffffffff030a00000000000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401ccf078724e18090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000246a22e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e00000000
```

<collapse-text hidden title="Response">

```json
{
  "txid": "21d152480275568e3f82a5049d8b30308e3739ebd98171e075a75fea504364cd",
  "size": 434,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "084db1c5712b31613b5c8d4a76b7bccf77554f280e0b42428eeaad6da435c334",
      "vout": 0,
      "scriptSig": {
        "asm": "30450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601",
        "hex": "4830450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601"
      },
      "sequence": 4294967295
    },
    {
      "txid": "7194ae293330af80fdbe4b4b2c8b51194f12e334b4a0489288288c1b7336a65c",
      "vout": 0,
      "scriptSig": {
        "asm": "a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001",
        "hex": "4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 0.0000001,
      "valueSat": 10,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["RRPpWbVdxcxmhx4xnWnVZFDfGc9p1177ti"]
      }
    },
    {
      "value": 99999.9999,
      "valueSat": 9999999990000,
      "n": 1,
      "scriptPubKey": {
        "asm": "03fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc OP_CHECKSIG",
        "hex": "2103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RANyPgfZZLhSjQB9jrzztSw66zMMYDZuxQ"]
      }
    },
    {
      "value": 0.0,
      "valueSat": 0,
      "n": 2,
      "scriptPubKey": {
        "asm": "OP_RETURN e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e",
        "hex": "6a22e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e",
        "type": "nulldata"
      }
    }
  ]
}
```

</collapse-text>

## tokencancelbid

**tokencancelbid tokenid bidtxid**

The `tokencancelbid` method cancels a specific `bid`/`buy` order that you created.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

### Arguments

| Structure | Type     | Description                                       |
| --------- | -------- | ------------------------------------------------- |
| tokenid   | (string) | the txid that identifies the token                |
| bidtxid   | (string) | the txid that identifies the original bid request |

### Response

| Structure | Type     | Description                                                                                          |
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1: Issue the call and get your raw transaction HEX value

```bash
./komodo-cli -ac_name=HELLOWORLD tokencancelbid 9217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e 7194ae293330af80fdbe4b4b2c8b51194f12e334b4a0489288288c1b7336a65c
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "010000000234c335a46dadea8e42420b0e284f5577cfbcb7764a8d5c3b61312b71c5b14d0800000000494830450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601ffffffff5ca636731b8c28889248a0b434e3124f19518b2c4b4bbefd80af303329ae9471000000007b4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001ffffffff030a00000000000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401ccf078724e18090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000246a22e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e00000000"
}
```

</collapse-text>

Step 2: Send raw transaction / broadcast the HEX value from above

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000234c335a46dadea8e42420b0e284f5577cfbcb7764a8d5c3b61312b71c5b14d0800000000494830450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601ffffffff5ca636731b8c28889248a0b434e3124f19518b2c4b4bbefd80af303329ae9471000000007b4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001ffffffff030a00000000000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401ccf078724e18090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000246a22e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e00000000
```

<collapse-text hidden title="Response">

```bash
21d152480275568e3f82a5049d8b30308e3739ebd98171e075a75fea504364cd
```

</collapse-text>

The response is the transaction id.

Step 3: Decode the raw transaction (optional to check if the values are sane)

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 010000000234c335a46dadea8e42420b0e284f5577cfbcb7764a8d5c3b61312b71c5b14d0800000000494830450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601ffffffff5ca636731b8c28889248a0b434e3124f19518b2c4b4bbefd80af303329ae9471000000007b4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001ffffffff030a00000000000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401ccf078724e18090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000246a22e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e00000000
```

<collapse-text hidden title="Response">

```json
{
  "txid": "21d152480275568e3f82a5049d8b30308e3739ebd98171e075a75fea504364cd",
  "size": 434,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "084db1c5712b31613b5c8d4a76b7bccf77554f280e0b42428eeaad6da435c334",
      "vout": 0,
      "scriptSig": {
        "asm": "30450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601",
        "hex": "4830450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601"
      },
      "sequence": 4294967295
    },
    {
      "txid": "7194ae293330af80fdbe4b4b2c8b51194f12e334b4a0489288288c1b7336a65c",
      "vout": 0,
      "scriptSig": {
        "asm": "a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001",
        "hex": "4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 0.0000001,
      "valueSat": 10,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["RRPpWbVdxcxmhx4xnWnVZFDfGc9p1177ti"]
      }
    },
    {
      "value": 99999.9999,
      "valueSat": 9999999990000,
      "n": 1,
      "scriptPubKey": {
        "asm": "03fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc OP_CHECKSIG",
        "hex": "2103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RANyPgfZZLhSjQB9jrzztSw66zMMYDZuxQ"]
      }
    },
    {
      "value": 0.0,
      "valueSat": 0,
      "n": 2,
      "scriptPubKey": {
        "asm": "OP_RETURN e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e",
        "hex": "6a22e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e",
        "type": "nulldata"
      }
    }
  ]
}
```

</collapse-text>

## tokenfillask

**tokenfillask tokenid asktxid fillamount**

The `tokenfillask` method fills an existing ask.

It returns a hex-encoded transaction which should then be broadcast using `sendrawtransaction`.

### Arguments

| Structure  | Type     | Description                            |
| ---------- | -------- | -------------------------------------- |
| tokenid    | (string) | the txid that identifies the token     |
| asktxid    | (string) | the txid that identifies the ask order |
| fillamount | (number) | the amount to fill                     |

### Response

| Structure | Type     | Description                                                                                          |
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1: Create the raw transaction

```bash
./komodo-cli -ac_name=HELLOWORLD tokenfillask 9217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e d1b2676bb118d7bb8604dc5bb0a320a2ffb6f7ee118bfd20ed33be3fbd0b9b62 50
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "01000000031a47a2fa94f27f7e98645a6827f9382991d76fcfd2d84b96065763d1cfed78fc02000000494830450221008be941e56b10fb51459f66288bb68936c55fd17ecbebd12b142f4575b0fe4bf702205f048ad69269ba81530230496fea42983aad88882b1ef7d08304e1230040fb0001ffffffff629b0bbd3fbe33ed20fd8b11eef7b6ffa220a3b05bdc0486bbd718b16b67b2d1000000007b4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa27028140da534b773f52c77ebbd590330468ba49333acc0971da444de512b85d039f59f778c8bab7cb1be909b6473789b237966a0f137a9b24c93ebebe0d83ae34a6bd6fa100af038001e3a10001ffffffff2bf671abc3bdfb673c0103a3bd59282c1aee473c6ccc4b591cdb42dc469d68c4000000004847304402204fa686dfdc7c0b7d42e538751aee0534b54747df4f335fb4d3b0d1a86c68e96d02202083fa811dd4506ad83f6d58a420d31ff7ccbae84ea05399b616e3d6f373682401ffffffff050000000000000000302ea22c80201ab400e039122028345520ba041ac3e6ec81ad28d8415e78d760d55f41097dd58103120c008203000401cc3200000000000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401cc0065cd1d00000000232103fcc4b37ee767a67b75503832764b559d764d71c13785482b73609159aa6ae9efacf01710252d090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000000000004f6a4c4ce3539217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e00000000000000002103fcc4b37ee767a67b75503832764b559d764d71c13785482b73609159aa6ae9ef00000000"
}
```

</collapse-text>

Step 2: Broadcast the hex using sendrawtransaction

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 01000000031a47a2fa94f27f7e98645a6827f9382991d76fcfd2d84b96065763d1cfed78fc02000000494830450221008be941e56b10fb51459f66288bb68936c55fd17ecbebd12b142f4575b0fe4bf702205f048ad69269ba81530230496fea42983aad88882b1ef7d08304e1230040fb0001ffffffff629b0bbd3fbe33ed20fd8b11eef7b6ffa220a3b05bdc0486bbd718b16b67b2d1000000007b4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa27028140da534b773f52c77ebbd590330468ba49333acc0971da444de512b85d039f59f778c8bab7cb1be909b6473789b237966a0f137a9b24c93ebebe0d83ae34a6bd6fa100af038001e3a10001ffffffff2bf671abc3bdfb673c0103a3bd59282c1aee473c6ccc4b591cdb42dc469d68c4000000004847304402204fa686dfdc7c0b7d42e538751aee0534b54747df4f335fb4d3b0d1a86c68e96d02202083fa811dd4506ad83f6d58a420d31ff7ccbae84ea05399b616e3d6f373682401ffffffff050000000000000000302ea22c80201ab400e039122028345520ba041ac3e6ec81ad28d8415e78d760d55f41097dd58103120c008203000401cc3200000000000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401cc0065cd1d00000000232103fcc4b37ee767a67b75503832764b559d764d71c13785482b73609159aa6ae9efacf01710252d090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000000000004f6a4c4ce3539217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e00000000000000002103fcc4b37ee767a67b75503832764b559d764d71c13785482b73609159aa6ae9ef00000000
```

<collapse-text hidden title="Response">

```bash
b6ebeaafced887fd63deb9207e0484570d49abe8fe4fcbaa026666d4ea3f902e
```

</collapse-text>

The response is the transaction id.

Step 3: Wait for the transaction to be confirmed

## tokenfillbid

**tokenfillbid tokenid bidtxid fillamount**

The `tokenfillbid` method fills an existing ask.

It returns a hex-encoded transaction which should then be broadcast using `sendrawtransaction`.

### Arguments

| Structure  | Type     | Description                            |
| ---------- | -------- | -------------------------------------- |
| tokenid    | (string) | the txid that identifies the token     |
| bidtxid    | (string) | the txid that identifies the bid order |
| fillamount | (number) | the amount to fill                     |

### Response

| Structure | Type     | Description                                                                                          |
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1: Create raw transaction

```bash
./komodo-cli -ac_name=HELLOWORLD tokenfillbid 9217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e d1b2676bb118d7bb8604dc5bb0a320a2ffb6f7ee118bfd20ed33be3fbd0b9b62 50
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "01000000031a47a2fa94f27f7e98645a6827f9382991d76fcfd2d84b96065763d1cfed78fc02000000494830450221008be941e56b10fb51459f66288bb68936c55fd17ecbebd12b142f4575b0fe4bf702205f048ad69269ba81530230496fea42983aad88882b1ef7d08304e1230040fb0001ffffffff629b0bbd3fbe33ed20fd8b11eef7b6ffa220a3b05bdc0486bbd718b16b67b2d1000000007b4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa27028140da534b773f52c77ebbd590330468ba49333acc0971da444de512b85d039f59f778c8bab7cb1be909b6473789b237966a0f137a9b24c93ebebe0d83ae34a6bd6fa100af038001e3a10001ffffffff2bf671abc3bdfb673c0103a3bd59282c1aee473c6ccc4b591cdb42dc469d68c4000000004847304402204fa686dfdc7c0b7d42e538751aee0534b54747df4f335fb4d3b0d1a86c68e96d02202083fa811dd4506ad83f6d58a420d31ff7ccbae84ea05399b616e3d6f373682401ffffffff050000000000000000302ea22c80201ab400e039122028345520ba041ac3e6ec81ad28d8415e78d760d55f41097dd58103120c008203000401cc3200000000000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401cc0065cd1d00000000232103fcc4b37ee767a67b75503832764b559d764d71c13785482b73609159aa6ae9efacf01710252d090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000000000004f6a4c4ce3539217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e00000000000000002103fcc4b37ee767a67b75503832764b559d764d71c13785482b73609159aa6ae9ef00000000"
}
```

</collapse-text>

Step 2: Broadcast the hex or sendrawtransaction

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 01000000031a47a2fa94f27f7e98645a6827f9382991d76fcfd2d84b96065763d1cfed78fc02000000494830450221008be941e56b10fb51459f66288bb68936c55fd17ecbebd12b142f4575b0fe4bf702205f048ad69269ba81530230496fea42983aad88882b1ef7d08304e1230040fb0001ffffffff629b0bbd3fbe33ed20fd8b11eef7b6ffa220a3b05bdc0486bbd718b16b67b2d1000000007b4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa27028140da534b773f52c77ebbd590330468ba49333acc0971da444de512b85d039f59f778c8bab7cb1be909b6473789b237966a0f137a9b24c93ebebe0d83ae34a6bd6fa100af038001e3a10001ffffffff2bf671abc3bdfb673c0103a3bd59282c1aee473c6ccc4b591cdb42dc469d68c4000000004847304402204fa686dfdc7c0b7d42e538751aee0534b54747df4f335fb4d3b0d1a86c68e96d02202083fa811dd4506ad83f6d58a420d31ff7ccbae84ea05399b616e3d6f373682401ffffffff050000000000000000302ea22c80201ab400e039122028345520ba041ac3e6ec81ad28d8415e78d760d55f41097dd58103120c008203000401cc3200000000000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401cc0065cd1d00000000232103fcc4b37ee767a67b75503832764b559d764d71c13785482b73609159aa6ae9efacf01710252d090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000000000004f6a4c4ce3539217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e00000000000000002103fcc4b37ee767a67b75503832764b559d764d71c13785482b73609159aa6ae9ef00000000
```

<collapse-text hidden title="Response">

```bash
b6ebeaafced887fd63deb9207e0484570d49abe8fe4fcbaa026666d4ea3f902e
```

</collapse-text>

The response is the transaction id.

Step 3: Wait for the transaction to be confirmed

## tokenorders

**tokenorders (tokenid)**

The `tokenorders` method displays the public on-chain orderbook for a specific token. If no `tokenid` is provided, it displays the on-chain orderbook for all available tokens.

Information about the `funcid` property:

- A lowercase `b` describes an bid offer.

- An uppercase `B` describes a bid fill.

- A lowercase `s` describes an ask offer.

- An uppercase `S` describes the ask fill.

### Arguments

| Structure | Type               | Description                           |
| --------- | ------------------ | ------------------------------------- |
| tokenid   | (string, optional) | the identifying txid for the token id |

### Response

| Structure           | Type                       | Description                                                                    |
| ------------------- | -------------------------- | ------------------------------------------------------------------------------ |
| funcid              | (string)                   | describes either a bid ask `b`, a bid fill `B`, an ask `s`, or an ask fill `S` |
| txid                | (string)                   | the txid of the identifying order or fill                                      |
| vout                | (number)                   | the vout value                                                                 |
| amount              | (number)                   | the amount remaining in the bid/ask request                                    |
| bidamount/askamount | (number)                   | the total amount of the relevant bid or ask request                            |
| origaddress         | (string)                   | the address that made the original bid `b` or ask `s`                          |
| tokenid             | (string)                   | the tokenid for the relevant bid/ask request/fill                              |
| totalrequired       | (number, `b` and `s` only) | the total amount available in the original big/ask request/fill                |
| price               | (number, `b` and `s` only) | the price per token, units are in the parent asset chain's coin                |

#### :pushpin: Examples:

Show all available orders

```bash
./komodo-cli -ac_name=HELLOWORLD tokenorders
```

<collapse-text hidden title="Response">

```json
[
  {
    "funcid": "B",
    "txid": "b9d305e9b6a82e715efce9b6244cc15fef131baf1893a7eb45b199c23b3fb806",
    "vout": 0,
    "amount": 0,
    "bidamount": 0,
    "origaddress": "RQymbXA8FfWw2AaHv7oC8JRKo9W5HkFVMm",
    "tokenid": "c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59"
  },
  {
    "funcid": "b",
    "txid": "45b3f7874fc4a2699729a9792bc7679f6b5f11035a29ad9f661425b19534dd1d",
    "vout": 0,
    "amount": 1000,
    "bidamount": 1000,
    "origaddress": "RQymbXA8FfWw2AaHv7oC8JRKo9W5HkFVMm",
    "tokenid": "c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59",
    "totalrequired": 1000,
    "price": 1
  },
  {
    "funcid": "B",
    "txid": "d4643ce47e9799681a4549468d47c85337367f0ef2733afe1d79c50175e6ae32",
    "vout": 0,
    "amount": 0,
    "bidamount": 0,
    "origaddress": "R9sDyKt2kW5uJaoZT6GF9e3WRbGioBuhoZ",
    "tokenid": "e7d034fb7dbad561c9a86dcbcc64aa89e1d311891b4e7c744280b7de13b1186f"
  },
  {
    "funcid": "B",
    "txid": "0909df82ade3193c9a630dd80947141f34489732e9a2f8346790304ebbdcc251",
    "vout": 0,
    "amount": 0,
    "bidamount": 0,
    "origaddress": "R9sDyKt2kW5uJaoZT6GF9e3WRbGioBuhoZ",
    "tokenid": "e7d034fb7dbad561c9a86dcbcc64aa89e1d311891b4e7c744280b7de13b1186f"
  },
  {
    "funcid": "b",
    "txid": "a8d60a3ce429ccb885ad445e7a4534130a35d2424d1883c6513d0f4da2fe9a92",
    "vout": 0,
    "amount": 150,
    "bidamount": 150,
    "origaddress": "RQymbXA8FfWw2AaHv7oC8JRKo9W5HkFVMm",
    "tokenid": "c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59",
    "totalrequired": 100,
    "price": 1.5
  },
  {
    "funcid": "B",
    "txid": "03e118fc442a223df4dd87add64f142e1bfd99baee94c8be26bc77ed809d50a4",
    "vout": 0,
    "amount": 0,
    "bidamount": 0,
    "origaddress": "R9sDyKt2kW5uJaoZT6GF9e3WRbGioBuhoZ",
    "tokenid": "e7d034fb7dbad561c9a86dcbcc64aa89e1d311891b4e7c744280b7de13b1186f"
  }
]
```

</collapse-text>

Show orders for specific token

```bash
./komodo-cli -ac_name=HELLOWORLD tokenorders c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59
```

<collapse-text hidden title="Response">

```json
[
  {
    "funcid": "B",
    "txid": "b9d305e9b6a82e715efce9b6244cc15fef131baf1893a7eb45b199c23b3fb806",
    "vout": 0,
    "amount": 0,
    "bidamount": 0,
    "origaddress": "RQymbXA8FfWw2AaHv7oC8JRKo9W5HkFVMm",
    "tokenid": "c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59"
  },
  {
    "funcid": "b",
    "txid": "9dabd8c01bb7d59455b64fe100617149c20cb4520d266183686aa4986fd3021d",
    "vout": 0,
    "amount": 100,
    "bidamount": 100,
    "origaddress": "RQymbXA8FfWw2AaHv7oC8JRKo9W5HkFVMm",
    "tokenid": "c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59",
    "totalrequired": 100,
    "price": 1
  },
  {
    "funcid": "b",
    "txid": "45b3f7874fc4a2699729a9792bc7679f6b5f11035a29ad9f661425b19534dd1d",
    "vout": 0,
    "amount": 1000,
    "bidamount": 1000,
    "origaddress": "RQymbXA8FfWw2AaHv7oC8JRKo9W5HkFVMm",
    "tokenid": "c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59",
    "totalrequired": 1000,
    "price": 1
  },
  {
    "funcid": "b",
    "txid": "a8d60a3ce429ccb885ad445e7a4534130a35d2424d1883c6513d0f4da2fe9a92",
    "vout": 0,
    "amount": 150,
    "bidamount": 150,
    "origaddress": "RQymbXA8FfWw2AaHv7oC8JRKo9W5HkFVMm",
    "tokenid": "c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59",
    "totalrequired": 100,
    "price": 1.5
  }
]
```

</collapse-text>


# Channels

## Introduction

The Channels Fluidity module facilitates instant payments in a trustless environment.

When a payment is executed properly with `channels`, as soon as it enters the mempool the odds that the payment can be withdrawn or attacked decrease to almost zero. Many developers and users may find it advantageous to use `channels` to create a secure instant-payment network that can be used within their business environment.

#### Channels Module Flow

- Anyone can create a channel using [channelsopen](../customconsensus/channels.html#channelsopen)
  - When creating the channel, the user indicates the number and size of their potential payment(s), and what their destination is
- Once the channel is notarized, at any time in the future the user can execute [channelspayment](../customconsensus/channels.html#channelspayment) to release a specific amount of their available payments
  - As soon as the `channelspayment` result enters the mempool, the odds of withdrawing the `txid` from processing decrease to almost zero
- The creator of a channel may close the channel at any time using [channelsclose](../customconsensus/channels.html#channelsclose)
  - This shows the receiver that this payment stream is permanently ended
- Once the channel's closure is notarized, the creator may withdraw remaining funds using [channelsrefund](../customconsensus/channels.html#channelsrefund)
- The [channelsinfo](../customconsensus/channels.html#channelsinfo) method reveals public information for any or all available channels on an Smart Chain

## channelsaddress

**channelsaddress pubkey**

The `channelsaddress` method displays the various addresses and their balances for a specified pubkey.

Under normal circumstances, for the `pubkey` the user provides the destination address of the intended channel.

The global addresses are not used in the Channels Fluidity module. For more information about unique Fluidity addresses, see [this linked explanation.](../customconsensus/custom-consensus-instructions.html#understanding-the-types-of-addresses)

### Arguments

| Name | Type | Description |
| --------- | ------------------ | ---------------------- |
| pubkey    | (string, required) | the destination pubkey |

### Response

| Name | Type | Description |
| --------------------------- | --------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| result                      | (string)  | whether the method executed successfully                                                                                                                                                                                                                                                                                                                        |
| ChannelsCCAddress           | (string)  | taking the contract's EVAL code as a modifier, this is the public address that corresponds to the contract's privkey                                                                                                                                                                                                                                            |
| CCbalance                   | (numeric) | the unspent amount in `ChannelsCCaddress`                                                                                                                                                                                                                                                                                                                       |
| ChannelsNormalAddress       | (string)  | the unmodified normal public address generated from the contract's privkey; this is generally used for markers                                                                                                                                                                                                                                                  |
| ChannelsCC1of2Address       | (string)  | the channel address that will store the funds once the channel is opened; this property is only active when the channel is using coins |
| ChannelsCC1of2TokensAddress | (string)  | the channel address that will store the funds once the channel is opened; this property is only active when the channel is using tokens |
| myCCAddress(Channels)       | (string)  | taking the contract's EVAL code as a modifier, this is the Fluidity address from the `pubkey` [used to launch the daemon](../customconsensus/custom-consensus-instructions.html#creating-and-launching-with-a-pubkey)                                                                                                                                                 |
| PubkeyCCaddress(Channels)   | (string)  | taking the contract's EVAL code as a modifier, this is the Fluidity address from the `pubkey` supplied as the argument                                                                                                                                                                                                                                                |
| myCCbalance                 | (numeric) | the balance of `myccaddress` in coins                                                                                                                                                                                                                                                                                                                           |
| myaddress                   | (string)  | the unmodified normal public address of the pubkey [used to launch the daemon](../customconsensus/custom-consensus-instructions.html#creating-and-launching-with-a-pubkey)                                                                                                                                                                                      |
| mybalance                   | (numeric) | the balance of `myaddress` in coins                                                                                                                                                                                                                                                                                                                             |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD channelsaddress 0225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270a
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "ChannelsCCAddress": "RQy3rwX8sP9oDm3c39vGKA6H315cgtPLfr",
  "CCbalance": 0.0,
  "ChannelsNormalAddress": "RQUuT8zmkvDfXqECH4m3VD3SsHZAfnoh1v",
  "ChannelsCC1of2Address": "RW5qo7cPFuap1cifuFWMHurvmBU7drn9cv",
  "ChannelsCC1of2TokensAddress": "RNjxnUR9QScLiRzo841DjCG5w5FbVbATMy",
  "myAddress": "RJYiWn3FRCSSLf9Pe5RJcbrKQYosaMburP",
  "myCCAddress(Channels)": "R9coADhfQwsbF8V1HVskZoYCuSw5FH8RsS",
  "PubkeyCCaddress(Channels)": "RFiRURHbjQNDunGC3SmiNcpt89BRbqvBQb",
  "myCCaddress": "R9coADhfQwsbF8V1HVskZoYCuSw5FH8RsS",
  "myCCbalance": 0.0,
  "myaddress": "RJYiWn3FRCSSLf9Pe5RJcbrKQYosaMburP",
  "mybalance": 9.9387
}
```

</collapse-text>

## channelsclose

**channelsclose open_txid**

The `channelsclose` method marks a specific channel as closed, meaning that no additional payments will be added to the channel.

The owner of the `channel` may still execute [channelspayment](../customconsensus/channels.html#channelspayment) for any remaining payments in the channel, until all payments are used or withdrawn.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

The `sendrawtransaction` method then returns a `txid` which is used in the [channelsrefund](../customconsensus/channels.html#channelsrefund) method to reclaim funds.

### Arguments

| Name | Type | Description |
| --------- | -------- | -------------------------------------------------------------------------- |
| open_txid | (string) | the unique identifying txid that is created when a channel is first opened |

### Response

| Name | Type | Description |
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1: Close a channel

```bash
./komodo-cli -ac_name=HELLOWORLD channelsclose 2f95b0f4e3dbe7f5ebc0f9479800c9ff3f44e76f5378313c9406ab5a92ff4631
```

Output from Step 1

```json
{
  "result": "success",
  "hex": "010000000337bc987132bc04b527260b1243d2c6ec3bcf2ce79dff33542ed665bf428a00360400000049483045022100dacf03fc670dfcedff732374e5dfde63668c8f1bb036076a185d620f84cdbefe02206d5c7af679e42bc35d02d97a1809ea9eba48392409be0ddf6172a76469cb9b3601ffffffff37bc987132bc04b527260b1243d2c6ec3bcf2ce79dff33542ed665bf428a003600000000a74ca5a281a1a0819ca28194a067a56580210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba01272814024c8da3b4a5e9595a360e4b3b44e86aa6627df774fd554ee7e55536dae7bd7af452410e6a827b1f14f63643d6cbf48a1336dde0c26d2e2e249dd9cc4aa9f044da129a5278020e73e4b0745bdf31657ac09e3cf99fd65cb262d8498f86c977ece01b551925f028103020000af038001eba10001ffffffff37bc987132bc04b527260b1243d2c6ec3bcf2ce79dff33542ed665bf428a0036010000007b4c79a276a072a26ba067a56580210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba012728140decb986f860f6b67fa458e89c50b90ebef048a72a4bfb0bb0cc8c39a5f0fc8763fdc49780154d56a89be1a7b54d17b5a9c1489c6c2b0feb11c921f75d5e8f1b7a100af038001eba10001ffffffff050087930300000000302ea22c80206dafed6d15c24a9a60f01d5972ee08aeb40ba7849d9af3608e97397364ee16a281031210008203000401cc1027000000000000302ea22c8020c9ada2adfc6c6dec0bd9dd29f4e48c86f84c016abc3552b8815ca3c4a44c561b8103120c008203000401cc1027000000000000302ea22c802019be575785c322e9c7d2ae4b5f3df78c9a38ff7357e9e689f26de8e224cb186c8103120c008203000401cca0ad96a60100000023210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba01272ac0000000000000000956a4c92eb433146ff925aab06943c3178536fe7443fffc9009847f9c0ebf5e7dbe3f4b0952f210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba0127221027166e21e9579307a1ae4f8c223516e70aae3cbfab4bd6ac7cebfa625dcc0a2a4060000008096980000000000000000000000000000000000000000000000000000000000000000000000000000000000"
}
```

Step 2: Broadcast the raw transaction using sendrawtransaction

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000337bc987132bc04b527260b1243d2c6ec3bcf2ce79dff33542ed665bf428a00360400000049483045022100dacf03fc670dfcedff732374e5dfde63668c8f1bb036076a185d620f84cdbefe02206d5c7af679e42bc35d02d97a1809ea9eba48392409be0ddf6172a76469cb9b3601ffffffff37bc987132bc04b527260b1243d2c6ec3bcf2ce79dff33542ed665bf428a003600000000a74ca5a281a1a0819ca28194a067a56580210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba01272814024c8da3b4a5e9595a360e4b3b44e86aa6627df774fd554ee7e55536dae7bd7af452410e6a827b1f14f63643d6cbf48a1336dde0c26d2e2e249dd9cc4aa9f044da129a5278020e73e4b0745bdf31657ac09e3cf99fd65cb262d8498f86c977ece01b551925f028103020000af038001eba10001ffffffff37bc987132bc04b527260b1243d2c6ec3bcf2ce79dff33542ed665bf428a0036010000007b4c79a276a072a26ba067a56580210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba012728140decb986f860f6b67fa458e89c50b90ebef048a72a4bfb0bb0cc8c39a5f0fc8763fdc49780154d56a89be1a7b54d17b5a9c1489c6c2b0feb11c921f75d5e8f1b7a100af038001eba10001ffffffff050087930300000000302ea22c80206dafed6d15c24a9a60f01d5972ee08aeb40ba7849d9af3608e97397364ee16a281031210008203000401cc1027000000000000302ea22c8020c9ada2adfc6c6dec0bd9dd29f4e48c86f84c016abc3552b8815ca3c4a44c561b8103120c008203000401cc1027000000000000302ea22c802019be575785c322e9c7d2ae4b5f3df78c9a38ff7357e9e689f26de8e224cb186c8103120c008203000401cca0ad96a60100000023210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba01272ac0000000000000000956a4c92eb433146ff925aab06943c3178536fe7443fffc9009847f9c0ebf5e7dbe3f4b0952f210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba0127221027166e21e9579307a1ae4f8c223516e70aae3cbfab4bd6ac7cebfa625dcc0a2a4060000008096980000000000000000000000000000000000000000000000000000000000000000000000000000000000
```

<collapse-text hidden title="Response">

```bash
2079c46cd9f3970f9fd73d8022bf6f30aaf5031bf877d2c541c4c0df1dea1be5
```

</collapse-text>

## channelsinfo

**channelsinfo (open_tx_id)**

The `channelsinfo` method fetches info about channels that are relevant to the user, either as sender or receiver.

If no `open_tx_id` argument is included, the method returns a list of all channels available to this user.

### Arguments

| Name | Type | Description |
| --------- | ------------------ | -------------------------------------------------------------------------- |
| open_txid | (string, optional) | the unique identifying txid that is created when a channel is first opened |

### Response

| Name | Type | Description |
| --------- | -------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
| result    | (string) | whether the command executed successfully                                                                                                           |
| name      | (string) | the name of the channel                                                                                                                             |
| Open:     | (string) | a channel and its relevant information: address of the destination pubkey, number of payments, denomination per payment, and the channel open_tx_id |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD channelsinfo
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "name": "Channel RKgkZ3RybqGHBXBhDoeM4cu7hBLD8UgHBW",
  "Open": "20 payments of 30000 satoshi"
}
```

</collapse-text>

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD channelsinfo
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "name": "Channel RKgkZ3RybqGHBXBhDoeM4cu7hBLD8UgHBW",
  "Open": "20 payments of 30000 satoshi",
  "Payment": "60000 satoshi to RBvjFvWJ43f8mcMCUE2MNamoRzc7KtDvn2, 18 payments left",
  "Payment": "30000 satoshi to RBvjFvWJ43f8mcMCUE2MNamoRzc7KtDvn2, 17 payments left"
}
```

</collapse-text>

## channelsopen

**channelsopen destination_pubkey total_number_of_payments payment_size**

The `channelsopen` method opens a channel between two public keys (sender and receiver).

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

The `sendrawtransaction` method then returns a `txid` which is the unique identifying `channels_tx_id`.

### Arguments

| Name | Type | Description |
| ------------------------ | -------- | ------------------------------------------------------- |
| destination_pubkey       | (string) | the public key of the intended recipient of the channel |
| total_number_of_payments | (number) | the total number of payments to allocate in the channel |
| payment_size             | (number) | the amount per payment, given in satoshis               |

### Response

| Name | Type | Description |
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1: Create the raw hex

```bash
./komodo-cli -ac_name=HELLOWORLD channelsopen 027166e21e9579307a1ae4f8c223516e70aae3cbfab4bd6ac7cebfa625dcc0a2a4 10 10000000
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "01000000016ee478b8470aee10aa95878bf306f853406993f953703b47fd373eba9ee7659d030000004847304402201267b68487060b6d80a0e8529271cf203f1a018c2caa508e5bdf798cd2f9099802202553dca29335f4fa491d117f5a268027b738b65b6d0945f892896775d98ae95b01ffffffff0500e1f50500000000302ea22c80206dafed6d15c24a9a60f01d5972ee08aeb40ba7849d9af3608e97397364ee16a281031210008203000401cc1027000000000000302ea22c8020c9ada2adfc6c6dec0bd9dd29f4e48c86f84c016abc3552b8815ca3c4a44c561b8103120c008203000401cc1027000000000000302ea22c802019be575785c322e9c7d2ae4b5f3df78c9a38ff7357e9e689f26de8e224cb186c8103120c008203000401cc20e697a60100000023210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba01272ac0000000000000000956a4c92eb4f0000000000000000000000000000000000000000000000000000000000000000210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba0127221027166e21e9579307a1ae4f8c223516e70aae3cbfab4bd6ac7cebfa625dcc0a2a40a0000008096980000000000b0a3ff942c0de4972a3bbdc90f1a2851bc498f3c947cbf0d9524ccae118f515b00000000"
}
```

</collapse-text>

Step 2: Broadcast the hex using `sendrawtransaction`

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 01000000016ee478b8470aee10aa95878bf306f853406993f953703b47fd373eba9ee7659d030000004847304402201267b68487060b6d80a0e8529271cf203f1a018c2caa508e5bdf798cd2f9099802202553dca29335f4fa491d117f5a268027b738b65b6d0945f892896775d98ae95b01ffffffff0500e1f50500000000302ea22c80206dafed6d15c24a9a60f01d5972ee08aeb40ba7849d9af3608e97397364ee16a281031210008203000401cc1027000000000000302ea22c8020c9ada2adfc6c6dec0bd9dd29f4e48c86f84c016abc3552b8815ca3c4a44c561b8103120c008203000401cc1027000000000000302ea22c802019be575785c322e9c7d2ae4b5f3df78c9a38ff7357e9e689f26de8e224cb186c8103120c008203000401cc20e697a60100000023210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba01272ac0000000000000000956a4c92eb4f0000000000000000000000000000000000000000000000000000000000000000210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba0127221027166e21e9579307a1ae4f8c223516e70aae3cbfab4bd6ac7cebfa625dcc0a2a40a0000008096980000000000b0a3ff942c0de4972a3bbdc90f1a2851bc498f3c947cbf0d9524ccae118f515b00000000
```

<collapse-text hidden title="Response">

```bash
2f95b0f4e3dbe7f5ebc0f9479800c9ff3f44e76f5378313c9406ab5a92ff4631
```

</collapse-text>

## channelspayment

**channelspayment open_tx_id payment_amount (secret)**

The `channelspayment` method sends a payment in a channel to the receiver.

The method requires that the channel `open_tx_id` has either one notarization or 60 confirmations.

The owner of a channel reveals the password of a unique payment `txid` as a part of the payment. This password is intentionally visible to anyone watching the chain at the time of payment, although the password does not persist in the database.

If the receiver is monitoring the chain at the time of payment and saves the password, and there is a chain reorganization that nullifies the payment, the receiver now has the password to resend the payment. This option is available so long as the channel remains open and the payment has not been refunded.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

The `sendrawtransaction` method then returns a `txid` which is the unique identifying `channels_tx_id`.

### Arguments

| Name | Type | Description |
| ------------------------ | -------- | ------------------------------------------------------- |
| destination_pubkey       | (string) | the public key of the intended recipient of the channel |
| total_number_of_payments | (number) | the total number of payments to allocate in the channel |
| payment_size             | (number) | the amount per payment, given in satoshis               |

### Response

| Name | Type | Description |
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD channelspayment 2f95b0f4e3dbe7f5ebc0f9479800c9ff3f44e76f5378313c9406ab5a92ff4631 10000000
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "010000000371f8f5550a8cb53b7bdfb752687cd6aaaf1fedb4dd9414a08ee17fd3460047ed0400000049483045022100c512cbccd63871a3eee9069a90b5447a11912a7a6ccd0eeecdf40b92cd9aca2402200d7b36424e04bc77386ac3f1a030a27919d766485d5bb984234f257cc396527601ffffffff71f8f5550a8cb53b7bdfb752687cd6aaaf1fedb4dd9414a08ee17fd3460047ed00000000a74ca5a281a1a0819ca28194a067a56580210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba0127281400245156c5e4923c9dfbba452f4638da8ef58dc385f7511dca21d4cf87bb3fa564864d8b1f8f81742795181988f50b60bd82db618e11b432351595295eafd1c18a129a5278020e73e4b0745bdf31657ac09e3cf99fd65cb262d8498f86c977ece01b551925f028103020000af038001eba10001ffffffff71f8f5550a8cb53b7bdfb752687cd6aaaf1fedb4dd9414a08ee17fd3460047ed010000007b4c79a276a072a26ba067a56580210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba012728140be52fb33d895d684c1bd0a7cb12a735814ef7c22b89a11464215a5f80cde369765fc636153d15a8f17e7faee749b5f87ec5f88530b619586f58cc6452794517fa100af038001eba10001ffffffff060087930300000000302ea22c80206dafed6d15c24a9a60f01d5972ee08aeb40ba7849d9af3608e97397364ee16a281031210008203000401cc1027000000000000302ea22c8020c9ada2adfc6c6dec0bd9dd29f4e48c86f84c016abc3552b8815ca3c4a44c561b8103120c008203000401cc1027000000000000302ea22c802019be575785c322e9c7d2ae4b5f3df78c9a38ff7357e9e689f26de8e224cb186c8103120c008203000401cc80969800000000002321027166e21e9579307a1ae4f8c223516e70aae3cbfab4bd6ac7cebfa625dcc0a2a4acc0fb96a60100000023210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba01272ac0000000000000000956a4c92eb503146ff925aab06943c3178536fe7443fffc9009847f9c0ebf5e7dbe3f4b0952f210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba0127221027166e21e9579307a1ae4f8c223516e70aae3cbfab4bd6ac7cebfa625dcc0a2a4060000000100000000000000f676963e7537d614651bc1a3d5508243ab74e32400e4175ebceb03226b956f1a00000000"
}
```

</collapse-text>

Step 2: Broadcast using `sendrawtransaction`

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000371f8f5550a8cb53b7bdfb752687cd6aaaf1fedb4dd9414a08ee17fd3460047ed0400000049483045022100c512cbccd63871a3eee9069a90b5447a11912a7a6ccd0eeecdf40b92cd9aca2402200d7b36424e04bc77386ac3f1a030a27919d766485d5bb984234f257cc396527601ffffffff71f8f5550a8cb53b7bdfb752687cd6aaaf1fedb4dd9414a08ee17fd3460047ed00000000a74ca5a281a1a0819ca28194a067a56580210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba0127281400245156c5e4923c9dfbba452f4638da8ef58dc385f7511dca21d4cf87bb3fa564864d8b1f8f81742795181988f50b60bd82db618e11b432351595295eafd1c18a129a5278020e73e4b0745bdf31657ac09e3cf99fd65cb262d8498f86c977ece01b551925f028103020000af038001eba10001ffffffff71f8f5550a8cb53b7bdfb752687cd6aaaf1fedb4dd9414a08ee17fd3460047ed010000007b4c79a276a072a26ba067a56580210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba012728140be52fb33d895d684c1bd0a7cb12a735814ef7c22b89a11464215a5f80cde369765fc636153d15a8f17e7faee749b5f87ec5f88530b619586f58cc6452794517fa100af038001eba10001ffffffff060087930300000000302ea22c80206dafed6d15c24a9a60f01d5972ee08aeb40ba7849d9af3608e97397364ee16a281031210008203000401cc1027000000000000302ea22c8020c9ada2adfc6c6dec0bd9dd29f4e48c86f84c016abc3552b8815ca3c4a44c561b8103120c008203000401cc1027000000000000302ea22c802019be575785c322e9c7d2ae4b5f3df78c9a38ff7357e9e689f26de8e224cb186c8103120c008203000401cc80969800000000002321027166e21e9579307a1ae4f8c223516e70aae3cbfab4bd6ac7cebfa625dcc0a2a4acc0fb96a60100000023210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba01272ac0000000000000000956a4c92eb503146ff925aab06943c3178536fe7443fffc9009847f9c0ebf5e7dbe3f4b0952f210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba0127221027166e21e9579307a1ae4f8c223516e70aae3cbfab4bd6ac7cebfa625dcc0a2a4060000000100000000000000f676963e7537d614651bc1a3d5508243ab74e32400e4175ebceb03226b956f1a00000000
```

<collapse-text hidden title="Response">

```bash
36008a42bf65d62e5433ff9de72ccf3becc6d243120b2627b504bc327198bc37
```

</collapse-text>

Check that the transaction is confirmed:

```bash
./komodo-cli -ac_name=HELLOWORLD getrawmempool
```

## channelsrefund

**channelsrefund open_tx_id close_tx_id**

The `channelsrefund` method withdraws funds directly to the Fluidity address of the channel creator.

The method can only be executed after the channel `close_tx_id` has either one notarization or 60 confirmations.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

### Arguments

| Name | Type | Description |
| ------------------------ | -------- | ------------------------------------------------------- |
| destination_pubkey       | (string) | the public key of the intended recipient of the channel |
| total_number_of_payments | (number) | the total number of payments to allocate in the channel |
| payment_size             | (number) | the amount per payment, given in satoshis               |

### Response

| Name | Type | Description |
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1: Command

```bash
./komodo-cli -ac_name=HELLOWORLD channelsrefund 2f95b0f4e3dbe7f5ebc0f9479800c9ff3f44e76f5378313c9406ab5a92ff4631 2079c46cd9f3970f9fd73d8022bf6f30aaf5031bf877d2c541c4c0df1dea1be5
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "0100000003e51bea1ddfc0c441c5d277f81b03f5aa306fbf22803dd79f0f97f3d96cc479200300000049483045022100bbed947e3c33b21b8519a7d78dc08cb70d3fe3e6c788119db95a459448caa64c02200a1c73431d118a7fad4f58b760b025f399747e127a46da5c421add2e599b897f01ffffffffe51bea1ddfc0c441c5d277f81b03f5aa306fbf22803dd79f0f97f3d96cc4792000000000a74ca5a281a1a0819ca28194a067a56580210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba0127281403fe5789a3f0e25f46a000f381fc2e7f7b759855184532a6e1e0c5e84d1dc284b4d37422735aa93175ea74d6829ac3b68a7c8c928c22b870ab4b9507bc872dbd6a129a5278020e73e4b0745bdf31657ac09e3cf99fd65cb262d8498f86c977ece01b551925f028103020000af038001eba10001ffffffffe51bea1ddfc0c441c5d277f81b03f5aa306fbf22803dd79f0f97f3d96cc47920010000007b4c79a276a072a26ba067a56580210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba0127281400b4d6aaeb127417839b76dc78d78379147cfff760f03824e5565aae1c371bbd34559d951cdd2e8622bd5f5aa5528d2a20ee95174c3fea09ef48824ecd647c0b2a100af038001eba10001ffffffff051027000000000000302ea22c8020c9ada2adfc6c6dec0bd9dd29f4e48c86f84c016abc3552b8815ca3c4a44c561b8103120c008203000401cc1027000000000000302ea22c802019be575785c322e9c7d2ae4b5f3df78c9a38ff7357e9e689f26de8e224cb186c8103120c008203000401cc008793030000000023210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba01272ac805f96a60100000023210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba01272ac0000000000000000956a4c92eb523146ff925aab06943c3178536fe7443fffc9009847f9c0ebf5e7dbe3f4b0952f210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba0127221027166e21e9579307a1ae4f8c223516e70aae3cbfab4bd6ac7cebfa625dcc0a2a4060000008096980000000000e51bea1ddfc0c441c5d277f81b03f5aa306fbf22803dd79f0f97f3d96cc4792000000000"
}
```

</collapse-text>

Step 2: Broadcast the hex using `sendrawtransaction`

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 0100000003e51bea1ddfc0c441c5d277f81b03f5aa306fbf22803dd79f0f97f3d96cc479200300000049483045022100bbed947e3c33b21b8519a7d78dc08cb70d3fe3e6c788119db95a459448caa64c02200a1c73431d118a7fad4f58b760b025f399747e127a46da5c421add2e599b897f01ffffffffe51bea1ddfc0c441c5d277f81b03f5aa306fbf22803dd79f0f97f3d96cc4792000000000a74ca5a281a1a0819ca28194a067a56580210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba0127281403fe5789a3f0e25f46a000f381fc2e7f7b759855184532a6e1e0c5e84d1dc284b4d37422735aa93175ea74d6829ac3b68a7c8c928c22b870ab4b9507bc872dbd6a129a5278020e73e4b0745bdf31657ac09e3cf99fd65cb262d8498f86c977ece01b551925f028103020000af038001eba10001ffffffffe51bea1ddfc0c441c5d277f81b03f5aa306fbf22803dd79f0f97f3d96cc47920010000007b4c79a276a072a26ba067a56580210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba0127281400b4d6aaeb127417839b76dc78d78379147cfff760f03824e5565aae1c371bbd34559d951cdd2e8622bd5f5aa5528d2a20ee95174c3fea09ef48824ecd647c0b2a100af038001eba10001ffffffff051027000000000000302ea22c8020c9ada2adfc6c6dec0bd9dd29f4e48c86f84c016abc3552b8815ca3c4a44c561b8103120c008203000401cc1027000000000000302ea22c802019be575785c322e9c7d2ae4b5f3df78c9a38ff7357e9e689f26de8e224cb186c8103120c008203000401cc008793030000000023210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba01272ac805f96a60100000023210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba01272ac0000000000000000956a4c92eb523146ff925aab06943c3178536fe7443fffc9009847f9c0ebf5e7dbe3f4b0952f210324f94e76159d69a5163b91588c3a04dac2c80e0011f713e3bfc5a8b67ba0127221027166e21e9579307a1ae4f8c223516e70aae3cbfab4bd6ac7cebfa625dcc0a2a4060000008096980000000000e51bea1ddfc0c441c5d277f81b03f5aa306fbf22803dd79f0f97f3d96cc4792000000000
```


# Custom CC (WIP)
This document is a work in progress (WIP)

We are fortunate to have been gifted the ability to launch provable ecosystems to build upon.  This tutorial begins with a quick foundation of core concepts then moving into how to make dApps with layer-1, on-chain consensus. The smart-UTXO system of Komodo's Crypto-Conditions.  Consensus & Smart Contract customizations.

## Blockchain Core Concepts
* Public key cryptography is used when a private and public key pair are used for proving something.
* Private Keys are stored in a wallet, not on the blockchain.
* Private keys sign transactions.
* Signatures on transaction are proven by the network using the corresponding public key to spend the claimed ownership of funds.
* Transactions fill blocks, like an item on a shopping list fills a piece of paper.
* Blocks are arranged in sequential order, forming a chain.
* Each block contains agreed transactional information. The proof of the transactional detail and it's arrangement in the block is called consensus. Consensus is achieved by each participant relying on their own computation.
* Coins & Tokens are used in transaction details to transfer value.
* Nodes is the jargon term for computers that do the computations to maintain the network.
* Maintaining the network is done by validating.  OP_CODES are the instructions of the network that need validating.
* Some nodes are heavily computational (miners), some are quiet and store a valuable private key within the wallet.
* There's additional software to make this blockchain useful (for transfering value) & easier to use. Like the internet became useful for transfering information, blockchain technology enables dApps to create new ways of collaborating.  Blockchain: Mobile Wallets, DEX, Explorers vs WWW: webserver, database, email & streaming protocols)

## Goal of our custom consensus module
This `customcc` loadable library example is simply something that requires to send 1 coin.  It can't get much simpler.

## Use jl777 branch

```bash
git clone https://github.com/jl777/komodo.git
git checkout jl777
cd komodo/src/cc
code .
```
Open the 3 files
* customcc.h [src](https://github.com/jl777/komodo/blob/jl777/src/cc/customcc.h)
* customcc.cpp [src](https://github.com/jl777/komodo/blob/jl777/src/cc/customcc.cpp)
* makecustom [src](https://github.com/jl777/komodo/blob/jl777/src/cc/makecustom)

These are the three files we'll work on for learning how to apply custom consensus to a blockchain.  For most 1st & 2nd generation blockchain projects, changing consensus is a bold undertaking.  Komodo has turned it into a loadable module removing the risk of severe bugs - no other project offers this to a custom blockchain.

These 3 files are not boilercode.  It may look like boilercode but it's the gateway to much more powerful stuff.   This is the pandoras box of dApps.  Get ready to understand how to develop on a secure multi-chain distrbuted transactional system.

## customcc.h header file - definitions of functions and variables
From the top, the comments provide a nice summary of what our custom cclib will do.

### Name of our custom cclib
One is referenced externally (`MYCCLIBNAME`) at komodo start.  The other internally (`MYCCNAME`) when programming for function name prefixes.

```cpp
std::string MYCCLIBNAME = (char *)"customcc";
#define MYCCNAME "custom"
```
`MYCCLIBNAME` This is the name of the loadable library module being created.  Here it is "customcc".  This is what is used on the command line to load your custom consensus when [starting your custom blockchain](/basic-docs/installations/creating-asset-chains.html) on a komodo server.

```bash
komodod -ac_name=CUSTOM -ac_cc=1 -ac_cclib=customcc ...
```

The `MYCCNAME` is the prefix for RPC calls and standard consensus functions (e.g. `validate`).
The naming convention used for building a custom consensus library follows:
* MYCCNAME_FUNCTIONNAME

For example `custom_validate`.


### Declaration of constants
```cpp
#define EVAL_CUSTOM (EVAL_FAUCET2+1)
#define CUSTOM_TXFEE 10000
```
The `EVAL_FAUCET2` is a constant (footnote: 1a & 1b) (`0x10` or decimal 16).   These `EVAL_...` constants are identifiers.  They are used to route the validation code.  The low-level bitcoin script in Komodo has a new op_code called `OP_CHECKCRYPTOCONDITION`.   When any node on the network needs to validate this `OP_CHECKCRYPTOCONDITION` op_code, it looks up which `EVAL_...` code it is.

Custom consensus starts at `EVAL_FAUCET2` and add `+1` to it for your customcc library.  Therefore, `EVAL_CUSTOM` is `0x11` = decimal 17.

The `CUSTOM_TXFEE` is the default transaction fee for this type of transaction.  The default txfee for this `EVAL_...` code consensus is `10000` assetoshis (0.0001).


### Declarations of the RPC calls
This is the way 3rd party developers (e.g. front-end developers) and command-line users will interact with your custom crypto condition.  For example commands like `komodo-cli -ac_name=CUSTOM custom_func0` and `komodo-cli -ac_name=CUSTOM custom_func1`.

```cpp
{ (char *)MYCCNAME, (char *)"func0", (char *)"<parameter help>", 1, 1, '0', EVAL_CUSTOM },
{ (char *)MYCCNAME, (char *)"func1", (char *)"<no args>", 0, 0, '1', EVAL_CUSTOM },
```
The declarations for the functions in customcc.cpp - func0 and func1

* `MYCCNAME` is declared previously as "custom"
* `func0` is the name of the first RPC call
* The `<parameter help>` can be replaced with your functions help text.
* The `1,1,'0', EVAL_CUSTOM` means: 1 mandatory parameter, maximum of 1 parameter, 0 is the function id for custom consensus `EVAL_CUSTOM`, in this case `0x11` (decimal 17)
* `func1` is the name of the next RPC call
* The `<no args>` is the real help text this time.  This RPC call `func1` requires no arguments, like `komodo-cli getinfo`
* The `0,0,'1', EVAL_CUSTOM` mean: 0 mandatory parameters, maximum of 0 parameters, 1 is the function id for custom consensus `EVAL_CUSTOM`, in this case `0x11` (decimal 17)

### Declaration of functions
```cpp
bool custom_validate(struct CCcontract_info *cp,int32_t height,Eval *eval,const CTransaction tx);
UniValue custom_func0(uint64_t txfee,struct CCcontract_info *cp,cJSON *params);
UniValue custom_func1(uint64_t txfee,struct CCcontract_info *cp,cJSON *params);
```
These functions follow the naming convention of `MYCCNAME` with a `_`.  Validation is always required and named `MYCCNAME` + `_validate`.  MYCCNAME is `custom`, therefore the validate function is called `custom_validate`.   If MYCCNAME was defined as `mylo`, then my validate function would be called `mylo_validate`.  Odds are you will name your first cclib after yourself or someone else just as loveable.

The validation code is the most important code - it is what makes blockchains sources of truth.  Their truthiness relies on validation based on cryptographic principles.

Functions `custom_func0` and `custom_func1` follow the internal automatic module wiring of cclib.  Again `MYCCNAME` + `_` + `RPCFUNCS` declared earlier.

### Automatic wiring, custom RPC function dispatcher

The following code is part of the automatic wiring that allows a developer to use 3 files, the `.h` the `.cpp` and the `makecustom` makefile.   Automatic wiring saves a developer from potentially  introducing bugs in the consensus and by virtue of this saving, testers, users and organizations many hours of resources.

The custom dispatch is used for dispatching the RPC function declared earlier.

```cpp
#define CUSTOM_DISPATCH \
if ( cp->evalcode == EVAL_CUSTOM ) \
{ \
    if ( strcmp(method,"func0") == 0 ) \
        return(custom_func0(txfee,cp,params)); \
    else if ( strcmp(method,"func1") == 0 ) \
        return(custom_func1(txfee,cp,params)); \
    else \
    { \
        result.push_back(Pair("result","error")); \
        result.push_back(Pair("error","invalid customcc method")); \
        result.push_back(Pair("method",method)); \
        return(result); \
    } \
}
```

The developer must then map the RPC names to the function/method.  This mapping follows the same naming convention that has already been defined.  Namely, `MYCCNAME` + `_` + `FUNCTIONNAME`.  If no match, then an error message returned and no harm done.

e.g.
```cpp
    if ( strcmp(method,"func0") == 0 ) \
        return(custom_func0(txfee,cp,params)); \
```

Finally, in the course of looking where to route the RPC request

## customcc.cpp file - implementation of functions





Ref: [^1a](https://github.com/jl777/komodo/blob/jl777/src/cc/eval.h#L63)

Ref: [^1b](https://github.com/jl777/komodo/blob/jl777/src/cc/cclib.cpp#L31)
# Dice

## Introduction

The Dice Fluidity module allows for a decentralized `dice` game on a blockchain. The `dice` module is essentially a simple, but fully functional example of decentralized software.

It is also useful as a demonstration to show how Fluidity based modules can leverage provably random entropy to enable blockchain-enforced real-time gameplay.

The Dice module is a simple gambling game, where one node creates a "house" contract, with seed funds and other parameters, and other users place bets within the indicated parameters. Winners and losers are determined through blockchain technology. This technology includes on-chain, consensus based, provably random entropy that derives from the activity of both the "house" and the users.

The "house" node should be running the [dicestatus](../customconsensus/dice.html#dicestatus) method at a regular frequency. This method resolves unfinished bets and generates new entropy utxos for the "house" contract.

To create a "house" contract, use [dicefund](../customconsensus/dice.html#dicefund) to initiate the contract, and then add several utxos to the fund with [diceaddfunds.](../customconsensus/dice.html#diceaddfunds)

Once the contract is created and funded, users can place a bet using [dicebet.](../customconsensus/dice.html#dicebet)

Anyone can execute a [dicefinish](../customconsensus/dice.html#dicefinish) RPC after the contract's time expires. This prevents the "house" node from cheating by going offline.

## diceaddfunds

**diceaddfunds name fundingtxid amount**

The `diceaddfunds` method adds funds to the desired `dice` contract.

Only the owner of the `dice` contract is able to add funds.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

### Arguments

| Name | Type | Description | 
| ----------- | -------- | ----------------------------------------------------------------- |
| name        | (string) | the name of the user's dice contract                              |
| fundingtxid | (string) | the txid of the transaction that created and funded this contract |
| amount      | (number) | the amount of funds you want to add to your contract from your wallet |

### Response

| Name | Type | Description | 
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1: Create a raw transaction hex value for adding funds

```bash
./komodo-cli -ac_name=HELLOWORLD diceaddfunds MYDICECONTRACT ebfcff20fa5ab7bebf14b778e74bd6b34b02f100ff75e4cb611190f160ae4cf7 10
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "0100000001646b59153d05ed0cb2b241dbbc42cd86df446ea43db8a66c68fdc2462e1bc6850000000049483045022100bdbf75970d7f708c4a5637d703b0a055e65a2eab0e71f6435604281d5981143d022008942029da09aa09bd0c9358b8169528e596968150e85d15c143c6961bf2b39501ffffffff0400ca9a3b00000000302ea22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401cc1027000000000000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcacf0aed71218090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000000000006d6a4c6ae6454b4d444469636500f74cae60f1901161cbe475ff00f1024bb3d64be778b714bfbeb75afa20fffcebd22d4e75f4939198938b49036f71c3a0e00d20ca05237147aaed0d85cd50ff29000000000000000000000000000000000000000000000000000000000000000000000000"
}
```

</collapse-text>

Step 2: Send the raw transaction / broadcast the hex value

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 0100000001646b59153d05ed0cb2b241dbbc42cd86df446ea43db8a66c68fdc2462e1bc6850000000049483045022100bdbf75970d7f708c4a5637d703b0a055e65a2eab0e71f6435604281d5981143d022008942029da09aa09bd0c9358b8169528e596968150e85d15c143c6961bf2b39501ffffffff0400ca9a3b00000000302ea22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401cc1027000000000000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcacf0aed71218090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000000000006d6a4c6ae6454b4d444469636500f74cae60f1901161cbe475ff00f1024bb3d64be778b714bfbeb75afa20fffcebd22d4e75f4939198938b49036f71c3a0e00d20ca05237147aaed0d85cd50ff29000000000000000000000000000000000000000000000000000000000000000000000000
```

<collapse-text hidden title="Response">

```bash
83370785623efc679de990b0d90bd45b375a0a53ce9e011259c31a8c747fd1ff
```

</collapse-text>

Step 3: Decode the raw transaction (optional to check if the values are sane)

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 0100000001646b59153d05ed0cb2b241dbbc42cd86df446ea43db8a66c68fdc2462e1bc6850000000049483045022100bdbf75970d7f708c4a5637d703b0a055e65a2eab0e71f6435604281d5981143d022008942029da09aa09bd0c9358b8169528e596968150e85d15c143c6961bf2b39501ffffffff0400ca9a3b00000000302ea22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401cc1027000000000000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcacf0aed71218090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000000000006d6a4c6ae6454b4d444469636500f74cae60f1901161cbe475ff00f1024bb3d64be778b714bfbeb75afa20fffcebd22d4e75f4939198938b49036f71c3a0e00d20ca05237147aaed0d85cd50ff29000000000000000000000000000000000000000000000000000000000000000000000000
```

<collapse-text hidden title="Response">

```json
{
  "txid": "83370785623efc679de990b0d90bd45b375a0a53ce9e011259c31a8c747fd1ff",
  "size": 387,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "85c61b2e46c2fd686ca6b83da46e44df86cd42bcdb41b2b20ced053d15596b64",
      "vout": 0,
      "scriptSig": {
        "asm": "3045022100bdbf75970d7f708c4a5637d703b0a055e65a2eab0e71f6435604281d5981143d022008942029da09aa09bd0c9358b8169528e596968150e85d15c143c6961bf2b39501",
        "hex": "483045022100bdbf75970d7f708c4a5637d703b0a055e65a2eab0e71f6435604281d5981143d022008942029da09aa09bd0c9358b8169528e596968150e85d15c143c6961bf2b39501"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 10.0,
      "valueSat": 1000000000,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["REabWB7KjFN5C3LFMZ5odExHPenYzHLtVw"]
      }
    },
    {
      "value": 0.0001,
      "valueSat": 10000,
      "n": 1,
      "scriptPubKey": {
        "asm": "03fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc OP_CHECKSIG",
        "hex": "2103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RANyPgfZZLhSjQB9jrzztSw66zMMYDZuxQ"]
      }
    },
    {
      "value": 99989.9999,
      "valueSat": 9998999990000,
      "n": 2,
      "scriptPubKey": {
        "asm": "03fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc OP_CHECKSIG",
        "hex": "2103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RANyPgfZZLhSjQB9jrzztSw66zMMYDZuxQ"]
      }
    },
    {
      "value": 0.0,
      "valueSat": 0,
      "n": 3,
      "scriptPubKey": {
        "asm": "OP_RETURN e6454b4d444469636500f74cae60f1901161cbe475ff00f1024bb3d64be778b714bfbeb75afa20fffcebd22d4e75f4939198938b49036f71c3a0e00d20ca05237147aaed0d85cd50ff290000000000000000000000000000000000000000000000000000000000000000",
        "hex": "6a4c6ae6454b4d444469636500f74cae60f1901161cbe475ff00f1024bb3d64be778b714bfbeb75afa20fffcebd22d4e75f4939198938b49036f71c3a0e00d20ca05237147aaed0d85cd50ff290000000000000000000000000000000000000000000000000000000000000000",
        "type": "nulldata"
      }
    }
  ]
}
```

</collapse-text>

## diceaddress

**diceaddress (pubkey)**

The `diceaddress` method takes either your pubkey or a pubkey that you provide and returns the smart-contract address for the `dice` smart contract.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | -------------------------------------------------------------------------------------- |
| pubkey    | (string, optional) | the pubkey of the requested info; by default it is the pubkey used to launch the chain |

### Response

| Name | Type | Description | 
| -------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------ |
| result         | (string) | whether the diceaddress method was successful                                                                                  |
| DiceCCaddress  | (string) | taking the dice contract's EVAL code as a modifier, this is the public address that corresponds to the dice contract's privkey |
| Dicemarker     | (string) | the unmodified public address generated from the dice contract's privkey                                                       |
| DiceCCassets   | (string) | the internal address; this value is not related to the usage of the Dice Fluidity module                                             |
| GatewaysPubkey | (string) | the global pubkey for this Gateways Fluidity module                                                                                  |
| myCCaddress    | (string) | taking the dice contract's EVAL code as a modifier, this is the Fluidity address from the pubkey of the user                         |
| myaddress      | (string) | the public address of the pubkey used to launch the chain                                                                      |

#### :pushpin: Examples

For the non-default pubkey.

```bash
./komodo-cli -ac_name=HELLOWORLD diceaddress 03fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "DiceCCaddress": "REabWB7KjFN5C3LFMZ5odExHPenYzHLtVw",
  "Dicemarker": "RLEe8f7Eg3TDuXii9BmNiiiaVGraHUt25c",
  "GatewaysPubkey": "03ea9c062b9652d8eff34879b504eda0717895d27597aaeb60347d65eed96ccb40",
  "DiceCCassets": "RLW83eT1eUAHHNenLzEutoLDe8nDf7Tdf6",
  "myCCaddress": "RTEk4ykVCGYpATHUm98NwKcPCu3z76oAmi",
  "myaddress": "RJYiWn3FRCSSLf9Pe5RJcbrKQYosaMburP"
}
```

</collapse-text>

## dicebet

**dicebet name fundingtxid amount odds**

The `dicebet` method places a bet on the indicated `dice` contract.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

### Arguments

| Name | Type | Description | 
| ----------- | -------- | ----------------------------------------------------------------------- |
| name        | (string) | the name of the dice contract for which the user desires to place a bet |
| fundingtxid | (string) | the txid of the transaction that created and funded this contract       |
| amount      | (number) | the amount the user desires to place as a bet                             |
| odds        | (number) | specify the user's odds                                                 |

### Response

| Name | Type | Description | 
| --------- | -------- | ---------------------------------------------------------------------------------------------------------- |
| "result"  | (string) | whether the dicebet command executed successfully                                                          |
| "hex"     | (string) | the data of the user's transaction, in a raw hex-encoded format; broadcast this using `sendrawtransaction` |

#### :pushpin: Examples

Step 1: Set your parameters to create a raw transaction and get the hex value

```bash
./komodo-cli -ac_name=HELLOWORLD dicebet KMDDice ebfcff20fa5ab7bebf14b778e74bd6b34b02f100ff75e4cb611190f160ae4cf7 7 7
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "010000000378c9b0720ac4ffda232bd8ebc1ebf10d78efe23daf59ad887439baf72a3ffd03000000007b4c79a276a072a26ba067a5658021039d966927cfdadab3ee6c56da63c21f17ea753dde4b3dfd41487103e24b27e94e8140fe35ae062eb8239b1eec5407c71e27531f281dc369b55c3d3c235a87f6c10b3d4e7a029a6420e4fa076bd1d3da013287a17973fb6684bc487335ce176e7488d3a100af038001e6a10001ffffffff0b2261be0d143f42b833bcdf6e95582d4071f7d7d1d03eb1de0893eb7dc563ef0200000049483045022100f934f292e5ef9b3c605b83381abec1d99c7119d35a3833e40e65d788191ea51402207e925062602bb603f7109e3f36009563952741e666210195686de27b61515cc801ffffffff0b2261be0d143f42b833bcdf6e95582d4071f7d7d1d03eb1de0893eb7dc563ef0300000048473044022020aa8c2d6dc9727ce32f34ae704eb374b7cf87f43250a2d10072fad266f6602e02201fce01ae5c550438f2a512ab13f4c40d411d7726f32046e989b9747af33fd4e101ffffffff0500ca9a3b00000000302ea22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401cc0027b92900000000302ea22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401cc1727000000000000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcacc91265bf17090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000000000006d6a4c6ae6424b4d444469636500f74cae60f1901161cbe475ff00f1024bb3d64be778b714bfbeb75afa20fffceb6b2540dd22241ca6e72fe32c1cd1d2a9528140cad290f1599041e06589040067000000000000000000000000000000000000000000000000000000000000000000000000"
}
```

</collapse-text>

Step 2: Send/broadcast the raw transaction hex

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000378c9b0720ac4ffda232bd8ebc1ebf10d78efe23daf59ad887439baf72a3ffd03000000007b4c79a276a072a26ba067a5658021039d966927cfdadab3ee6c56da63c21f17ea753dde4b3dfd41487103e24b27e94e8140fe35ae062eb8239b1eec5407c71e27531f281dc369b55c3d3c235a87f6c10b3d4e7a029a6420e4fa076bd1d3da013287a17973fb6684bc487335ce176e7488d3a100af038001e6a10001ffffffff0b2261be0d143f42b833bcdf6e95582d4071f7d7d1d03eb1de0893eb7dc563ef0200000049483045022100f934f292e5ef9b3c605b83381abec1d99c7119d35a3833e40e65d788191ea51402207e925062602bb603f7109e3f36009563952741e666210195686de27b61515cc801ffffffff0b2261be0d143f42b833bcdf6e95582d4071f7d7d1d03eb1de0893eb7dc563ef0300000048473044022020aa8c2d6dc9727ce32f34ae704eb374b7cf87f43250a2d10072fad266f6602e02201fce01ae5c550438f2a512ab13f4c40d411d7726f32046e989b9747af33fd4e101ffffffff0500ca9a3b00000000302ea22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401cc0027b92900000000302ea22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401cc1727000000000000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcacc91265bf17090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000000000006d6a4c6ae6424b4d444469636500f74cae60f1901161cbe475ff00f1024bb3d64be778b714bfbeb75afa20fffceb6b2540dd22241ca6e72fe32c1cd1d2a9528140cad290f1599041e06589040067000000000000000000000000000000000000000000000000000000000000000000000000
```

<collapse-text hidden title="Response">

```bash
694c309c86a928fde1919a86381f61670479c3ede85ea0574d08636cc406e798
```

</collapse-text>

Step 3: Decode raw transaction (optional to check if the values are sane)

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 010000000378c9b0720ac4ffda232bd8ebc1ebf10d78efe23daf59ad887439baf72a3ffd03000000007b4c79a276a072a26ba067a5658021039d966927cfdadab3ee6c56da63c21f17ea753dde4b3dfd41487103e24b27e94e8140fe35ae062eb8239b1eec5407c71e27531f281dc369b55c3d3c235a87f6c10b3d4e7a029a6420e4fa076bd1d3da013287a17973fb6684bc487335ce176e7488d3a100af038001e6a10001ffffffff0b2261be0d143f42b833bcdf6e95582d4071f7d7d1d03eb1de0893eb7dc563ef0200000049483045022100f934f292e5ef9b3c605b83381abec1d99c7119d35a3833e40e65d788191ea51402207e925062602bb603f7109e3f36009563952741e666210195686de27b61515cc801ffffffff0b2261be0d143f42b833bcdf6e95582d4071f7d7d1d03eb1de0893eb7dc563ef0300000048473044022020aa8c2d6dc9727ce32f34ae704eb374b7cf87f43250a2d10072fad266f6602e02201fce01ae5c550438f2a512ab13f4c40d411d7726f32046e989b9747af33fd4e101ffffffff0500ca9a3b00000000302ea22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401cc0027b92900000000302ea22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401cc1727000000000000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcacc91265bf17090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000000000006d6a4c6ae6424b4d444469636500f74cae60f1901161cbe475ff00f1024bb3d64be778b714bfbeb75afa20fffceb6b2540dd22241ca6e72fe32c1cd1d2a9528140cad290f1599041e06589040067000000000000000000000000000000000000000000000000000000000000000000000000
```

<collapse-text hidden title="Response">

```json
{
  "txid": "694c309c86a928fde1919a86381f61670479c3ede85ea0574d08636cc406e798",
  "size": 721,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "03fd3f2af7ba397488ad59af3de2ef780df1ebc1ebd82b23daffc40a72b0c978",
      "vout": 0,
      "scriptSig": {
        "asm": "a276a072a26ba067a5658021039d966927cfdadab3ee6c56da63c21f17ea753dde4b3dfd41487103e24b27e94e8140fe35ae062eb8239b1eec5407c71e27531f281dc369b55c3d3c235a87f6c10b3d4e7a029a6420e4fa076bd1d3da013287a17973fb6684bc487335ce176e7488d3a100af038001e6a10001",
        "hex": "4c79a276a072a26ba067a5658021039d966927cfdadab3ee6c56da63c21f17ea753dde4b3dfd41487103e24b27e94e8140fe35ae062eb8239b1eec5407c71e27531f281dc369b55c3d3c235a87f6c10b3d4e7a029a6420e4fa076bd1d3da013287a17973fb6684bc487335ce176e7488d3a100af038001e6a10001"
      },
      "sequence": 4294967295
    },
    {
      "txid": "ef63c57deb9308deb13ed0d1d7f771402d58956edfbc33b8423f140dbe61220b",
      "vout": 2,
      "scriptSig": {
        "asm": "3045022100f934f292e5ef9b3c605b83381abec1d99c7119d35a3833e40e65d788191ea51402207e925062602bb603f7109e3f36009563952741e666210195686de27b61515cc801",
        "hex": "483045022100f934f292e5ef9b3c605b83381abec1d99c7119d35a3833e40e65d788191ea51402207e925062602bb603f7109e3f36009563952741e666210195686de27b61515cc801"
      },
      "sequence": 4294967295
    },
    {
      "txid": "ef63c57deb9308deb13ed0d1d7f771402d58956edfbc33b8423f140dbe61220b",
      "vout": 3,
      "scriptSig": {
        "asm": "3044022020aa8c2d6dc9727ce32f34ae704eb374b7cf87f43250a2d10072fad266f6602e02201fce01ae5c550438f2a512ab13f4c40d411d7726f32046e989b9747af33fd4e101",
        "hex": "473044022020aa8c2d6dc9727ce32f34ae704eb374b7cf87f43250a2d10072fad266f6602e02201fce01ae5c550438f2a512ab13f4c40d411d7726f32046e989b9747af33fd4e101"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 10.0,
      "valueSat": 1000000000,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["REabWB7KjFN5C3LFMZ5odExHPenYzHLtVw"]
      }
    },
    {
      "value": 7.0,
      "valueSat": 700000000,
      "n": 1,
      "scriptPubKey": {
        "asm": "a22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["REabWB7KjFN5C3LFMZ5odExHPenYzHLtVw"]
      }
    },
    {
      "value": 0.00010007,
      "valueSat": 10007,
      "n": 2,
      "scriptPubKey": {
        "asm": "03fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc OP_CHECKSIG",
        "hex": "2103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RANyPgfZZLhSjQB9jrzztSw66zMMYDZuxQ"]
      }
    },
    {
      "value": 99975.99969993,
      "valueSat": 9997599969993,
      "n": 3,
      "scriptPubKey": {
        "asm": "03fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc OP_CHECKSIG",
        "hex": "2103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RANyPgfZZLhSjQB9jrzztSw66zMMYDZuxQ"]
      }
    },
    {
      "value": 0.0,
      "valueSat": 0,
      "n": 4,
      "scriptPubKey": {
        "asm": "OP_RETURN e6424b4d444469636500f74cae60f1901161cbe475ff00f1024bb3d64be778b714bfbeb75afa20fffceb6b2540dd22241ca6e72fe32c1cd1d2a9528140cad290f1599041e065890400670000000000000000000000000000000000000000000000000000000000000000",
        "hex": "6a4c6ae6424b4d444469636500f74cae60f1901161cbe475ff00f1024bb3d64be778b714bfbeb75afa20fffceb6b2540dd22241ca6e72fe32c1cd1d2a9528140cad290f1599041e065890400670000000000000000000000000000000000000000000000000000000000000000",
        "type": "nulldata"
      }
    }
  ]
}
```

</collapse-text>

## dicefinish

**dicefinish name fundingtxid bettxid**

The `dicefinish` method rebroadcasts a bet that was previously broadcast.

If the returned `hex` value is `0` the bet is finished.

If the returned `hex` value is not `0`, the `hex` value should be broadcast with [sendrawtransaction.](../komodo-api/rawtransactions.html#sendrawtransaction) If the bet has not finished or is stuck, the `hex` will have a value.

### Arguments

| Name | Type | Description | 
| ----------- | -------- | ----------------------------------------------------------------- |
| name        | (string) | the name of the dice contract                                     |
| fundingtxid | (string) | the txid of the transaction that created and funded this contract |
| bettxid     | (string) | the txid of the bet for which finish status is requested          |

### Response

| Name | Type | Description | 
| --------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| result    | (string) | whether the command executed successfully                                                                                                                                                                                                  |
| hex       | (string) | if the contract is already finished, the resulting hex is 0; if the contract is not finished, the value of hex will be a rawtransaction that the user can broadcast to let the blockchain automatically declare a winner and close the bet |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD dicefinish DICE3 4132ca8e8d46df9f8a8cbe83c99794497e06bbd190bd71f4abcdedf84e90952e d54335073e549cd75a050fd4d6ba5939307cda7096ba0f3da779fb7d07e46343
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "0"
}
```

</collapse-text>

## dicefund

**dicefund name funds minbet maxbet maxodds timeoutblocks**

The `dicefund` method creates and funds a dice contract.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

Ideally, the dice creator node should be online throughout the contract's life, to determine `winning bid` or `losing bid`.

If the dice creator node is offline after the `timeoutblocks` period completes, the system will automatically declare the bet's winner and payout winning funds.

Typically, the creator should set the `timeoutblocks` property to a longer period. This prevents the house from losing funds if the house's node unexpectedly experiences downtime.

The `maxodds` property must be between 1 and 9999.

### Arguments

| Name | Type | Description | 
| ------------- | -------- | --------------------------------------------------------------------------------------------- |
| name          | (string) | the name of the user's dice contract                                                          |
| funds         | (number) | the amount of funds with which the user desires to start                                      |
| minbet        | (number) | the minimum amount allowed for a bet                                                          |
| maxbet        | (number) | the maximum amount allowed for a bet                                                          |
| maxodds       | (number) | the largest odds an end-user can use for betting                                              |
| timeoutblocks | (number) | the number of blocks before the contract times out and pays the automatically declared winner |

### Response

| Name | Type | Description | 
| --------- | -------- | --------------------------------------------------------------------------------------------------------- |
| result    | (string) | whether the command executed successfully                                                                 |
| hex       | (string) | the data of the transaction in raw hex-encoded format; broadcast this using the sendrawtransaction method |

#### :pushpin: Examples

Step 1: Create your customized Dice contract and get the hex value

```bash
./komodo-cli -ac_name=HELLOWORLD dicefund KMDDice 777777 0.777 7.77 777 7
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "010000000a5890b79f42a2039d6b661cec3f0a748f8122b51427d2747d7cddb45e7c774988010000004847304402206544c1d0bb42da89d93e58526a28b3c80ef45dca516ecd11ee3fe7fc35a5261c02207f0b134ff5cdb840692a65eccd86fb2fc2a63afc6f1309a2ed9d054d1a076b1201ffffffff5b90bd88124ebd1a0988c612902234782b737b860189fb5871088d2d3aae2481020000004948304502210091972c641291022da6d49ab8d3790ccdbb0f563b385b89ac723fa688a6c84ee202207198c3d48ce1d9591fce6fb41192145c38f8312c7a78251f4231986070a3283a01ffffffff5bfb06fac51707a69414a1f908ac3f9eb3fca50f303c4ae960f94491e8dc7f5c0100000049483045022100ea0b49d902f844ef280b8621cdc5a5365a779a04a159ba30e00bd0b3eaf284da02205aece19ee807ce11b0ed7b74175df29dd2be4560361174664571a6a596a894fd01ffffffff5ca636731b8c28889248a0b434e3124f19518b2c4b4bbefd80af303329ae9471020000004847304402203eb318ae650753ab7cc2e9ea9b2cc2477add2fbd9e49e0ac1d7560f7e08ecbb002202d77d75ed2c1d3b53feda45c699374f74d1bf1065b46e3a24514dd072f2a9dcb01ffffffff5d5132ee6f33ba09b4bcfb84beddfcbdf58888ea7f221cc8078a96865e1e0ea10000000049483045022100e3cc5062becc979fc347a9ccde6af8ebba39c0d88105c9a35c89876207fafb0202204f631d063911e4526958f6629a847cca832d845a86adcae248625fd45b03e7d001ffffffff5e626ec0b20cd783ee0bf52aa33189796ddd4649d31b64fdee10b6daecbd079200000000494830450221009f3c17ccc73f28d9ba1d80c149890f56c6aafa576e152eb776082d12d54548eb022053f3b87eee04d9f5ef9f961d79433ec76b0f0e4a2288104212db01f6d2d7d1f801ffffffff5eb56cd4df0702b06debcf36de8309432b8140daa0a2544159ff68bbb96ed2050000000048473044022029bbf3fa5dea810d70ea9ef9b81b5ee72c3b3ec7d59faae4ca9658ed723ef683022060226d854ff44aebeba36bfda9e664185be0999ce7ee8b7b053f67642bd8c64101ffffffff603757f4b8370432cf30b12abdbb93b888e7707cd4321851f926779ee126e24402000000484730440220717994adac8b009a0f110438cef1e226d6674494e774813fad044b340c38052002202852c11fcc5bb1f3aa39e3dbbf00aa0d2b808c1c0769fbd692201cf10e96644b01ffffffff62347ddc97606a28457514a53b16d7fd9534c3c12d3f890cf72536f130737bae020000004847304402202dcf8a066fc56dae83f2259f902707aff7484251666c5b01a2e71e909fe859630220306a4149afce43dc343e103cdf4926ae9bf9f9a7a6eed9bf235efe04e619daea01ffffffff63686994d134931e0b43809f6d9ab73f7053d9aaa143987c56083345eddb5ec60100000048473044022066b3aadd3f2545c953f7389a062831736eda6c01f9df20e56b107d87fa6bfe8d02204357d85e1ab484c779fac5eab5d01fd39f5caf1ecde499873de34ac5e204b7ab01ffffffff0400112e08bd460000302ea22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401cc10270000000000002321039d966927cfdadab3ee6c56da63c21f17ea753dde4b3dfd41487103e24b27e94eac100b47751c020000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000000000002c6a2ae6464b4d444469636500a09ba104000000004014502e000000000903000000000000070000000000000000000000"
}
```

</collapse-text>

Step 2: Send raw transaction / Broadcast the hex value

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000a5890b79f42a2039d6b661cec3f0a748f8122b51427d2747d7cddb45e7c774988010000004847304402206544c1d0bb42da89d93e58526a28b3c80ef45dca516ecd11ee3fe7fc35a5261c02207f0b134ff5cdb840692a65eccd86fb2fc2a63afc6f1309a2ed9d054d1a076b1201ffffffff5b90bd88124ebd1a0988c612902234782b737b860189fb5871088d2d3aae2481020000004948304502210091972c641291022da6d49ab8d3790ccdbb0f563b385b89ac723fa688a6c84ee202207198c3d48ce1d9591fce6fb41192145c38f8312c7a78251f4231986070a3283a01ffffffff5bfb06fac51707a69414a1f908ac3f9eb3fca50f303c4ae960f94491e8dc7f5c0100000049483045022100ea0b49d902f844ef280b8621cdc5a5365a779a04a159ba30e00bd0b3eaf284da02205aece19ee807ce11b0ed7b74175df29dd2be4560361174664571a6a596a894fd01ffffffff5ca636731b8c28889248a0b434e3124f19518b2c4b4bbefd80af303329ae9471020000004847304402203eb318ae650753ab7cc2e9ea9b2cc2477add2fbd9e49e0ac1d7560f7e08ecbb002202d77d75ed2c1d3b53feda45c699374f74d1bf1065b46e3a24514dd072f2a9dcb01ffffffff5d5132ee6f33ba09b4bcfb84beddfcbdf58888ea7f221cc8078a96865e1e0ea10000000049483045022100e3cc5062becc979fc347a9ccde6af8ebba39c0d88105c9a35c89876207fafb0202204f631d063911e4526958f6629a847cca832d845a86adcae248625fd45b03e7d001ffffffff5e626ec0b20cd783ee0bf52aa33189796ddd4649d31b64fdee10b6daecbd079200000000494830450221009f3c17ccc73f28d9ba1d80c149890f56c6aafa576e152eb776082d12d54548eb022053f3b87eee04d9f5ef9f961d79433ec76b0f0e4a2288104212db01f6d2d7d1f801ffffffff5eb56cd4df0702b06debcf36de8309432b8140daa0a2544159ff68bbb96ed2050000000048473044022029bbf3fa5dea810d70ea9ef9b81b5ee72c3b3ec7d59faae4ca9658ed723ef683022060226d854ff44aebeba36bfda9e664185be0999ce7ee8b7b053f67642bd8c64101ffffffff603757f4b8370432cf30b12abdbb93b888e7707cd4321851f926779ee126e24402000000484730440220717994adac8b009a0f110438cef1e226d6674494e774813fad044b340c38052002202852c11fcc5bb1f3aa39e3dbbf00aa0d2b808c1c0769fbd692201cf10e96644b01ffffffff62347ddc97606a28457514a53b16d7fd9534c3c12d3f890cf72536f130737bae020000004847304402202dcf8a066fc56dae83f2259f902707aff7484251666c5b01a2e71e909fe859630220306a4149afce43dc343e103cdf4926ae9bf9f9a7a6eed9bf235efe04e619daea01ffffffff63686994d134931e0b43809f6d9ab73f7053d9aaa143987c56083345eddb5ec60100000048473044022066b3aadd3f2545c953f7389a062831736eda6c01f9df20e56b107d87fa6bfe8d02204357d85e1ab484c779fac5eab5d01fd39f5caf1ecde499873de34ac5e204b7ab01ffffffff0400112e08bd460000302ea22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401cc10270000000000002321039d966927cfdadab3ee6c56da63c21f17ea753dde4b3dfd41487103e24b27e94eac100b47751c020000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000000000002c6a2ae6464b4d444469636500a09ba104000000004014502e000000000903000000000000070000000000000000000000
```

<collapse-text hidden title="Response">

```bash
ebfcff20fa5ab7bebf14b778e74bd6b34b02f100ff75e4cb611190f160ae4cf7
```

</collapse-text>

Step 3: Decode raw transaction (optional to check if the values are sane)

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 010000000a5890b79f42a2039d6b661cec3f0a748f8122b51427d2747d7cddb45e7c774988010000004847304402206544c1d0bb42da89d93e58526a28b3c80ef45dca516ecd11ee3fe7fc35a5261c02207f0b134ff5cdb840692a65eccd86fb2fc2a63afc6f1309a2ed9d054d1a076b1201ffffffff5b90bd88124ebd1a0988c612902234782b737b860189fb5871088d2d3aae2481020000004948304502210091972c641291022da6d49ab8d3790ccdbb0f563b385b89ac723fa688a6c84ee202207198c3d48ce1d9591fce6fb41192145c38f8312c7a78251f4231986070a3283a01ffffffff5bfb06fac51707a69414a1f908ac3f9eb3fca50f303c4ae960f94491e8dc7f5c0100000049483045022100ea0b49d902f844ef280b8621cdc5a5365a779a04a159ba30e00bd0b3eaf284da02205aece19ee807ce11b0ed7b74175df29dd2be4560361174664571a6a596a894fd01ffffffff5ca636731b8c28889248a0b434e3124f19518b2c4b4bbefd80af303329ae9471020000004847304402203eb318ae650753ab7cc2e9ea9b2cc2477add2fbd9e49e0ac1d7560f7e08ecbb002202d77d75ed2c1d3b53feda45c699374f74d1bf1065b46e3a24514dd072f2a9dcb01ffffffff5d5132ee6f33ba09b4bcfb84beddfcbdf58888ea7f221cc8078a96865e1e0ea10000000049483045022100e3cc5062becc979fc347a9ccde6af8ebba39c0d88105c9a35c89876207fafb0202204f631d063911e4526958f6629a847cca832d845a86adcae248625fd45b03e7d001ffffffff5e626ec0b20cd783ee0bf52aa33189796ddd4649d31b64fdee10b6daecbd079200000000494830450221009f3c17ccc73f28d9ba1d80c149890f56c6aafa576e152eb776082d12d54548eb022053f3b87eee04d9f5ef9f961d79433ec76b0f0e4a2288104212db01f6d2d7d1f801ffffffff5eb56cd4df0702b06debcf36de8309432b8140daa0a2544159ff68bbb96ed2050000000048473044022029bbf3fa5dea810d70ea9ef9b81b5ee72c3b3ec7d59faae4ca9658ed723ef683022060226d854ff44aebeba36bfda9e664185be0999ce7ee8b7b053f67642bd8c64101ffffffff603757f4b8370432cf30b12abdbb93b888e7707cd4321851f926779ee126e24402000000484730440220717994adac8b009a0f110438cef1e226d6674494e774813fad044b340c38052002202852c11fcc5bb1f3aa39e3dbbf00aa0d2b808c1c0769fbd692201cf10e96644b01ffffffff62347ddc97606a28457514a53b16d7fd9534c3c12d3f890cf72536f130737bae020000004847304402202dcf8a066fc56dae83f2259f902707aff7484251666c5b01a2e71e909fe859630220306a4149afce43dc343e103cdf4926ae9bf9f9a7a6eed9bf235efe04e619daea01ffffffff63686994d134931e0b43809f6d9ab73f7053d9aaa143987c56083345eddb5ec60100000048473044022066b3aadd3f2545c953f7389a062831736eda6c01f9df20e56b107d87fa6bfe8d02204357d85e1ab484c779fac5eab5d01fd39f5caf1ecde499873de34ac5e204b7ab01ffffffff0400112e08bd460000302ea22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401cc10270000000000002321039d966927cfdadab3ee6c56da63c21f17ea753dde4b3dfd41487103e24b27e94eac100b47751c020000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000000000002c6a2ae6464b4d444469636500a09ba104000000004014502e000000000903000000000000070000000000000000000000
```

<collapse-text hidden title="Response">

```json
{
  "txid": "ebfcff20fa5ab7bebf14b778e74bd6b34b02f100ff75e4cb611190f160ae4cf7",
  "size": 1342,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "8849777c5eb4dd7c7d74d22714b522818f740a3fec1c666b9d03a2429fb79058",
      "vout": 1,
      "scriptSig": {
        "asm": "304402206544c1d0bb42da89d93e58526a28b3c80ef45dca516ecd11ee3fe7fc35a5261c02207f0b134ff5cdb840692a65eccd86fb2fc2a63afc6f1309a2ed9d054d1a076b1201",
        "hex": "47304402206544c1d0bb42da89d93e58526a28b3c80ef45dca516ecd11ee3fe7fc35a5261c02207f0b134ff5cdb840692a65eccd86fb2fc2a63afc6f1309a2ed9d054d1a076b1201"
      },
      "sequence": 4294967295
    },
    {
      "txid": "8124ae3a2d8d087158fb8901867b732b7834229012c688091abd4e1288bd905b",
      "vout": 2,
      "scriptSig": {
        "asm": "304502210091972c641291022da6d49ab8d3790ccdbb0f563b385b89ac723fa688a6c84ee202207198c3d48ce1d9591fce6fb41192145c38f8312c7a78251f4231986070a3283a01",
        "hex": "48304502210091972c641291022da6d49ab8d3790ccdbb0f563b385b89ac723fa688a6c84ee202207198c3d48ce1d9591fce6fb41192145c38f8312c7a78251f4231986070a3283a01"
      },
      "sequence": 4294967295
    },
    {
      "txid": "5c7fdce89144f960e94a3c300fa5fcb39e3fac08f9a11494a60717c5fa06fb5b",
      "vout": 1,
      "scriptSig": {
        "asm": "3045022100ea0b49d902f844ef280b8621cdc5a5365a779a04a159ba30e00bd0b3eaf284da02205aece19ee807ce11b0ed7b74175df29dd2be4560361174664571a6a596a894fd01",
        "hex": "483045022100ea0b49d902f844ef280b8621cdc5a5365a779a04a159ba30e00bd0b3eaf284da02205aece19ee807ce11b0ed7b74175df29dd2be4560361174664571a6a596a894fd01"
      },
      "sequence": 4294967295
    },
    {
      "txid": "7194ae293330af80fdbe4b4b2c8b51194f12e334b4a0489288288c1b7336a65c",
      "vout": 2,
      "scriptSig": {
        "asm": "304402203eb318ae650753ab7cc2e9ea9b2cc2477add2fbd9e49e0ac1d7560f7e08ecbb002202d77d75ed2c1d3b53feda45c699374f74d1bf1065b46e3a24514dd072f2a9dcb01",
        "hex": "47304402203eb318ae650753ab7cc2e9ea9b2cc2477add2fbd9e49e0ac1d7560f7e08ecbb002202d77d75ed2c1d3b53feda45c699374f74d1bf1065b46e3a24514dd072f2a9dcb01"
      },
      "sequence": 4294967295
    },
    {
      "txid": "a10e1e5e86968a07c81c227fea8888f5bdfcddbe84fbbcb409ba336fee32515d",
      "vout": 0,
      "scriptSig": {
        "asm": "3045022100e3cc5062becc979fc347a9ccde6af8ebba39c0d88105c9a35c89876207fafb0202204f631d063911e4526958f6629a847cca832d845a86adcae248625fd45b03e7d001",
        "hex": "483045022100e3cc5062becc979fc347a9ccde6af8ebba39c0d88105c9a35c89876207fafb0202204f631d063911e4526958f6629a847cca832d845a86adcae248625fd45b03e7d001"
      },
      "sequence": 4294967295
    },
    {
      "txid": "9207bdecdab610eefd641bd34946dd6d798931a32af50bee83d70cb2c06e625e",
      "vout": 0,
      "scriptSig": {
        "asm": "30450221009f3c17ccc73f28d9ba1d80c149890f56c6aafa576e152eb776082d12d54548eb022053f3b87eee04d9f5ef9f961d79433ec76b0f0e4a2288104212db01f6d2d7d1f801",
        "hex": "4830450221009f3c17ccc73f28d9ba1d80c149890f56c6aafa576e152eb776082d12d54548eb022053f3b87eee04d9f5ef9f961d79433ec76b0f0e4a2288104212db01f6d2d7d1f801"
      },
      "sequence": 4294967295
    },
    {
      "txid": "05d26eb9bb68ff594154a2a0da40812b430983de36cfeb6db00207dfd46cb55e",
      "vout": 0,
      "scriptSig": {
        "asm": "3044022029bbf3fa5dea810d70ea9ef9b81b5ee72c3b3ec7d59faae4ca9658ed723ef683022060226d854ff44aebeba36bfda9e664185be0999ce7ee8b7b053f67642bd8c64101",
        "hex": "473044022029bbf3fa5dea810d70ea9ef9b81b5ee72c3b3ec7d59faae4ca9658ed723ef683022060226d854ff44aebeba36bfda9e664185be0999ce7ee8b7b053f67642bd8c64101"
      },
      "sequence": 4294967295
    },
    {
      "txid": "44e226e19e7726f9511832d47c70e788b893bbbd2ab130cf320437b8f4573760",
      "vout": 2,
      "scriptSig": {
        "asm": "30440220717994adac8b009a0f110438cef1e226d6674494e774813fad044b340c38052002202852c11fcc5bb1f3aa39e3dbbf00aa0d2b808c1c0769fbd692201cf10e96644b01",
        "hex": "4730440220717994adac8b009a0f110438cef1e226d6674494e774813fad044b340c38052002202852c11fcc5bb1f3aa39e3dbbf00aa0d2b808c1c0769fbd692201cf10e96644b01"
      },
      "sequence": 4294967295
    },
    {
      "txid": "ae7b7330f13625f70c893f2dc1c33495fdd7163ba5147545286a6097dc7d3462",
      "vout": 2,
      "scriptSig": {
        "asm": "304402202dcf8a066fc56dae83f2259f902707aff7484251666c5b01a2e71e909fe859630220306a4149afce43dc343e103cdf4926ae9bf9f9a7a6eed9bf235efe04e619daea01",
        "hex": "47304402202dcf8a066fc56dae83f2259f902707aff7484251666c5b01a2e71e909fe859630220306a4149afce43dc343e103cdf4926ae9bf9f9a7a6eed9bf235efe04e619daea01"
      },
      "sequence": 4294967295
    },
    {
      "txid": "c65edbed453308567c9843a1aad953703fb79a6d9f80430b1e9334d194696863",
      "vout": 1,
      "scriptSig": {
        "asm": "3044022066b3aadd3f2545c953f7389a062831736eda6c01f9df20e56b107d87fa6bfe8d02204357d85e1ab484c779fac5eab5d01fd39f5caf1ecde499873de34ac5e204b7ab01",
        "hex": "473044022066b3aadd3f2545c953f7389a062831736eda6c01f9df20e56b107d87fa6bfe8d02204357d85e1ab484c779fac5eab5d01fd39f5caf1ecde499873de34ac5e204b7ab01"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 777777.0,
      "valueSat": 77777700000000,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c80200095ece5eee67e1f313e7ba2d156c7617106cd52b75c93ed3fb110ff3fba6e998103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["REabWB7KjFN5C3LFMZ5odExHPenYzHLtVw"]
      }
    },
    {
      "value": 0.0001,
      "valueSat": 10000,
      "n": 1,
      "scriptPubKey": {
        "asm": "039d966927cfdadab3ee6c56da63c21f17ea753dde4b3dfd41487103e24b27e94e OP_CHECKSIG",
        "hex": "21039d966927cfdadab3ee6c56da63c21f17ea753dde4b3dfd41487103e24b27e94eac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RLEe8f7Eg3TDuXii9BmNiiiaVGraHUt25c"]
      }
    },
    {
      "value": 23212.4993,
      "valueSat": 2321249930000,
      "n": 2,
      "scriptPubKey": {
        "asm": "03fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc OP_CHECKSIG",
        "hex": "2103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RANyPgfZZLhSjQB9jrzztSw66zMMYDZuxQ"]
      }
    },
    {
      "value": 0.0,
      "valueSat": 0,
      "n": 3,
      "scriptPubKey": {
        "asm": "OP_RETURN e6464b4d444469636500a09ba104000000004014502e0000000009030000000000000700000000000000",
        "hex": "6a2ae6464b4d444469636500a09ba104000000004014502e0000000009030000000000000700000000000000",
        "type": "nulldata"
      }
    }
  ]
}
```

</collapse-text>

## diceinfo

**diceinfo fundingtxid**

The `diceinfo` method looks up information about the specific `dice` contract referred by the relevant `fundingtxid`.

A `fundingtxid` is the txid of the transaction that created and funded the relevant contract.

Use the [dicelist](../customconsensus/dice.html#dicelist) method to discover a list of available `fundingtxid` hashes on the asset chain.

### Arguments

| Name | Type | Description | 
| ----------- | -------- | ----------------------------------------------------------------- |
| fundingtxid | (string) | the txid of the transaction that created and funded this contract |

### Response

| Name | Type | Description | 
| --------------- | -------- | --------------------------------------------------------------------------------------------------- |
| "result"        | (string) | whether the command executed successfully                                                           |
| "fundingtxid"   | (string) | the txid of the transaction that created and funded this contract                                   |
| "name"          | (string) | the name of the dice contract                                                                       |
| "sbits"         | (number) | a 64-bit int binary encoding of the first 8 characters of the name property                         |
| "minbet"        | (number) | the minimum bet amount this contract accepts                                                        |
| "maxbet"        | (number) | the maximum bet amount this contract accepts                                                        |
| "maxodds"       | (number) | the maximum odds the contract accepts                                                               |
| "timeoutblocks" | (number) | the number of blocks before the contract allows an automatically declared winner and the bet closes |
| "funding"       | (number) | the current amount of funds in the contract                                                         |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD diceinfo 0d6e82af9959caec14d7af42fd67db68a45bcd23c755457ebf192a52d62c599c
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "fundingtxid": "0d6e82af9959caec14d7af42fd67db68a45bcd23c755457ebf192a52d62c599c",
  "name": "dice",
  "sbits": 1701013860,
  "minbet": "1.00000000",
  "maxbet": "100.00000000",
  "maxodds": 10,
  "timeoutblocks": 5,
  "funding": "1000.00000000"
}
```

</collapse-text>

## dicelist

**dicelist**

The `dicelist` method displays the total list of `fundingtxid`'s of all `dice` contracts available on the asset chain.

A `fundingtxid` is the txid of the transaction that created and funded the relevant contract.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| ----------- | -------- | ------------------------------------------------------------------------- |
| fundingtxid | (string) | the txid of the transaction that created and funded the relevant contract |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD dicelist
```

<collapse-text hidden title="Response">

```bash
[
  "0d6e82af9959caec14d7af42fd67db68a45bcd23c755457ebf192a52d62c599c"
]
```

</collapse-text>

## dicestatus

**dicestatus name fundingtxid bettxid**

The `dicestatus` method prints the status of a `dicebet` and returns whether the `bettxid` received a winning or losing result.

### Arguments

| Name | Type | Description | 
| ----------- | -------- | ----------------------------------------------------------------- |
| name        | (string) | the name of the dice contract                                     |
| fundingtxid | (string) | the txid of the transaction that created and funded this contract |
| bettxid     | (string) | the bettxid, the result of which is desired                       |

### Response

| Name | Type | Description | 
| --------- | -------- | ---------------------------------------------- |
| result    | (string) | whether the command executed successfully      |
| status    | (string) | the result of the bet for the relevant bettxid |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=AT1 dicestatus DICE3 4132ca8e8d46df9f8a8cbe83c99794497e06bbd190bd71f4abcdedf84e90952e d54335073e549cd75a050fd4d6ba5939307cda7096ba0f3da779fb7d07e46343
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "status": "loss"
}
```

</collapse-text>
# Faucet

## Introduction

The Faucet Fluidity module enables anyone to fund an on-chain faucet on any chain where modules are [enabled.](../installations/asset-chain-parameters.html#summary-of-ac-cc) A Smart Chain may have only one on-chain `faucet`.

To receive funds from a `faucet`, the [faucetget](../customconsensus/faucet.html#faucetget) method can be executed by anyone on the Smart Chain, as long as their public address satisfies a few constraints. Their daemon's pubkey (corresponding to the address) must have no history of funds or transactions, and an address can claim faucet funds only once on a chain. The call also requires the node to perform a small PoW calculation; this deters leeching.

When `faucetget` is executed, the on-chain `faucet` sends 0.1 coins to the address that corresponds to the node's pubkey. This requires about 30 seconds of CPU time.

## faucetaddress

**faucetaddress [pubkey]**

The `faucetaddress` method returns the Fluidity address information for the specified pubkey. If no pubkey is provided, the method returns information for the pubkey used to launch the daemon.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | ------------------------------------------------------------------------------------------------- |
| pubkey    | (string, optional) | the desired pubkey; the method uses the pubkey used to launch the daemon if no pubkey is provided |

### Response

| Name | Type | Description | 
| --------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------ |
| FaucetCCaddress | (string) | taking the faucet module's `EVAL` code as a modifier, this is the public address that corresponds to the faucet module's privkey |
| Faucetmarker    | (string) | the internal address (not related to usage of faucet)                                                                                |
| FaucetCCassets  | (string) | the internal address (not related to usage of faucet)                                                                                |
| GatewaysPubkey  | (string) | the global pubkey for this Gateways module                                                                                  |
| CCaddress       | (string) | taking the faucet module's `EVAL` code as a modifier, this is the Fluidity address from the pubkey of the user                           |
| myCCaddress     | (string) | taking the faucet module's `EVAL` code as a modifier, this is the Fluidity address from the pubkey of the user                           |
| myaddress       | (string) | the unmodified public address of the pubkey used to launch the chain                                                                 |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD faucetaddress 03336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "FaucetCCaddress": "R9zHrofhRbub7ER77B7NrVch3A63R39GuC",
  "Faucetmarker": "RKQV4oYs4rvxAWx1J43VnT73rSTVtUeckk",
  "GatewaysPubkey": "03ea9c062b9652d8eff34879b504eda0717895d27597aaeb60347d65eed96ccb40",
  "FaucetCCassets": "RF2p5LgEBpUzUgUyFSUDa8ZBnr2wxE87do",
  "CCaddress": "RReGLfH2MTrkeLSepkVy5vnQPE29g7KofS",
  "myCCaddress": "RReGLfH2MTrkeLSepkVy5vnQPE29g7KofS",
  "myaddress": "RJYiWn3FRCSSLf9Pe5RJcbrKQYosaMburP"
}
```

</collapse-text>


## faucetfund

**faucetfund amount**

The `faucetfund` method funds the on-chain faucet.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

### Arguments

| Name | Type | Description | 
| --------- | -------- | ---------------------------------------------------------------------- |
| amount    | (number) | the amount to add to the faucet, taken from the user's available funds |

### Response

| Name | Type | Description | 
| --------- | -------- | ------------------------------------------------------------------------------------------------------------------------- |
| result    | (string) | whether the command executed successfully                                                                                 |
| hex       | (string) | the data in hex-encoded format; you must broadcast this hex using the`sendrawtransaction` RPC for the command to complete |

#### :pushpin: Examples

Step 1: Specify faucet amount and get the raw transaction HEX value

```bash
./komodo-cli -ac_name=HELLOWORLD faucetfund 100
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "01000000013c34d14c6a32219f4b633a1fe01f5826b3bd7b4cbe01c20cfc0c29138d9c99720100000049483045022100b265993f541d580f10e8820f9986bdd479859fdcb2e636dd1ee1b23506eebeac02202234a6e5141345459c4b4959e921aa85b9fa616f4c44ea15e53d08bf4885259501ffffffff0200e40b5402000000302ea22c8020e029c511da55523565835887e412e5a0c9b920801b007000df45e545f25028248103120c008203000401cce06d66fa15090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000"
}
```

</collapse-text>


Step 2: Broadcast/send raw transaction

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 01000000013c34d14c6a32219f4b633a1fe01f5826b3bd7b4cbe01c20cfc0c29138d9c99720100000049483045022100b265993f541d580f10e8820f9986bdd479859fdcb2e636dd1ee1b23506eebeac02202234a6e5141345459c4b4959e921aa85b9fa616f4c44ea15e53d08bf4885259501ffffffff0200e40b5402000000302ea22c8020e029c511da55523565835887e412e5a0c9b920801b007000df45e545f25028248103120c008203000401cce06d66fa15090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000
```


<collapse-text hidden title="Response">

```bash
f2baf8d9a1eaf42bb1a85462b5699ffc0f04e8c54aafc4661767df96be9022b7
```

</collapse-text>

Step 3: Decode raw transaction (optional to check if the values are sane)

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 01000000013c34d14c6a32219f4b633a1fe01f5826b3bd7b4cbe01c20cfc0c29138d9c99720100000049483045022100b265993f541d580f10e8820f9986bdd479859fdcb2e636dd1ee1b23506eebeac02202234a6e5141345459c4b4959e921aa85b9fa616f4c44ea15e53d08bf4885259501ffffffff0200e40b5402000000302ea22c8020e029c511da55523565835887e412e5a0c9b920801b007000df45e545f25028248103120c008203000401cce06d66fa15090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000
```


<collapse-text hidden title="Response">


```json
{
  "txid": "f2baf8d9a1eaf42bb1a85462b5699ffc0f04e8c54aafc4661767df96be9022b7",
  "size": 225,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "72999c8d13290cfc0cc201be4c7bbdb326581fe01f3a634b9f21326a4cd1343c",
      "vout": 1,
      "scriptSig": {
        "asm": "3045022100b265993f541d580f10e8820f9986bdd479859fdcb2e636dd1ee1b23506eebeac02202234a6e5141345459c4b4959e921aa85b9fa616f4c44ea15e53d08bf4885259501",
        "hex": "483045022100b265993f541d580f10e8820f9986bdd479859fdcb2e636dd1ee1b23506eebeac02202234a6e5141345459c4b4959e921aa85b9fa616f4c44ea15e53d08bf4885259501"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 100.0,
      "valueSat": 10000000000,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c8020e029c511da55523565835887e412e5a0c9b920801b007000df45e545f25028248103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c8020e029c511da55523565835887e412e5a0c9b920801b007000df45e545f25028248103120c008203000401cc",
        "reqSigs": 1,
        "type": "condition",
        "addresses": ["R9zHrofhRbub7ER77B7NrVch3A63R39GuC"]
      }
    },
    {
      "value": 99899.9998,
      "valueSat": 9989999980000,
      "n": 1,
      "scriptPubKey": {
        "asm": "03fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc OP_CHECKSIG",
        "hex": "2103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RANyPgfZZLhSjQB9jrzztSw66zMMYDZuxQ"]
      }
    }
  ]
}
```

</collapse-text>


## faucetget

**faucetget**

The `faucetget` method requests the `faucet` module to send coins.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

The `faucetget` command yields 0.1 coins and requires about 30 seconds of CPU time to execute.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| --------- | -------- | ---------------------------------------------------------------------------------------------------------------- |
| result    | (string) | whether the command executed successfully                                                                        |
| hex       | (string) | the data in hex-encoded format; you must broadcast this hex using sendrawtransaction for the command to complete |

#### :pushpin: Examples

Step 1: Use faucetget and get the raw HEX value

```bash
./komodo-cli -ac_name=HELLOWORLD faucetget
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "01000000010941cea65a560aeae02f0d49770965490bd99eeac4185f25075685da58e99d40000000007b4c79a276a072a26ba067a565802103682b255c40d0cde8faee381a1a50bbb89980ff24539cb8518e294d3a63cefe128140150ad95012ad8fae990096787d75d563977cef914e812e9dc8b6236243ac5f0050b3af4f2675ad433dcff4be16d113fb9a46357ee60682ed5d76c60f9ccffe8ea100af038001e4a10001ffffffff02b077a43018090000302ea22c8020e029c511da55523565835887e412e5a0c9b920801b007000df45e545f25028248103120c008203000401cc00e1f50500000000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000"
}
```

</collapse-text>


Step 2: Broadcast/send the raw transaction

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 01000000010941cea65a560aeae02f0d49770965490bd99eeac4185f25075685da58e99d40000000007b4c79a276a072a26ba067a565802103682b255c40d0cde8faee381a1a50bbb89980ff24539cb8518e294d3a63cefe128140150ad95012ad8fae990096787d75d563977cef914e812e9dc8b6236243ac5f0050b3af4f2675ad433dcff4be16d113fb9a46357ee60682ed5d76c60f9ccffe8ea100af038001e4a10001ffffffff02b077a43018090000302ea22c8020e029c511da55523565835887e412e5a0c9b920801b007000df45e545f25028248103120c008203000401cc00e1f50500000000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000
```


<collapse-text hidden title="Response">

```bash
faucetget validated
64760e66c49df97eea14896ecdd505d2d78ea214eb583c8a6a0ac863b2b989b3
```

</collapse-text>

Step 3: Decode the raw transaction (optional to check if the value are sane)

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 01000000010941cea65a560aeae02f0d49770965490bd99eeac4185f25075685da58e99d40000000007b4c79a276a072a26ba067a565802103682b255c40d0cde8faee381a1a50bbb89980ff24539cb8518e294d3a63cefe128140150ad95012ad8fae990096787d75d563977cef914e812e9dc8b6236243ac5f0050b3af4f2675ad433dcff4be16d113fb9a46357ee60682ed5d76c60f9ccffe8ea100af038001e4a10001ffffffff02b077a43018090000302ea22c8020e029c511da55523565835887e412e5a0c9b920801b007000df45e545f25028248103120c008203000401cc00e1f50500000000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac00000000
```


<collapse-text hidden title="Response">


```json
{
  "txid": "64760e66c49df97eea14896ecdd505d2d78ea214eb583c8a6a0ac863b2b989b3",
  "size": 275,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "409de958da855607255f18c4ea9ed90b49650977490d2fe0ea0a565aa6ce4109",
      "vout": 0,
      "scriptSig": {
        "asm": "a276a072a26ba067a565802103682b255c40d0cde8faee381a1a50bbb89980ff24539cb8518e294d3a63cefe128140150ad95012ad8fae990096787d75d563977cef914e812e9dc8b6236243ac5f0050b3af4f2675ad433dcff4be16d113fb9a46357ee60682ed5d76c60f9ccffe8ea100af038001e4a10001",
        "hex": "4c79a276a072a26ba067a565802103682b255c40d0cde8faee381a1a50bbb89980ff24539cb8518e294d3a63cefe128140150ad95012ad8fae990096787d75d563977cef914e812e9dc8b6236243ac5f0050b3af4f2675ad433dcff4be16d113fb9a46357ee60682ed5d76c60f9ccffe8ea100af038001e4a10001"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 99994.9995,
      "valueSat": 9999499950000,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c8020e029c511da55523565835887e412e5a0c9b920801b007000df45e545f25028248103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c8020e029c511da55523565835887e412e5a0c9b920801b007000df45e545f25028248103120c008203000401cc",
        "reqSigs": 1,
        "type": "condition",
        "addresses": ["R9zHrofhRbub7ER77B7NrVch3A63R39GuC"]
      }
    },
    {
      "value": 1.0,
      "valueSat": 100000000,
      "n": 1,
      "scriptPubKey": {
        "asm": "03fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc OP_CHECKSIG",
        "hex": "2103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RANyPgfZZLhSjQB9jrzztSw66zMMYDZuxQ"]
      }
    }
  ]
}
```

</collapse-text>


## faucetinfo

**faucetinfo**

The `faucetinfo` method displays the balance of funds in the chain's faucet.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| --------- | -------- | ------------------------------------------- |
| result    | (string) | whether the command executed successfully   |
| name      | (string) | the name of the faucet module             |
| funding   | (number) | the amount of funds available in the faucet |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD faucetinfo
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "name": "Faucet",
  "funding": "200207.99860023"
}
```

</collapse-text>

# Gateways

## Introduction

The Gateway Fluidity module allows the user to facilitate, manage, and trade tokenized representations of foreign blockchain assets.

For example, a user is able to deposit their real-world BTC into a monitored address on the Bitcoin blockchain. Then, on the `gateways` Smart Chain, the ownership of this BTC is tokenized. Only the owner of the token has the right to withdraw the BTC to a chosen address. The user that made the deposit can use the token either for asset trading, or for other creative purposes.

This allows the `gateways`-enabled Smart Chain to feature secure, on-chain, high-speed trading.

Using an established `gateways` contract is not considered difficult. However, setting up the gateway requires the user to closely follow several detailed steps.

## Gateways Module Tutorial Availability

The Fluidity Tutorials section features a full walkthrough of the Gateways module.

[<b>Link to Gateways Module Tutorial</b>](../basic-docs/fluidity/fluidity-tutorials/gateways-module-tutorial.md)

## gatewaysaddress

**gatewaysaddress**

The `gatewaysaddress` method returns information about the on-chain gateway.

### Arguments

| Name | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |            |

### Response

| Name | Type | Description |
| ------------------- | -------- | -------------------------------------------------------------------------------------------------------------------- |
| "result"            | (string) | whether the command executed successfully                                                                            |
| "GatewaysCCaddress" | (string) | taking the contract's EVAL code as a modifier, this is the public address that corresponds to the contract's privkey |
| "Gatewaysmarker"    | (string) | the unmodified public address generated from the contract's privkey                                                  |
| "GatewaysPubkey"    | (string) | the pubkey for the gateways module                                                                                       |
| "GatewaysCCassets"  | (string) | this property is used for development purposes only and can otherwise be ignored                                     |
| "myCCaddress"       | (string) | taking the contract's EVAL code as a modifier, this is the Fluidity address from the pubkey of the user                    |
| "myaddress"         | (string) | the public address of the pubkey used to launch the chain                                                            |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD gatewaysaddress
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "GatewaysCCaddress": "RKWpoK6vTRtq5b9qrRBodLkCzeURHeEk33",
  "Gatewaysmarker": "RGJKV97ZN1wBfunuMt1tebiiHENNEq73Yh",
  "GatewaysPubkey": "03ea9c062b9652d8eff34879b504eda0717895d27597aaeb60347d65eed96ccb40",
  "GatewaysCCassets": "RD7tdFCpk2SPuiZqvDq5yysectsuhAc5wz",
  "myCCaddress": "RWR1hg4Ud6C5PhpWjkrEBhSfqhZCAGDwd9",
  "myaddress": "RXEXoa1nRmKhMbuZovpcYwQMsicwzccZBp"
}
```

</collapse-text>


## gatewaysbind

**gatewaysbind tokenid oracletxid coin tokensupply M N pubkey(s) pubtype p2shtype wiftype [taddr]**

The `gatewaysbind` method binds the provided sources into a new gateway.

### Arguments

| Name | Type | Description |
| ----------- | -------- | ------------------------------------------------------------------------------------------------------------- |
| tokenid     | (string) | the `tokenid` that the gateway will control as a proxy of foreign (off-chain) assets                          |
| oracletxid  | (string) | the `oracletxid` under which the gateway should be created                                                    |
| name        | (string) | the name of the coin represented by the gateway's proxy token                                                 |
| tokensupply | (number) | the maximum available supply of the proxy token; this should be equal to the total number of `tokenid` tokens |
| M           | (number) | the minimum number of gateway signatory nodes required to facilitate a gateway transaction                    |
| N           | (number) | the full number of gateway signatory nodes that will control the gateway                                      |
| pubkey      | (string) | the pubkey on which tokens will be available after conversion                                                 |
| pubtype     | (number) | the prefix number of pubkey type of external chain                                                            |
| p2shtype    | (number) | the prefix number of p2sh type of external chain                                                              |
| wiftype     | (number) | the prefix number of wif type of external chain                                                               |
| taddr       | (number) | the 2nd byte of prefix number of pubkey type (optional, only for 2 byte prefix chains)                        |

### Response

| Name | Type | Description |
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step One:

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD gatewaysbind 202277c3a48ef168b164f7995eaced940e6416afefd6acd5aac0cb0a439df210 51a3fa99ef2abb3c1ce8248896d934bd348b7a1e0c5dbc06688c976247263a25 KMD 100000000 1 1 024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0 60 85 188
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "010000000152d7d470197f5dc650c9ec09e1c8f4975d315219e3b6edad3c927c2fc23197ca0200000048473044022006bf373f1dd51c638a38d1e592741db73387e6acc186fca2011cd7283520ff770220673be91d346ba72adcbc9ab1df712f750047c2609399256c07ad3170d9ea850401ffffffff031027000000000000302ea22c802091abda62a548f9c7f5beb19d16f01714ae3d4e526f3266fc8d347d6123f3d77b8103120c008203000401cce05c9836180900002321024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0ac0000000000000000796a4c76f142034b4d443c550010f29d430acbc0aad5acd6efaf16640e94edac5e99f764b168f18ea4c377222000e1f5050000000001010121024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0253a264762978c6806bc5d0c1e7a8b34bd34d9968824e81c3cbb2aef99faa35100000000"
}
```

</collapse-text>


Step Two:

Broadcast using [sendrawtransction:](../komodo-api/rawtransactions.html#sendrawtransaction)

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000152d7d470197f5dc650c9ec09e1c8f4975d315219e3b6edad3c927c2fc23197ca0200000048473044022006bf373f1dd51c638a38d1e592741db73387e6acc186fca2011cd7283520ff770220673be91d346ba72adcbc9ab1df712f750047c2609399256c07ad3170d9ea850401ffffffff031027000000000000302ea22c802091abda62a548f9c7f5beb19d16f01714ae3d4e526f3266fc8d347d6123f3d77b8103120c008203000401cce05c9836180900002321024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0ac0000000000000000796a4c76f142034b4d443c550010f29d430acbc0aad5acd6efaf16640e94edac5e99f764b168f18ea4c377222000e1f5050000000001010121024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0253a264762978c6806bc5d0c1e7a8b34bd34d9968824e81c3cbb2aef99faa35100000000
```


<collapse-text hidden title="Response">


```bash
aa1b82d78398184c93405ccd15e3cf00b63634aac98a7b75053aa90eaf9cb47d
```

</collapse-text>


This is the `bindtxid` for the gateway.

<!--FIXME new RPC added
## gatewaysclaim

**gatewaysclaim bindtxid coin deposittxid destpub amount**

The `gatewaysclaim` method allows the owner of the `deposittxid` to claim their on-chain proxy tokens. This method can only be executed by the owner of the `pubkey` that was used to launch the daemon from which the `gatewaysdeposit` call was executed.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

### Arguments

| Name | Type | Description |
| ----------- | -------- | ------------------------------------------------------------------------------------------------ |
| bindtxid    | (string) | the `bindtxid` of the gateway                                                                    |
| coin        | (string) | the name of the proxy token                                                                      |
| deposittxid | (string) | the `deposittxid` returned after broadcasting the hex returned from the `gatewaysdeposit` method |
| destpub     | (string) | the `pubkey` address to which the proxy tokens should be sent                                    |
| amount      | (number) | the amount to send to the `pubkey`                                                               |

### Response

| Name | Type | Description |
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step One:

Command

```bash
./komodo-cli -ac_name=HELLOWORLD gatewaysclaim 897a4e52749eb4a89d251f85cce16cbff6b09209d900b191610d68bf631f8d0d KMD 07d79e39354cc38a76dfe2ca8a5fb711432192237608ea066621662f13e0c08e 02d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d 0.1
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "01000000030a9a982a898012f4cc982796f381f16c9e2e5fe28e0be58ad59c7c90409530f8020000004847304402207959e4befae9e917cde7d6ba6f5e62e4cf679858b1a5c8b1eb270b1c7eac7c7e0220503ea9a24245db21b4db8ae68e48da6c5d33ef436371c6d03872d45d1364047c01ffffffffc6fc3b75a37a6ed10507a1bb73f2c5d5c8f75bcb358b0aa4bab3b80b5aa39f19010000007b4c79a276a072a26ba067a565802103ea9c062b9652d8eff34879b504eda0717895d27597aaeb60347d65eed96ccb408140d4c46b8282d42d7e7ebe99361264c21b9ee221b7b3a47e1549e06bf06659fa194298618a2969a421543753a5994ebc3944e93ac6072a233ab617b229b3922a52a100af038001f1a10001ffffffff8ec0e0132f66216606ea08762392214311b75f8acae2df768ac34c35399ed707000000007b4c79a276a072a26ba067a565802102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d8140f3938953c9087e1e25c31263c5a717dd59d2f7d6f0815cfd7c0cb01a6c4d586b630b11cca1e60a19036d937095941660e488a07494fc721471d4a53f5eb89a25a100af038001f1a10001ffffffff048096980000000000302ea22c8020abd72b18452f1bc72f4312dbb1cd341b7c7f38a994ddacd8b35412231f01cb088103120c008203000401cc804a5d0500000000302ea22c802091abda62a548f9c7f5beb19d16f01714ae3d4e526f3266fc8d347d6123f3d77b8103120c008203000401cc1027000000000000232102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9dac0000000000000000936a4c90e374bff603b64f309e344e34b10fd2053db59788909914f8488a7f73ddddc2165d31034b4d440d8d1f63bf680d6191b100d90992b0f6bf6ce1cc851f259da8b49e74524e7a898ec0e0132f66216606ea08762392214311b75f8acae2df768ac34c35399ed7072102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d809698000000000000000000"
}
```

</collapse-text>


Step Two: Broadcast using `sendrawtransction`

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 01000000030a9a982a898012f4cc982796f381f16c9e2e5fe28e0be58ad59c7c90409530f8020000004847304402207959e4befae9e917cde7d6ba6f5e62e4cf679858b1a5c8b1eb270b1c7eac7c7e0220503ea9a24245db21b4db8ae68e48da6c5d33ef436371c6d03872d45d1364047c01ffffffffc6fc3b75a37a6ed10507a1bb73f2c5d5c8f75bcb358b0aa4bab3b80b5aa39f19010000007b4c79a276a072a26ba067a565802103ea9c062b9652d8eff34879b504eda0717895d27597aaeb60347d65eed96ccb408140d4c46b8282d42d7e7ebe99361264c21b9ee221b7b3a47e1549e06bf06659fa194298618a2969a421543753a5994ebc3944e93ac6072a233ab617b229b3922a52a100af038001f1a10001ffffffff8ec0e0132f66216606ea08762392214311b75f8acae2df768ac34c35399ed707000000007b4c79a276a072a26ba067a565802102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d8140f3938953c9087e1e25c31263c5a717dd59d2f7d6f0815cfd7c0cb01a6c4d586b630b11cca1e60a19036d937095941660e488a07494fc721471d4a53f5eb89a25a100af038001f1a10001ffffffff048096980000000000302ea22c8020abd72b18452f1bc72f4312dbb1cd341b7c7f38a994ddacd8b35412231f01cb088103120c008203000401cc804a5d0500000000302ea22c802091abda62a548f9c7f5beb19d16f01714ae3d4e526f3266fc8d347d6123f3d77b8103120c008203000401cc1027000000000000232102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9dac0000000000000000936a4c90e374bff603b64f309e344e34b10fd2053db59788909914f8488a7f73ddddc2165d31034b4d440d8d1f63bf680d6191b100d90992b0f6bf6ce1cc851f259da8b49e74524e7a898ec0e0132f66216606ea08762392214311b75f8acae2df768ac34c35399ed7072102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d809698000000000000000000
```


<collapse-text hidden title="Response">


```bash
9bf287d544c6f5597ccf67641398718398cd79fde02caa32a4b338b5a923cb61
```

</collapse-text>


## gatewayscompletesigning

**gatewayscompletesigning withdrawtxid coin hex**
-->

## gatewaysdeposit

**gatewaysdeposit bindtxid height coin cointxid claimvout deposithex proof destpub amount**

The `gatewaysdeposit` method is used to alert the gateway of the completed deposit of the foreign (off-chain) asset.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

The `sendrawtransaction` method then returns a `txid` which serves as the **deposittxid**.

### Arguments

| Name | Type | Description |
| ---------- | -------- | -------------------------------------------------------------------------------------------------------------------- |
| bindtxid   | (string) | the bindtxid of the gateway                                                                                          |
| height     | (number) | the block height of the `txid` wherein the funds were sent to the foreign-asset gateway pubkey                       |
| name       | (string) | the name of the foreign asset                                                                                        |
| cointxid   | (string) | the `txid` returned when the foreign assets were sent to the gateway pubkey                                          |
| claimvout  | (string) | the `vout` of the claim (on the first use, this value should be 0)                                                   |
| deposithex | (string) | returned from the `txid` wherein the funds were sent to the foreign-asset gateway pubkey                             |
| proof      | (string) | the proof for the `txid`; can be found using the [gettxoutproof](../komodo-api/blockchain.html#gettxoutproof) method |
| destpub    | (string) | the public key where the tokens should be received on the Smart Chain                                                |
| amount     | (number) | the amount of the deposit                                                                                            |

### Response

| Name | Type | Description |
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD gatewaysdeposit 897a4e52749eb4a89d251f85cce16cbff6b09209d900b191610d68bf631f8d0d 1116196 KMD 907812ee8d2762b589f6ca88ee8ba18a65ebf5c7486c472df7395628d22d0d98 0 010000000197d6ea16c68dc5db95b72e029a0e23cb403ae0a33b561b863963cfd9cbfec747000000006b483045022100aca47515602989979b514b6211c375e4d0d9471dd8297c5238c12245ad01dd830220191105caf1b63313c6988194f5f03fd6f70d4a30edc7820add1185d35edff1bb012102924664b536f3710a8e8abea38bb4bf71b470a653a4dceabd50df08d7b2a38436ffffffff0310270000000000001976a9141b355cb6b76cab1b16cb873db8828fe5d2521ae488ac80969800000000001976a914f0d1fc29f8962ac2805a1659192d9ad26794d22988ac38c7fa00000000001976a91482804b943dd6a2008af73f8ba40449c062f0935188ac50e6fd5b 04000000380b8fd2b9bdf570358980a4c9fc94e418ac656913999b5f9a016ec5afc46b0b188320f231637a0ded0b0bdada1f34c81ad5873b8c3f096b2014018af13f43980000000000000000000000000000000000000000000000000000000000000000b2e6fd5ba786061d57fff87a00000000000046430000000000000200000000000000000000000000fd40050035435dd2c1df5c20cb48e0617b6cee81f5349f0735b36fe93f17f82d678ad3eb374d0e398b049fddcb21a4d7ddf7345867c6a363eddcfe61f31d49dbc35652794c60da61bd5f164fd554f17b5bd669f636744412822af2ebd0f318dacb71514720164c59c392ef2b1ccc3a5dc5c9c83cd37a11f98b97c8f5170a357a972ec3cacbeb0dab34b757354883b46a598f2b93fcd735b4163db6b2b037f7d7d71a773e909ac4ce3f1228012d5bebfd9edad9842ae8c6cddf6942c543594b85013591a604c4223a3d2e007ed25f5994e9d8f6b6a704daf57cad41aea9609923612eee2fc55ad075c91c23a8cc46af9a45a7390c537d2e2302994239ae44230537ceaa2188e7f4eb6a0ab55471d152b9177e9fd90843504f29d3e92fd3d7142caae018b51318ec6b86083b7e2d155ce868f6b673b13cf1ed59107d15c6c84201441dde14074930f4755ec64975f354a99bd957021c073768f575dde3ab020dd73b488e2d03d57bc414a16d45b3e2052b24fb2360ec5f73524525fc59d2151b89310b19764541b801ad72171085bc6275832222484b8d7ee6ed91ab6a544c45af5c4d8445b0624f04a234aec6997eecf007f0e971eea33b21e45ba8f72825fa84605cdfa929aeb6dc425f2612000e7ce2ba04ff8c53061154eb38cba7f6d0bfe5dab031dadea2095e01e93f9e063d0b42e412f865572625f77aa8b10b58f7b0428ea0ff530ea10d37150496bb181e37fc5814ad524ce4618955e9158b6aebb956b02b961f920ee48eb5a08efc39d27fc2fd4ec175e38798bcca7331a7b5da2ca6c56fcb98e740c2f471eac6b67ced78125c5fcecd4f76eac1d76233aa58ed808e398b9e2b1eaa74e773d18276b732239403ce0c452cb26f0f34156a0a63e007ccfbd76f168fb941fbd2fbe23b57e519835c804ace6e22e281b3d0adda7c4b93a87d94500103315c780fe91ee67320a422eecb4a6daedc2d774567bfebc1d5b72fa693178f3443aa1eb47f18d6931f7b0fc6ec151caad4eae5f787c2a963c3963ffc924ba66a7ea1754763faf2884de0c86a0f75fe7f8dfb1265b449184668cb7348520810cf731663f5180ac31642d6b135d5ce7de88ba63d6db3d6c5dfa19492281dfed3b3765451717f3497ac2b4c040e2e4e77219b2586c227cd138b8d94ccc273fbfbb51a35523870c503e2d8527b840ced11917075e8a41ae9616f1df8d41df5bae39c6d6de5bb8d43d401bb9089723db59f0f06aa4fdf4145a905812ef799eb574abb9985de878a289e5f4b1256ca2121d553465f44065580cb5bde170459d1c22e8d388cbec9e37dc3cca07e489a9859942a9ccef4a5e45eed7228b94c86d10a233b5a1ddfcb1735cb9b16de6e8f49f3c841796acba31a8e9c90b531952ed03bd72e0b00fa3373ea4bc845d7469afae305639c772285a5223bf2d86a12c92312dc19db86400c6760b9e75af40ce4c16278bba8a804d5a69b88290dd4c2b43423bee9eb97c54261f956a32d80fdd3f421d1199ee45d42ad657e928be2e9fa54d844cff60b06bc525ce54daca9689e0616bfdbdbc36e09bea11a276d25d3ca9a80ed7109183784dfd1d23b7c791a7913a633e2d28948c655e68ade706654e38f717fe29119af4282430c8d1f702a52ea189f1e9e6faafb213205a195dab1c2d01dc6a3711f671ea118e8a3c995632903c58ebbd4eae5dbc4555b24c1649e89e03efb92134b9e24fb9fc649462f928d992fa33d45edcb4ef13f0d5c2cb6663e7dbf2414b5ed617e56b8715ace6910807e4a901ba603dab4092f9eeb46566ec3f38f3a1789c60822530c390d19b1d939217b7a691abb91454fce76cccf3557ddb3fc55bd4f44761aa9363db0f38360adf60e743ba3b902788bb254637f6074df62460400000003a973b7134b7fcbcb1fe70fdfaaf056c209a9f5dd77800eb37b065ca8317cbb3a980d2dd2285639f72d476c48c7f5eb658aa18bee88caf689b562278dee127890445df562c183ed7279f2f8e37ba249447439884d5b7030eac6485112eb07ea2d010b 02d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d 0.1
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "01000000010db4b1686d1f27de5e2a11c793dfd30f09b296754f95ae8649858cca97d5b07a0000000049483045022100ad6bc26f0c66b89f5d63aff251c78965a50201f909a997b8ed6469da0334aa0c0220136d71f5ad1f4496785df81864f9be3ae7b8dd012dae08d59fd544869eacb3ba01ffffffff041027000000000000302ea22c80205fd998129698de9cf1455f4f4795794c9e57bf1fd5f28598b5e6c0322de5d0358103120c008203000401cc1027000000000000232102980d2dd2285639f72d476c48c7f5eb658aa18bee88caf689b562278dee127890acd02a724e18090000232102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9dac0000000000000000fd04096a4d0009f144034b4d440d8d1f63bf680d6191b100d90992b0f6bf6ce1cc851f259da8b49e74524e7a890121024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0012fea85ecfda42975a2aaed72e946792df41a486033af8dc45ab1e4ddcb34b1b424081100980d2dd2285639f72d476c48c7f5eb658aa18bee88caf689b562278dee12789000000000fdfd360604000000380b8fd2b9bdf570358980a4c9fc94e418ac656913999b5f9a016ec5afc46b0b188320f231637a0ded0b0bdada1f34c81ad5873b8c3f096b2014018af13f43980000000000000000000000000000000000000000000000000000000000000000b2e6fd5ba786061d57fff87a00000000000046430000000000000200000000000000000000000000fd40050035435dd2c1df5c20cb48e0617b6cee81f5349f0735b36fe93f17f82d678ad3eb374d0e398b049fddcb21a4d7ddf7345867c6a363eddcfe61f31d49dbc35652794c60da61bd5f164fd554f17b5bd669f636744412822af2ebd0f318dacb71514720164c59c392ef2b1ccc3a5dc5c9c83cd37a11f98b97c8f5170a357a972ec3cacbeb0dab34b757354883b46a598f2b93fcd735b4163db6b2b037f7d7d71a773e909ac4ce3f1228012d5bebfd9edad9842ae8c6cddf6942c543594b85013591a604c4223a3d2e007ed25f5994e9d8f6b6a704daf57cad41aea9609923612eee2fc55ad075c91c23a8cc46af9a45a7390c537d2e2302994239ae44230537ceaa2188e7f4eb6a0ab55471d152b9177e9fd90843504f29d3e92fd3d7142caae018b51318ec6b86083b7e2d155ce868f6b673b13cf1ed59107d15c6c84201441dde14074930f4755ec64975f354a99bd957021c073768f575dde3ab020dd73b488e2d03d57bc414a16d45b3e2052b24fb2360ec5f73524525fc59d2151b89310b19764541b801ad72171085bc6275832222484b8d7ee6ed91ab6a544c45af5c4d8445b0624f04a234aec6997eecf007f0e971eea33b21e45ba8f72825fa84605cdfa929aeb6dc425f2612000e7ce2ba04ff8c53061154eb38cba7f6d0bfe5dab031dadea2095e01e93f9e063d0b42e412f865572625f77aa8b10b58f7b0428ea0ff530ea10d37150496bb181e37fc5814ad524ce4618955e9158b6aebb956b02b961f920ee48eb5a08efc39d27fc2fd4ec175e38798bcca7331a7b5da2ca6c56fcb98e740c2f471eac6b67ced78125c5fcecd4f76eac1d76233aa58ed808e398b9e2b1eaa74e773d18276b732239403ce0c452cb26f0f34156a0a63e007ccfbd76f168fb941fbd2fbe23b57e519835c804ace6e22e281b3d0adda7c4b93a87d94500103315c780fe91ee67320a422eecb4a6daedc2d774567bfebc1d5b72fa693178f3443aa1eb47f18d6931f7b0fc6ec151caad4eae5f787c2a963c3963ffc924ba66a7ea1754763faf2884de0c86a0f75fe7f8dfb1265b449184668cb7348520810cf731663f5180ac31642d6b135d5ce7de88ba63d6db3d6c5dfa19492281dfed3b3765451717f3497ac2b4c040e2e4e77219b2586c227cd138b8d94ccc273fbfbb51a35523870c503e2d8527b840ced11917075e8a41ae9616f1df8d41df5bae39c6d6de5bb8d43d401bb9089723db59f0f06aa4fdf4145a905812ef799eb574abb9985de878a289e5f4b1256ca2121d553465f44065580cb5bde170459d1c22e8d388cbec9e37dc3cca07e489a9859942a9ccef4a5e45eed7228b94c86d10a233b5a1ddfcb1735cb9b16de6e8f49f3c841796acba31a8e9c90b531952ed03bd72e0b00fa3373ea4bc845d7469afae305639c772285a5223bf2d86a12c92312dc19db86400c6760b9e75af40ce4c16278bba8a804d5a69b88290dd4c2b43423bee9eb97c54261f956a32d80fdd3f421d1199ee45d42ad657e928be2e9fa54d844cff60b06bc525ce54daca9689e0616bfdbdbc36e09bea11a276d25d3ca9a80ed7109183784dfd1d23b7c791a7913a633e2d28948c655e68ade706654e38f717fe29119af4282430c8d1f702a52ea189f1e9e6faafb213205a195dab1c2d01dc6a3711f671ea118e8a3c995632903c58ebbd4eae5dbc4555b24c1649e89e03efb92134b9e24fb9fc649462f928d992fa33d45edcb4ef13f0d5c2cb6663e7dbf2414b5ed617e56b8715ace6910807e4a901ba603dab4092f9eeb46566ec3f38f3a1789c60822530c390d19b1d939217b7a691abb91454fce76cccf3557ddb3fc55bd4f44761aa9363db0f38360adf60e743ba3b902788bb254637f6074df62460400000003a973b7134b7fcbcb1fe70fdfaaf056c209a9f5dd77800eb37b065ca8317cbb3a980d2dd2285639f72d476c48c7f5eb658aa18bee88caf689b562278dee127890445df562c183ed7279f2f8e37ba249447439884d5b7030eac6485112eb07ea2d010b2102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d809698000000000000000000"
}
```

</collapse-text>


Step Two: Broadcast using `sendrawtransction`

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 01000000010db4b1686d1f27de5e2a11c793dfd30f09b296754f95ae8649858cca97d5b07a0000000049483045022100ad6bc26f0c66b89f5d63aff251c78965a50201f909a997b8ed6469da0334aa0c0220136d71f5ad1f4496785df81864f9be3ae7b8dd012dae08d59fd544869eacb3ba01ffffffff041027000000000000302ea22c80205fd998129698de9cf1455f4f4795794c9e57bf1fd5f28598b5e6c0322de5d0358103120c008203000401cc1027000000000000232102980d2dd2285639f72d476c48c7f5eb658aa18bee88caf689b562278dee127890acd02a724e18090000232102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9dac0000000000000000fd04096a4d0009f144034b4d440d8d1f63bf680d6191b100d90992b0f6bf6ce1cc851f259da8b49e74524e7a890121024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0012fea85ecfda42975a2aaed72e946792df41a486033af8dc45ab1e4ddcb34b1b424081100980d2dd2285639f72d476c48c7f5eb658aa18bee88caf689b562278dee12789000000000fdfd360604000000380b8fd2b9bdf570358980a4c9fc94e418ac656913999b5f9a016ec5afc46b0b188320f231637a0ded0b0bdada1f34c81ad5873b8c3f096b2014018af13f43980000000000000000000000000000000000000000000000000000000000000000b2e6fd5ba786061d57fff87a00000000000046430000000000000200000000000000000000000000fd40050035435dd2c1df5c20cb48e0617b6cee81f5349f0735b36fe93f17f82d678ad3eb374d0e398b049fddcb21a4d7ddf7345867c6a363eddcfe61f31d49dbc35652794c60da61bd5f164fd554f17b5bd669f636744412822af2ebd0f318dacb71514720164c59c392ef2b1ccc3a5dc5c9c83cd37a11f98b97c8f5170a357a972ec3cacbeb0dab34b757354883b46a598f2b93fcd735b4163db6b2b037f7d7d71a773e909ac4ce3f1228012d5bebfd9edad9842ae8c6cddf6942c543594b85013591a604c4223a3d2e007ed25f5994e9d8f6b6a704daf57cad41aea9609923612eee2fc55ad075c91c23a8cc46af9a45a7390c537d2e2302994239ae44230537ceaa2188e7f4eb6a0ab55471d152b9177e9fd90843504f29d3e92fd3d7142caae018b51318ec6b86083b7e2d155ce868f6b673b13cf1ed59107d15c6c84201441dde14074930f4755ec64975f354a99bd957021c073768f575dde3ab020dd73b488e2d03d57bc414a16d45b3e2052b24fb2360ec5f73524525fc59d2151b89310b19764541b801ad72171085bc6275832222484b8d7ee6ed91ab6a544c45af5c4d8445b0624f04a234aec6997eecf007f0e971eea33b21e45ba8f72825fa84605cdfa929aeb6dc425f2612000e7ce2ba04ff8c53061154eb38cba7f6d0bfe5dab031dadea2095e01e93f9e063d0b42e412f865572625f77aa8b10b58f7b0428ea0ff530ea10d37150496bb181e37fc5814ad524ce4618955e9158b6aebb956b02b961f920ee48eb5a08efc39d27fc2fd4ec175e38798bcca7331a7b5da2ca6c56fcb98e740c2f471eac6b67ced78125c5fcecd4f76eac1d76233aa58ed808e398b9e2b1eaa74e773d18276b732239403ce0c452cb26f0f34156a0a63e007ccfbd76f168fb941fbd2fbe23b57e519835c804ace6e22e281b3d0adda7c4b93a87d94500103315c780fe91ee67320a422eecb4a6daedc2d774567bfebc1d5b72fa693178f3443aa1eb47f18d6931f7b0fc6ec151caad4eae5f787c2a963c3963ffc924ba66a7ea1754763faf2884de0c86a0f75fe7f8dfb1265b449184668cb7348520810cf731663f5180ac31642d6b135d5ce7de88ba63d6db3d6c5dfa19492281dfed3b3765451717f3497ac2b4c040e2e4e77219b2586c227cd138b8d94ccc273fbfbb51a35523870c503e2d8527b840ced11917075e8a41ae9616f1df8d41df5bae39c6d6de5bb8d43d401bb9089723db59f0f06aa4fdf4145a905812ef799eb574abb9985de878a289e5f4b1256ca2121d553465f44065580cb5bde170459d1c22e8d388cbec9e37dc3cca07e489a9859942a9ccef4a5e45eed7228b94c86d10a233b5a1ddfcb1735cb9b16de6e8f49f3c841796acba31a8e9c90b531952ed03bd72e0b00fa3373ea4bc845d7469afae305639c772285a5223bf2d86a12c92312dc19db86400c6760b9e75af40ce4c16278bba8a804d5a69b88290dd4c2b43423bee9eb97c54261f956a32d80fdd3f421d1199ee45d42ad657e928be2e9fa54d844cff60b06bc525ce54daca9689e0616bfdbdbc36e09bea11a276d25d3ca9a80ed7109183784dfd1d23b7c791a7913a633e2d28948c655e68ade706654e38f717fe29119af4282430c8d1f702a52ea189f1e9e6faafb213205a195dab1c2d01dc6a3711f671ea118e8a3c995632903c58ebbd4eae5dbc4555b24c1649e89e03efb92134b9e24fb9fc649462f928d992fa33d45edcb4ef13f0d5c2cb6663e7dbf2414b5ed617e56b8715ace6910807e4a901ba603dab4092f9eeb46566ec3f38f3a1789c60822530c390d19b1d939217b7a691abb91454fce76cccf3557ddb3fc55bd4f44761aa9363db0f38360adf60e743ba3b902788bb254637f6074df62460400000003a973b7134b7fcbcb1fe70fdfaaf056c209a9f5dd77800eb37b065ca8317cbb3a980d2dd2285639f72d476c48c7f5eb658aa18bee88caf689b562278dee127890445df562c183ed7279f2f8e37ba249447439884d5b7030eac6485112eb07ea2d010b2102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d809698000000000000000000
```


<collapse-text hidden title="Response">


(This is the `deposittxid`)

```bash
07d79e39354cc38a76dfe2ca8a5fb711432192237608ea066621662f13e0c08e
```

</collapse-text>


## gatewaysdumpprivkey

**gatewaysdumpprivkey bindtxid address**

The `gatewaysdumpprivkey` method returns the private key for the given `address` and `bindtxid`.

The private key is returned in the wif format of the associated external chain.

### Arguments

| Name | Type | Description |
| --------- | -------- | ---------------------------------------------------- |
| bindtxid  | (string) | the `bindtxid` for the associated gateway            |
| address   | (string) | the `address` for which the private key is requested |

### Response

| Name | Type | Description |
| --------- | -------- | ----------------------------------------- |
| result    | (string) | whether the command executed successfully |
| privkey   | (string) | the private key                           |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD gatewaysdumpprivkey 897a4e52749eb4a89d251f85cce16cbff6b09209d900b191610d68bf631f8d0d RVHLGTE3aFGwqpUVsoHJiJGs9pmsnd3fNB
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "privkey": "1pAcQXouEKKjuCpH25AjPoiihGNWB7DGwgfRCRAhJtRVGKvRHrk"
}
```

</collapse-text>


## gatewaysexternaladdress

**gatewaysexternaladdress bindtxid pubkey**

The `gatewaysexternaladdress` method returns the address on the external chain for the gateways associated with the given `pubkey` and `bindtxid` values.

### Arguments

| Name | Type | Description |
| --------- | -------- | ----------------------------------------------------------------- |
| bindtxid  | (string) | the `bindtxid` for the associated gateway                         |
| pubkey    | (string) | the `pubkey` needed to generate the address on the external chain |

### Response

| Name | Type | Description |
| --------- | -------- | ----------------------------------------- |
| result    | (string) | whether the command executed successfully |
| address   | (string) | the address for the given pubkey          |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD gatewaysexternaladdress 897a4e52749eb4a89d251f85cce16cbff6b09209d900b191610d68bf631f8d0d 02ebb42018347eb3a4da76e85347bb0f042355ff3d16e323b21f8e6cb10098654e
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "address": "RPq3opCLxV3xgpiM8ewUvyRE5aqovfVeH5"
}
```

</collapse-text>


## gatewaysinfo

**gatewaysinfo bindtxid**

The `gatewaysinfo` method returns information about the `bindtxid` gateway.

### Arguments

| Name | Type | Description |
| --------- | -------- | ----------------------------------------- |
| bindtxid  | (string) | the `bindtxid` for the associated gateway |

### Response

| Name | Type | Description |
| ----------- | -------- | ----------------------------------------------------------------------------------------------------------- |
| result      | (string) | whether the command executed successfully                                                                   |
| name        | (string) | the name of the command                                                                                     |
| pubkey      | (string) | the pubkey that holds the converted proxy tokens                                                            |
| coin        | (string) | the name of the asset that the proxy token represents                                                       |
| oracletxid  | (string) | the `oracletxid` of the associated oracle                                                                   |
| taddr       | (number) | the coin-specific address that customizes the address for the relevant foreign coin         |
| prefix      | (number) | the coin-specific address prefix that customizes the address for the relevant foreign coin  |
| prefix2     | (number) | the coin-specific address prefix that customizes the address for the relevant foreign coin  |
| deposit     | (string) | the t address associated with the gateway pubkey                                                            |
| tokenid     | (string) | the `tokenid` of the proxy token                                                                            |
| totalsupply | (number) | the total available supply of proxy tokens                                                                  |
| remaining   | (number) | the amount of proxy tokens not currently issued                                                             |
| issued      | (number) | the amount of proxy tokens currently issued                                                                 |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD gatewaysinfo 897a4e52749eb4a89d251f85cce16cbff6b09209d900b191610d68bf631f8d0d
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "name": "Gateways",
  "pubkey": "024026d4ad4ecfc1f705a9b42ca64af6d2ad947509c085534a30b8861d756c6ff0",
  "coin": "KMD",
  "oracletxid": "ba26ba27dc17a017a2c0915378c0a8430e468dffb42c4fc1cd36abf69c88388b",
  "taddr": 0,
  "prefix": 60,
  "prefix2": 85,
  "deposit": "RXEXoa1nRmKhMbuZovpcYwQMsicwzccZBp",
  "tokenid": "07646d72dec393f486f8a116facd9b8a575dcf00ec99f819151fd1784015941b",
  "totalsupply": "1.00000000",
  "remaining": "1.00000000",
  "issued": "0.00000000"
}
```

</collapse-text>


## gatewayslist

**gatewayslist**

The `gatewayslist` method displays a list of `bindtxids` for the available gateways.

### Arguments

| Name | Type | Description |
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description |
| --------- | -------- | ------------------------------------ |
| bindtxid  | (string) | the bindtxid of an available gateway |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD gatewayslist
```


<collapse-text hidden title="Response">


```bash
[
  "4114e3c5dcddc464c5fd94efebf8215322f12226bffc93f84d6d5e0b4ca131a9",
  "aeef4320afe73e1cfe43c4c129b31da018990f49d65b5eeb45cb9a348fdf6ece"
]
```

</collapse-text>


<!--FIXME new RPC added
gatewaysmarkdone completesigningtx coin
gatewayspartialsign txidaddr refcoin hex
gatewayspendingdeposits bindtxid coin
gatewayspendingwithdraws bindtxid coin
gatewaysprocessed bindtxid coin
-->

## gatewayswithdraw

**gatewayswithdraw bindtxid coin withdrawpub amount**

The `gatewayswithdraw` method sends proxy tokens in the gateways `pubkey`. The gateway then sends the foreign assets to the indicated foreign `withdrawpub` pubkey.

### Arguments

| Name | Type | Description |
| ----------- | -------- | ---------------------------------------------------------------------------------------------------------------------------- |
| bindtxid    | (string) | the `bindtxid` of the gateway                                                                                                |
| coin        | (string) | the name of the asset                                                                                                        |
| withdrawpub | (string) | the `pubkey` to which the foreign assets should be sent                                                                      |
| amount      | (number) | the number of proxy tokens to send to the gateway, which will then be exchanged for the relevant amount of the foreign asset |

### Response

| Name | Type | Description |
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD gatewayswithdraw 897a4e52749eb4a89d251f85cce16cbff6b09209d900b191610d68bf631f8d0d KMD 0271bc6b553f5f763ca7f64457710f8a0b3f5273b2941edc5091ca41cec39b7328 0.1
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "01000000020e2778e5c0917b00a995ffd0e027ac896492b70b2004ca0096d5309bc1d695ce0000000048473044022072bd3e74c1fb6a56111fc34caab1d605cedfbcb0a9dcd1a4c8d0dae9db61d43902205ccea739077b3374559353af3392e637b7c462ca699f9b9dba786b5398491b4201ffffffff8425c1bf730444ceac45a47376164d66a156e6c2a48116ec14cd17a88f8ab8e5010000007b4c79a276a072a26ba067a565802102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d814051e39b89bace8226f3ca1779b754f2b57ee480e9636b16322bb36a89ec22de967ea66cdc906debb5f6b7c26a51ac2d089966aeb92d07aacc43507b1555c02313a100af038001f1a10001ffffffff058096980000000000302ea22c802091abda62a548f9c7f5beb19d16f01714ae3d4e526f3266fc8d347d6123f3d77b8103120c008203000401cc102700000000000023210271bc6b553f5f763ca7f64457710f8a0b3f5273b2941edc5091ca41cec39b7328ac1027000000000000302ea22c802091abda62a548f9c7f5beb19d16f01714ae3d4e526f3266fc8d347d6123f3d77b8103120c008203000401ccd02a724e18090000232102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9dac0000000000000000536a4c50f157bff603b64f309e344e34b10fd2053db59788909914f8488a7f73ddddc2165d31034b4d44210271bc6b553f5f763ca7f64457710f8a0b3f5273b2941edc5091ca41cec39b7328809698000000000000000000"
}
```

</collapse-text>


Step Two: Broadcast using `sendrawtransction`:

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 01000000020e2778e5c0917b00a995ffd0e027ac896492b70b2004ca0096d5309bc1d695ce0000000048473044022072bd3e74c1fb6a56111fc34caab1d605cedfbcb0a9dcd1a4c8d0dae9db61d43902205ccea739077b3374559353af3392e637b7c462ca699f9b9dba786b5398491b4201ffffffff8425c1bf730444ceac45a47376164d66a156e6c2a48116ec14cd17a88f8ab8e5010000007b4c79a276a072a26ba067a565802102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9d814051e39b89bace8226f3ca1779b754f2b57ee480e9636b16322bb36a89ec22de967ea66cdc906debb5f6b7c26a51ac2d089966aeb92d07aacc43507b1555c02313a100af038001f1a10001ffffffff058096980000000000302ea22c802091abda62a548f9c7f5beb19d16f01714ae3d4e526f3266fc8d347d6123f3d77b8103120c008203000401cc102700000000000023210271bc6b553f5f763ca7f64457710f8a0b3f5273b2941edc5091ca41cec39b7328ac1027000000000000302ea22c802091abda62a548f9c7f5beb19d16f01714ae3d4e526f3266fc8d347d6123f3d77b8103120c008203000401ccd02a724e18090000232102d389e879ca68809794c0ef29869b23b4dd8e22122fcc4e8b69adb1d33752dd9dac0000000000000000536a4c50f157bff603b64f309e344e34b10fd2053db59788909914f8488a7f73ddddc2165d31034b4d44210271bc6b553f5f763ca7f64457710f8a0b3f5273b2941edc5091ca41cec39b7328809698000000000000000000
```


<collapse-text hidden title="Response">


```bash
79d41ffefa359a7ae2f62adf728a3ec3f3d2653889780ed9776bf9b74fe9a6fe
```

</collapse-text>



# Heir

## Introduction

The Heir Fluidity module allows cryptocurrency funds to be passed on as an inheritance.

The module functions by the means of a special `1of2` Fluidity address. In this type of address there are two private keys that are capable of spending funds from the address. However, only the first private key may spend funds by default.

This first private key belongs to the owner of the `1of2` Fluidity address. The owner may use this key to freely spend funds and also to add more funds to the address.

Should the owner fail to interact with the `1of2` Fluidity address for a specified period of time (`inactivitytime`), the address automatically unlocks to the second key. This second key is owned by the heir. Once unlocked, both the creator and the heir may freely spend funds from the address.

The [heiradd](../customconsensus/heir.html#heiradd) method allows anyone, including users who are neither the owner nor the heir, to add funds to the address. These additions are considered donations and they do not affect the `inactivitytime` calculations that can unlock the funds for the heir. The `heiradd` method warns the user that they are making a donation if the method detects that the user is neither the owner nor the heir.

The Heir Fluidity module accepts both coins and tokens. These can be the base coin of the asset chain, on-chain tokens created via the [Tokens](../customconsensus/tokens.html) Fluidity module that represent on-chain assets, or even tokens that are formed via the [Gateways](../customconsensus/gateways.html) module to represent off-chain assets or other cryptocurrencies.

#### Heir Module Flow

- Anyone can create a new Heir Fluidity address using [heirfund](../customconsensus/heir.html#heirfund)
- The owner of this address can add more funds using [heiradd](../customconsensus/heir.html#heiradd)
- Any other user, including the heir, can add donations using [heiradd](../customconsensus/heir.html#heiradd)
- The owner can claim funds at any time using [heirclaim](../customconsensus/heir.html#heirclaim)
- Once `inactivitytime` period is reached, the heir can also claim funds using [heirclaim](../customconsensus/heir.html#heirclaim)
- To retrieve the details of a particular funding plan, use [heirinfo](../customconsensus/heir.html#heirinfo)
- To retrieve a list of all funding plans on the asset chain, use [heirlist](../customconsensus/heir.html#heirlist)
- To output Heir Fluidity addresses, use [heiraddress](../customconsensus/heir.html#heiraddress)

<div style="margin-top: 1rem; margin-bottom: 1rem;">

<img style="border: 1rem solid white;" src="/heirCC-with-labels.png">

</div>

::: warning

If an owner of an Heir Fluidity address seeking to add funds to their account avoids the normal methods (the RPC provided) and instead manually creates a utxo contribution, this utxo will not follow the normal patterns. Specifically, if the owner manually creates a contribution utxo that derives from both the owner pubkey and also from another pubkey, this utxo will not affect the `inactivitytime` calculation. Instead of resetting the `inactivitytime`, the utxo will count only as a donation.

:::

## heiradd

**heiradd txfee amount fundingtxid**

The `heiradd` method adds more funds to the Heir plan.

When the owner uses the `heiradd` method the `inactivitytime` calculations are reset, thus renewing the owner's sole access to the funds.

When anyone other than the owner uses the `heiradd` method to add funds, these funds are considered to be donations and won't affect the calculation of the elapsed `inactivitytime`. The method also sends a warning to the contributor to ensure they agree to submit the given funds as a donation.

For each transaction using `heiradd`, the funds may be sent either from the owner's pubkey, or from a non-owner's pubkey. Funds cannot be sent from both owner and non-owner pubkeys at the same time. This can cause confusion for the owner if the funds available in their wallet are held partially in the owner's declared pubkey for this Heir account, and partially in other pubkeys. Therefore, the owner should ensure that all funds they desire to add to the account are within their declared Heir Fluidity pubkey before attempting to use `heiradd`.

::: tip
Use the [<b>heirlist</b>](../customconsensus/heir.html#heirlist) method to find a <b>fundingtxid</b>.
:::

### Arguments

| Name | Type | Description |
| ----------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| txfee       | (number) | the transaction fee (in satoshis); when set to `0`, the default value is 10000 satoshis                                                                                                      |
| amount      | (number) | the amount of funds to be added; this amount will be withdrawn from the contributor's coins or tokens, as determined by the `tokenid` parameter used when the `heirfund` method was executed |
| fundingtxid | (string) | the transaction id returned from the original [heirfund](../customconsensus/heir.html#heirfund) transaction                                                                              |

### Response

| Name | Type | Description |
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

##### Step 1: Create a raw transaction (in coins) and get the HEX value

```bash
./komodo-cli -ac_name=HELLOWORLD heiradd 0 5 b8b5fa46b545548fbab3baeb5adeaafedd80494006af1b04007fb9f7379ce1f0
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "0400008085202f8902f0e19c37f7b97f00041baf06404980ddfeaade5aebbab3ba8f5445b546fab5b80200000049483045022100a37d7b5929af0928f1dad10ddd686a8e2e47503c96ba5485e982c72d6fb3dfb00220304b039011774652f89eb3e7b6bf187e441ed4a82339623d5d8f058816e2f43a01fffffffff0e19c37f7b97f00041baf06404980ddfeaade5aebbab3ba8f5445b546fab5b80300000049483045022100c9297262cc12d300ef068d4de7a3d8e6006b87002e4c7a5c8b262be8d87da86102203f73e991704ef492ae57550a3c3cbb57494299d5ef2b3b64b6d88a1fff36a19d01ffffffff050065cd1d00000000302ea22c8020fa433cc47b98f7d1eed7441a529eaa6a91425abdda9b28306a9f19e5fda64ab481031210008203000401cc1027000000000000232102f0e19c37f7b97f00041baf06404980ddfeaade5aebbab3ba8f5445b546fab5b8ace0303e36020000002321036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eace0144a8a040000002321036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eac0000000000000000256a23ea41b8b5fa46b545548fbab3baeb5adeaafedd80494006af1b04007fb9f7379ce1f00000000000620000000000000000000000000000"
}
```

</collapse-text>


##### Step 2: Broadcast raw transaction

```bash
 ./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 0400008085202f8902f0e19c37f7b97f00041baf06404980ddfeaade5aebbab3ba8f5445b546fab5b80200000049483045022100a37d7b5929af0928f1dad10ddd686a8e2e47503c96ba5485e982c72d6fb3dfb00220304b039011774652f89eb3e7b6bf187e441ed4a82339623d5d8f058816e2f43a01fffffffff0e19c37f7b97f00041baf06404980ddfeaade5aebbab3ba8f5445b546fab5b80300000049483045022100c9297262cc12d300ef068d4de7a3d8e6006b87002e4c7a5c8b262be8d87da86102203f73e991704ef492ae57550a3c3cbb57494299d5ef2b3b64b6d88a1fff36a19d01ffffffff050065cd1d00000000302ea22c8020fa433cc47b98f7d1eed7441a529eaa6a91425abdda9b28306a9f19e5fda64ab481031210008203000401cc1027000000000000232102f0e19c37f7b97f00041baf06404980ddfeaade5aebbab3ba8f5445b546fab5b8ace0303e36020000002321036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eace0144a8a040000002321036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eac0000000000000000256a23ea41b8b5fa46b545548fbab3baeb5adeaafedd80494006af1b04007fb9f7379ce1f00000000000620000000000000000000000000000
```


<collapse-text hidden title="Response">


```bash
e7b8f58539e2554a51d8438e5e58b0a12896f076e2a2850a503f372e402521b
```

</collapse-text>


##### Step 3: Decode raw transaction to ensure values are sane (optional)

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 0400008085202f8902f0e19c37f7b97f00041baf06404980ddfeaade5aebbab3ba8f5445b546fab5b80200000049483045022100a37d7b5929af0928f1dad10ddd686a8e2e47503c96ba5485e982c72d6fb3dfb00220304b039011774652f89eb3e7b6bf187e441ed4a82339623d5d8f058816e2f43a01fffffffff0e19c37f7b97f00041baf06404980ddfeaade5aebbab3ba8f5445b546fab5b80300000049483045022100c9297262cc12d300ef068d4de7a3d8e6006b87002e4c7a5c8b262be8d87da86102203f73e991704ef492ae57550a3c3cbb57494299d5ef2b3b64b6d88a1fff36a19d01ffffffff050065cd1d00000000302ea22c8020fa433cc47b98f7d1eed7441a529eaa6a91425abdda9b28306a9f19e5fda64ab481031210008203000401cc1027000000000000232102f0e19c37f7b97f00041baf06404980ddfeaade5aebbab3ba8f5445b546fab5b8ace0303e36020000002321036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eace0144a8a040000002321036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eac0000000000000000256a23ea41b8b5fa46b545548fbab3baeb5adeaafedd80494006af1b04007fb9f7379ce1f00000000000620000000000000000000000000000
```


<collapse-text hidden title="Response">


```json
{
  "txid": "e7b8f58539e2554a51d8438e5e58b0a12896f076e2a2850a503f372e402521b3",
  "overwintered": true,
  "version": 4,
  "versiongroupid": "892f2085",
  "locktime": 0,
  "expiryheight": 98,
  "vin": [
    {
      "txid": "b8b5fa46b545548fbab3baeb5adeaafedd80494006af1b04007fb9f7379ce1f0",
      "vout": 2,
      "scriptSig": {
        "asm": "3045022100a37d7b5929af0928f1dad10ddd686a8e2e47503c96ba5485e982c72d6fb3dfb00220304b039011774652f89eb3e7b6bf187e441ed4a82339623d5d8f058816e2f43a[ALL]",
        "hex": "483045022100a37d7b5929af0928f1dad10ddd686a8e2e47503c96ba5485e982c72d6fb3dfb00220304b039011774652f89eb3e7b6bf187e441ed4a82339623d5d8f058816e2f43a01"
      },
      "sequence": 4294967295
    },
    {
      "txid": "b8b5fa46b545548fbab3baeb5adeaafedd80494006af1b04007fb9f7379ce1f0",
      "vout": 3,
      "scriptSig": {
        "asm": "3045022100c9297262cc12d300ef068d4de7a3d8e6006b87002e4c7a5c8b262be8d87da86102203f73e991704ef492ae57550a3c3cbb57494299d5ef2b3b64b6d88a1fff36a19d[ALL]",
        "hex": "483045022100c9297262cc12d300ef068d4de7a3d8e6006b87002e4c7a5c8b262be8d87da86102203f73e991704ef492ae57550a3c3cbb57494299d5ef2b3b64b6d88a1fff36a19d01"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 5.0,
      "valueZat": 500000000,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c8020fa433cc47b98f7d1eed7441a529eaa6a91425abdda9b28306a9f19e5fda64ab481031210008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c8020fa433cc47b98f7d1eed7441a529eaa6a91425abdda9b28306a9f19e5fda64ab481031210008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["RL4bWeVxLen2np68Uxp7eNHRVqquwzSPHV"]
      }
    },
    {
      "value": 0.0001,
      "valueZat": 10000,
      "n": 1,
      "scriptPubKey": {
        "asm": "02f0e19c37f7b97f00041baf06404980ddfeaade5aebbab3ba8f5445b546fab5b8 OP_CHECKSIG",
        "hex": "2102f0e19c37f7b97f00041baf06404980ddfeaade5aebbab3ba8f5445b546fab5b8ac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RDyrGQzYgjS9urojBjcSMPaecHpLQiLruB"]
      }
    },
    {
      "value": 94.9998,
      "valueZat": 9499980000,
      "n": 2,
      "scriptPubKey": {
        "asm": "036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e OP_CHECKSIG",
        "hex": "21036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["REXP3kgaa5wbio76aqnTJDb8CQJHBiZy2b"]
      }
    },
    {
      "value": 194.9998,
      "valueZat": 19499980000,
      "n": 3,
      "scriptPubKey": {
        "asm": "036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e OP_CHECKSIG",
        "hex": "21036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["REXP3kgaa5wbio76aqnTJDb8CQJHBiZy2b"]
      }
    },
    {
      "value": 0.0,
      "valueZat": 0,
      "n": 4,
      "scriptPubKey": {
        "asm": "OP_RETURN ea41b8b5fa46b545548fbab3baeb5adeaafedd80494006af1b04007fb9f7379ce1f000",
        "hex": "6a23ea41b8b5fa46b545548fbab3baeb5adeaafedd80494006af1b04007fb9f7379ce1f000",
        "type": "nulldata"
      }
    }
  ],
  "vjoinsplit": [],
  "valueBalance": 0.0,
  "vShieldedSpend": [],
  "vShieldedOutput": []
}
```

</collapse-text>


## heiraddress

**heiraddress pubkey**

The `heiraddress` method shows the owner's addresses and balances for the Heir plan.

::: warning

- The functionality of this method is only applicable when executed on a daemon that was launched using the pubkey of the owner of the relevant Heir plan. For all other daemons, the method is available, but has no functional purpose.
- The argument of this method is the **heir's** pubkey.

:::

### Arguments

| Name | Type | Description |
| --------- | -------- | ---------------------------------- |
| pubkey    | (string) | the heir's pubkey (in hexademical) |

### Response

| Name | Type | Description |
| ------------------------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| result                    | (string) | whether the method executed successfully                                                                                                                                                                                                                                                                                                                         |
| HeirCCaddress             | (string) | taking the module's EVAL code as a modifier, this is the public address that corresponds to the module's privkey                                                                                                                                                                                                                                             |
| CCbalance                 | (number) | the unspent amount in the HeirCCaddress                                                                                                                                                                                                                                                                                                                          |
| HeirNormalAddress         | (string) | the unmodified normal public address generated from the module's privkey, used for markers                                                                                                                                                                                                                                                                     |
| HeirCC`1of2`Address       | (string) | the address for storing funds in **coins** spendable by either the owner or the heir (funds address)                                                                                                                                                                                                                                                             |
| HeirCC`1of2`TokensAddress | (string) | the address for storing funds in **tokens** spendable by either the owner or the heir (token funds address)                                                                                                                                                                                                                                                      |
| myCCaddress(Heir)         | (string) | taking the module's EVAL code as a modifier, this is the Fluidity address from the pubkey of the **heir**                                                                                                                                                                                                                                                            |
| myaddress                 | (string) | the unmodified normal public address of the pubkey [used to launch the daemon.](../customconsensus/custom-consensus-instructions.html#creating-and-launching-with-a-pubkey) This is the normal address used to withdraw funds in coins from from HeirCC`1of2`Address. This property is applicable to any user who wants to use the Heir plan (owner or heir) |
| mybalance                 | (number) | the balance of myaddress in coins                                                                                                                                                                                                                                                                                                                                |
| MyTokenAddress            | (string) | the user's address to withdraw funds in tokens from HeirCC`1of2`TokensAddress (in development)                                                                                                                                                                                                                                                                   |

#### :pushpin: Example

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD heiraddress 036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "HeirCCAddress": "RDVHcSekmXgeYBqRupNTmqo3Rn8QRXNduy",
  "CCbalance": 0.0001,
  "HeirNormalAddress": "RTPwUjKYECcGn6Y4KYChLhgaht1RSU4jwf",
  "HeirCC`1of2`Address": "RCiaNQq9yVb5biyEy8xWrAJCjjvQ9oW8rn",
  "HeirCC`1of2`TokensAddress": "RGKHD8UaTU2avj6LdmuSgpuaukk6XY4fss",
  "myAddress": "REXP3kgaa5wbio76aqnTJDb8CQJHBiZy2b",
  "myCCAddress(Heir)": "RTF9g6SRzbgZXTT7arGZrmTeNKuLoGYyZA",
  "PubkeyCCaddress(Heir)": "RTF9g6SRzbgZXTT7arGZrmTeNKuLoGYyZA",
  "myCCaddress": "RTF9g6SRzbgZXTT7arGZrmTeNKuLoGYyZA",
  "myCCbalance": 0.0,
  "myaddress": "REXP3kgaa5wbio76aqnTJDb8CQJHBiZy2b",
  "mybalance": 296.9995
}
```

</collapse-text>


## heirclaim

**heirclaim txfee amount fundingtxid**

The `heirclaim` method allows the owner to claim funds from the plan.

After the `inactivitytime` period has elapsed, the `heirclaim` method also allows the heir to claim funds.

::: tip
Use the [<b>heirlist</b>](../customconsensus/heir.html#heirlist) method to find a <b>fundingtxid</b>.
:::

### Arguments

| Name | Type | Description |
| ----------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| txfee       | (number) | the transaction fee (in satoshis); when set to `0`, the default value is 10000 satoshis                                                                                                      |
| amount      | (number) | the amount of funds to be added; this amount will be withdrawn from the contributor's coins or tokens, as determined by the `tokenid` parameter used when the `heirfund` method was executed |
| fundingtxid | (string) | the transaction id returned from the original [heirfund](../customconsensus/heir.html#heirfund) transaction                                                                              |

### Response

| Name | Type | Description |
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

##### Step 1 Create a raw transaction (in coins) and get the HEX value

```bash
./komodo-cli -ac_name=HELLOWORLD heirclaim 0 7 b8b5fa46b545548fbab3baeb5adeaafedd80494006af1b04007fb9f7379ce1f0
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "0400008085202f8903b32125402e373f500a85a2e276f09628a1b0585e8e43d8514a55e23985f5b8e70200000049483045022100f3805c1424472626ee89e2f4c5ab4f7c310d37774604eb97860200d1dfb120d102202a0ffcc6e5c1f8893dde1ab3a67eafa554ac1af17dce14cf0580a55f5b9fdc6e01ffffffffb32125402e373f500a85a2e276f09628a1b0585e8e43d8514a55e23985f5b8e700000000a74ca5a281a1a0819ca28194a067a5658021036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e81404827886fbbd2c8d3337dabfa69e69e5af03151a00fa1c7d3b6f33b68e36974f2228bf0aac209eaa55d16e8c2cdcb9c3993590e47c3e524a29a223db7042b7fa1a129a52780201011d4a0870dff12319f1b00e9a537fb9ddda81d2bba8b0d492cc6b4e9f7b1c98103020000af038001eaa10001fffffffff0e19c37f7b97f00041baf06404980ddfeaade5aebbab3ba8f5445b546fab5b800000000a74ca5a281a1a0819ca28194a067a5658021036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e8140bb6e5c5c6b1e3a97d99e5dd1cf8e30942069260f8a482f7004d7638b4f5a53dd4d592d4a1d099cc7c0d6b79fcaeec262606d38c56abd7d13cea0753e73a3985aa129a52780201011d4a0870dff12319f1b00e9a537fb9ddda81d2bba8b0d492cc6b4e9f7b1c98103020000af038001eaa10001ffffffff040027b929000000002321036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eac00a3e11100000000302ea22c8020fa433cc47b98f7d1eed7441a529eaa6a91425abdda9b28306a9f19e5fda64ab481031210008203000401ccd0093e36020000002321036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eac0000000000000000256a23ea43b8b5fa46b545548fbab3baeb5adeaafedd80494006af1b04007fb9f7379ce1f00000000000680000000000000000000000000000"
}
```

</collapse-text>


##### Step 2: Broadcast raw transaction

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction  0400008085202f8903b32125402e373f500a85a2e276f09628a1b0585e8e43d8514a55e23985f5b8e70200000049483045022100f3805c1424472626ee89e2f4c5ab4f7c310d37774604eb97860200d1dfb120d102202a0ffcc6e5c1f8893dde1ab3a67eafa554ac1af17dce14cf0580a55f5b9fdc6e01ffffffffb32125402e373f500a85a2e276f09628a1b0585e8e43d8514a55e23985f5b8e700000000a74ca5a281a1a0819ca28194a067a5658021036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e81404827886fbbd2c8d3337dabfa69e69e5af03151a00fa1c7d3b6f33b68e36974f2228bf0aac209eaa55d16e8c2cdcb9c3993590e47c3e524a29a223db7042b7fa1a129a52780201011d4a0870dff12319f1b00e9a537fb9ddda81d2bba8b0d492cc6b4e9f7b1c98103020000af038001eaa10001fffffffff0e19c37f7b97f00041baf06404980ddfeaade5aebbab3ba8f5445b546fab5b800000000a74ca5a281a1a0819ca28194a067a5658021036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e8140bb6e5c5c6b1e3a97d99e5dd1cf8e30942069260f8a482f7004d7638b4f5a53dd4d592d4a1d099cc7c0d6b79fcaeec262606d38c56abd7d13cea0753e73a3985aa129a52780201011d4a0870dff12319f1b00e9a537fb9ddda81d2bba8b0d492cc6b4e9f7b1c98103020000af038001eaa10001ffffffff040027b929000000002321036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eac00a3e11100000000302ea22c8020fa433cc47b98f7d1eed7441a529eaa6a91425abdda9b28306a9f19e5fda64ab481031210008203000401ccd0093e36020000002321036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eac0000000000000000256a23ea43b8b5fa46b545548fbab3baeb5adeaafedd80494006af1b04007fb9f7379ce1f00000000000680000000000000000000000000000
```


<collapse-text hidden title="Response">


```bash
f0f7f536a261ee8e02fb592d81305b6052939a510e3e3435280b0bad454626c7
```

</collapse-text>


## heirfund

**heirfund txfee amount name heirpubkey inactivitytime memo ( tokenid )**

The `heirfund` method creates a new Heir funding plan.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

### Arguments

| Name | Type | Description |
| -------------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ |
| txfee          | (number)           | the transaction fee in satoshis, defaults to 10000 satoshis when set to `0`                                                                      |
| amount         | (number)           | the initial funding amount, in coins or tokens (this parameter is considered to be the amount of tokens if the (tokenid) parameter is present)   |
| name           | (string)           | the name of the heir funding plan (arbitrary)                                                                                                    |
| heirpubkey     | (string)           | the heir's public key (in hexademical)                                                                                                           |
| inactivitytime | (number)           | the time (in seconds) that must pass without the owner executing an `heiradd` or `heirclaim` method, after which the address unlocks to the heir |
| memo           | (string)           | a store for arbitrary data; for example, this can hold a digital copy of a physical will or other relevant documents                             |
| tokenid        | (string, optional) | the token id in hexademical; if set, the funds contributed to this address must be of the variety specified by the tokenid                       |

::: warning

- All data for this transaction, including the memo field, must be less than or equal to 10000 bytes
- To store documents of large sizes, include a [URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier) in the <b>memo</b> field which links to such a document on the World Wide Web and its hash for verification.

:::

### Response

| Name | Type | Description |
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

##### Step 1: Create a raw transaction (in coins) and get the HEX value

::: tip
The following example demonstrates Heir usage when utilizing coins, instead of tokens. When instead using tokens, create the tokens first with the [tokencreate](../customconsensus/tokens.html#tokencreate) method and pass the `tokenid` as the last parameter of [heirfund.](../customconsensus/heir.html#heirfund)
:::

```bash
./komodo-cli -ac_name=HELLOWORLD heirfund 0 5 MyDogHeir 037736c263991316c6a23397a982a1f8c18ae8642e944448162a93a824c31f9299 100 'http://billionaire.com/mywill md5=5385639869'
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "0400008085202f8902bbc0db728486b88284ac9fc4580a32869009f0ceabc659c5929d1ca5fac0a9a1010000006a47304402202e9e6a63905789547c35d3be0d0c6e022d954ba55efede20b81334e805a6e31902201a72890bfa4fff37ddf9c87c9cb567d70e89b35a82709ea14332481c860a91c10121036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562effffffffdbc39ae947682e4c3c835d9326fc32a6f7e64dde869a93c9b17a9c97f5b4aeb5010000006a473044022001b04d40674eb7f309dc17ccd822a6362ade310eb37024303a110731870ccb2702204fd975db4a21995487fac94f49da90901a0c3047ac1a22cf161cacff2a256ab80121036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562effffffff050065cd1d00000000302ea22c8020fa433cc47b98f7d1eed7441a529eaa6a91425abdda9b28306a9f19e5fda64ab481031210008203000401cc1027000000000000302ea22c8020286b36b233cc03c91652560f4ecf9404bcf10b61033916d67edf4a216c92cf758103120c008203000401cc00634a8a040000002321036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eace0950b54020000002321036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eac0000000000000000886a4c85ea4621036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e21037736c263991316c6a23397a982a1f8c18ae8642e944448162a93a824c31f92996400000000000000094d79446f67486569722c687474703a2f2f62696c6c696f6e616972652e636f6d2f6d7977696c6c206d64353d3533383536333938363900000000570000000000000000000000000000"
}
```

</collapse-text>


##### Step 2: Broadcast raw transaction

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 0400008085202f8902bbc0db728486b88284ac9fc4580a32869009f0ceabc659c5929d1ca5fac0a9a1010000006a47304402202e9e6a63905789547c35d3be0d0c6e022d954ba55efede20b81334e805a6e31902201a72890bfa4fff37ddf9c87c9cb567d70e89b35a82709ea14332481c860a91c10121036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562effffffffdbc39ae947682e4c3c835d9326fc32a6f7e64dde869a93c9b17a9c97f5b4aeb5010000006a473044022001b04d40674eb7f309dc17ccd822a6362ade310eb37024303a110731870ccb2702204fd975db4a21995487fac94f49da90901a0c3047ac1a22cf161cacff2a256ab80121036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562effffffff050065cd1d00000000302ea22c8020fa433cc47b98f7d1eed7441a529eaa6a91425abdda9b28306a9f19e5fda64ab481031210008203000401cc1027000000000000302ea22c8020286b36b233cc03c91652560f4ecf9404bcf10b61033916d67edf4a216c92cf758103120c008203000401cc00634a8a040000002321036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eace0950b54020000002321036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eac0000000000000000886a4c85ea4621036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e21037736c263991316c6a23397a982a1f8c18ae8642e944448162a93a824c31f92996400000000000000094d79446f67486569722c687474703a2f2f62696c6c696f6e616972652e636f6d2f6d7977696c6c206d64353d3533383536333938363900000000570000000000000000000000000000
```


<collapse-text hidden title="Response">


```bash
b8b5fa46b545548fbab3baeb5adeaafedd80494006af1b04007fb9f7379ce1f0
```

</collapse-text>


This transaction id is the funding transaction id of this Heir plan. Copy and save this to a safe location.

Wait until the transaction is confirmed.

##### Step 3: Decode the raw transaction to ensure the values are sane (optional)

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 0400008085202f8902d47a3327514aedd15ba54f8a7a46cf47f54abc7af8ab816afae87c1b5db683420100000049483045022100a363ff9049cb6178bd0f328f4b99daf4e9ea4135a1a9cc95dc06423807d7fa2b0220402e51e3ca9db0377b3a4975aacc59b7249ee9154c95a0a3500c101ca6ccc68301fffffffffc9f94352e0215037cced1d2b888687afa841310e4451bb0f97dd3303704d8d90200000049483045022100deee8e926637e91cec15d695f6b2a178ef74a3f50c9a31dd2d64f045087e46f5022049e19c838249e1ae9945cac652b3bbb10c05071e3aaab0771f7d75815135a46901ffffffff040065cd1d00000000302ea22c8020fa433cc47b98f7d1eed7441a529eaa6a91425abdda9b28306a9f19e5fda64ab481031210008203000401cc1027000000000000302ea22c8020286b36b233cc03c91652560f4ecf9404bcf10b61033916d67edf4a216c92cf758103120c008203000401cce4a79216000000002321036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eac0000000000000000886a4c85ea4621036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e21037736c263991316c6a23397a982a1f8c18ae8642e944448162a93a824c31f92996400000000000000094d79446f67486569722c687474703a2f2f62696c6c696f6e616972652e636f6d2f6d7977696c6c206d64353d3533383536333938363900000000e60000000000000000000000000000
```


<collapse-text hidden title="Response">


```json
{
  "txid": "b8b5fa46b545548fbab3baeb5adeaafedd80494006af1b04007fb9f7379ce1f0",
  "overwintered": true,
  "version": 4,
  "versiongroupid": "892f2085",
  "locktime": 0,
  "expiryheight": 87,
  "vin": [
    {
      "txid": "a1a9c0faa51c9d92c559c6abcef0099086320a58c49fac8482b8868472dbc0bb",
      "vout": 1,
      "scriptSig": {
        "asm": "304402202e9e6a63905789547c35d3be0d0c6e022d954ba55efede20b81334e805a6e31902201a72890bfa4fff37ddf9c87c9cb567d70e89b35a82709ea14332481c860a91c1[ALL] 036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e",
        "hex": "47304402202e9e6a63905789547c35d3be0d0c6e022d954ba55efede20b81334e805a6e31902201a72890bfa4fff37ddf9c87c9cb567d70e89b35a82709ea14332481c860a91c10121036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e"
      },
      "sequence": 4294967295
    },
    {
      "txid": "b5aeb4f5979c7ab1c9939a86de4de6f7a632fc26935d833c4c2e6847e99ac3db",
      "vout": 1,
      "scriptSig": {
        "asm": "3044022001b04d40674eb7f309dc17ccd822a6362ade310eb37024303a110731870ccb2702204fd975db4a21995487fac94f49da90901a0c3047ac1a22cf161cacff2a256ab8[ALL] 036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e",
        "hex": "473044022001b04d40674eb7f309dc17ccd822a6362ade310eb37024303a110731870ccb2702204fd975db4a21995487fac94f49da90901a0c3047ac1a22cf161cacff2a256ab80121036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 5.0,
      "valueZat": 500000000,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c8020fa433cc47b98f7d1eed7441a529eaa6a91425abdda9b28306a9f19e5fda64ab481031210008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c8020fa433cc47b98f7d1eed7441a529eaa6a91425abdda9b28306a9f19e5fda64ab481031210008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["RL4bWeVxLen2np68Uxp7eNHRVqquwzSPHV"]
      }
    },
    {
      "value": 0.0001,
      "valueZat": 10000,
      "n": 1,
      "scriptPubKey": {
        "asm": "a22c8020286b36b233cc03c91652560f4ecf9404bcf10b61033916d67edf4a216c92cf758103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c8020286b36b233cc03c91652560f4ecf9404bcf10b61033916d67edf4a216c92cf758103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["RDVHcSekmXgeYBqRupNTmqo3Rn8QRXNduy"]
      }
    },
    {
      "value": 195.0,
      "valueZat": 19500000000,
      "n": 2,
      "scriptPubKey": {
        "asm": "036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e OP_CHECKSIG",
        "hex": "21036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["REXP3kgaa5wbio76aqnTJDb8CQJHBiZy2b"]
      }
    },
    {
      "value": 99.9998,
      "valueZat": 9999980000,
      "n": 3,
      "scriptPubKey": {
        "asm": "036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e OP_CHECKSIG",
        "hex": "21036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562eac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["REXP3kgaa5wbio76aqnTJDb8CQJHBiZy2b"]
      }
    },
    {
      "value": 0.0,
      "valueZat": 0,
      "n": 4,
      "scriptPubKey": {
        "asm": "OP_RETURN ea4621036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e21037736c263991316c6a23397a982a1f8c18ae8642e944448162a93a824c31f92996400000000000000094d79446f67486569722c687474703a2f2f62696c6c696f6e616972652e636f6d2f6d7977696c6c206d64353d35333835363339383639",
        "hex": "6a4c85ea4621036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e21037736c263991316c6a23397a982a1f8c18ae8642e944448162a93a824c31f92996400000000000000094d79446f67486569722c687474703a2f2f62696c6c696f6e616972652e636f6d2f6d7977696c6c206d64353d35333835363339383639",
        "type": "nulldata"
      }
    }
  ],
  "vjoinsplit": [],
  "valueBalance": 0.0,
  "vShieldedSpend": [],
  "vShieldedOutput": []
}
```

</collapse-text>


## heirinfo

**heirinfo fundingtxid**

The `heirinfo` method returns detailed information about the funding plan.

::: tip
Use the [<b>heirlist</b>](../customconsensus/heir.html#heirlist) method to find a <b>fundingtxid</b>.
:::

### Arguments

| Name | Type | Description |
| ----------- | -------- | --------------------------------------------------------------------------------------------------------------- |
| fundingtxid | (string) | the transaction id returned from the original [heirfund](../customconsensus/heir.html#heirfund) transaction |

### Response

| Name | Type | Description |
| --------------------- | --------- | -------------------------------------------------------------------------------------------------------------------------------------- |
| fundingtxid           | (string)  | the id of the funding plan, the txid of [heirfund](../customconsensus/heir.html#heirfund) transaction                              |
| name                  | (string)  | the name of the heir plan                                                                                                              |
| tokenid               | (string)  | `token id`, if applicable                                                                                                              |
| owner                 | (string)  | the owner's public key                                                                                                                 |
| heir                  | (string)  | the heir's public key                                                                                                                  |
| type                  | (string)  | the type of this funding plan (coins or tokens)                                                                                        |
| lifetime              | (number)  | the total amount contributed to this plan since inception, given in the relevant currency (coins or tokens)                            |
| available             | (number)  | the amount available, given in the relevant currency (coins or tokens)                                                                 |
| OwnerRemainderTokens  | (number)  | the amount of funds remaining in the account that were contributed by the owner                                                        |
| InactivityTimeSetting | (number)  | the `inactivitytime` (in secs) that is required to elapse without owner activity before the plan is automatically unlocked to the heir |
| IsHeirSpendingAllowed | (boolean) | a boolean flag that indicates whether the heir is allowed to claim funds                                                               |
| InactivityTime        | (number)  | the owner's real inactivity time (in seconds)                                                                                          |
| memo                  | (string)  | a store for arbitrary data; for example, this can hold a digital copy of a physical will or other relevant documents                   |
| result:               | (string)  | whether the command succeeded                                                                                                          |

#### :pushpin: Example

```bash
./komodo-cli -ac_name=HELLOWORLD heirinfo b8b5fa46b545548fbab3baeb5adeaafedd80494006af1b04007fb9f7379ce1f0
```


<collapse-text hidden title="Response">


```json
{
  "fundingtxid": "b8b5fa46b545548fbab3baeb5adeaafedd80494006af1b04007fb9f7379ce1f0",
  "name": "MyDogHeir",
  "owner": "036a2ec9095b7c2abb748548e6cec53e0c462121aa6037fd83a01ce1b2affa562e",
  "heir": "037736c263991316c6a23397a982a1f8c18ae8642e944448162a93a824c31f9299",
  "type": "coins",
  "lifetime": "0.00000000",
  "available": "0.00000000",
  "InactivityTimeSetting": "100",
  "IsHeirSpendingAllowed": "true",
  "memo": "http://billionaire.com/mywill md5=5385639869",
  "result": "success"
}
```

</collapse-text>


## heirlist

**heirlist**

The `heirlist` method outputs a list of all available `fundingtxid`'s on the asset chain.

### Arguments

| Name | Type | Description |
| --------- | ---- | ----------- |
| (none)    | ---- | ----        |

### Response

| Name | Type | Description |
| ----------- | ------------------ | ---------------------------------------------------------- |
| fundingtxid | (array of strings) | an array containing all `fundingtxid`'s on the asset chain |

#### :pushpin: Example

```bash
./komodo-cli -ac_name=HELLOWORLD heirlist
```


<collapse-text hidden title="Response">


```bash
[
  "b8b5fa46b545548fbab3baeb5adeaafedd80494006af1b04007fb9f7379ce1f0"
]
```

</collapse-text>



# MuSig

## Introduction

::: tip Notice

The MuSig module is an experimental feature. It is provided as a demonstration of Antara capabilities and of the MuSig concept. If you would like to use MuSig on a production-level asset chain, please reach out to the Komodo team on [Discord.](https://komodoplatform.com/discord)

:::

The MuSig Antara module implements a new type of multi-signature functionality. MuSig allows a blockchain to process multi-signature transactions in a more data-efficient manner. MuSig also keeps private the number of signers partaking in a multi-signature transaction.

This functionality is facilitated by MuSig's implementation of Schnorr Signature technology. Schnorr Signatures are unique in that each signature is 64 bytes in size, regardless of the number of signers in a transaction. Also, a multi-signature Schnorr Signature can be processed in one verification.

Schnorr Signatures differs from the existing multi-signature method (ECDSA), as the ECDSA method requires each signer of a transaction to be verified separately. Also, with the ECDSA method each set of signers must be collected into a final verification. The size of the ECDSA multi-signature transaction can vary according to the number of signers in the set, and this can disclose information that would otherwise remain private.

Therefore, Schnorr Signatures greatly reduce verification time and data-storage requirements, and enhance user privacy.

For further information, see this [article.](https://blockstream.com/2019/02/18/musig-a-new-multisignature-standard/) Also, the reader may refer to the comments in the following core `komodod` files, [File 1](https://github.com/jl777/komodo/blob/jl777/src/secp256k1/include/secp256k1_musig.h) and [File 2.](https://github.com/jl777/komodo/blob/jl777/src/secp256k1/src/modules/musig/example.c)

#### MuSig Module Flow

- Create a combined pubkey using the [combine](../customconsensus/musig.html#combine) method
  - From the response, take note of the `combined_pk` and `pkhash` values
- Send coins to `combined_pk` using the [send](../customconsensus/musig.html#send) method
  - Decode the returned raw transaction using [getrawtransaction](../komodo-api/rawtransactions.html#getrawtransaction)
  - From the decoded raw transaction, take note of the `sendtxid` value
- Calculate the message that needs to be signed using the [calcmsg](../customconsensus/musig.html#calcmsg) method
  - From the response, take note of `msg`
  - This `msg` needs to be signed by all participating pubkeys
- On each node create a session using the [session](../customconsensus/musig.html#session) method
  - From the response on each node take note of the `commitment` value
  - Transfer each node's `commitment` value to each other node
  - Do not stop the `komodod` daemon on any node from this point forward
    - The `komodod` daemon stores the `commitment` value as a part of a `global data structure`
    - Should any `komodod` daemon be stopped, the MuSig workflow must be restarted from the beginning
  - Also, execute the `sessions` method only once on each node
- On each node use the [commit](../customconsensus/musig.html#commit) method
  - Transfer each node's `nonce` value to each other node
- On each node use the [nonce](../customconsensus/musig.html#nonce) method
  - Transfer each node's `partialsig` value to each other node
- On each node execute the [partialsig](../customconsensus/musig.html#partialsig) method
  - Verify that the `combinedsig` value of each node is the same as each other node by transferring one `combinedsig` value on one node to all other nodes
- On at least one node execute the [verify](../customconsensus/musig.html#verify) method
  - Use the returned output to verify that the `combinedsig` value will be able to successfully execute the `spend` method for the desired `msg`
- On one node execute the [spend](../customconsensus/musig.html#spend) method and broadcast the returned raw transaction

## Musig Tutorial Availability

The Antara Tutorials section features a full installation and walkthrough tutorial of the Musig module.

[<b>Link to Musig Module Tutorial</b>](../../../basic-docs/antara/antara-tutorials/musig-module-tutorial.md)

## calcmsg

**cclib calcmsg 18 '["sendtxid", "scriptPubKey"]'**

The `calcmsg` method can be used by any one of the signers to initiate a `spend` transaction.

To calculate the `msg` value, this method requires a `sendtxid` and a `scriptPubKey`.

- The `sendtxid` is the id of a transaction that added funds to the `combined_pk` through the [send](../customconsensus/musig.html#send) method.
- The `scriptPubKey` expected here is of the type [p2pk](http://learnmeabitcoin.com/glossary/p2pk) in `hex` form.

To create a `scriptPubkey` from a normal `pubkey`, add the characters `21` to the beginning of the `pubkey` string and the characters `ac` to the end of the string:

```bash
scriptPubkey = 21 + pubkey + ac
```

For example:

- The `pubkey` is: `02f7597468703c1c5c8465dd6d43acaae697df9df30bed21494d193412a1ea193e`
- The associated `scriptPubkey` is: `2102f7597468703c1c5c8465dd6d43acaae697df9df30bed21494d193412a1ea193eac`

Usage of this method depends on the [cclib](../komodo-api/cclib.html#cclib) method. The `EVALCODE` is `18`.

#### Arguments

| Name         | Type     | Description                                                                                                                                                                                                   |
| ------------ | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| sendtxid     | (string) | the transaction id of the transaction created by the [send](../customconsensus/musig.html#send) method that was executed to fund the MuSig address; only the funds in the `vout0` of the `sendtxid` are spent |
| scriptPubKey | (string) | a modified form of a pubkey; this is the pubkey that will receive the spent funds                                                                                                                             |

#### Response

| Name   | Type     | Description                                                                                                              |
| ------ | -------- | ------------------------------------------------------------------------------------------------------------------------ |
| msg    | (string) | the message that must be signed by all the signers for the final [spend](../customconsensus/musig.html#spend) to succeed |
| result | (string) | whether the call executed successfully                                                                                   |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=MUSIG  cclib calcmsg 18 '["09daa45cb6e17028f9568347291a993cbf29c152a527b53e9ac0925d4900c293","210225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270aac"]'
```

<collapse-text hidden title="Response">

```json
{
  "msg": "3ef43614242afd3c57e02a75a3bc99342fea7c731f6190b791c0f99826789603",
  "result": "success"
}
```

</collapse-text>

## combine

**cclib combine 18 '[ "pubkey1", "pubkey2", .....]'**

The `combine` method produces the combined pubkey ( `combined_pk` ) from all pubkeys provided.

Usage of this method depends upon the [cclib](../komodo-api/cclib.html#cclib) method. The `EVALCODE` is `18`.

#### Arguments

| Name                   | Type     | Description                                         |
| ---------------------- | -------- | --------------------------------------------------- |
| pubkey1, pubkey2, .... | (string) | the pubkeys of all the signers of the MuSig address |

#### Response

| Name        | Type     | Description                                  |
| ----------- | -------- | -------------------------------------------- |
| pkhash      | (string) | the 32-byte hash of the original public keys |
| combined_pk | (string) | the combined pubkey of all the signers       |
| result      | (string) | whether the call executed successfully       |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib combine 18 '["0225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270a","02d3431950c2f0f9654217b6ce3d44468d3a9ca7255741767fdeee7c5ec6b47567"]'
```

<collapse-text hidden title="Response">

```json
{
  "pkhash": "8897e150bfb07d3f967ffadb4b0f3c84ea73a94c0d715c4b7e6d9c816c5113a9",
  "combined_pk": "03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a",
  "result": "success"
}
```

</collapse-text>

## commit

**cclib commit 18 '["pkhash", ind, "commitment"]'**

The `commit` method produces a `nonce` for each set of `index` and `commitment` values provided.

The returned `nonce` must be shared with all corresponding nodes.

Usage of this method depends on the [cclib](../komodo-api/cclib.html#cclib) method. The `EVALCODE` is `18`.

#### Arguments

| Name       | Type             | Description                                                                             |
| ---------- | ---------------- | --------------------------------------------------------------------------------------- |
| pkhash     | (string)         | the 32-byte hash of the original public keys                                            |
| ind        | (decimal number) | the index of the node, whose `commitment` is being added to the `global data structure` |
| commitment | (string)         | the `commitment` value produced by the node with index `ind`                            |

#### Response

| Name        | Type             | Description                                                             |
| ----------- | ---------------- | ----------------------------------------------------------------------- |
| added_index | (decimal number) | the index of the node whose `commitment` is added                       |
| myind       | (decimal number) | the index of the node on which this method is executed                  |
| nonce       | (string)         | the `nonce` value produced by the node on which this method is executed |
| result      | (string)         | whether the call executed successfully                                  |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib commit 18 '["8897e150bfb07d3f967ffadb4b0f3c84ea73a94c0d715c4b7e6d9c816c5113a9",1,"2854473733147ebdbf2fb70b956c8086c9d7659ca0093627fe0371098f8bc003"]'
```

<collapse-text hidden title="Response">

```json
{
  "added_index": 1,
  "myind": 0,
  "nonce": "0379f6f42cf4c2cb30d064a6cac22ab6ffb3d93388d49b07f0623ff9bc8d191f89",
  "result": "success"
}
```

</collapse-text>

## nonce

**cclib nonce 18 '["pkhash", ind, "nonce"]'**

The `nonce` method produces a `partialsig` for each set of `index` and `nonce` value provided.

The returned `partialsig` must be shared with all corresponding nodes.

Usage of this method depends on the [cclib](../komodo-api/cclib.html#cclib) method. The `EVALCODE` is `18`.

#### Arguments

| Name   | Type             | Description                                                                        |
| ------ | ---------------- | ---------------------------------------------------------------------------------- |
| pkhash | (string)         | the 32-byte hash of the original public keys                                       |
| ind    | (decimal number) | the index of the node, whose `nonce` is being added to the `global data structure` |
| nonce  | (string)         | the `nonce` value produced by the node with index `ind`                            |

#### Response

| Name        | Type             | Description                                                                  |
| ----------- | ---------------- | ---------------------------------------------------------------------------- |
| added_index | (decimal number) | the index of the node whose `nonce` is added                                 |
| myind       | (decimal number) | the index of the node on which this method is executed                       |
| partialsig  | (string)         | the `partialsig` value produced by the node on which this method is executed |
| result      | (string)         | whether the call executed successfully                                       |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib nonce 18 '["8897e150bfb07d3f967ffadb4b0f3c84ea73a94c0d715c4b7e6d9c816c5113a9",1,"02402fe26abd7ed2cf22d872a6b22ced4309aac8ec273b9c89e0f8f5b77f1574db"]'
```

<collapse-text hidden title="Response">

```json
{
  "added_index": 1,
  "myind": 0,
  "partialsig": "dc913a9e7532c8edf2f822f482afdcf48c61919bf905fb77f6684a2d7e58d972",
  "result": "success"
}
```

</collapse-text>

## partialsig

**cclib partialsig 18 '["pkhash", ind, "partialsig"]'**

The `partialsig` method produces a `combinedsig` for each set of `index` and `nonce` values provided.

The returned `combinedsig` must be shared with all corresponding nodes.

Usage of this method depends on the [cclib](../komodo-api/cclib.html#cclib) method. The `EVALCODE` is `18`.

#### Arguments

| Name       | Type             | Description                                                                           |
| ---------- | ---------------- | ------------------------------------------------------------------------------------- |
| pkhash     | (string)         | the 32-byte hash of the original public keys                                          |
| ind        | (decimal number) | the index of the node, whose `partialsig` is now added to the `global data structure` |
| partialsig | (string)         | the `partialsig` value produced by the node with index `ind`                          |

#### Response

| Name        | Type             | Description                                                                   |
| ----------- | ---------------- | ----------------------------------------------------------------------------- |
| added_index | (decimal number) | the index of the node whose `partialsig` is added                             |
| myind       | (decimal number) | the index of the node on which this method is executed                        |
| combinedsig | (string)         | the `combinedsig` value produced by the node on which this method is executed |
| result      | (string)         | whether the call executed successfully                                        |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib partialsig 18 '["8897e150bfb07d3f967ffadb4b0f3c84ea73a94c0d715c4b7e6d9c816c5113a9",1,"9e964dfd402f973ea1e9407e19918b1c3897ff6544d60dcdb19cfb0e5bc4c0c1"]'
```

<collapse-text hidden title="Response">

```json
{
  "added_index": 1,
  "result": "success",
  "combinedsig": "4b3a9b2b162802bc6c2cca2d22e70ab1cf738a9d4f5692f4f881d0cce0319c137b27889bb562602c94e163729c4168120a4ab41a8e936909e832e6af09e758f2"
}
```

</collapse-text>

## send

**cclib send 18 '["combined_pk", amount]'**

The `send` method allows any node on the network to fund the `combined_pk` with the specified `amount` .

The returned transaction id is called the `sendtxid`. It is used as a parameter for the methods [calcmsg](../customconsensus/musig.html#calcmsg) and [spend.](../customconsensus/musig.html#spend)

Usage of this method depends upon the [cclib](../komodo-api/cclib.html#cclib) method. The `EVALCODE` is `18`.

#### Arguments

| Name        | Type     | Description                                         |
| ----------- | -------- | --------------------------------------------------- |
| combined_pk | (string) | the combined pubkey of all the signers              |
| amount      | (number) | the amount of coins to be sent to the `combined_pk` |

#### Response

| Name   | Type     | Description                                                             |
| ------ | -------- | ----------------------------------------------------------------------- |
| hex    | (string) | the send_transaction in raw-transaction format, provided in hexadecimal |
| txid   | (string) | the transaction id of the send transaction                              |
| result | (string) | whether the call executed successfully                                  |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=MUSIG  cclib send 18 '["03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a",1]'
```

<collapse-text hidden title="Response">

```json
{
  "hex": "0400008085202f890b02b1bdd8707f82bc6f4cdeb4756eb04dfc3cc7a4b5ac38a388c0205cf8f31a0e0000000048473044022004de31b5132f03f761fc0d0d9761efbf77bb27b07ee99f2cc54928e2150f1f16022069381b36bb9839cc9cb3e1d584e00dbd52efadf7e2f3fa092e0bcca839cdce6801ffffffff04949d5bf1722c5df04f58cf2c7e662f32ab65de2f7990ce4c734df4f2991eb60000000049483045022100ab3ab2bb95ef095763dd3eeb56961d1234aa25efd91a30fa14e397717368e6a0022048d7f8268463cfb44f34467bd77eb2aee962eaec09a079741c75c5de898b4f6c01ffffffff0476a06188887bf93bec4e64a3a5681b5e271cb7055a11d0667dc565e498b6190000000048473044022022ef03c33b5942b1af16f7e4a9acd2aa485d73f6f6b5e0a01e15f70238cd85cd022063779c69511ee4eba179b40ce28d80da22d43f19110be2a9a97d0b47d6a5cca201ffffffff045587699381853735482dbfb1fe25dda8d5a7a238c05b872ecfcd97be38232f00000000484730440220051e6047dd9e82b004c29a2837bf127f94caa638c65d96c761371c18ff36170002204e73ddfbbe748f295d7a93e46d942618f291d302b7a666b78b49ab38594a89ac01ffffffff0426d8098ed0c5ee19ac8d4254ec9887ab7a231c68a8d9b024a50f417f0a94ff0000000049483045022100ebd193262a04f8c9cf1872527d2a7d4933222f8ce8ea11add90e263c483ca56a02204a29902ae6b31dc41f84b5ffad3b2076755ad19f25be47479704b2ab5e37463a01ffffffff040e294b76ca4492909b75b829566b3702b35245595e8c4806b7ef6a7f612dd6000000004847304402201573d230af50aa6d326b607ac6ba77bb15c1a143256e5141197ce6729195b0e602201301be6ad22ba5599597205cdfb7e2cf6823ce4597e5b902b6d4336958e0fbe101ffffffff03d9a453070627c94d940f57b40829713ee6b6bce4d801e591117c801221225900000000494830450221009d5eec551265274ade816fdb3a0dfee20e716a7d3f56155b698a9d0c41ccd11202202e811c4611ebf982b34db8a43002c759c54a077023ced1498421c4af2b12a0f901ffffffff03ce7cb872bdfdf264576c45ed899c00731959051cade1a19b088eabc02e07780000000049483045022100a9c8c795e34a393fafb839ef4bbf11e4adf04b4c8a8493ef0bd2353e7a1ddd430220251ff7eb5ca3d2ed4ee4145906532af803caaed756ff3d21e86ac4876333067e01ffffffff030d66186013342f71335bc67d0d87240b4a27809e67ba55e01dd72e7ae1b0af0000000049483045022100d4c82867562aa040a7695ffd53056018e0dc3a071d971b3774cdb8511b0f49aa022029b72c5af1b9c16e27d81827d478910ec3135415037cf2b3492922ff618538bc01ffffffff02f9b92abfa0324272e0ce465b856e6d9b53e3e2e0828934c8a0c8c2c10e67d5000000004847304402205df4c99c581bfe95ea95740320b16c423531663b42e25b97315d3126250c24a202206dff5da29fbb0fe21ae6ce3da7bac1e502feb8fdd7b803c0fafa6541e80ec0ff01ffffffff02bd8679e8383e6d9c4a10917b68b8918ed3f518fe2deef5b23e0012461fbf370000000049483045022100a04210427173ea0721f3cf859b99328c8e234ba39250c033aebfb37fb2c5a1d502200d5cb16ed0dccc5dfc0385a8763340cf98a162e863994069354a5fee187b8bd401ffffffff031008f60500000000302ea22c8020c71ddb3aac7f9b9e4bdacf032aaa8b8e4433c4ff9f8a43cebb9c1f5da96928a48103120c008203000401cc604898000000000023210225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270aac0000000000000000266a2412782103d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a000000003f0800000000000000000000000000",
  "txid": "09daa45cb6e17028f9568347291a993cbf29c152a527b53e9ac0925d4900c293",
  "result": "success"
}
```

</collapse-text>

## session

**cclib session 18 '["myindex", "numsigners", "combined_pk", "pkhash", "msg"]'**

The `session` method creates a `global data structure` on each node on which the method is executed. The method also adds a `commitment` to sign the `msg` message provided.

Usage of this method depends on the [cclib](../komodo-api/cclib.html#cclib) method. The `EVALCODE` is `18`.

#### Arguments

| Name        | Type             | Description                                                                                                                                    |
| ----------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- |
| myindex     | (decimal number) | the index of the node that is running this method; each node must be assigned a unique index from the set: {0,1,2,3, ... , (`numsigners` - 1)} |
| numsigners  | (decimal number) | the total number of signers participating                                                                                                      |
| combined_pk | (string)         | the combined pubkey of all the signers                                                                                                         |
| pkhash      | (string)         | the 32-byte hash of the original public keys                                                                                                   |
| msg         | (string)         | the message that needs to be signed by all the signers for the final [spend](../customconsensus/musig.html#spend) to succeed                   |

#### Response

| Name       | Type             | Description                                                              |
| ---------- | ---------------- | ------------------------------------------------------------------------ |
| myind      | (decimal number) | the index of the node on which this method is executed                   |
| numsigners | (decimal number) | the total number of signers participating                                |
| commitment | (string)         | the `commitment` value produced by the node for this `msg` and `session` |
| result     | (string)         | whether the call executed successfully                                   |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib session 18 '[0,2,"03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a","8897e150bfb07d3f967ffadb4b0f3c84ea73a94c0d715c4b7e6d9c816c5113a9","3ef43614242afd3c57e02a75a3bc99342fea7c731f6190b791c0f99826789603"]'
```

<collapse-text hidden title="Response">

```json
{
  "myind": 0,
  "numsigners": 2,
  "commitment": "a886a3a3c57efec161f6f72554b66f837de89ffdabe0acc46ae4cd59aab8129e",
  "result": "success"
}
```

</collapse-text>

## spend

**cclib spend 18 '["sendtxid", "combinedsig", "scriptPubKey"]'**

The `spend` method spends coins to the indicated `scriptPubKey`.

The `scriptPubKey` expected here is of the type [p2pk](http://learnmeabitcoin.com/glossary/p2pk) in `hex` form.

To create a `scriptPubkey` from a normal `pubkey`, add the characters `21` to the beginning of the `pubkey` string and the characters `ac` to the end of the string:

```bash
scriptPubkey = 21 + pubkey + ac
```

For example:

- The `pubkey` is: `02f7597468703c1c5c8465dd6d43acaae697df9df30bed21494d193412a1ea193e`
- The associated `scriptPubkey` is: `2102f7597468703c1c5c8465dd6d43acaae697df9df30bed21494d193412a1ea193eac`

The method generates a raw transaction which must then be broadcast using [sendrawtransaction.](../komodo-api/rawtransactions.html#sendrawtransaction)

Usage of this method depends on the [cclib](../komodo-api/cclib.html#cclib) method. The `EVALCODE` is `18`.

#### Arguments

| Name         | Type     | Description                                                                                                                                                                                      |
| ------------ | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| sendtxid     | (string) | the transaction id of the transaction created by the [send](../customconsensus/musig.html#send) method used to fund the MuSig address; only the funds in the `vout0` of the `sendtxid` are spent |
| combinedsig  | (string) | the combined signature produced by all the signers                                                                                                                                               |
| scriptPubKey | (string) | a modified form of a pubkey to which funds are to be spent                                                                                                                                       |

#### Response

| Name        | Type     | Description                                                                                                                  |
| ----------- | -------- | ---------------------------------------------------------------------------------------------------------------------------- |
| msg         | (string) | the message that needs to be signed by all the signers for the final [spend](../customconsensus/musig.html#spend) to succeed |
| combined_pk | (string) | the combined pubkey of all the signers                                                                                       |
| combinedsig | (string) | the combined signature produced by all the signers                                                                           |
| hex         | (string) | the `spend` transaction in raw-transaction format, provided in hexadecimal                                                   |
| txid        | (string) | the transaction id of the spend transaction                                                                                  |
| result      | (string) | whether the call executed successfully                                                                                       |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib spend 18 '["09daa45cb6e17028f9568347291a993cbf29c152a527b53e9ac0925d4900c293","210225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270aac","4b3a9b2b162802bc6c2cca2d22e70ab1cf738a9d4f5692f4f881d0cce0319c137b27889bb562602c94e163729c4168120a4ab41a8e936909e832e6af09e758f2"]'
```

<collapse-text hidden title="Response">

```json
{
  "msg": "3ef43614242afd3c57e02a75a3bc99342fea7c731f6190b791c0f99826789603",
  "combined_pk": "03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a",
  "combinedsig": "4b3a9b2b162802bc6c2cca2d22e70ab1cf738a9d4f5692f4f881d0cce0319c137b27889bb562602c94e163729c4168120a4ab41a8e936909e832e6af09e758f2",
  "hex": "0400008085202f890193c200495d92c09a3eb527a552c129bf3c991a29478356f92870e1b65ca4da09000000007b4c79a276a072a26ba067a5658021032d29d6545a2aafad795d9cf50912ecade549137163934dfb2895ebc0e211ce8a8140878ae4c7520e729e74339e1d463d8aabc1e63c0f726c868adcf7ceab268ef62870596c7c87bdd9382bd364749662ffc79e6ee094a155678b7c2127480960b631a100af03800112a10001ffffffff0200e1f5050000000023210225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270aac0000000000000000686a4c6512792103d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a404b3a9b2b162802bc6c2cca2d22e70ab1cf738a9d4f5692f4f881d0cce0319c137b27889bb562602c94e163729c4168120a4ab41a8e936909e832e6af09e758f200000000460800000000000000000000000000",
  "txid": "332373cd0e4cbdddd3916e827a408ba4a175eb5039cc5a43725a50b83cb74e52",
  "result": "success"
}
```

</collapse-text>

## verify

**cclib verify 18 '["msg", "combined_pk", "combinedsig"]'**

The `verify` method verifies that the `combinedsig` is able to spend the funds owned by `combined_pk`. The funds in question are those which were referenced in the creation of the `msg` value.

Usage of this method depends on the [cclib](../komodo-api/cclib.html#cclib) method. The `EVALCODE` is `18`.

#### Arguments

| Name        | Type     | Description                                                                                                                  |
| ----------- | -------- | ---------------------------------------------------------------------------------------------------------------------------- |
| msg         | (string) | the message that needs to be signed by all the signers for the final [spend](../customconsensus/musig.html#spend) to succeed |
| combined_pk | (string) | the combined pubkey of all the signers                                                                                       |
| combinedsig | (string) | the `combinedsig` value produced by the node on which this method is executed                                                |

#### Response

| Name        | Type     | Description                                                                                                                  |
| ----------- | -------- | ---------------------------------------------------------------------------------------------------------------------------- |
| msg         | (string) | the message that needs to be signed by all the signers for the final [spend](../customconsensus/musig.html#spend) to succeed |
| combinedsig | (string) | the `combinedsig` value produced by the node on which this method is executed                                                |
| combined_pk | (string) | the combined pubkey of all the signers                                                                                       |
| result      | (string) | whether the call executed successfully                                                                                       |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib verify 18 '["3ef43614242afd3c57e02a75a3bc99342fea7c731f6190b791c0f99826789603","03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a","4b3a9b2b162802bc6c2cca2d22e70ab1cf738a9d4f5692f4f881d0cce0319c137b27889bb562602c94e163729c4168120a4ab41a8e936909e832e6af09e758f2"]'
```

<collapse-text hidden title="Response">

```json
{
  "msg": "3ef43614242afd3c57e02a75a3bc99342fea7c731f6190b791c0f99826789603",
  "combined_pk": "03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a",
  "combinedsig": "4b3a9b2b162802bc6c2cca2d22e70ab1cf738a9d4f5692f4f881d0cce0319c137b27889bb562602c94e163729c4168120a4ab41a8e936909e832e6af09e758f2",
  "result": "success"
}
```

</collapse-text>


# Oracles

## Introduction

The Oracles Fluidity module allows a user to make off-chain data available on-chain. This enables developers to create and use software that responds to off-chain information and events.

Those who publish data to an oracle are called publishers. There is a fee-based model to serve as an incentive for publishers.

### Oracles Module Flow

- Create an Oracle using [oraclescreate](../customconsensus/oracles.html#oraclescreate)
- Register as a data publisher for the oracle using the [oraclesregister](../customconsensus/oracles.html#oraclesregister) method; at this stage, the publisher indicates the fee for their data updates
  - Anyone can register as a publisher for any oracle; users subscribe only to the publishers they desire
- The [oracleslist](../customconsensus/oracles.html#oraclelist), [oraclesinfo](../customconsensus/oracles.html#oraclesinfo), and [oraclessamples](../customconsensus/oracles.html#oraclessamples) methods allow the user to find oracles and publishers, find more information about a specific oracle and publisher, and discover samples of an existing publisher, respectively
- Anyone can subscribe to any specific publisher of any oracle using the [oraclessubscribe](../customconsensus/oracles.html#oraclessubscribe) method
- A publisher can publish data using [oraclesdata](../customconsensus/oracles.html#oraclesdata), and thereby collect their fee from their subscribers

## oraclelist

**oracleslist**

The `oraclelist` method lists all available oracle contracts on the Smart Chain.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |

### Response

| Name       | Type               | Description                          |
| ---------- | ------------------ | ------------------------------------ |
| oracletxid | (array of strings) | the unique identifying oracletxid(s) |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD oracleslist
```

<collapse-text hidden title="Response">

```bash
[
    "66fa795f43534e4d6b038c172172a7c46a3cf37b1628e075e38e94a20cfeae5a",
    "79d02351968e6616f3044cb14523d8d2cbdbd1a8b7b75bd14b1aa80ad41a5845",
    "665b893bdb801f77fd6620969371f8fc391df568150f0a671c1c23e67a0cf039",
    "0fa3c6e12ee4be636f44ce4b2af3b0f213d0403dc46cd42add07816526dd46b2",
    "b24a00e2a895baad4c0246ba5b3d36790b43cc0fb5a4c4ea98161299165a8c96",
    "8790ee741042eedce012a46483143e277851754300da7b7171ce46d63d51b3d3",
    "1ba8f3f9e98cbb41af8cb0bf3a6c1953ea5a89bd44455b8e9078f2216e9ed0fc",
    "2353e77dd3ad18bed4ea053055234424ba7c05fb04f97a323859d0445b64ad33",
    "a594a239f29d0df2f27eda05186ac7fdb26302f8268106a04edfde0c1a03b5e8",
    "4dfd22a3a56b274054cc651c70dc0b35778a3eb12ba025598f4510669b8e88c8",
    "0ae8cf1b008f7c652c1e85aa45832aac8dc62cfd8d73105800f4e3603d4cc15f",
    "7eaa75392e3b634ebf9eb4a67455dedeb503cdd235c932ec49559906394d89c5",
    "59e44ee58435f01dbbadd1ac54f7e6d5e1323c52561e3ab656555b099886217f",
    "e953e88d3f1713aed28510d9bff85e3a09cc96107f1122f1f244273ab1196ca6",
    "128e6c6fa4cde1be654da5f006caf341415e0d19300f7c33578d7f5242bdf033",
    "104f701ccd6cd78b347d68a461bc45031e56cbdbdd895662e3fbc48c8335feb0",
    "161bdf47cc246a4b725676c4c3d08a685ccca8edba11edfbd9c90205bc555212",
    "4a32675232ff020c0ef868ff167ae17754823899bee7b5e96fac210c7030573f",
    "57600b613c7355e768323c7197910ca45ed713b14ed4fdf01a5181bfa1d55753",
    "9755eede3831f003bc1425bdfa9f7f889befd6b8ce7028b17f50c30b0d8088d1",
    "8ed3b092677aec71169a7a11fdfbfe0a855e8120af0ae1ea2d97eb7cfd29835e",
    "03d9e6b199173935c57ebffee93fa1ac91b809e268f50610f31fa14253f7f7bc",
    "0803edf92f40541cf988c2ca1e0bfee6902a5ccf60bbf90bed51cff8a4f91489",
    "482be3ce8bf8607bd501a5aed3018770420a9f6dc48ee21fe423b09d5fe19f16",
    "65fe29870b7ea766365b7c55881f4246ab8d84cba865f3bffa9c1f1e92f97113",
    "8a0810bba8fdf8e0fe20d07ea618bc4810657d1b5aafdc7362b67be1aebf1cf3",
    "0df7c4d844f08dba08abd4bb174558739f17cfe268feb005fb6333b3761d9203"
]
```

</collapse-text>

## oraclesaddress

**oraclesaddress (pubkey)**

The `oraclesaddress` method displays the oracle address for a specific pubkey.

### Arguments

| Name   | Type               | Description                                                                            |
| ------ | ------------------ | -------------------------------------------------------------------------------------- |
| pubkey | (string, optional) | the pubkey of the requested info; by default it is the pubkey used to launch the chain |

### Response

| Name | Type | Description |
| ---------------- | -------- | -------------------------------------------------------------------------------------------------------------------- |
| result           | (string) | whether the method executed successfully                                                                             |
| OraclesCCaddress | (string) | taking the module's EVAL code as a modifier, this is the public address that corresponds to the contract's privkey |
| Oraclesmarker    | (string) | the unmodified public address generated from the contract's privkey                                                  |
| GatewaysPubkey   | (string) | the pubkey for the gateways cc                                                                                       |
| OraclesCCassets  | (string) | this property is used for development purposes only and can otherwise be ignored                                     |
| CCaddress        | (string) | taking the module's EVAL code as a modifier, this is the Fluidity address from the pubkey of the user                    |
| myCCaddress      | (string) | taking the module's EVAL code as a modifier, this is the Fluidity address from the pubkey of the user                    |
| myaddress        | (string) | the public address of the pubkey used to launch the chain                                                            |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD oraclesaddress 03810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "OraclesCCaddress": "REt2C4ZMnX8YYX1DRpffNA4hECZTFm39e3",
  "Oraclesmarker": "RHkFKzn1csxA3fWzAsxsLWohoCgBbirXb5",
  "GatewaysPubkey": "03ea9c062b9652d8eff34879b504eda0717895d27597aaeb60347d65eed96ccb40",
  "OraclesCCassets": "RLh5sgvh3scCyM4aq1fhYhwgfbmb5SpCkT",
  "CCaddress": "RTk2Tgp1iAcxxSeuXYDREmtfydMvNkCmq8",
  "myCCaddress": "RTk2Tgp1iAcxxSeuXYDREmtfydMvNkCmq8",
  "myaddress": "RVXhz5UCJfSRoTfa4zvBFBrpDBbqMM21He"
}
```

</collapse-text>

## oraclescreate

**oraclescreate name description format**

The `oraclescreate` method creates a new oracle.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

### Arguments

| Name        | Type     | Description                                                                                                                      |
| ----------- | -------- | -------------------------------------------------------------------------------------------------------------------------------- |
| name        | (string) | the desired name of the oracle contract                                                                                          |
| description | (string) | the description of the oracle                                                                                                    |
| format      | (string) | an indication of what format of data is accepted into this contract; use the list of characters provided below for this property |

The various formats of data that can be registered for an oracle and their symbols are as follows:

- `s` -> `char string; size < 256 bytes`
- `S` -> `char string; size < 65536 bytes`
- `d` -> `binary data; size < 256 bytes`
- `D` -> `binary data; size < 65536 bytes`
- `c` -> `1 byte signed little endian number, 'C' if unsigned`
- `t` -> `2 byte signed little endian number, 'T' if unsigned`
- `i` -> `4 byte signed little endian number, 'I' if unsigned`
- `l` -> `8 byte signed little endian number, 'L' if unsigned`
- `h` -> `32 byte hash`

::: warning

- Even though the formats `S` and `D` specify that the data size can be up to `65536` bytes, the combination of the transaction size and the data size cannot exceed the limit of `10000` bytes.
- Although the formats `d` and `D` are for raw binary data, they are preferable to the `s` and `S` human-readable formats. This is because the `s` and `S` formats occupy twice the size of data on the blockchain, and yet their only advantage is their ability to show human-readable output in the [oraclessamples](../customconsensus/oracles.html#oraclessamples) method.

:::

::: tip
If data to be submitted is larger than `8KB`, break it into chunks of size `8KB` or lower.
:::

### Response

| Name   | Type     | Description                                                                                          |
| ------ | -------- | ---------------------------------------------------------------------------------------------------- |
| result | (string) | whether the command succeeded                                                                        |
| hex    | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1: Create a customized oracle contract and get the hex value

```bash
./komodo-cli -ac_name=HELLOWORLD oraclescreate "NYWTHR" "Weather in NYC" "L"
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "010000000185b76ed0fbdb9ee2bdb5693f491b6ea23de6498f42c6e83f9f36c1eaf411dd990200000049483045022100aa198a2ae959ee191e1359df48867480bf5a1a5bd4fa76b4398481c89ff3095102205034824dcd56b312183acd65c27a002a13dae84f5d22c767f1efaae09ef63a5c01ffffffff0310270000000000002321038c1d42db6a45a57eccb8981b078fb7857b9b496293fe299d2b8d120ac5b5691aac378740a804000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000001c6a1aec43064e5957544852014c0e5765617468657220696e204e594300000000"
}
```

</collapse-text>

Step 2: Send raw transaction / broadcast the hex value

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000185b76ed0fbdb9ee2bdb5693f491b6ea23de6498f42c6e83f9f36c1eaf411dd990200000049483045022100aa198a2ae959ee191e1359df48867480bf5a1a5bd4fa76b4398481c89ff3095102205034824dcd56b312183acd65c27a002a13dae84f5d22c767f1efaae09ef63a5c01ffffffff0310270000000000002321038c1d42db6a45a57eccb8981b078fb7857b9b496293fe299d2b8d120ac5b5691aac378740a804000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000001c6a1aec43064e5957544852014c0e5765617468657220696e204e594300000000
# This will output an unique txid which will be refered as oracletxid or transaction ID of the oracle.
```

<collapse-text hidden title="Response">

```bash
0df7c4d844f08dba08abd4bb174558739f17cfe268feb005fb6333b3761d9203
```

</collapse-text>

(Use `./komodo-cli -ac_name=HELLOWORLD getrawmempool` to ensure that the transaction receives confirmation.)

Step 3: Decode raw transaction (optional to check if the values are sane)

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 010000000185b76ed0fbdb9ee2bdb5693f491b6ea23de6498f42c6e83f9f36c1eaf411dd990200000049483045022100aa198a2ae959ee191e1359df48867480bf5a1a5bd4fa76b4398481c89ff3095102205034824dcd56b312183acd65c27a002a13dae84f5d22c767f1efaae09ef63a5c01ffffffff0310270000000000002321038c1d42db6a45a57eccb8981b078fb7857b9b496293fe299d2b8d120ac5b5691aac378740a804000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000001c6a1aec43064e5957544852014c0e5765617468657220696e204e594300000000
```

<collapse-text hidden title="Response">

```json
{
  "txid": "0df7c4d844f08dba08abd4bb174558739f17cfe268feb005fb6333b3761d9203",
  "size": 249,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "99dd11f4eac1369f3fe8c6428f49e63da26e1b493f69b5bde29edbfbd06eb785",
      "vout": 2,
      "scriptSig": {
        "asm": "3045022100aa198a2ae959ee191e1359df48867480bf5a1a5bd4fa76b4398481c89ff3095102205034824dcd56b312183acd65c27a002a13dae84f5d22c767f1efaae09ef63a5c01",
        "hex": "483045022100aa198a2ae959ee191e1359df48867480bf5a1a5bd4fa76b4398481c89ff3095102205034824dcd56b312183acd65c27a002a13dae84f5d22c767f1efaae09ef63a5c01"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 0.0001,
      "valueSat": 10000,
      "n": 0,
      "scriptPubKey": {
        "asm": "038c1d42db6a45a57eccb8981b078fb7857b9b496293fe299d2b8d120ac5b5691a OP_CHECKSIG",
        "hex": "21038c1d42db6a45a57eccb8981b078fb7857b9b496293fe299d2b8d120ac5b5691aac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RHkFKzn1csxA3fWzAsxsLWohoCgBbirXb5"]
      }
    },
    {
      "value": 200.02670391,
      "valueSat": 20002670391,
      "n": 1,
      "scriptPubKey": {
        "asm": "03810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5 OP_CHECKSIG",
        "hex": "2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RVXhz5UCJfSRoTfa4zvBFBrpDBbqMM21He"]
      }
    },
    {
      "value": 0.0,
      "valueSat": 0,
      "n": 2,
      "scriptPubKey": {
        "asm": "OP_RETURN ec43064e5957544852014c0e5765617468657220696e204e5943",
        "hex": "6a1aec43064e5957544852014c0e5765617468657220696e204e5943",
        "type": "nulldata"
      }
    }
  ],
  "vjoinsplit": []
}
```

</collapse-text>

## oraclesdata

**oraclesdata oracletxid hexstr**

The `oraclesdata` method publishes data to an oracle.

A publisher cannot successfully execute this command until they have at least one subscriber. A publisher may create their own subscriber account for this purpose. See [oraclessubscribe.](../customconsensus/oracles.html#oraclessubscribe)

Data is submitted using the `hexstr` property. The first bytes of the `hexstr` property must be the length of the data being submitted in hexadecimal format; this sets the string length for the rest of the data. The second portion of the `hexstr` property is the data itself.

The `oraclesdata` method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

The `sendrawtransaction` method outputs a unique `txid`, called `oraclesdatatxid`, which is the unique identifier for this data sample.

The following script converts data entered in a normal-text form to a format accepted by an Oracle with the following characteristics. The oracle is of type: `S`, and the first two bytes of data are the length, given in **Little Endian** format.

<collapse-text hidden title="Script">

```python
#!/usr/bin/env python3
import sys
import codecs
import time
import readline


while True:
    message = input("Type message: ")
    #convert message to hex
    rawhex = codecs.encode(message).hex()

    #get length in bytes of hex in decimal
    bytelen = int(len(rawhex) / int(2))
    hexlen = format(bytelen, 'x')

    #get length in big endian hex
    if bytelen < 16:
        bigend = "000" + str(hexlen)
    elif bytelen < 256:
        bigend = "00" + str(hexlen)
    elif bytelen < 4096:
        bigend = "0" + str(hexlen)
    elif bytelen < 65536:
        bigend = str(hexlen)
    else:
        print("message too large, must be less than 65536 characters")
        continue

    #convert big endian length to little endian, append rawhex to little endian length
    lilend = bigend[2] + bigend[3] + bigend[0] + bigend[1]
    fullhex = lilend + rawhex

    print(fullhex)
```

</collapse-text>

::: tip Note

- for submitting data of the types `s` and `d`, where the size is less than 256 bytes, the first byte denotes the length
- for submitting data of the types `S` and `D`, where the size is less than 65536 bytes, the first two bytes denotes the length in **Little Endian** format

:::

#### :pushpin: Examples for data submission

##### Example A

- The objective: to submit a `10` character string, `"teststring"`, to an oracle of the format `s`
- The data to meet this objective is as follows: `0a74657374737472696e67`
  - Notice the first byte, `0a`
    - This is the hexadecimal representation of the decimal number `10`
    - `10` is the byte size of this `10` character string, because each character requires `1 byte` of space
  - Notice the remaining bytes, `74657374737472696e67`
    - Each two characters is a byte representing a character
    - `74` = `t`
    - `65` = `e`
    - `73` = `s`
    - `74` = `t` etc.

##### Example B

- The objective: to submit the `10` character string, `"teststring"`, to an oracle of the format `S`
- The data to meet this objective is as follows: `0a0074657374737472696e67`
  - Notice the first two bytes, `0a` and `00`
  - These are the hexadecimal representations of the decimal number `10`, written to fill `2 bytes` and in **Little Endian** format
  - The remaining data, `74657374737472696e67`, is the same as Example A

### Arguments

| Name       | Type     | Description                                                                                                                                                   |
| ---------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| oracletxid | (string) | the unique identifying transaction id of the oracle                                                                                                           |
| hexstring  | (string) | the first half of the string indicates the length of the string in bytes, the second half of the string is the data, typically provided in hex-encoded format |

### Response

| Name   | Type     | Description                                                                                          |
| ------ | -------- | ---------------------------------------------------------------------------------------------------- |
| result | (string) | whether the command succeeded                                                                        |
| hex    | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1: Subscribe to a oracle plan and get the hex value

```bash
./komodo-cli -ac_name=HELLOWORLD oraclesdata 0df7c4d844f08dba08abd4bb174558739f17cfe268feb005fb6333b3761d9203 00000000ffffffff
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "010000000359db76b9b8e9cfaa4514dcc198c375f910b9fb7367d1c9d556cd5eb43b5f4d2d02000000484730440220645b49d6d85454b1015d82a53ec51685fc3b8bf1d092696c3c253b88cab3033a02207023511219897a374ad94951dd2af70b14d99eccbb404eaf783120f3170bd5e301ffffffff75a5881417ab6700c089a6083d71abadc8cd74018bded0cfba423e027d513c8f010000007b4c79a276a072a26ba067a5658021035933ab0bd2e2ceb712e7cab393a8c9096ba4be2e3a76f5aaeab72bce4aa61857814047697a246e4442888a3b6ffc4a8c5ae940eec7d19f72053a07b6d8a2968a260626c8001c9138e9fd0e3cfabb811ae71bd8c1c555ca8c8410cb9121ce25860507a100af038001eca10001ffffffff59db76b9b8e9cfaa4514dcc198c375f910b9fb7367d1c9d556cd5eb43b5f4d2d000000007b4c79a276a072a26ba067a565802103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b581404fa0de32bbb96b2e2f61fe823cdba4c3b9fef786ea8c65196f97653a942656812e675e91643ff0ec33853fd2481d40fc48fa51e18c9cbffb49e714c15b47babda100af038001eca10001ffffffff05c09ee60500000000302ea22c802092392e766d63f73dd7c68ff9eaf9f009f13b17c4167472e8aebb00d96be66aa68103120c008203000401cc1027000000000000302ea22c80200648c12e7e058c98f0a5cc288ac271ad08bd493e1fb7de83edeea69789338fc58103120c008203000401cc40420f0000000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5acd7bb49a204000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac0000000000000000706a4c6dec4403921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d75a5881417ab6700c089a6083d71abadc8cd74018bded0cfba423e027d513c8f2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b50800000000ffffffff00000000"
}
```

</collapse-text>

Step 2: Send raw transaction / broadcast the hex value

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000359db76b9b8e9cfaa4514dcc198c375f910b9fb7367d1c9d556cd5eb43b5f4d2d02000000484730440220645b49d6d85454b1015d82a53ec51685fc3b8bf1d092696c3c253b88cab3033a02207023511219897a374ad94951dd2af70b14d99eccbb404eaf783120f3170bd5e301ffffffff75a5881417ab6700c089a6083d71abadc8cd74018bded0cfba423e027d513c8f010000007b4c79a276a072a26ba067a5658021035933ab0bd2e2ceb712e7cab393a8c9096ba4be2e3a76f5aaeab72bce4aa61857814047697a246e4442888a3b6ffc4a8c5ae940eec7d19f72053a07b6d8a2968a260626c8001c9138e9fd0e3cfabb811ae71bd8c1c555ca8c8410cb9121ce25860507a100af038001eca10001ffffffff59db76b9b8e9cfaa4514dcc198c375f910b9fb7367d1c9d556cd5eb43b5f4d2d000000007b4c79a276a072a26ba067a565802103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b581404fa0de32bbb96b2e2f61fe823cdba4c3b9fef786ea8c65196f97653a942656812e675e91643ff0ec33853fd2481d40fc48fa51e18c9cbffb49e714c15b47babda100af038001eca10001ffffffff05c09ee60500000000302ea22c802092392e766d63f73dd7c68ff9eaf9f009f13b17c4167472e8aebb00d96be66aa68103120c008203000401cc1027000000000000302ea22c80200648c12e7e058c98f0a5cc288ac271ad08bd493e1fb7de83edeea69789338fc58103120c008203000401cc40420f0000000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5acd7bb49a204000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac0000000000000000706a4c6dec4403921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d75a5881417ab6700c089a6083d71abadc8cd74018bded0cfba423e027d513c8f2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b50800000000ffffffff00000000
```

<collapse-text hidden title="Response">

```bash
9530bdf82744ac57a5ffe0855595f5510c339341cdc3c8728ee547d3f3153433
```

</collapse-text>

Step 3: Decode raw transaction (optional to check if the values are sane)

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 010000000359db76b9b8e9cfaa4514dcc198c375f910b9fb7367d1c9d556cd5eb43b5f4d2d02000000484730440220645b49d6d85454b1015d82a53ec51685fc3b8bf1d092696c3c253b88cab3033a02207023511219897a374ad94951dd2af70b14d99eccbb404eaf783120f3170bd5e301ffffffff75a5881417ab6700c089a6083d71abadc8cd74018bded0cfba423e027d513c8f010000007b4c79a276a072a26ba067a5658021035933ab0bd2e2ceb712e7cab393a8c9096ba4be2e3a76f5aaeab72bce4aa61857814047697a246e4442888a3b6ffc4a8c5ae940eec7d19f72053a07b6d8a2968a260626c8001c9138e9fd0e3cfabb811ae71bd8c1c555ca8c8410cb9121ce25860507a100af038001eca10001ffffffff59db76b9b8e9cfaa4514dcc198c375f910b9fb7367d1c9d556cd5eb43b5f4d2d000000007b4c79a276a072a26ba067a565802103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b581404fa0de32bbb96b2e2f61fe823cdba4c3b9fef786ea8c65196f97653a942656812e675e91643ff0ec33853fd2481d40fc48fa51e18c9cbffb49e714c15b47babda100af038001eca10001ffffffff05c09ee60500000000302ea22c802092392e766d63f73dd7c68ff9eaf9f009f13b17c4167472e8aebb00d96be66aa68103120c008203000401cc1027000000000000302ea22c80200648c12e7e058c98f0a5cc288ac271ad08bd493e1fb7de83edeea69789338fc58103120c008203000401cc40420f0000000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5acd7bb49a204000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac0000000000000000706a4c6dec4403921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d75a5881417ab6700c089a6083d71abadc8cd74018bded0cfba423e027d513c8f2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b50800000000ffffffff00000000
```

<collapse-text hidden title="Response">

```json
{
    "txid": "9530bdf82744ac57a5ffe0855595f5510c339341cdc3c8728ee547d3f3153433",
    "size": 774,
    "version": 1,
    "locktime": 0,
    "vin": [
        {
            "txid": "2d4d5f3bb45ecd56d5c9d16773fbb910f975c398c1dc1445aacfe9b8b976db59",
            "vout": 2,
            "scriptSig": {
                "asm": "30440220645b49d6d85454b1015d82a53ec51685fc3b8bf1d092696c3c253b88cab3033a02207023511219897a374ad94951dd2af70b14d99eccbb404eaf783120f3170bd5e301",
                "hex": "4730440220645b49d6d85454b1015d82a53ec51685fc3b8bf1d092696c3c253b88cab3033a02207023511219897a374ad94951dd2af70b14d99eccbb404eaf783120f3170bd5e301"
            },
            "sequence": 4294967295
        },
        {
            "txid": "8f3c517d023e42bacfd0de8b0174cdc8adab713d08a689c00067ab171488a575",
            "vout": 1,
            "scriptSig": {
                "asm": "a276a072a26ba067a5658021035933ab0bd2e2ceb712e7cab393a8c9096ba4be2e3a76f5aaeab72bce4aa61857814047697a246e4442888a3b6ffc4a8c5ae940eec7d19f72053a07b6d8a2968a2606
26c8001c9138e9fd0e3cfabb811ae71bd8c1c555ca8c8410cb9121ce25860507a100af038001eca10001",
    "hex": "4c79a276a072a26ba067a5658021035933ab0bd2e2ceb712e7cab393a8c9096ba4be2e3a76f5aaeab72bce4aa61857814047697a246e4442888a3b6ffc4a8c5ae940eec7d19f72053a07b6d8a2968a
260626c8001c9138e9fd0e3cfabb811ae71bd8c1c555ca8c8410cb9121ce25860507a100af038001eca10001"
            },
            "sequence": 4294967295
        },
        {
            "txid": "2d4d5f3bb45ecd56d5c9d16773fbb910f975c398c1dc1445aacfe9b8b976db59",
            "vout": 0,
            "scriptSig": {
                "asm": "a276a072a26ba067a565802103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b581404fa0de32bbb96b2e2f61fe823cdba4c3b9fef786ea8c65196f97653a94265681
2e675e91643ff0ec33853fd2481d40fc48fa51e18c9cbffb49e714c15b47babda100af038001eca10001",
    "hex": "4c79a276a072a26ba067a565802103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b581404fa0de32bbb96b2e2f61fe823cdba4c3b9fef786ea8c65196f97653a9426
56812e675e91643ff0ec33853fd2481d40fc48fa51e18c9cbffb49e714c15b47babda100af038001eca10001"
            },
            "sequence": 4294967295
        }
    ],
    "vout": [
        {
            "value": 0.99000000,
            "valueSat": 99000000,
            "n": 0,
            "scriptPubKey": {
                "asm": "a22c802092392e766d63f73dd7c68ff9eaf9f009f13b17c4167472e8aebb00d96be66aa68103120c008203000401 OP_CHECKCRYPTOCONDITION",
                "hex": "2ea22c802092392e766d63f73dd7c68ff9eaf9f009f13b17c4167472e8aebb00d96be66aa68103120c008203000401cc",
                "reqSigs": 1,
                "type": "cryptocondition",
                "addresses": [
                    "RTk2Tgp1iAcxxSeuXYDREmtfydMvNkCmq8"
                ]
            }
        },
        {
            "value": 0.00010000,
            "valueSat": 10000,
            "n": 1,
            "scriptPubKey": {
                "asm": "a22c80200648c12e7e058c98f0a5cc288ac271ad08bd493e1fb7de83edeea69789338fc58103120c008203000401 OP_CHECKCRYPTOCONDITION",
                "hex": "2ea22c80200648c12e7e058c98f0a5cc288ac271ad08bd493e1fb7de83edeea69789338fc58103120c008203000401cc",
                "reqSigs": 1,
                "type": "cryptocondition",
                "addresses": [
                    "RWg43P8s8RtJatAGNa2kV8N2abhQqH93w9"
                ]
            }
        },
        {
            "value": 0.01000000,
            "valueSat": 1000000,
            "n": 2,
            "scriptPubKey": {
                "asm": "03810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5 OP_CHECKSIG",
                "hex": "2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac",
                "reqSigs": 1,
                "type": "pubkey",
                "addresses": [
                    "RVXhz5UCJfSRoTfa4zvBFBrpDBbqMM21He"
                ]
            }
        },
        {
            "value": 199.02610391,
            "valueSat": 19902610391,
            "n": 3,
            "scriptPubKey": {
                "asm": "03810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5 OP_CHECKSIG",
                "hex": "2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac",
                "reqSigs": 1,
                "type": "pubkey",
                "addresses": [
                    "RVXhz5UCJfSRoTfa4zvBFBrpDBbqMM21He"
                ]
            }
        },
        {
            "value": 0.00000000,
            "valueSat": 0,
            "n": 4,
            "scriptPubKey": {
                "asm": "OP_RETURN ec4403921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d75a5881417ab6700c089a6083d71abadc8cd74018bded0cfba423e027d513c8f2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b50800000000ffffffff",
                "hex": "6a4c6dec4403921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d75a5881417ab6700c089a6083d71abadc8cd74018bded0cfba423e027d513c8f2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b50800000000ffffffff",
                "type": "nulldata"
            }
        }
    ],
    "vjoinsplit": []
}
```

</collapse-text>

## oraclesfund

**oraclesfund oracletxid**

The `oraclesfund` method allows a user to register as a publisher on an oracle.

This method must be executed before the user attempts to use the <b>oraclesregister</b> method.

### Arguments:

| Structure  | Type     | Description                                         |
| ---------- | -------- | --------------------------------------------------- |
| oracletxid | (string) | the unique identifying transaction id of the oracle |

#### :pushpin: Examples

Step 1: Create a customized oracle contract and get the hex value

```bash
./komodo-cli -ac_name=HELLOWORLD oraclesfund 7b6e7745058ffded423546eecc61dcc05069279b90776384c52692765246b64c
```

Response from Step 1:

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "0400008085202f890124839445f1cdca84c42563fa87742a562824815729625184117c80dc2a06510e0000000049483045022100c4442ff211289ebc5967da35843f1d210c4a8985d5797a11c42e245aafdf6985022031e7dfb40e3778033f1fb92c0f1175cb4a658bb32749469d69379968fcf92be701ffffffff031027000000000000302ea22c802083071e46d28313148751bdd5e4ffd0509c4234f4770c4c0550cc48b6d45215188103120c008203000401cce0950b5402000000232102c59cc849a87ef401942abb5b5fe81c1a468454fd68c94c849c20b13f5ebd91a5ac00000000000000004f6a4c4cec464cb64652769226c5846377909b276950c0dc61ccee463542edfd8f0545776e7b2102c59cc849a87ef401942abb5b5fe81c1a468454fd68c94c849c20b13f5ebd91a5102700000000000000000000b60700000000000000000000000000"
}
```

</collapse-text>

Step 2: Send raw transaction / broadcast the hex value

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 0400008085202f890124839445f1cdca84c42563fa87742a562824815729625184117c80dc2a06510e0000000049483045022100c4442ff211289ebc5967da35843f1d210c4a8985d5797a11c42e245aafdf6985022031e7dfb40e3778033f1fb92c0f1175cb4a658bb32749469d69379968fcf92be701ffffffff031027000000000000302ea22c802083071e46d28313148751bdd5e4ffd0509c4234f4770c4c0550cc48b6d45215188103120c008203000401cce0950b5402000000232102c59cc849a87ef401942abb5b5fe81c1a468454fd68c94c849c20b13f5ebd91a5ac00000000000000004f6a4c4cec464cb64652769226c5846377909b276950c0dc61ccee463542edfd8f0545776e7b2102c59cc849a87ef401942abb5b5fe81c1a468454fd68c94c849c20b13f5ebd91a5102700000000000000000000b60700000000000000000000000000

# This will output an unique txid which will be refered as oracletxid or transaction ID of the oracle.
```

Response from Step 2:

<collapse-text hidden title="Response">

```bash
ab038ff4369974d0596f13be1e69105ed97b5374f694afe7b96b664a9fe07192
```

</collapse-text>

(Use `./komodo-cli -ac_name=HELLOWORLD getrawmempool` to ensure that the transaction receives confirmation.)

Step 3: Decode raw transaction (optional to check if the values are sane)

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 0400008085202f890124839445f1cdca84c42563fa87742a562824815729625184117c80dc2a06510e0000000049483045022100c4442ff211289ebc5967da35843f1d210c4a8985d5797a11c42e245aafdf6985022031e7dfb40e3778033f1fb92c0f1175cb4a658bb32749469d69379968fcf92be701ffffffff031027000000000000302ea22c802083071e46d28313148751bdd5e4ffd0509c4234f4770c4c0550cc48b6d45215188103120c008203000401cce0950b5402000000232102c59cc849a87ef401942abb5b5fe81c1a468454fd68c94c849c20b13f5ebd91a5ac00000000000000004f6a4c4cec464cb64652769226c5846377909b276950c0dc61ccee463542edfd8f0545776e7b2102c59cc849a87ef401942abb5b5fe81c1a468454fd68c94c849c20b13f5ebd91a5102700000000000000000000b60700000000000000000000000000
```

Response from Step 3:

<collapse-text hidden title="Response">

```json
{
  "txid": "ab038ff4369974d0596f13be1e69105ed97b5374f694afe7b96b664a9fe07192",
  "overwintered": true,
  "version": 4,
  "versiongroupid": "892f2085",
  "locktime": 0,
  "expiryheight": 1974,
  "vin": [
    {
      "txid": "0e51062adc807c118451622957812428562a7487fa6325c484cacdf145948324",
      "vout": 0,
      "scriptSig": {
        "asm": "3045022100c4442ff211289ebc5967da35843f1d210c4a8985d5797a11c42e245aafdf6985022031e7dfb40e3778033f1fb92c0f1175cb4a658bb32749469d69379968fcf92be7[ALL]",
        "hex": "483045022100c4442ff211289ebc5967da35843f1d210c4a8985d5797a11c42e245aafdf6985022031e7dfb40e3778033f1fb92c0f1175cb4a658bb32749469d69379968fcf92be701"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 0.0001,
      "valueZat": 10000,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c802083071e46d28313148751bdd5e4ffd0509c4234f4770c4c0550cc48b6d45215188103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c802083071e46d28313148751bdd5e4ffd0509c4234f4770c4c0550cc48b6d45215188103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["RUeZzWCuwGxJTtSDGfRFWL87oyrLWZav6Z"]
      }
    },
    {
      "value": 99.9998,
      "valueZat": 9999980000,
      "n": 1,
      "scriptPubKey": {
        "asm": "02c59cc849a87ef401942abb5b5fe81c1a468454fd68c94c849c20b13f5ebd91a5 OP_CHECKSIG",
        "hex": "2102c59cc849a87ef401942abb5b5fe81c1a468454fd68c94c849c20b13f5ebd91a5ac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RFkogpvKojbChm9hMDdv2KUBasUmFNraqg"]
      }
    },
    {
      "value": 0.0,
      "valueZat": 0,
      "n": 2,
      "scriptPubKey": {
        "asm": "OP_RETURN ec464cb64652769226c5846377909b276950c0dc61ccee463542edfd8f0545776e7b2102c59cc849a87ef401942abb5b5fe81c1a468454fd68c94c849c20b13f5ebd91a51027000000000000",
        "hex": "6a4c4cec464cb64652769226c5846377909b276950c0dc61ccee463542edfd8f0545776e7b2102c59cc849a87ef401942abb5b5fe81c1a468454fd68c94c849c20b13f5ebd91a51027000000000000",
        "type": "nulldata"
      }
    }
  ],
  "vjoinsplit": [],
  "valueBalance": 0.0,
  "vShieldedSpend": [],
  "vShieldedOutput": []
}
```

</collapse-text>

## oraclesinfo

**oraclesinfo oracletxid**

The `oraclesinfo` method displays information about a specific oracle using `oracletxid`.

For a list of all `oracletxid`'s available on the Smart Chain, see the [oracleslist](../customconsensus/oracles.html#oraclelist) method.

### Arguments

| Name       | Type     | Description                                         |
| ---------- | -------- | --------------------------------------------------- |
| oracletxid | (string) | the unique identifying transaction id of the oracle |

### Response

| Name        | Type     | Description                                                                                                                                  |
| ----------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------- |
| result      | (string) | whether the command executed successfully                                                                                                    |
| txid        | (string) | the unique txid, or oracletxid, that identifies the oracle                                                                                   |
| name        | (string) | the name of the oracle contract                                                                                                              |
| description | (string) | the description of the oracle contract                                                                                                       |
| format      | (string) | a string that identifies the data type accepted for the oracle contract (see [oraclescreate](../customconsensus/oracles.html#oraclescreate)) |
| marker      | (string) | the unmodified public address generated from the oracle contract's privkey                                                                   |
| registered: | (array)  |
| publisher   | (string) | the unique identifier for the publisher (see [oraclesregister](../customconsensus/oracles.html#oraclesregister))                                    |
| baton       | (string) | the baton address of the publisher, which is a Fluidity address (based on the pubkey of the publisher and the EVAL code of the oracle contract) |
| batontxid   | (string) | the most recent baton utxo sent to the baton address; this is the tip of the linked list that connects all data samples for the publisher               |
| lifetime    | (number) | the length of time since publisher's inception                                                                                                          |
| funds       | (number) | the funds committed by subscribers to the publisher's account, and which are used for payouts                                                           |
| datafee     | (number) | the amount a subscriber pays for each data upload                                                                                                       |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD oraclesinfo 0df7c4d844f08dba08abd4bb174558739f17cfe268feb005fb6333b3761d9203
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "txid": "0df7c4d844f08dba08abd4bb174558739f17cfe268feb005fb6333b3761d9203",
  "name": "NYWTHR",
  "description": "Weather in NYC",
  "format": "L",
  "marker": "RGEug5JPPkERBpqsGSgw6GQPYTB9v9i4Fj",
  "registered": [
    {
      "publisher": "03810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5",
      "baton": "RWg43P8s8RtJatAGNa2kV8N2abhQqH93w9",
      "batontxid": "8f3c517d023e42bacfd0de8b0174cdc8adab713d08a689c00067ab171488a575",
      "lifetime": "0.00000000",
      "funds": "0.00000000",
      "datafee": "0.01000000"
    }
  ]
}
```

</collapse-text>

## oraclesregister

**oraclesregister oracletxid datafee**

A user executes the `oraclesregister` method to register as a data publisher for an existing oracle contract.

The `datafee` property is set in satoshis, and should be `>=` the chain's default transaction fee.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

::: tip
Use `./komodo-cli -ac_name=YOURNAME getrawmempool` to verify the transaction is confirmed.
:::

::: tip
After the transaction confirms, use `oraclesinfo` to output registration information about your oracles plan
:::

### Arguments

| Name       | Type      | Description                                                                                 |
| ---------- | --------- | ------------------------------------------------------------------------------------------- |
| oracletxid | (string)  | the unique identifying transaction id of the oracle                                         |
| datafee    | (numbers) | the fee required of a subscriber for each data point the publisher publishes in this oracle |

### Response

| Name    | Type     | Description                                                                                          |
| ------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result: | (string) | whether the command succeeded                                                                        |
| hex:    | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1: Set your parameters to create a raw transaction and get the hex value

```bash
./komodo-cli -ac_name=HELLOWORLD oraclesregister 0df7c4d844f08dba08abd4bb174558739f17cfe268feb005fb6333b3761d9203 1000000
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "010000000103921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d010000004847304402207241f313ef2fb65d9eb1f870068ceba436f14996ce79d16ff85f2937c75357ee022025f0b888e742546469ad0b7fae9b85cf7c89cddf307170bbcf794e5e90ae28b101ffffffff04102700000000000023210203921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70dac1027000000000000302ea22c80200648c12e7e058c98f0a5cc288ac271ad08bd493e1fb7de83edeea69789338fc58103120c008203000401cc071240a804000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000004f6a4c4cec5203921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b540420f000000000000000000"
}
```

</collapse-text>

Step 2: Send/broadcast the raw transaction hex

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000103921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d010000004847304402207241f313ef2fb65d9eb1f870068ceba436f14996ce79d16ff85f2937c75357ee022025f0b888e742546469ad0b7fae9b85cf7c89cddf307170bbcf794e5e90ae28b101ffffffff04102700000000000023210203921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70dac1027000000000000302ea22c80200648c12e7e058c98f0a5cc288ac271ad08bd493e1fb7de83edeea69789338fc58103120c008203000401cc071240a804000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000004f6a4c4cec5203921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b540420f000000000000000000
```

<collapse-text hidden title="Response">

```bash
8f3c517d023e42bacfd0de8b0174cdc8adab713d08a689c00067ab171488a575
```

</collapse-text>

Step 3: Decode raw transaction (optional to check if the values are sane)

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 010000000103921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d010000004847304402207241f313ef2fb65d9eb1f870068ceba436f14996ce79d16ff85f2937c75357ee022025f0b888e742546469ad0b7fae9b85cf7c89cddf307170bbcf794e5e90ae28b101ffffffff04102700000000000023210203921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70dac1027000000000000302ea22c80200648c12e7e058c98f0a5cc288ac271ad08bd493e1fb7de83edeea69789338fc58103120c008203000401cc071240a804000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000004f6a4c4cec5203921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b540420f000000000000000000
```

<collapse-text hidden title="Response">

```json
{
  "txid": "8f3c517d023e42bacfd0de8b0174cdc8adab713d08a689c00067ab171488a575",
  "size": 356,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "0df7c4d844f08dba08abd4bb174558739f17cfe268feb005fb6333b3761d9203",
      "vout": 1,
      "scriptSig": {
        "asm": "304402207241f313ef2fb65d9eb1f870068ceba436f14996ce79d16ff85f2937c75357ee022025f0b888e742546469ad0b7fae9b85cf7c89cddf307170bbcf794e5e90ae28b101",
        "hex": "47304402207241f313ef2fb65d9eb1f870068ceba436f14996ce79d16ff85f2937c75357ee022025f0b888e742546469ad0b7fae9b85cf7c89cddf307170bbcf794e5e90ae28b101"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 0.0001,
      "valueSat": 10000,
      "n": 0,
      "scriptPubKey": {
        "asm": "0203921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d OP_CHECKSIG",
        "hex": "210203921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70dac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RGEug5JPPkERBpqsGSgw6GQPYTB9v9i4Fj"]
      }
    },
    {
      "value": 0.0001,
      "valueSat": 10000,
      "n": 1,
      "scriptPubKey": {
        "asm": "a22c80200648c12e7e058c98f0a5cc288ac271ad08bd493e1fb7de83edeea69789338fc58103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c80200648c12e7e058c98f0a5cc288ac271ad08bd493e1fb7de83edeea69789338fc58103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["RWg43P8s8RtJatAGNa2kV8N2abhQqH93w9"]
      }
    },
    {
      "value": 200.02640391,
      "valueSat": 20002640391,
      "n": 2,
      "scriptPubKey": {
        "asm": "03810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5 OP_CHECKSIG",
        "hex": "2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RVXhz5UCJfSRoTfa4zvBFBrpDBbqMM21He"]
      }
    },
    {
      "value": 0.0,
      "valueSat": 0,
      "n": 3,
      "scriptPubKey": {
        "asm": "OP_RETURN ec5203921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b540420f00000$0000",
        "hex": "6a4c4cec5203921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b540420f000000000$",
        "type": "nulldata"
      }
    }
  ],
  "vjoinsplit": []
}
```

</collapse-text>

## oraclessamples

**oraclessamples oracletxid baton num**

The `oraclessample` method fetches data samples from a publisher.

The user indicates the desired publisher by inserting the `batonutxo` by the publisher. Use [oraclesinfo](../customconsensus/oracles.html#oraclesinfo) to find a list of publishers and their current batonutxo's.

### Arguments

| Name         | Type     | Description                                                        |
| ------------ | -------- | ------------------------------------------------------------------ |
| oracletxid   | (string) | the unique identifying transaction id of the oracle contract       |
| batonaddress | (string) | the baton address, which can be found using the oraclesinfo method |
| num          | (number) | the number of sample data points required                          |

### Response

| Name          | Type               | Description                               |
| ------------- | ------------------ | ----------------------------------------- |
| result        | (string)           | whether the command executed successfully |
| samples:      | (array of strings) |
| "XXXXXXXXXXX" | (string)           | a sample data point                       |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD oraclessamples 7b6e7745058ffded423546eecc61dcc05069279b90776384c52692765246b64c RVerJvoYsXp3avQ3xxe54EhajZgn5xidKB 1
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "samples": [
    {
      "txid": "bbe51ad50a1a49e0275631c2b8e698ea3514b05bb60b944ee891bdbbd5ce0c17",
      "data": ["This here is some data stored on an oracle"]
    }
  ]
}
```

</collapse-text>

## oraclessubscribe

**oraclessubscribe oracletxid publisher amount**

The user executes `oraclessubscribe` to subscribe to a publisher of an oracle plan.

Every publisher must have at least one subscriber before the [oraclesdata](../customconsensus/oracles.html#oraclesdata) can successfully execute.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

The `sendrawtransaction` method then returns a unique txid, also called the `oraclesubscriptiontxid`, or the id of the oracle subscription transaction. This can be used for further development purposes.

::: tip
If the **datafee** is 10 COINS and the `amount` submitted is 1000 COINS, the publisher can publish data 100 times based on this amount.
:::

### Arguments

| Name       | Type     | Description                                                                                                                                           |
| ---------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------- |
| oracletxid | (string) | the unique identifying transaction id of the oracle                                                                                                   |
| publisher  | (string) | the unique publisher id, which can be found using the oraclesinfo method                                                                              |
| amount     | (number) | the total amount of funds the subscriber commits to pay for data upload by the publisher; this amount is immediately withdrawn from the user's wallet |

### Response

| Name   | Type     | Description                                                                                          |
| ------ | -------- | ---------------------------------------------------------------------------------------------------- |
| result | (string) | whether the command succeeded                                                                        |
| hex    | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1: Subscribe to an oracle plan and get the hex value:

```bash
./komodo-cli -ac_name=HELLOWORLD oraclessubscribe 0df7c4d844f08dba08abd4bb174558739f17cfe268feb005fb6333b3761d9203 03810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5 1
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "010000000175a5881417ab6700c089a6083d71abadc8cd74018bded0cfba423e027d513c8f0200000048473044022006449e2f324ba8c262ca73eea4642f77ccf906fee5bab4fdc85bcc8c350ce81b022047d76840076f6e02aebe77ffb59b052974badb8747c7b435fd77351fcfbee95e01ffffffff0400e1f50500000000302ea22c802092392e766d63f73dd7c68ff9eaf9f009f13b17c4167472e8aebb00d96be66aa68103120c008203000401cc102700000000000023210203921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70dace7e249a204000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000004f6a4c4cec5303921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b500e1f5050000000000000000"
}
```

</collapse-text>

Step 2: Send raw transaction / broadcast the hex value

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000175a5881417ab6700c089a6083d71abadc8cd74018bded0cfba423e027d513c8f0200000048473044022006449e2f324ba8c262ca73eea4642f77ccf906fee5bab4fdc85bcc8c350ce81b022047d76840076f6e02aebe77ffb59b052974badb8747c7b435fd77351fcfbee95e01ffffffff0400e1f50500000000302ea22c802092392e766d63f73dd7c68ff9eaf9f009f13b17c4167472e8aebb00d96be66aa68103120c008203000401cc102700000000000023210203921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70dace7e249a204000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000004f6a4c4cec5303921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b500e1f5050000000000000000
```

<collapse-text hidden title="Response">

```bash
2d4d5f3bb45ecd56d5c9d16773fbb910f975c398c1dc1445aacfe9b8b976db59
```

</collapse-text>

Step 3: Decode raw transaction (optional to check if the values are sane)

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 010000000175a5881417ab6700c089a6083d71abadc8cd74018bded0cfba423e027d513c8f0200000048473044022006449e2f324ba8c262ca73eea4642f77ccf906fee5bab4fdc85bcc8c350ce81b022047d76840076f6e02aebe77ffb59b052974badb8747c7b435fd77351fcfbee95e01ffffffff0400e1f50500000000302ea22c802092392e766d63f73dd7c68ff9eaf9f009f13b17c4167472e8aebb00d96be66aa68103120c008203000401cc102700000000000023210203921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70dace7e249a204000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000004f6a4c4cec5303921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b500e1f5050000000000000000
```

<collapse-text hidden title="Response">

```json
{
  "txid": "2d4d5f3bb45ecd56d5c9d16773fbb910f975c398c1dc1445aacfe9b8b976db59",
  "size": 356,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "8f3c517d023e42bacfd0de8b0174cdc8adab713d08a689c00067ab171488a575",
      "vout": 2,
      "scriptSig": {
        "asm": "3044022006449e2f324ba8c262ca73eea4642f77ccf906fee5bab4fdc85bcc8c350ce81b022047d76840076f6e02aebe77ffb59b052974badb8747c7b435fd77351fcfbee95e01",
        "hex": "473044022006449e2f324ba8c262ca73eea4642f77ccf906fee5bab4fdc85bcc8c350ce81b022047d76840076f6e02aebe77ffb59b052974badb8747c7b435fd77351fcfbee95e01"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 1.0,
      "valueSat": 100000000,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c802092392e766d63f73dd7c68ff9eaf9f009f13b17c4167472e8aebb00d96be66aa68103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c802092392e766d63f73dd7c68ff9eaf9f009f13b17c4167472e8aebb00d96be66aa68103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["RTk2Tgp1iAcxxSeuXYDREmtfydMvNkCmq8"]
      }
    },
    {
      "value": 0.0001,
      "valueSat": 10000,
      "n": 1,
      "scriptPubKey": {
        "asm": "0203921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d OP_CHECKSIG",
        "hex": "210203921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70dac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RGEug5JPPkERBpqsGSgw6GQPYTB9v9i4Fj"]
      }
    },
    {
      "value": 199.02620391,
      "valueSat": 19902620391,
      "n": 2,
      "scriptPubKey": {
        "asm": "03810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5 OP_CHECKSIG",
        "hex": "2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RVXhz5UCJfSRoTfa4zvBFBrpDBbqMM21He"]
      }
    },
    {
      "value": 0.0,
      "valueSat": 0,
      "n": 3,
      "scriptPubKey": {
        "asm": "OP_RETURN ec5303921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b500e1f50500000000",
        "hex": "6a4c4cec5303921d76b33363fb05b0fe68e2cf179f73584517bbd4ab08ba8df044d8c4f70d2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b500e1f50500000000",
        "type": "nulldata"
      }
    }
  ],
  "vjoinsplit": []
}
```

</collapse-text>


# Payments

## Introduction

The Payments Module allows a payment to be distributed between multiple recipients in a pre-defined proportion.

### Payments CC Module Flow

- Use [paymentstxidopret](#paymentstxidopret) to create as many transactions as there are recipients. Each recipient must have the following data: weight (also called "share"), recipient, destopret (optional; data to be stored in the OP_RETURN of the subsequent payment transaction) in its OP_RETURN, this step is to simply make the data available on the blockchain to be used by a later method. The transaction id is called `paytxnid` and is used as a reference to the data
- Use [paymentscreate](#paymentscreate) to create a new Payment plan. The number of blocks to lock the funds after funding, minimum release amount and the `paytxnid`s are passed as arguments. The `paytxnid`s contain the data about the recipients and their corresponding shares. The transaction id is called `createtxid` and will be the reference for this payment plan used by other methods
- Use [paymentsfund](#paymentsfund) to fund any existing payment plan. The method takes <b>createtxid</b> and amount as arguments
- Use [paymentsrelease](#paymentsrelease) to release payments to a Payments plan refered by the `createtxid`

## paymentstxidopret

**paymentstxidopret '[allocation,"scriptPubKey",("destopret")]'**

### allocation

`allocation` is the number that defines the share of a payment to the given `scriptPubkey`.

Example: If a Payments plan has the allocation to `scriptPubkey_1` as the number `n1` and allocation to `scriptPubkey_2` as the number `n2`, then any funds sent to this payment plan are split between `scriptPubkey_1` and `scriptPubkey_2` in the ratio `n1:n2`. If funds sent to the Payments plan has the value N, `scriptPubkey_1` will receive `(N*n1)/(n1+n2)` and `scriptPubkey_1` will receive `(N*n2)/(n1+n2)`

### scriptPubkey

`scriptPubkey` is the puzzle that locks coins in a transaction.

If the recipient is a simple pubkey, the [scriptPubkey](https://learnmeabitcoin.com/glossary/scriptPubKey) can be constructed by sandwiching the pubkey between the strings "21" and "ac". In this case, the privkey corresponding to the pubkey can be used to sign a transaction which will be able to unlock the coins.

The `scriptPubKey` parameter can belong to any valid type described [here](https://learnmeabitcoin.com/glossary/scriptPubKey), but not limited to them.

Example: If pubkey is `02d3431950c2f0f9654217b6ce3d44468d3a9ca7255741767fdeee7c5ec6b47567` , scriptPubkey will be `2102d3431950c2f0f9654217b6ce3d44468d3a9ca7255741767fdeee7c5ec6b47567ac`

If the node that is creating the transaction using the `paymentstxidopret` method has the privkey of an address in its wallet, an address can be used in the place of a scriptPubkey.

Example: The address `RN727JeeiZ6NXic7PUKTCiHT1HvuBN4RDa` can be used directly without any modifications by a node which has the corresponding privkey in its wallet.

The `validateaddress` method can be used to verify if an address belongs to the node. It can also be seen that the `pubkey` used to construct the `scriptPubkey` produced this address.

Using either `RN727JeeiZ6NXic7PUKTCiHT1HvuBN4RDa` or `2102d3431950c2f0f9654217b6ce3d44468d3a9ca7255741767fdeee7c5ec6b47567ac` as the argument `scriptPubKey` is equivalent.

```bash
./komdo-cli -ac_name=HELLOWORLD validateaddress RN727JeeiZ6NXic7PUKTCiHT1HvuBN4RDa
```

<collapse-text hidden title="Response">

```json
{
  "isvalid": true,
  "address": "RN727JeeiZ6NXic7PUKTCiHT1HvuBN4RDa",
  "scriptPubKey": "76a9148cad275b85eb32fff144f3650b74e7c18bdd9b2288ac",
  "segid": 51,
  "ismine": true,
  "iswatchonly": false,
  "isscript": false,
  "pubkey": "02d3431950c2f0f9654217b6ce3d44468d3a9ca7255741767fdeee7c5ec6b47567",
  "iscompressed": true,
  "account": ""
}
```

</collapse-text>

### destopret (optional)

`destopret` is the data to be stored the OP_RETURN of the transaction that sends funds to the scriptPubkey.

If the scriptPubkey belongs to a CC module that expects OP_RETURN data in the txn that sends coins to it, then `destopret` will be used by it

Example:

If a Payments plan is created which has to send a part of the funds to the Rewards CC module, it needs to add some data to the OP_RETURN of the transaction to specify which rewards plan the payment is funding.

#### Arguments

| Name         | Type               | Description                                                                                 |
| ------------ | ------------------ | ------------------------------------------------------------------------------------------- |
| allocation   | (number)           | defines the share of a payment to the given `scriptPubkey`.                                 |
| scriptPubKey | (string)           | [scriptPubkey](https://learnmeabitcoin.com/glossary/scriptPubKey) of the recipient          |
| destopret    | (string, optional) | data to be stored in the OP_RETURN of the transaction that sends funds to the scriptPubkey. |

#### Response

| Name   | Type     | Description                                                           |
| ------ | -------- | --------------------------------------------------------------------- |
| hex    | (string) | the paytransaction in raw-transaction format, provided in hexadecimal |
| txid   | (string) | the transaction id of the send transaction                            |
| result | (string) | whether the call executed successfully                                |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD paymentstxidopret '[9,"222102d6f13a8f745921cdb811e32237bb98950af1a5952be7b3d429abd9152f8e388dac"]'
```

<collapse-text hidden title="Response">

```json
{
  "hex": "0400008085202f89010012d25c46d1f831d74c7c3e71fd32343f53ead192cc70e9e8edf7586571759a0000000048473044022004f5a7e3eb7f5010953c2bca7af2113ee3559b5f7adc86ad09b872526e3b36f6022040b6409eb612c847185b274eb76a3ff60f0e970e5e78d3eee9269b5f0661611001ffffffff02f0b9f50500000000232102d3431950c2f0f9654217b6ce3d44468d3a9ca7255741767fdeee7c5ec6b47567ac0000000000000000326a30f054090000000000000024222102d6f13a8f745921cdb811e32237bb98950af1a5952be7b3d429abd9152f8e388dac00000000000b0400000000000000000000000000",
  "txid": "9c731f6bbdaa6159b7c0955f3d1e1df72a64a38cd20198d59cd11f0fc506e00e",
  "result": "success"
}
```

</collapse-text>

## paymentscreate

**paymentscreate '[lockedblocks,minamount,"paytxid",...,"paytxidN"]'**

Locked blocks, is how many blocks must pass before the funds sent to the plan can be released.
Minamount is the minimum amount that can be released.
Paytxids are the txids of all the transactions made in the previous step.

## paymentsairdrop

**paymentsairdrop '[lockedblocks,minamount,mintoaddress,top,bottom,fixedFlag,"excludeAddress",...,"excludeAddressN"]**
NOTE: requires -ac_snapshot= to be active to use.
Mintoaddress is the minimum that can be paid to an address, setting to 0 defaults to 10,000 sats.
Top is the top addresses to pay too, it must not be 0 or over 3999
Bottom is to exclude the top X address from the airdrop. Generally this would always be 0, unless you wanted to exclude all whale addresses from an airdrop.
fixedFlag, set to 0, all addresses in the rich list are paid based on their balance.
Set to 1, the amount paid is fixed, the amount paid is split evenly over all the addresses in range of bottom->top on rich list. Eg 50-1000 on rich list.
Set to 7, activates game mode that changes the values of bottom and top based on the block hash of the block the daily airdrop was taken.

## payments_airdroptokens

**payments_airdroptokens '[“tokenid",lockedblocks,minamount,mintoaddress,top,bottom,fixedFlag,"excludePubKey",...,"excludePubKeyN"]'**

NOT IMPLEMENTED YET.
Tokenid, is the token to base the airdrop on.

## paymentsfund

**paymentsfund '[“createtxid",amount(,useopret)]'**

Createtxid is the txid from paymentscreate, paymentsairdrop or payments_airdroptokens
Amount is the amount to send
Useopret is a flag to tell it to make a ccvout tx to the global payments plan. You use this RPC to get the scriptPubKey you need to fund a payments plan from something else, either coinbase, or another contract.

## paymentsmerge

**paymentsmerge '[“createtxid"]'**

Merges all funds on a payments plan to a single utxo in the plans special address.
Merged funds enforce lockedblocks, but cannot be merged again, for 100 blocks longer than this. This is to stop people merging the funds before they can be released, and preventing payments to happen. It exists because a very large tx cannot have lots of inputs.

## paymentsrelease

**paymentsrelease '[“createtxid",amount,(skipminimum)]'**

Amount is amount to release, it must be above the minimum.
Skipminimum is a flag, if there are address with such low balance minimumtoaddress cannot be paid, this will truncate the rich list off at the first address that is being paid the wrong amount.

## paymentsinfo

**paymentsinfo '[“createtxid"]'**

Shows info about a payments plan.

## paymentslist

**paymentslist**

Lists all payments createtxids.
# Rewards

## Introduction

The Rewards Fluidity module creates a master-node like rewards program, giving a user the ability to earn rewards by locking coins.

It features configurable parameters, such as a customizable APR, minimum deposit, a required holding period,etc.

There can be many `rewards` plans active at any given time.

### Rewards CC Module Flow

- Anyone can create a new plan using [rewardscreatefunding](../customconsensus/rewards.html#rewardscreatefunding)
- Anyone can add funding to the plan using [rewardsaddfunding](../customconsensus/rewards.html#rewardsaddfunding)
- Anyone can query the list of all active plans using [rewardslist](../customconsensus/rewards.html#rewardslist)
- To get the details of a particular plan, use [rewardsinfo](../customconsensus/rewards.html#rewardsinfo)
- After finding a suitable plan, any user can lock funds using [rewardslock](../customconsensus/rewards.html#rewardslock)
- After the minimum lock time is met, the user can use [rewardsunlock](../customconsensus/rewards.html#rewardsunlock) to unlock their funds and receive their rewards

## rewardsaddfunding

**rewardsaddfunding name fundingtxid amount**

The `rewardsaddfunding` method adds funds to a rewards plan.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

### Arguments

| Name | Type | Description | 
| ----------- | -------- | ----------------------------------------------------------------- |
| name        | (string) | the desired name of your rewards plan                             |
| fundingtxid | (string) | the txid of the transaction that created and funded this plan |
| amount      | (number) | the amount of funds to add to the plan                        |

### Response

| Name | Type | Description | 
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1: Create a raw transaction and get the HEX value

```bash
./komodo-cli -ac_name=HELLOWORLD rewardsaddfunding FREE e020151cd81647b20aa45a0e6850216ae52d3e895443bbe1ae97dea3ae6767bd 100
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "0100000001bd6767aea3de97aee1bb4354893e2de56a2150680e5aa40ab24716d81c1520e00200000048473044022050ab254c7498e411ab5360551148405c4afff28d68729e2bd00ba2508ab105d402204067ab95020d606c35d3604d4385dcb97c899a06aa8bf8ce30471fb7868ac7a401ffffffff0300e40b5402000000302ea22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401ccd05eefb1fe080000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000002c6a2ae5414652454500000000bd6767aea3de97aee1bb4354893e2de56a2150680e5aa40ab24716d81c1520e000000000"
}
```

</collapse-text>


Step 2: Broadcast raw transaction

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 0100000001bd6767aea3de97aee1bb4354893e2de56a2150680e5aa40ab24716d81c1520e00200000048473044022050ab254c7498e411ab5360551148405c4afff28d68729e2bd00ba2508ab105d402204067ab95020d606c35d3604d4385dcb97c899a06aa8bf8ce30471fb7868ac7a401ffffffff0300e40b5402000000302ea22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401ccd05eefb1fe080000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000002c6a2ae5414652454500000000bd6767aea3de97aee1bb4354893e2de56a2150680e5aa40ab24716d81c1520e000000000
```


<collapse-text hidden title="Response">


```bash
008ca94eebce8dbfa91491028c8861016ad4c25240f9ddc5616f2fb0853da580
```

</collapse-text>

Step 3: Decode raw transaction (optional to check if the values are sane)

```bash
./komodo-cli -ac_name=ATEST decoderawtransaction 0100000001bd6767aea3de97aee1bb4354893e2de56a2150680e5aa40ab24716d81c1520e00200000048473044022050ab254c7498e411ab5360551148405c4afff28d68729e2bd00ba2508ab105d402204067ab95020d606c35d3604d4385dcb97c899a06aa8bf8ce30471fb7868ac7a401ffffffff0300e40b5402000000302ea22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401ccd05eefb1fe080000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000002c6a2ae5414652454500000000bd6767aea3de97aee1bb4354893e2de56a2150680e5aa40ab24716d81c1520e000000000
```


<collapse-text hidden title="Response">


```json
{
  "txid": "008ca94eebce8dbfa91491028c8861016ad4c25240f9ddc5616f2fb0853da580",
  "size": 277,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "e020151cd81647b20aa45a0e6850216ae52d3e895443bbe1ae97dea3ae6767bd",
      "vout": 2,
      "scriptSig": {
        "asm": "3044022050ab254c7498e411ab5360551148405c4afff28d68729e2bd00ba2508ab105d402204067ab95020d606c35d3604d4385dcb97c899a06aa8bf8ce30471fb7868ac7a401",
        "hex": "473044022050ab254c7498e411ab5360551148405c4afff28d68729e2bd00ba2508ab105d402204067ab95020d606c35d3604d4385dcb97c899a06aa8bf8ce30471fb7868ac7a401"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 100.0,
      "valueSat": 10000000000,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["RTsRBYL1HSvMoE3qtBJkyiswdVaWkm8YTK"]
      }
    },
    {
      "value": 98899.9997,
      "valueSat": 9889999970000,
      "n": 1,
      "scriptPubKey": {
        "asm": "03810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5 OP_CHECKSIG",
        "hex": "2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RVXhz5UCJfSRoTfa4zvBFBrpDBbqMM21He"]
      }
    },
    {
      "value": 0.0,
      "valueSat": 0,
      "n": 2,
      "scriptPubKey": {
        "asm": "OP_RETURN e5414652454500000000bd6767aea3de97aee1bb4354893e2de56a2150680e5aa40ab24716d81c1520e0",
        "hex": "6a2ae5414652454500000000bd6767aea3de97aee1bb4354893e2de56a2150680e5aa40ab24716d81c1520e0",
        "type": "nulldata"
      }
    }
  ],
  "vjoinsplit": []
}
```

</collapse-text>


## rewardsaddress

**rewardsaddress (pubkey)**

The `rewardsaddress` method returns info about the `rewards` plan associated with the given `pubkey`. If no `pubkey` is provided, the `pubkey` used to launch the daemon is used.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | -------------------------------------------------------------------------------------- |
| pubkey    | (string, optional) | the pubkey of the requested info; by default it is the pubkey used to launch the chain |

### Response

| Name | Type | Description | 
| ---------------- | -------- | -------------------------------------------------------------------------------------------------------------------- |
| result           | (string) | whether the method executed successfully                                                                             |
| RewardsCCaddress | (string) | taking the module's EVAL code as a modifier, this is the public address that corresponds to the plan's privkey |
| Rewardsmarker    | (string) | the unmodified public address generated from the plan's privkey                                                  |
| GatewaysPubkey   | (string) | the pubkey for the gateways cc                                                                                       |
| RewardsCCassets  | (string) | this property is used for development purposes only and can otherwise be ignored                                     |
| CCaddress        | (string) | taking the module's EVAL code as a modifier, this is the Fluidity address from the pubkey of the user                    |
| myCCaddress      | (string) | taking the module's EVAL code as a modifier, this is the Fluidity address from the pubkey of the user                    |
| myaddress        | (string) | the public address of the pubkey used to launch the chain                                                            |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD rewardsaddress 03810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "RewardsCCaddress": "RTsRBYL1HSvMoE3qtBJkyiswdVaWkm8YTK",
  "Rewardsmarker": "RMgye9jeczNjQx9Uzq8no8pTLiCSwuHwkz",
  "GatewaysPubkey": "03ea9c062b9652d8eff34879b504eda0717895d27597aaeb60347d65eed96ccb40",
  "RewardsCCassets": "RLh5sgvh3scCyM4aq1fhYhwgfbmb5SpCkT",
  "CCaddress": "RJdwcBsoWwmt9dtSqyFCULNW2F3zj2mcD3",
  "myCCaddress": "RJdwcBsoWwmt9dtSqyFCULNW2F3zj2mcD3",
  "myaddress": "RVXhz5UCJfSRoTfa4zvBFBrpDBbqMM21He"
}
```

</collapse-text>


## rewardscreatefunding

**rewardscreatefunding name amount APR mindays maxdays mindeposit**

The `rewardscreatefunding` method creates a new `rewards` plan.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

The `sendrawtransaction` method will then return a `txid`. This `txid` is the `fundingtxid` that serves to identify the `rewards` plan.

::: tip
If you create a plan with <b>mindeposit: 10000</b>, make sure to also add 10000 of your coin and the transaction fees using the <b>rewardsaddfunding</b> call after creating the plan. The rewards module won't allow locking of funds greater than the amount already locked in a single transaction as it needs to assure that it will have the required funds to pay.
:::

### Arguments

| Name | Type | Description | 
| ---------- | -------- | ----------------------------------------------------------- |
| name       | (string) | the desired name of your rewards plan                       |
| amount     | (number) | the amount of seed funds to withdraw from your wallet       |
| APR        | (number) | the annual percentage of rewards, given in percentage units |
| mindays    | (number) | the minimum number of days the funds will be locked         |
| maxdays    | (number) | the maximum number of days the funds will be locked         |
| mindeposit | (number) | the minimum deposit amount for a user to participate        |

### Response

| Name | Type | Description | 
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1: Create raw transaction HEX using your own parameter

```bash
./komodo-cli -ac_name=HELLOWORLD rewardscreatefunding FREE 1000 5 1 10 10
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "010000000104f2435046f3ad452e76e53ec01429ae4f49d3322e8cc96da96b9e35d6ada70e0000000049483045022100ebd06f60dea0e1fbfc82fdb1f17ca265c63bae51cd2db558946871513f64453902207d4d39b2418a5206bd7ef4efb9130f93f304577e0c84cc79be4e8abe0c8b22fe01ffffffff0400e8764817000000302ea22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401cc1027000000000000232103da60379d924c2c30ac290d2a86c2ead128cb7bd571f69211cb95356e2dcc5eb9ace069fb0501090000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000002c6a2ae54646524545000000000065cd1d000000008051010000000000002f0d000000000000ca9a3b0000000000000000"
}
```

</collapse-text>


Step 2: Broadcast/send the raw hex/transaction. This will output the txid which is the fundingtxid, also called the rewards plan id.

```bash
./komodo-cli -ac_name=ATEST sendrawtransaction 010000000104f2435046f3ad452e76e53ec01429ae4f49d3322e8cc96da96b9e35d6ada70e0000000049483045022100ebd06f60dea0e1fbfc82fdb1f17ca265c63bae51cd2db558946871513f64453902207d4d39b2418a5206bd7ef4efb9130f93f304577e0c84cc79be4e8abe0c8b22fe01ffffffff0400e8764817000000302ea22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401cc1027000000000000232103da60379d924c2c30ac290d2a86c2ead128cb7bd571f69211cb95356e2dcc5eb9ace069fb0501090000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000002c6a2ae54646524545000000000065cd1d000000008051010000000000002f0d000000000000ca9a3b0000000000000000
```


<collapse-text hidden title="Response">


```bash
e020151cd81647b20aa45a0e6850216ae52d3e895443bbe1ae97dea3ae6767bd
```

</collapse-text>


Step 3: Decode the raw transaction (optional to check if the values are sane)

```bash
./komodo-cli -ac_name=ATEST decoderawtransaction 010000000104f2435046f3ad452e76e53ec01429ae4f49d3322e8cc96da96b9e35d6ada70e0000000049483045022100ebd06f60dea0e1fbfc82fdb1f17ca265c63bae51cd2db558946871513f64453902207d4d39b2418a5206bd7ef4efb9130f93f304577e0c84cc79be4e8abe0c8b22fe01ffffffff0400e8764817000000302ea22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401cc1027000000000000232103da60379d924c2c30ac290d2a86c2ead128cb7bd571f69211cb95356e2dcc5eb9ace069fb0501090000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000002c6a2ae54646524545000000000065cd1d000000008051010000000000002f0d000000000000ca9a3b0000000000000000
```


<collapse-text hidden title="Response">


```json
{
  "txid": "e020151cd81647b20aa45a0e6850216ae52d3e895443bbe1ae97dea3ae6767bd",
  "size": 322,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "0ea7add6359e6ba96dc98c2e32d3494fae2914c03ee5762e45adf3465043f204",
      "vout": 0,
      "scriptSig": {
        "asm": "3045022100ebd06f60dea0e1fbfc82fdb1f17ca265c63bae51cd2db558946871513f64453902207d4d39b2418a5206bd7ef4efb9130f93f304577e0c84cc79be4e8abe0c8b22fe01",
        "hex": "483045022100ebd06f60dea0e1fbfc82fdb1f17ca265c63bae51cd2db558946871513f64453902207d4d39b2418a5206bd7ef4efb9130f93f304577e0c84cc79be4e8abe0c8b22fe01"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 1000.0,
      "valueSat": 100000000000,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["RTsRBYL1HSvMoE3qtBJkyiswdVaWkm8YTK"]
      }
    },
    {
      "value": 0.0001,
      "valueSat": 10000,
      "n": 1,
      "scriptPubKey": {
        "asm": "03da60379d924c2c30ac290d2a86c2ead128cb7bd571f69211cb95356e2dcc5eb9 OP_CHECKSIG",
        "hex": "2103da60379d924c2c30ac290d2a86c2ead128cb7bd571f69211cb95356e2dcc5eb9ac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RMgye9jeczNjQx9Uzq8no8pTLiCSwuHwkz"]
      }
    },
    {
      "value": 98999.9998,
      "valueSat": 9899999980000,
      "n": 2,
      "scriptPubKey": {
        "asm": "03810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5 OP_CHECKSIG",
        "hex": "2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RVXhz5UCJfSRoTfa4zvBFBrpDBbqMM21He"]
      }
    },
    {
      "value": 0.0,
      "valueSat": 0,
      "n": 3,
      "scriptPubKey": {
        "asm": "OP_RETURN e54646524545000000000065cd1d000000008051010000000000002f0d000000000000ca9a3b00000000",
        "hex": "6a2ae54646524545000000000065cd1d000000008051010000000000002f0d000000000000ca9a3b00000000",
        "type": "nulldata"
      }
    }
  ],
  "vjoinsplit": []
}
```

</collapse-text>


## rewardsinfo

**rewardsinfo fundingtxid**

The `rewardsinfo` method returns information about specific `rewards` plan.

Use [rewardslist](../customconsensus/rewards.html#rewardslist) to see a list of all available `fundingtxid`'s.

### Arguments

| Name | Type | Description | 
| ----------- | -------- | -------------------------------------------------- |
| fundingtxid | (string) | the txid given on the creation of the rewards plan |

### Response

| Name | Type | Description | 
| ---------- | -------- | --------------------------------------------------------------------------- |
| name       | (string) | the name of the rewards plan                                                |
| sbits      | (number) | a 64-bit int binary encoding of the first 8 characters of the name property |
| APR        | (number) | the annual percentage of rewards, given in percentage units                 |
| minseconds | (number) | the minimum number of seconds the funds will be locked                      |
| maxseconds | (number) | the maximum number of seconds the funds will be locked                      |
| mindeposit | (number) | the minimum deposit amount                                                  |
| funding    | (number) | the total available funds in the rewards plan                               |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD rewardsinfo e020151cd81647b20aa45a0e6850216ae52d3e895443bbe1ae97dea3ae6767bd
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "fundingtxid": "e020151cd81647b20aa45a0e6850216ae52d3e895443bbe1ae97dea3ae6767bd",
  "name": "FREE",
  "sbits": 1162170950,
  "APR": "5.00000000",
  "minseconds": 86400,
  "maxseconds": 864000,
  "mindeposit": "10.00000000",
  "funding": "1100.00000000",
  "locked": "200.00000000"
}
```

</collapse-text>


## rewardslist

**rewardslist**

The `rewardslist` method lists the `fundingtxid`'s of all the rewards plans available on the Smart Chain.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| ----------- | -------- | ------------------------------------------------------------------------- |
| fundingtxid | (string) | the txid of the transaction that created and funded the relevant plan |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD rewardslist

```


<collapse-text hidden title="Response">


```bash
[
  "e020151cd81647b20aa45a0e6850216ae52d3e895443bbe1ae97dea3ae6767bd"
]
```

</collapse-text>


## rewardslock

**rewardslock name fundingtxid amount**

The `rewardslock` method commits your desired amount of funds into the specified rewards plan. They remain locked until the minimum number of seconds/days passes.

The method returns a `hex` value that must be broadcast using [sendrawtransaction.](../komodo-api/rawtransactions.html#sendrawtransaction)

The `sendrawtransaction` method will then return a `txid`, which is later used in the [rewardsunlock](../customconsensus/rewards.html#rewardsunlock) method. In general, it is best to save this `txid` in a secure location.

If the final `txid` is lost, it is possible to find it again. See [rewardsunlock](../customconsensus/rewards.html#rewardsunlock) for more information.

### Arguments

| Name | Type | Description | 
| ----------- | -------- | --------------------------------------------------------------------------- |
| name        | (string) | the name of the rewards plan                                                |
| fundingtxid | (string) | the txid that identifies the desired rewards plan                           |
| amount      | (number) | the amount of funds to commit to the plan (must be over the plan's minimum) |

### Response

| Name | Type | Description | 
| --------- | -------- | ------------------------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                                       |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the `diceaddfunds` command |

#### :pushpin: Examples

Step 1: Create raw transaction

```bash
./komodo-cli -ac_name=HELLOWORLD rewardslock FREE e020151cd81647b20aa45a0e6850216ae52d3e895443bbe1ae97dea3ae6767bd 200
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "010000000180a53d85b02f6f61c5ddf94052c2d46a0161888c029114a9bf8dceeb4ea98c000100000049483045022100cf5581a6729eb0f37d03f0975dd6cfaca79ea08d380dae7df25b2335931bff5d02204feaf188f7f28d90c056a7b2bfa1f8d38fdf242c333470cf1e0cd3534ef1609701ffffffff0400c817a804000000302ea22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401cc1027000000000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5acb048d709fa080000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000002c6a2ae54c4652454500000000bd6767aea3de97aee1bb4354893e2de56a2150680e5aa40ab24716d81c1520e000000000"
}
```

</collapse-text>


Step 2: Broadcast raw transaction

```bash
./komodo-cli -ac_name=ATEST sendrawtransaction 010000000180a53d85b02f6f61c5ddf94052c2d46a0161888c029114a9bf8dceeb4ea98c000100000049483045022100cf5581a6729eb0f37d03f0975dd6cfaca79ea08d380dae7df25b2335931bff5d02204feaf188f7f28d90c056a7b2bfa1f8d38fdf242c333470cf1e0cd3534ef1609701ffffffff0400c817a804000000302ea22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401cc1027000000000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5acb048d709fa080000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000002c6a2ae54c4652454500000000bd6767aea3de97aee1bb4354893e2de56a2150680e5aa40ab24716d81c1520e000000000
```


<collapse-text hidden title="Response">


```bash
494c4e8ab19ab73db9fde0454762e50ff3621d9708170083ea9d925918ec0263
```

</collapse-text>


Step 3: Decode raw transaction (optional to check if the values are sane)

```bash
./komodo-cli -ac_name=ATEST decoderawtransaction 010000000180a53d85b02f6f61c5ddf94052c2d46a0161888c029114a9bf8dceeb4ea98c000100000049483045022100cf5581a6729eb0f37d03f0975dd6cfaca79ea08d380dae7df25b2335931bff5d02204feaf188f7f28d90c056a7b2bfa1f8d38fdf242c333470cf1e0cd3534ef1609701ffffffff0400c817a804000000302ea22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401cc1027000000000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5acb048d709fa080000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000002c6a2ae54c4652454500000000bd6767aea3de97aee1bb4354893e2de56a2150680e5aa40ab24716d81c1520e000000000
```


<collapse-text hidden title="Response">


```json
{
  "txid": "494c4e8ab19ab73db9fde0454762e50ff3621d9708170083ea9d925918ec0263",
  "size": 322,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "008ca94eebce8dbfa91491028c8861016ad4c25240f9ddc5616f2fb0853da580",
      "vout": 1,
      "scriptSig": {
        "asm": "3045022100cf5581a6729eb0f37d03f0975dd6cfaca79ea08d380dae7df25b2335931bff5d02204feaf188f7f28d90c056a7b2bfa1f8d38fdf242c333470cf1e0cd3534ef1609701",
        "hex": "483045022100cf5581a6729eb0f37d03f0975dd6cfaca79ea08d380dae7df25b2335931bff5d02204feaf188f7f28d90c056a7b2bfa1f8d38fdf242c333470cf1e0cd3534ef1609701"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 200.0,
      "valueSat": 20000000000,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["RTsRBYL1HSvMoE3qtBJkyiswdVaWkm8YTK"]
      }
    },
    {
      "value": 0.0001,
      "valueSat": 10000,
      "n": 1,
      "scriptPubKey": {
        "asm": "03810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5 OP_CHECKSIG",
        "hex": "2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RVXhz5UCJfSRoTfa4zvBFBrpDBbqMM21He"]
      }
    },
    {
      "value": 98699.9995,
      "valueSat": 9869999950000,
      "n": 2,
      "scriptPubKey": {
        "asm": "03810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5 OP_CHECKSIG",
        "hex": "2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RVXhz5UCJfSRoTfa4zvBFBrpDBbqMM21He"]
      }
    },
    {
      "value": 0.0,
      "valueSat": 0,
      "n": 3,
      "scriptPubKey": {
        "asm": "OP_RETURN e54c4652454500000000bd6767aea3de97aee1bb4354893e2de56a2150680e5aa40ab24716d81c1520e0",
        "hex": "6a2ae54c4652454500000000bd6767aea3de97aee1bb4354893e2de56a2150680e5aa40ab24716d81c1520e0",
        "type": "nulldata"
      }
    }
  ],
  "vjoinsplit": []
}
```

</collapse-text>


## rewardsunlock

**rewardsunlock name fundingtxid (txid)**

The `rewardsunlock` method unlocks your funds from a specific rewards plan after the minimum lock time is met. If `txid` is not provided, `rewardsunlock` unlocks all funds in the `fundingtxid` plan.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method to complete the command.

If you attempt to unlock your funds before the minimum period is met, the daemon returns this error:

The method requires the `txid` that was returned as a result of the original [rewardslock](../customconsensus/rewards.html#rewardslock) method.

If the original `txid` is lost, it is possible to find it again by either rebroadcasting the original `hex` (if it is available), or by scanning through available utxos using the [getaddressutxos](../komodo-api/address.html#getaddressutxos) method.

::: tip
{
"result": "error",
"error": "reward 0 is <= the transaction fee"
}
:::

An error similar to the one below prints in the console:

```
APR 5.00000000 minseconds.86400 maxseconds.864000 mindeposit 10.00000000

duration 74628 < minseconds 86400

reward 0 is <= the transaction fee

amount 200.00000000 -> reward 0.00000000
```

### Arguments

| Name | Type | Description | 
| ----------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| name        | (string)           | the name of the rewards plan                                                                                                                                       |
| fundingtxid | (string)           | the txid that identifies the desired rewards plan                                                                                                                  |
| txid        | (string, optional) | the txid that was returned as a result of the original rewardslock command; if `txid` is not provided, `rewardsunlock` unlocks all funds in the `fundingtxid` plan |

### Response

| Name | Type | Description | 
| --------- | -------- | ------------------------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                                       |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the `diceaddfunds` command |

#### :pushpin: Examples

Step 1: Create raw transaction

```bash
./komodo-cli -ac_name=HELLOWORLD rewardsunlock FREE e020151cd81647b20aa45a0e6850216ae52d3e895443bbe1ae97dea3ae6767bd 494c4e8ab19ab73db9fde0454762e50ff3621d9708170083ea9d925918ec0263
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "01000000026302ec1859929dea83001708971d62f30fe5624745e0fdb93db79ab18a4e4c49000000007b4c79a276a072a26ba067a565802103da60379d924c2c30ac290d2a86c2ead128cb7bd571f69211cb95356e2dcc5eb98140dd5c7a6e8436748501608056b934a6b6cd54122f9451a1ca76f3d41568cb0e7a08e4d4f9045083425f42a4171e42b2d32f5e331f87d5b45298e006b909c706d2a100af038001e5a10001ffffffff45fc2d61dd7bf709409c3e5b9021ebd6191901a2a43fa7ed2704c03aa0d3a682000000007b4c79a276a072a26ba067a565802103da60379d924c2c30ac290d2a86c2ead128cb7bd571f69211cb95356e2dcc5eb9814011825693143f97dc51d34b47638f314146c20c92b5020673fb7411ab37018c2003870255e17d87d46b7af7d042335579de566ce492fd8c3c4e883253870ba329a100af038001e5a10001ffffffff0349f04c4817000000302ea22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401cca79841a804000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000002c6a2ae5554652454500000000bd6767aea3de97aee1bb4354893e2de56a2150680e5aa40ab24716d81c1520e000000000"
}
```

</collapse-text>


Step 2: Broadcast raw transaction

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 01000000026302ec1859929dea83001708971d62f30fe5624745e0fdb93db79ab18a4e4c49000000007b4c79a276a072a26ba067a565802103da60379d924c2c30ac290d2a86c2ead128cb7bd571f69211cb95356e2dcc5eb98140dd5c7a6e8436748501608056b934a6b6cd54122f9451a1ca76f3d41568cb0e7a08e4d4f9045083425f42a4171e42b2d32f5e331f87d5b45298e006b909c706d2a100af038001e5a10001ffffffff45fc2d61dd7bf709409c3e5b9021ebd6191901a2a43fa7ed2704c03aa0d3a682000000007b4c79a276a072a26ba067a565802103da60379d924c2c30ac290d2a86c2ead128cb7bd571f69211cb95356e2dcc5eb9814011825693143f97dc51d34b47638f314146c20c92b5020673fb7411ab37018c2003870255e17d87d46b7af7d042335579de566ce492fd8c3c4e883253870ba329a100af038001e5a10001ffffffff0349f04c4817000000302ea22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401cca79841a804000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000002c6a2ae5554652454500000000bd6767aea3de97aee1bb4354893e2de56a2150680e5aa40ab24716d81c1520e000000000
```


<collapse-text hidden title="Response">


```bash
7a69605f5ecfeb0613c8573cbc4ae2471698a65b60c983ec21fb41f09975c000
```

</collapse-text>


Step 3: Decode raw transaction (optional to check if the values are sane)

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 01000000026302ec1859929dea83001708971d62f30fe5624745e0fdb93db79ab18a4e4c49000000007b4c79a276a072a26ba067a565802103da60379d924c2c30ac290d2a86c2ead128cb7bd571f69211cb95356e2dcc5eb98140dd5c7a6e8436748501608056b934a6b6cd54122f9451a1ca76f3d41568cb0e7a08e4d4f9045083425f42a4171e42b2d32f5e331f87d5b45298e006b909c706d2a100af038001e5a10001ffffffff45fc2d61dd7bf709409c3e5b9021ebd6191901a2a43fa7ed2704c03aa0d3a682000000007b4c79a276a072a26ba067a565802103da60379d924c2c30ac290d2a86c2ead128cb7bd571f69211cb95356e2dcc5eb9814011825693143f97dc51d34b47638f314146c20c92b5020673fb7411ab37018c2003870255e17d87d46b7af7d042335579de566ce492fd8c3c4e883253870ba329a100af038001e5a10001ffffffff0349f04c4817000000302ea22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401cca79841a804000000232103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac00000000000000002c6a2ae5554652454500000000bd6767aea3de97aee1bb4354893e2de56a2150680e5aa40ab24716d81c1520e000000000
```


<collapse-text hidden title="Response">


```json
{
  "txid": "7a69605f5ecfeb0613c8573cbc4ae2471698a65b60c983ec21fb41f09975c000",
  "size": 492,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "494c4e8ab19ab73db9fde0454762e50ff3621d9708170083ea9d925918ec0263",
      "vout": 0,
      "scriptSig": {
        "asm": "a276a072a26ba067a565802103da60379d924c2c30ac290d2a86c2ead128cb7bd571f69211cb95356e2dcc5eb98140dd5c7a6e8436748501608056b934a6b6cd54122f9451a1ca76f3d41568cb0e7a08e4d4f9045083425f42a4171e42b2d32f5e331f87d5b45298e006b909c706d2a100af038001e5a10001",
        "hex": "4c79a276a072a26ba067a565802103da60379d924c2c30ac290d2a86c2ead128cb7bd571f69211cb95356e2dcc5eb98140dd5c7a6e8436748501608056b934a6b6cd54122f9451a1ca76f3d41568cb0e7a08e4d4f9045083425f42a4171e42b2d32f5e331f87d5b45298e006b909c706d2a100af038001e5a10001"
      },
      "sequence": 4294967295
    },
    {
      "txid": "82a6d3a03ac00427eda73fa4a2011919d6eb21905b3e9c4009f77bdd612dfc45",
      "vout": 0,
      "scriptSig": {
        "asm": "a276a072a26ba067a565802103da60379d924c2c30ac290d2a86c2ead128cb7bd571f69211cb95356e2dcc5eb9814011825693143f97dc51d34b47638f314146c20c92b5020673fb7411ab37018c2003870255e17d87d46b7af7d042335579de566ce492fd8c3c4e883253870ba329a100af038001e5a10001",
        "hex": "4c79a276a072a26ba067a565802103da60379d924c2c30ac290d2a86c2ead128cb7bd571f69211cb95356e2dcc5eb9814011825693143f97dc51d34b47638f314146c20c92b5020673fb7411ab37018c2003870255e17d87d46b7af7d042335579de566ce492fd8c3c4e883253870ba329a100af038001e5a10001"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 999.97249609,
      "valueSat": 99997249609,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c802065686d47a4049c2c845a71895a915eb84c04445896eec5dc0be40df0b31372da8103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["RTsRBYL1HSvMoE3qtBJkyiswdVaWkm8YTK"]
      }
    },
    {
      "value": 200.02740391,
      "valueSat": 20002740391,
      "n": 1,
      "scriptPubKey": {
        "asm": "03810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5 OP_CHECKSIG",
        "hex": "2103810d28146f60a42090991b044fe630d1664f3f8f46286c61e7420523318047b5ac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RVXhz5UCJfSRoTfa4zvBFBrpDBbqMM21He"]
      }
    },
    {
      "value": 0.0,
      "valueSat": 0,
      "n": 2,
      "scriptPubKey": {
        "asm": "OP_RETURN e5554652454500000000bd6767aea3de97aee1bb4354893e2de56a2150680e5aa40ab24716d81c1520e0",
        "hex": "6a2ae5554652454500000000bd6767aea3de97aee1bb4354893e2de56a2150680e5aa40ab24716d81c1520e0",
        "type": "nulldata"
      }
    }
  ],
  "vjoinsplit": []
}
```

</collapse-text>

# Rogue

## Tutorial Availability

An installation, Rogue API, and gameplay walkthrough is available in the [<b>Fluidity Tutorials section.</b>](../basic-docs/fluidity/fluidity-tutorials/rogue-module-tutorial.html#introduction)

## bailout

**cclib bailout 17 '["gametxid"]'**

The `bailout` method allows a user to withdraw their character from the game.

This method is only available when the character is still alive. The character must remain alive until the returned `bailout_txid` is mined.

Also, the character must have more than `0` gold and must have killed at least `1` monster. Otherwise, the `bailout` method will treat the character as dead, regardless of the character's status.

When the character successfully bails out from the game, all in-game gold the character has captured is converted into `ROGUE` coins.

The conversion ratio depends upon the mode of gameplay.

- Single-player mode:
```
ROGUE_satoshis = gold * gold * dungeon_level_on_exit * 10
```

- Multi-player mode:
```
ROGUE_satoshis = gold * gold * dungeon_level_on_exit * 20
```

The conversion is facilitated using globally locked `ROGUE` coins. The funds in this global vault automatically accrue through asset-chain activity. In the event that there are not enough globally locked funds at the time the method is executed, the player must simply wait until the funds are generated via automated methods. You can encourage this fund to grow more quickly by encouraging other players and people to transact using ROGUE, as transactions feed the fund.

The method returns a `hex` value. While most methods in the Komodo API require the user/developer to broadcast the `hex` value using [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction), the Rogue module broadcasts automatically.

#### Arguments

| Name     | Type     | Description                                                                                                      |
| -------- | -------- | ---------------------------------------------------------------------------------------------------------------- |
| gametxid | (string) | the `gametxid` transaction id that identifies the game for which the user would like to bail out their character |

#### Response

| Name        | Type     | Description                                                                                                                                                                |
| ----------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| name        | (string) | the name of the module                                                                                                                                                     |
| method      | (string) | the name of the method                                                                                                                                                     |
| myrogueaddr | (string) | the address on the Smart Chain for the user's `pubkey`     |
| gametxid    | (string) | the unique `gametxid` transaction id that identifies this game                                                                                                             |
| hex        | (string)         | a `hex` value containing the relevant game data; this value is broadcast automatically |
| txid        | (string) | a `playertxid` transaction id that identifies this unique character; this txid can be used in the future with the `register` method to reuse the character from this game |
| result      | (string) | whether the command executed successfully                                                                                                                                  |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=ROGUE cclib bailout 17 '["39b65c12e37f6338b2daf8b7d8d6e1b6c083622590cb7a318daadabc785b73f0"]'
```


<collapse-text hidden title="Response">


```bash
{
  "name": "rogue",
  "method": "bailout",
  "myrogueaddr": "RVuzXY65FyJiPPWSBc9efATh6nb4M9MceR",
  "gametxid": "39b65c12e37f6338b2daf8b7d8d6e1b6c083622590cb7a318daadabc785b73f0",
  "hex": "0400008085202f8902261b7562e9ce81a3b666a69cd71c1900bece3e8ca9bb85430076f0de51ef9b8700000000a74ca5a281a1a0819ca28194a067a5658021027d28d7d59ac499fac55f89b9e06933d66aaf74435c48326d83f8fbc6a7b14e858140d2f916906d56a615de2c3a04bf7977df9136a7adc793681917bc44656c61c0ef68038ff1072632d5b546b17c9a0f58d5e057c4794f01e54c90a247460d6bd2afa129a5278020446b52761bffb00eaa7a055c9994987ce2120a551fb4dfd01ffae1ffbee6b56b8103020000af03800111a10001fffffffff0735b78bcdaaa8d317acb90256283c0b6e1d6d8b7f8dab238637fe3125cb63902000000a74ca5a281a1a0819ca28194a067a56580210223b2b9d35fb6383bbbc0dd6668825c91713bc21081b9ce33df3d7edbafa883058140c08bf9ed2c6ddbe3298fcad23f7397fd17bb76cafada4793acb7a6a4c08908731bdf90ace865fa8111a827d874fbd8f447fecca5982654685365577f1b5e7d36a129a5278020446b52761bffb00eaa7a055c9994987ce2120a551fb4dfd01ffae1ffbee6b56b8103020000af03800111a10001ffffffff0300a60e0000000000302ea22c80203d1579313abe7d8ea85f48c65ea66fc512c878c0d0e6f6d54036669de940febf8103120c008203000401cc30750000000000002321027d28d7d59ac499fac55f89b9e06933d66aaf74435c48326d83f8fbc6a7b14e85ac00000000000000005f6a4c5c1151f0735b78bcdaaa8d317acb90256283c0b6e1d6d8b7f8dab238637fe3125cb63905524f4755450c4c6542726f6e204a616d65730000000021027d28d7d59ac499fac55f89b9e06933d66aaf74435c48326d83f8fbc6a7b14e850000000000c04c00000000000000000000000000",
  "txid": "194fe36a878fdac853e05c9b48b771a69a9a980c22c803b2ec5c2ceecb719329",
  "result": "success"
}
```

</collapse-text>


## extract

**cclib extract 17 '["gametxid","pubkey"]'**

The `extract` method allows the user to extract the complete history of a game. This allows the user to view a replay of the game.

#### Arguments

| Name     | Type     | Description                                                                                              |
| -------- | -------- | -------------------------------------------------------------------------------------------------------- |
| gametxid | (string) | the transaction id that was returned after broadcasting the returned hex value from the `newgame` method |
| pubkey   | (string) | the `pubkey` of the player for whom the user desires to extract all relevant game data                   |

#### Response

| Name       | Type     | Description                                                                                              |
| ---------- | -------- | -------------------------------------------------------------------------------------------------------- |
| name       | (string) | the name of the module                                                                                   |
| method     | (string) | the name of the method                                                                                   |
| gametxid   | (string) | the transaction id that was returned after broadcasting the returned hex value from the `newgame` method |
| rogueaddr  | (string) | the address for the `pubkey`                                                              |
| status     | (string) | whether the command executed successfully                                                                |
| keystrokes | (string) | all keyboard strokes concatenated into a single hex string                                               |
| numkeys    | (number) | the total number of keystrokes (ASCII symbols)                                                               |
| playertxid | (string) | the `playertxid` transaction id that represents the character belonging to the indicated `pubkey`        |
| extracted  | (string) | the gameplay progress extracted via the `keystrokes` replay feature     |
| seed       | (decimal number)   | the blockchain-generated random seed. This provides the necessary randomization for players to generate the current game's level design. The `seed` value is revealed at the `start` block height.                                                                        |
| replay     | (string) | the complete terminal command that must be executed to begin this game                                   |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=ROGUE cclib extract 17 '["6bb0efcb14cd5101a4d8d8865c6a93162aa9480c5d3e0ce33902193cebdc4c39","0325151cf0f7321d0cde232898c5adc6b60f32df71b79af3a49d10020d42925ae9"]'
```


<collapse-text hidden title="Response">


```bash
{
  "name": "rogue",
  "method": "extract",
  "gametxid": "6bb0efcb14cd5101a4d8d8865c6a93162aa9480c5d3e0ce33902193cebdc4c39",
  "rogueaddr": "RJHD68KaUg14DaooPz5VFXeTTh8qdpEseb",
  "status": "success",
  "keystrokes": "772a2064572a20636868686a68686866686868686868686868686868686c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6b6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c686a686a68686c6b6c6c6c6a6c6a6a6a6c6a6a6a6a6a686a6868686868686a6a686a6a6c6c6c6c6c6c6c6c6c6a6a6a6a6a6a6a6a6a6a686b6b6b6c6b6b6b6b6b6b68686868686868686b6b68206b686868686868686868686868686868686868686868686a6a6a6a686868686868686868686b686b686c6c6a6a6a6c6a6c6a6a6a6a6a6a6c6c6c6c6c6c6c6c6c6c6a6a6a686b6c6b6b6b686868686868686868686b6b6b6b68686868686868686868686868686c6c6c6c206c6c686868686868686b6b68686868206868686a6c6c6a6a6a6a6a6a68686868686868686868686a6a6a666a686868686b686c206c6920207170686c6c206a6b206a6920207270686b6c6c6c6c6c6c6c6c6b686b6b6b6c6c6c6c6c6c6c6c6b6b20666b6b6b6b686868686868686868686b6b686b6b6b6b6b6b6b6c6c6c6c6b6b6b6b6c6c6c6c6c6c6c6c6c6c6a6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6a206868686868686868686868666c6c6c6c6c6a6c6c6c6c6c6c6c6c6a6a6a68686868686868686868686868686a6a6a6a6a6a6a6a6c6c6c6c6c6c6c6c6c6a6a6a68686868683e6c686668686b68206c206c6a686a6a6a6a6a6a6a206b6b666a6a6c6c6a6c6c6c6c6868686868686868686868686868686868686868686868686868686868686868686a6a6a686868686868686868686b68686868686868686868206869206868646c6c6c6c6b6b686b6b6b6b6c6c6c6c6b6b6b6868686868686b6b6b6b6b6b6b68686868686868686868686b6b6b6b6b6c6c6c6c6c6c6c6c6c6c6c20686868666c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6a6a6a6c6c6c6c6c6c206868686c6c6c20666b6b6920646a6c64696a686c6c6b206a692071202020726d6b6a6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6a6a6a6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c73736868686868686868686868686868686868686868686868686868686868686868686b6b6b686868686868686868686868686a686a6a6a6a6a6c6c6c6c6c6c6c6c6c6c206c6c6c206c6c6c6c206c6a6a6a6a6a6868686868686868686b6b6b6868686868206a20206c206c6c206c6c206c20",
  "numkeys": 884,
  "playertxid": "aeea6d8b3f50391a4bd477761e4d15ce3872ca6eccdfdb0fe40dd35868924c48",
  "extracted": "$$$gold.288 hp.52 strength.16/16 level.6 exp.271 dl.2",
  "seed": 4344864534442616921,
  "replay": "cc/rogue/rogue 4344864534442616921"
}
```

</collapse-text>


## gameinfo

**cclib gameinfo 17 '["gametxid"]'**

The `gameinfo` method returns relevant information about the indicated `gametxid` game.

#### Arguments

| Name     | Type     | Description                                                                                              |
| -------- | -------- | -------------------------------------------------------------------------------------------------------- |
| gametxid | (string) | the transaction id that was returned after broadcasting the returned hex value from the `newgame` method |

#### Response

| Name       | Type               | Description                                                            |
| ---------- | ------------------ | ---------------------------------------------------------------------- |
| name       | (string)           | the name of the module                                                     |
| method     | (string)           | the name of the method                                                     |
| gametxid   | (decimal number)   | the indicated `gametxid` transaction id                                |
| result     | (string)           | whether the command executed successfully                              |
| gameheight | (decimal number)   | the block height at which this `gametxid` was created                                                                      |
| height     | (decimal number)   | this value is the same as the `gameheight` value above                                                                         |
| start      | (decimal number)   | the block height at which the seed will be revealed                                                                       |
| starthash  | (string)           | the hash of the `start` block                                                                        |
| seed       | (decimal number)   | the blockchain-generated random seed. This provides the necessary entropy for players to generate the current game's level design. The `seed` value is revealed at the `start` block height.                                                                        |
| run        | (string)           | the complete terminal command that must be executed to begin this game |
| alive      | (decimal number)   | the number of players still alive in the game                          |
| numplayers | (decimal number)   | the total number of players that joined the game                       |
| maxplayers | (decimal number)   | the max number of players the game allows                              |
| buyin      | (number)           | the amount of `ROGUE` coins required for a player to join              |
| players    | (array of strings) | an array containing the identifying transaction ids of each player     |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=ROGUE cclib gameinfo 17 '["b9ab1c3b9a1dceea75d0d87b927a03d8519743d4d64b9be061c40fdd5e4f5026"]'
```


<collapse-text hidden title="Response">


```json
{
  "name": "rogue",
  "method": "gameinfo",
  "gametxid": "b9ab1c3b9a1dceea75d0d87b927a03d8519743d4d64b9be061c40fdd5e4f5026",
  "result": "success",
  "gameheight": 19587,
  "height": 19587,
  "start": 19587,
  "starthash": "0003a5ed4715220a742a6c2381daa5d49d29fa56189c7d676985902734e71e2e",
  "seed": 2991956025523248686,
  "run": "./komodo-cli -ac_name=ROGUE cclib register 17 '["b9ab1c3b9a1dceea75d0d87b927a03d8519743d4d64b9be061c40fdd5e4f5026"]'",
  "alive": 0,
  "numplayers": 0,
  "maxplayers": 1,
  "buyin": 0.0,
  "players": []
}
```

</collapse-text>


## games

**cclib games 17**

The `games` method displays a list of the user's unfinished and finished games.

#### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### Response

| Name      | Type               | Description                                                                                   |
| --------- | ------------------ | --------------------------------------------------------------------------------------------- |
| name      | (string)           | the name of the module                                                                        |
| method    | (string)           | the name of the method                                                                        |
| pastgames | (array of strings) | an array of `gametxid` transaction ids of finished games, from the user's local wallet file   |
| games     | (array of strings) | an array of `gametxid` transaction ids of unfinished games, from the user's local wallet file |
| numgames  | (decimal number)   | the total number of games, from the user's local wallet file                                  |

#### :pushpin: Examples

Command:

```bash
 ./komodo-cli -ac_name=ROGUE cclib games 17
```


<collapse-text hidden title="Response">


```json
{
  "name": "rogue",
  "method": "games",
  "pastgames": [
    "2d1010473c9675a3e04e84fe191404926761f324e4053a0f859d4806f68bbf25",
    "39b65c12e37f6338b2daf8b7d8d6e1b6c083622590cb7a318daadabc785b73f0",
    "790b94addb0c19399a7afedbb7580268f4fc8a3d91a600af6729c4d73fdb6498",
    "bbdecbb3b037e299dd5b303a11e4839e5625c94ce4e36acd3b7b549fec342ad3",
    ...
    ...
    ...
    "43244d4be57564ef441fe8790bb08e23787244f533c9591ab3adb9cf755e9eed",
    "0199a50d45e56060ded6aa30e3ce4ae8ed090c0033c78e3e024aef403277a207",
    "a3833e860ff02d178f431032952f947f7e0c485690d9dd7e6e8133813f253a34",
  ],
  "games": [
    "b94a0c14604df04a994e8fde610af7ddede76a62e1e3d86bbdac18e695662301",
    "3443ad3112908b31cab74ec7094c294d337aad5253e4e1af35eaac1f31ed7ab3",
     ...
     ...
     ...
    "dd859a7a9c980e7a5018913de98e48515a96b1ac54b39515e2cca3efed9659eb"
  ],
  "numgames": 140
}
```

</collapse-text>


## highlander

**cclib highlander 17 '["gametxid"]'**

The `highlander` method allows a character to exit the game and claim the `buyin` prize funds.

In single-player mode, the `highlander` method is available after safely retrieving the `amulet` and exiting the dungeon.

In multi-player mode, the `highlander` method is available either to the character that is the last man standing, or to any character that successfully retrieves the `amulet` and exits the dungeon.

### Highlander Rewards

The character that successfully executes the `highlander` method receives an increased ratio of conversion from in-game gold to `ROGUE` coins. The ratio depends upon the mode of gameplay; see below for further details.

The conversion is facilitated using globally locked `ROGUE` coins. The funds in this global vault automatically accrue through asset-chain activity. In the event that there are not enough globally locked funds at the time the `highlander` method is executed, the player must wait until the funds are generated via automated methods. You can encourage this fund to grow more quickly by encouraging other players and people to transact using ROGUE, as transactions feed the fund.

#### Rewards in Single-Player Mode

```
ROGUE_satoshis = gold * gold * dungeon_level_on_exit * 10
```

#### Rewards in Multi-Player Mode

```
ROGUE_satoshis = gold * gold * dungeon_level_on_exit * 20
```

#### Arguments

| Name     | Type     | Description                                                                                                      |
| -------- | -------- | ---------------------------------------------------------------------------------------------------------------- |
| gametxid | (string) | the `gametxid` transaction id that identifies the game for which the user would like to bail out their character |

#### Response

| Name        | Type     | Description                                                                                                                                                                |
| ----------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| name        | (string) | the name of the module                                                                                                                                                     |
| method      | (string) | the name of the method                                                                                                                                                     |
| myrogueaddr | (string) | the address on the Smart Chain for the user's `pubkey`     |
| gametxid    | (string) | the unique `gametxid` transaction id that identifies this game                                                                                                             |
| txid        | (string) | a `playertxid` transaction id that identifies this unique character; this txid can be used in the future with the `register` method to reuse the character from this game |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=ROGUE cclib highlander 17 '["b94a0c14604df04a994e8fde610af7ddede76a62e1e3d86bbdac18e695662301"]'
```


<collapse-text hidden title="Response">


```bash
{
  "name": "rogue",
  "method": "highlander",
  "myrogueaddr": "RVuzXY65FyJiPPWSBc9efATh6nb4M9MceR",
  "gametxid": "b94a0c14604df04a994e8fde610af7ddede76a62e1e3d86bbdac18e695662301",
  "result": "success",
  "hex": "hex",
  "txid": "txid"
}
```

</collapse-text>


## keystrokes

**cclib keystrokes 17 '["gametxid","keystrokes"]'**

The `keystrokes` method executes the indicated `keystroke` for the indicated `gametxid`.

The player's keystrokes on the keyboard are recorded in ASCII format. [See this link](https://theasciicode.com.ar/) for a table of ASCII keyboard translations.

After a game concludes the complete list of keystrokes can be found in the `~/komodo/src/keystrokes.log` file.

#### Arguments

| Name       | Type     | Description                                                                                                      |
| ---------- | -------- | ---------------------------------------------------------------------------------------------------------------- |
| gametxid   | (string) | the `gametxid` transaction id that identifies the game for which the user would like to bail out their character |
| keystrokes | (string) | the desired keystrokes, provided in ASCII format and concatenated into a single string                          |

#### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| result      | (string) | whether the command executed successfully                                                                                                                                  |
| name        | (string) | the name of the module                                                                                                                                                     |
| method      | (string) | the name of the method                                                                                                                                                     |
| gametxid    | (string) | the unique `gametxid` transaction id that identifies this game                                                                                                             |
| keystrokes | (string) | the desired keystrokes, provided in ASCII format and concatenated into a single string                          |
| batontxid | (string) | the unique `batontxid` transaction id; this value is useful for tracing the route of a utxo/token through the blockchain database |
| playertxid   | (string)           | the unique identifying transaction id of this player                                                    |
| hex        | (string)         | a `hex` value containing the relevant game data; this value is broadcast automatically |
| txid | (string) | a unique transaction id for the `keystrokes` transaction |
| result      | (string) | whether the command executed successfully                                                                                                                                  |
| error | (string) | error messages are returned here |
| id | (string) | the returned value here, `jl777`, is constant and can be ignored |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=ROGUE cclib keystrokes 17 '["777ba510824b467e9ddfb00a075e9cd5c6f73d1fa6f772b1a22563502def25ee","6a68686868686866686820686868682068686868206868666868686c6c6c6c6a6a6a6a6a6a6a6a6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6a6a6a68666b"]'
```


<collapse-text hidden title="Response">


```bash
{
   "result":{
      "name":"rogue",
      "method":"keystrokes",
      "gametxid":"777ba510824b467e9ddfb00a075e9cd5c6f73d1fa6f772b1a22563502def25ee",
      "keystrokes":"6a68686868686866686820686868682068686868206868666868686c6c6c6c6a6a6a6a6a6a6a6a6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6a6a6a68666b",
      "batontxid":"3d9b93fb784852c5899f5cfa11b0c24f185835169781755027cb7e04fe4a7463",
      "playertxid":"0000000000000000000000000000000000000000000000000000000000000000",
      "hex":"0400008085202f890163744afe047ecb2750758197163558184fc2b011fa5c9f89c5524878fb939b3d00000000a74ca5a281a1a0819ca28194a067a5658021027d28d7d59ac499fac55f89b9e06933d66aaf74435c48326d83f8fbc6a7b14e85814086ad1e7babe52189c9201acae2a031284ebba0fa5841f4e35a475c9eb267140d535b96e2379b2c99332c4f5efdbddcb5cd850301b9ffe1ba6de139696cea5439a129a5278020446b52761bffb00eaa7a055c9994987ce2120a551fb4dfd01ffae1ffbee6b56b8103020000af03800111a10001ffffffff029063a70000000000302ea22c80202ba0b269f75c72a0ce23e03812814b1e76a8fd57b3e75fee8b37bfef2b4ebf3581031210008203000401cc0000000000000000ad6a4caa114bee25ef2d506325a2b172f7a61f3df7c6d59c5e070ab0df9d7e464b8210a57b7763744afe047ecb2750758197163558184fc2b011fa5c9f89c5524878fb939b3d21027d28d7d59ac499fac55f89b9e06933d66aaf74435c48326d83f8fbc6a7b14e85456a68686868686866686820686868682068686868206868666868686c6c6c6c6a6a6a6a6a6a6a6a6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6a6a6a68666b00000000a6b900000000000000000000000000",
      "txid":"1fc6543d4aa577e976f9cb449835fe633510e169e00ceff243ca2791d68aec1c",
      "result":"success"
   },
   "error":null,
   "id":"jl777"
}
```

</collapse-text>


## newgame

**cclib newgame 17 '[maxplayers, buyin]'**

The `newgame` method creates a new game.

The `buyin` argument is required for multi-player games. The coins contributed via `buyin` become a winner-takes-all pot. Either the first player to claim the `amulet` and return from the dungeon, or the last player standing; may claim this prize using the [highlander](../customconsensus/rogue.html#highlander) method.

#### Arguments

| Name       | Type                                     | Description                                                                         |
| ---------- | ---------------------------------------- | ----------------------------------------------------------------------------------- |
| maxplayers | (decimal number)                         | the max number of players; if set to `1`, the game begins in single-player mode     |
| buyin      | (number, required if `maxplayers` > `1`) | the required amount to contribute per player; the winner receives all `buyin` coins |

#### Response

| Name       | Type             | Description                                                                                                         |
| ---------- | ---------------- | ------------------------------------------------------------------------------------------------------------------- |
| name       | (string)         | the name of the module                                                                                              |
| method     | (string)         | the name of the method                                                                                              |
| maxplayers | (decimal number) | the max number of players for this game                                                                             |
| buyin      | (number)         | the required amount to contribute per player; the winner receives all `buyin` coins                                 |
| type       | (string)         | the level of difficulty for this game                                                                               |
| hex        | (string)         | a `hex` value containing the relevant game data; this value is broadcast automatically |
| txid       | (string)         | a transaction id that represents the `gametxid`                                                                     |
| result     | (string)         | whether the command executed successfully                                                                           |

#### :pushpin: Examples

Command for a single-player training game:

```bash
./komodo-cli -ac_name=ROGUE cclib newgame 17 "[1]"
```


<collapse-text hidden title="Response">


```json
{
  "name": "rogue",
  "method": "newgame",
  "maxplayers": 1,
  "buyin": 0.0,
  "type": "newbie",
  "hex": "0400008085202f8901018feb110a6e0d8751a158b3e73dac07383c83766a83908d641f2d4b1db6f704010000007b4c79a276a072a26ba067a56580210223b2b9d35fb6383bbbc0dd6668825c91713bc21081b9ce33df3d7edbafa8830581405349ce7a0a3823ca35e3dc30d17c8d8f170bfea89373166f14b8b4f04d36c34a41199ad448074be74b7a6344d0c36b4f68748f976f3f95b7d0c8ec84e54bf773a100af03800111a10001ffffffff061027000000000000302ea22c80203d1579313abe7d8ea85f48c65ea66fc512c878c0d0e6f6d54036669de940febf8103120c008203000401cc40420f0000000000302ea22c80208958791fdd38bdf532c97f1691fd231a3f1f5c0c3cd28b68d7383c8b1078828e81031210008203000401cc1027000000000000302ea22c80208958791fdd38bdf532c97f1691fd231a3f1f5c0c3cd28b68d7383c8b1078828e81031210008203000401cc00b8880000000000302ea22c80203d1579313abe7d8ea85f48c65ea66fc512c878c0d0e6f6d54036669de940febf8103120c008203000401cc10270000000000002321027d28d7d59ac499fac55f89b9e06933d66aaf74435c48326d83f8fbc6a7b14e85ac0000000000000000106a0e114700000000000000000100000000000000964c00000000000000000000000000",
  "txid": "b9ab1c3b9a1dceea75d0d87b927a03d8519743d4d64b9be061c40fdd5e4f5026",
  "result": "success"
}
```

</collapse-text>


## pending

**cclib pending 17**

The `pending` method displays a list of unfinished games on the Smart Chain.

#### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### Response

| Name       | Type               | Description                                                                 |
| ---------- | ------------------ | --------------------------------------------------------------------------- |
| result     | (string)           | whether the command executed successfully                                   |
| name       | (string)           | the name of the module                                                      |
| method     | (string)           | the name of the method                                                      |
| pending    | (array of strings) | an array of `gametxid`'s that represent unfinished games on the Smart Chain |
| numpending | (decimal number)   | the total number of unfinished games on the Smart Chain                     |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=ROGUE cclib pending 17
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "name": "rogue",
  "method": "pending",
  "pending": [
    "19de2b0f2562ae775ef213d1e396bc741ccc4f32bac32b36e8ee5da25e451801",
    "ff5139cfcb47366674f52c550cfb9c11eb298afa1479ce9924d8bac2a407d701",
    "8f3e6104ee324bc6a60430ef9485c682ee890cdb0660e9a747599531fecea203",
    ...
    ...
    ...
    "ff9d5e111caaa0e84666ce6e0fda66e93e4fb13ca2dd0debbdc82e663b36d9fc"
  ],
  "numpending": 175
}
```

</collapse-text>


## playerinfo

**cclib playerinfo 17 '["playertxid"]'**

The `playerinfo` method displays information about the currently active character.

##### Tips on Finding Character Information

There are occasions where the developer may wish to start with the `tokentxid` of a character(s) and from there find the most up-to-date `playertxid`.

The following is one solution:

- If necessary, obtain a list of all `tokens` on the Smart Chain via the [tokenlist](../customconsensus/tokens.html#tokenlist) method.
- For each item in the response, execute an iterative function that executes the [playerinfo](../customconsensus/rogue.html#playerinfo) method on the individual `token`.
  - If the method responds with an error, this means that the supplied `token` does not represent a character. Rather, it represents another on-chain asset, and therefore the token can be ignored.
- For each response from the `playerinfo` method check two elements: whether the data contains a `batontxid`; whether the character is alive.
  - If there is a `batontxid`, the `playertxid` has been used in a game and is no longer valid. Therefore, this `playertxid` can be ignored.
  - Likewise, if the character is no longer alive, it can be ignored.
- Each `token` that has a valid response, no `batontxid`, and represents a living character can be considered the correct `tokentxid` for the discovered `playertxid`.

#### Arguments

| Name     | Type     | Description                                                                                                      |
| -------- | -------- | ---------------------------------------------------------------------------------------------------------------- |
| gametxid | (string) | the `gametxid` transaction id that identifies the game for which the user would like to bail out their character |

#### Response

| Name         | Type               | Description                                                                                             |
| ------------ | ------------------ | ------------------------------------------------------------------------------------------------------- |
| result       | (string)           | whether the command executed successfully                                                               |
| name         | (string)           | the name of the module                                                                                  |
| method       | (string)           | the name of the method                                                                                  |
| player       | (json object)      | a json object containing relevant player data                                                           |
| playertxid   | (string)           | the unique identifying transaction id of this player                                                    |
| tokenid      | (string)           | the unique transaction id that represents this character as a non-fungible asset for on-chain trading using the [Tokens CC](../customconsensus/tokens.html#introduction) module                                                                                                        |
| data         | (string)           | the character-state information in hex form                                                                 |
| pack         | (array of strings) | an array containing the items in the character's pack                                                   |
| packsize     | (number)           | the number of items in the character's pack                                                             |
| hitpoints    | (number)           | see [this linked manual](https://docs.freebsd.org/44doc/usd/30.rogue/paper.pdf) for further information |
| strength     | (number)           | see [this linked manual](https://docs.freebsd.org/44doc/usd/30.rogue/paper.pdf) for further information |
| level        | (number)           | see [this linked manual](https://docs.freebsd.org/44doc/usd/30.rogue/paper.pdf) for further information |
| experience   | (number)           | see [this linked manual](https://docs.freebsd.org/44doc/usd/30.rogue/paper.pdf) for further information |
| dungeonlevel | (number)           | see [this linked manual](https://docs.freebsd.org/44doc/usd/30.rogue/paper.pdf) for further information |
| chain        | (string)           | the name of the Smart Chain on which this game is occurring                                             |
| pname        | (string)           | the name of the user's currently active character                                                       |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=ROGUE cclib playerinfo 17 '["cf2ae0997e24f100aa9da3cda747105e3134a102da69630d6d1683a6f0f7b0ab"]'
```


<collapse-text hidden title="Response">


```json
"{
  "result": "success",
  "name": "rogue",
  "method": "playerinfo",
  "player": {
    "playertxid": "cf2ae0997e24f100aa9da3cda747105e3134a102da69630d6d1683a6f0f7b0ab",
    "tokenid": "929ff2101e974111499f37f2af86280f403f9e704c070a9225398aa5ce83c1cf",
    "data": "580000000c0000001000000001000000070000000700000001000000000000003a0000000000000003000000000000000000000000000000000000001000000000000000000000000000000000000000000000005d00000000000000010000000100000000000000000000000600000012000000000000000000000000000000000000000000000029000000ffffffff010000000000000001000000010000000000000012000000000000003278340000000000317833000000000029000000ffffffff0100000002000000010000000000000000000000120000000000000031783100000000003178310000000000290000000200000026000000030000000000000000000000000000001e00000000000000317831000000000032783300000000002100000000000000010000000a00000000000000000000000b0000001000000000000000307830000000000030783000000000002100000000000000010000000200000000000000000000000b000000100000000000000030783000000000003078300000000000",
    "pack": [
      "3 rations of food",
      "+1 ring mail [protection 4]",
      "A +1,+1 mace",
      "A +1,+0 short bow",
      "38 +0,+0 arrows",
      "A potion of haste self(topaz)",
      "A potion of poison(amber)"
    ],
    "packsize": 7,
    "hitpoints": 12,
    "strength": 16,
    "level": 1,
    "experience": 7,
    "dungeonlevel": 1,
    "chain": "ROGUE",
    "pname": "fred"
  }
}"
```

</collapse-text>


## players

**cclib players 17**

The `players` method displays a list of all `playertxid` transaction ids held in the user's current `pubkey`.

#### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### Response

| Name          | Type               | Description                                                                     |
| ------------- | ------------------ | ------------------------------------------------------------------------------- |
| name          | (string)           | the name of the module                                                          |
| method        | (string)           | the name of the method                                                          |
| playerdata    | (array of strings) | an array containing all `playertxid` transaction ids in the user's local wallet |
| numplayerdata | (decimal number)   | the number of `playertxid` transaction ids in the `playerdata` array            |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=ROGUE cclib players 17
```


<collapse-text hidden title="Response">


```json
{
  "name": "rogue",
  "method": "players",
  "playerdata": [
    "cf2ae0997e24f100aa9da3cda747105e3134a102da69630d6d1683a6f0f7b0ab",
    "1a705d1e900ac760afd5bb24e0d6c40ce6bf10f42d3344559ad18ddfa6ee08bc",
    "5ebd33eb9d62d977bf8d600d84fec1a6a6046a7a171bff64fa9548f05c8caddd"
  ],
  "numplayerdata": 3
}
```

</collapse-text>


## register

**cclib register 17 '["gametxid"(,"playertxid")]'**

The `register` method registers your character for a game.

The optional `playertxid` allows the user to reuse a character that survived a previous game.

For the `playertxid` argument to properly call an existing character, the user's daemon must be set to the `pubkey` that owns the `playertxid`. This can be accomplished either through the [pubkey](../installations/common-runtime-parameters.html#pubkey) launch parameter or through the [setpubkey](..) method.

#### Arguments

| Name       | Type               | Description                                                                   |
| ---------- | ------------------ | ----------------------------------------------------------------------------- |
| gametxid   | (string)           | the `gametxid` of the game the user desires to join                           |
| playertxid | (string, optional) | the `playertxid` of an existing character the user owns and would like to use |

#### Response

| Name       | Type               | Description                                                                           |
| ---------- | ------------------ | ------------------------------------------------------------------------------------- |
| name       | (string)           | the name of the module                                                                |
| method     | (string)           | the name of the method                                                                |
| maxplayers | (decimal number)   | the max number of players allowed in this game                                        |
| buyin      | (number)           | the required `buyin` amount of `ROGUE` coins to enter the game                        |
| type       | (string)           | the level of difficulty for this game                                                 |
| hex        | (string)           | a `hex` value of registration data; this value is broadcast automatically |
| txid       | (string)           | a transaction id that indicates the `playertxid` for this character                   |
| result     | (string)           | whether the command executed successfully                                             |

#### :pushpin: Examples

Command (registration without player):

```bash
./komodo-cli -ac_name=ROGUE cclib register 17 '["b9ab1c3b9a1dceea75d0d87b927a03d8519743d4d64b9be061c40fdd5e4f5026"]'
```


<collapse-text hidden title="Response">


```json
{
  "name": "rogue",
  "method": "register",
  "maxplayers": 1,
  "buyin": 0.0,
  "type": "newbie",
  "hex": "0400008085202f890126504f5edd0fc461e09b4bd6d4439751d8037a927bd8d075eace1d9a3b1cabb901000000a74ca5a281a1a0819ca28194a067a56580210223b2b9d35fb6383bbbc0dd6668825c91713bc21081b9ce33df3d7edbafa883058140a1f23cbe9d8e7a20306df4c86da47b4ae3b59556742b7fcdf68f6f3549b02d734879b94fd73f5847914d448e4d78e48d415bffe55081a491e242ec6256f02638a129a5278020446b52761bffb00eaa7a055c9994987ce2120a551fb4dfd01ffae1ffbee6b56b8103020000af03800111a10001ffffffff03301b0f0000000000302ea22c80202ba0b269f75c72a0ce23e03812814b1e76a8fd57b3e75fee8b37bfef2b4ebf3581031210008203000401cc0100000000000000302ea22c80207f0205ad6b02be91baf2a56dcc77381e7b0e19cb9a83dfb9530316958f5b706781032210008203000401cc0000000000000000446a42115226504f5edd0fc461e09b4bd6d4439751d8037a927bd8d075eace1d9a3b1cabb9000000000000000000000000000000000000000000000000000000000000000000000000bd4c00000000000000000000000000",
  "txid": "855802e2e83d0d4632518959e4ff9e840ed9838f51bd6b3a80dc27b8ea7900ba",
  "result": "success"
}
```

</collapse-text>


## setname

**cclib setname 17 '["pname"]'**

The `setname` method sets the name of a character.

A character may receive a `name` at any point, but the character's name may be set only once. It is not possible to rename a character.

#### Arguments

| Name               | Type     | Description                                                |
| ------------------ | -------- | ---------------------------------------------------------- |
| pname | (string) | the desired name for the user's currently active character |

#### Response

| Name               | Type     | Description                                                |
| ------------------ | -------- | ---------------------------------------------------------- |
| name               | (string) | the name of the module                                     |
| method             | (string) | the name of the method                                     |
| result             | (string) | whether the command executed successfully                  |
| pname | (string) | the desired name for the user's currently active character |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=ROGUE cclib setname 17 '["SuperMegaWarrior"]'
```


<collapse-text hidden title="Response">


```json
{
  "name": "rogue",
  "method": "setname",
  "result": "success",
  "pname": "SuperMegaWarrior"
}
```

</collapse-text>

# Sudoku

## Introduction

The Sudoku Antara Module serves as a proof-of-concept to demonstrate Antara's capabilities as a blockchain-based gaming technology.

The Sudoku module is based on the classic game, Sudoku. To learn more about how Sudoku is played, read the associated Wikipedia article:

[Link to Sudoku Wikipedia article](https://en.wikipedia.org/wiki/Sudoku)

The procedures to launch and finish a game require the execution of various Remote Procedure Calls (RPCs). By design, the Sudoku module assumes the user relies on the associated Sudoku GUI software. The GUI is required because the  UNIX timestamp for each gameplay event must pass trough the Sudoku RPC captcha protection, as this deters bots.

The following installation and walkthrough tutorials can assist the reader in setting up and playing the Sudoku game. For more information, please reach out to our community on [Discord](https://komodoplatform.com/discord). The #cc-sudoku channel is available for questions and assistance.

#### Sudoku Module Flow

- Create a puzzle using the [gen](../customconsensus/sudoku.html#gen) method
  - commit the amount of `SUDOKU` coins that will serve as a bounty for the first node to complete this puzzle
- Find a puzzle to solve using the [pending](../customconsensus/sudoku.html#pending) method
- Gather additional information about any puzzle using the [txidinfo](../customconsensus/sudoku.html#txidinfo) method
- Propose a solution for a puzzle using the [solution](../customconsensus/sudoku.html#solution) method

## Installation

### Requirements

Sudoku is currently playable on Linux machines.

OSX and Windows compatible bundles will be ready as soon as possible. Please ask on our #cc-sudoku channel on [Discord](https://komodoplatform.com/discord) for updates.

The Komodo Sudoku software bundle (also called "Komodoku") for Ubunutu Linux comes complete with all necessary software. To download the bundle, please visit the link below:

[Link to "Komodoku" Software Bundle](https://github.com/tonymorony/Komodoku/releases)

To manually compile the software, follow the instructions below. 

### Install Dependencies

#### Linux

```bash
sudo apt-get update && sudo apt-get upgrade -y
sudo apt-get install build-essential pkg-config libc6-dev m4 g++-multilib autoconf libtool ncurses-dev unzip git python zlib1g-dev wget bsdmainutils automake libboost-all-dev libssl-dev libprotobuf-dev protobuf-compiler libgtest-dev libqt4-dev libqrencode-dev libdb++-dev ntp ntpdate software-properties-common curl libcurl4-gnutls-dev cmake clang libsodium-dev -y
```
<!--

#### macOS (OSX)

Use the terminal to ensure the MacOS XCode tools are installed:

```bash
xcode-select ####Remote later, this line is causing formatting issues ##-#-#install
```

Ensure the latest version of `brew` is installed. If necessary, execute the following command:

```bash
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
```

Once `brew` is installed, execute each of the following commands:

```bash
brew update
brew upgrade
brew tap discoteq/discoteq; brew install flock
brew install autoconf autogen automake
brew install gcc@6
brew install binutils
brew install protobuf
brew install coreutils
brew install wget
```

-->

### Clone & Compile Komodo

#### Linux

```bash
cd ~
git clone https://github.com/jl777/komodo
cd komodo
git checkout FSM
make clean
./zcutil/fetch-params.sh
./zcutil/build.sh -j$(nproc)
```

Wait for the build process to finish, and then continue with the following commands:

```bash
cd src/cc
./makecclib
cp sudokucc.so ../libcc.so
cd ../..
make -j$(nproc)
```
<!--

#### MacOS

```bash
cd ~
git clone https://github.com/jl777/komodo
cd komodo
git checkout FSM
./zcutil/fetch-params.sh
./zcutil/build-mac.sh -j8
```

::: tip
Change the `8` in the `-j8` portion of the last command to any number of processor threads desired and/or appropriate for your machine.
:::

-->

### Update `komodod`

```bash
cd ~/komodo
git checkout FSM
git pull
make clean
./zcutil/build.sh -j$(nproc)
```

Wait for the build process to finish, and then continue with the following commands:

```bash
cd src/cc
./makecclib
cd ../..
make -j$(nproc)
```

### Set `pubkey` value

Ensure the working directory is correct:

```bash
cd ~/komodo/src
```

#### Step 1 - Start the chain

Start the SUDOKU chain with the following command in a terminal window and wait for the daemon to sync. Keep this terminal open and the daemon running for the duration of your Sudoku gameplay.

```bash
./komodod -ac_name=SUDOKU -ac_supply=1000000 -addnode=5.9.102.210 -gen -genproclimit=1 -ac_cclib=sudoku -ac_perc=10000000 -ac_reward=100000000 -ac_cc=60000 -ac_script=2ea22c80203d1579313abe7d8ea85f48c65ea66fc512c878c0d0e6f6d54036669de940febf8103120c008203000401cc &
```

#### Step 2

Open a new terminal. This terminal can be used to execute all remaining installation and gameplay commands.

```bash
./komodo-cli -ac_name=SUDOKU getnewaddress
```

The returned value is a SUDOKU address. We need to find the associated pubkey for this address.

#### Step 3

Use the `validateaddress` method with the address.

```bash
./komodo-cli -ac_name=SUDOKU validateaddress insert_address_here
```

The `validateaddress` method will return information similar to the following:

```json
{
  "isvalid": true,
  "address": "RPCeZmqW4Aam52DFLmMraWtu5CuXPxqk92",
  "scriptPubKey": "76a91498b5caa42ffe9868844c51ba6e085e5e7e92fc2588ac",
  "segid": 13,
  "ismine": true,
  "iswatchonly": false,
  "isscript": false,
  "pubkey": "02f183a71e93dfa7672ce7212187e45eabcf4077fed575348504b20295751ab1a2",
  "iscompressed": true,
  "account": ""
}
```

Look for the `pubkey` value:

```bash
"pubkey": "02f183a71e93dfa7672ce7212187e45eabcf4077fed575348504b20295751ab1a2",
```

This is the `pubkey` for our address.

#### Step 4

Set the pubkey for the SUDOKU asset chain.

```bash
./komodo-cli -ac_name=SUDOKU setpubkey 02f183a71e93dfa7672ce7212187e45eabcf4077fed575348504b20295751ab1a2
```


<collapse-text hidden title="Response">


```json
{
  "address": "RPCeZmqW4Aam52DFLmMraWtu5CuXPxqk92",
  "ismine": true,
  "pubkey": "02f183a71e93dfa7672ce7212187e45eabcf4077fed575348504b20295751ab1a2"
}
```

</collapse-text>


The pubkey is now set.

To reuse this pubkey in the future, include the pubkey as a [pubkey](../installations/common-runtime-parameters.html#pubkey) launch parameter.

For example:

```bash
./komodod -ac_name=SUDOKU -ac_supply=1000000 -pubkey=02f183a71e93dfa7672ce7212187e45eabcf4077fed575348504b20295751ab1a2 -addnode=5.9.102.210 -gen -genproclimit=1 -ac_cclib=sudoku -ac_perc=10000000 -ac_reward=100000000 -ac_cc=60000 -ac_script=2ea22c80203d1579313abe7d8ea85f48c65ea66fc512c878c0d0e6f6d54036669de940febf8103120c008203000401cc &
```

### Install Sudoku Graphical User Interface (GUI)

The Komodo team offers an unofficial graphical user interface (GUI) to assist the user with Sudoku-puzzle solving visualization. By design, the Sudoku module assumes the user relies on the associated Sudoku GUI software. The GUI is required because the  UNIX timestamp for each gameplay event must  pass trough the Sudoku RPC captcha protection, as this deters bots.

Download the portable GUI bundle from the following link: 

[Link to GUI Software Bundle](https://github.com/tonymorony/Komodoku/releases)

To manually compile the GUI from source code, follow the steps below. Please note that the GUI is based on `python2`.

#### Linux

##### Install Dependencies

```bash
sudo apt-get install python-pygame libgnutls28-dev
pip install requests wheel slick-bitcoinrpc pygame
```

##### Install the GUI

```bash
git clone https://github.com/tonymorony/Komodoku
cd Komodoku
```

#### Start Sudoku GUI

```bash
python Sudoku.py
```

<!-- 

#### MacOS (OSX)
there is no compatible daemon right now - so manual installaction on OSX don' have much.
OSX dependencies might be quite tricky part depends of exact OSX version - so I'll just recommend to use portable bundle when it'll be ready

-->

## gen

**cclib gen 17**

The generate method creates a new Sudoku puzzle.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

#### Arguments

| Name | Type | Description |
| ---- | ---- | ----------- |
| (none) | | |

#### Response

Daemon `stdout`:

| Name | Type | Description |
| ---- | ---- | ----------- |
| (solved Sudoku puzzle, visualized) | (string, multi-line) | an ASCII-character representation of the generated Sudoku puzzle, with all solutions in place |
| (unsolved Sudoku puzzle, visualized) | (string, multi-line) | an ASCII-character representation of the generated Sudoku puzzle, with numbers removed for gameplay |
| (numbers remaining)                  | (string)             | a description of how many numbers are remaining to solve in the Sudoku puzzle                       |
| (Sudoku Puzzle - integer)            | (number, multi-line) | a multi-line number-based representation of the solved Sudoku puzzle; no visual embellishments      |
| solve | (number) | a number-based concatenated representation of the unsolved Sudoku puzzle; `0`'s represent empty spaces in the puzzle |
| score | (string) | `score` returns three values: the difficulty of the puzzle calculated by the generator, the solution in concatenated format, the number of numbers left to fill |

JSON output:

| Name | Type | Description |
| ---- | ---- | ----------- |
| result | (string) | whether the command executed successfully |
| name | (string) | name of the module |
| method | (string) | name of the method |
| srand | (number) | the seed of the non-blockchain based puzzle that is creating RNG <!-- I don't know what RNG is, so I don't know how to format this; if the description currently looks good to you, Tony, then it's probably okay --> |
| amount | (number) | the reward provided to the first node to submit the correct solution |
| hex | (string) | a `hex` value representing the encoded data; this must be broadcast using `sendrawtransaction` |
| txid | (string) | a transaction id representing the generation of this Sudoku puzzle, also called the `puzzle_txid` |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=SUDOKU cclib gen 17
```


<collapse-text hidden title="Response">


```bash
-----------------------------------
| 2 : 5 : 7 | 1 : 3 : 6 | 9 : 8 : 4 |
|- - - - - -|- - - - - -|- - - - - -|
| 8 : 9 : 1 | 4 : 5 : 7 | 3 : 2 : 6 |
|- - - - - -|- - - - - -|- - - - - -|
| 3 : 6 : 4 | 9 : 2 : 8 | 7 : 1 : 5 |
|-----------+-----------+-----------|
| 6 : 8 : 9 | 5 : 7 : 4 | 2 : 3 : 1 |
|- - - - - -|- - - - - -|- - - - - -|
| 4 : 2 : 3 | 6 : 8 : 1 | 5 : 9 : 7 |
|- - - - - -|- - - - - -|- - - - - -|
| 1 : 7 : 5 | 2 : 9 : 3 | 6 : 4 : 8 |
|-----------+-----------+-----------|
| 7 : 3 : 6 | 8 : 1 : 9 | 4 : 5 : 2 |
|- - - - - -|- - - - - -|- - - - - -|
| 9 : 1 : 2 | 7 : 4 : 5 | 8 : 6 : 3 |
|- - - - - -|- - - - - -|- - - - - -|
| 5 : 4 : 8 | 3 : 6 : 2 | 1 : 7 : 9 |
-----------------------------------
-----------------------------------
| 2 : 5 : | 1 : : | : 8 : 4 |
|- - - - - -|- - - - - -|- - - - - -|
| : 9 : | : 5 : | 3 : 2 : |
|- - - - - -|- - - - - -|- - - - - -|
| 3 : : 4 | : 2 : 8 | : 1 : |
|-----------+-----------+-----------|
| : : 9 | : : | : : 1 |
|- - - - - -|- - - - - -|- - - - - -|
| : 2 : | 6 : : | : : 7 |
|- - - - - -|- - - - - -|- - - - - -|
| 1 : : | : : 3 | : 4 : |
|-----------+-----------+-----------|
| : : | : 1 : | : : |
|- - - - - -|- - - - - -|- - - - - -|
| : : | 7 : : | : : |
|- - - - - -|- - - - - -|- - - - - -|
| 5 : : | : : 2 | : : |
-----------------------------------
*** 26 numbers left ***
257136984
891457326
364928715
689574231
423681597
175293648
736819452
912745863
548362179
solve: 250100084090050320304028010009000001020600007100003040000010000000700000500002000
1:1 score: 898 257136984891457326364928715689574231423681597175293648736819452912745863548362179 26
```

</collapse-text>



<collapse-text hidden title="Response">


```JSON
{
   "result":"success",
   "name":"sudoku",
   "method":"gen",
   "srand":-678890453,
   "amount":898.00000000,
   "hex":"0400008085202f890159a377ff60f9c0173b2de965fa902608490c339626642e5bcfeea4fd13facbf4010000007b4c79a276a072a26ba067a56580210223b2b9d35fb6383bbbc0dd6668825c91713bc21081b9ce33df3d7edbafa883058140460886e61f55924af187b34ed1bffe114bc4af194ab57c9e50301ea9c134135d00dc34c44a42b1ba54390da0b8c2637239a008b6b11fee535be5aecfd73e10b9a100af03800111a10001ffffffff041027000000000000302ea22c80203d1579313abe7d8ea85f48c65ea66fc512c878c0d0e6f6d54036669de940febf8103120c008203000401cc00427fe814000000302ea22c802033c7f0d5d7327fbe86a1c94d56a6acbc59b2d24e00ed83864bfbf9e9dab41eed8103120c008203000401cc48f28f6002000000302ea22c80203d1579313abe7d8ea85f48c65ea66fc512c878c0d0e6f6d54036669de940febf8103120c008203000401cc0000000000000000576a4c541147510205000100000008040009000005000302000300040002080001000000090000000000010002000600000000070100000000030004000000000001000000000000000700000000000500000000020000000000000067e300000000000000000000000000",
   "txid":"3b00b64e5892987ea2afc1c66384bf304ab2f8ca90d98ebef1d7784ca7347645"
}
```

</collapse-text>


## pending

**cclib pending 17**

The `pending` method returns a complete list of all unsolved puzzles on the asset chain.

#### Arguments

| Name | Type | Description |
| ---- | ---- | ----------- |
| (none) | | |

#### Response

| Name       | Type                    | Description                                                                                 |
| ---------- | ----------------------- | ------------------------------------------------------------------------------------------- |
| result     | (string)                | whether the command executed successfully                                                   |
| name       | (string)                | name of the module                                                                          |
| method     | (string)                | name of the method                                                                          |
| pending    | (array of json objects) | an array of json objects, each containing information about an unsolved puzzle on the chain |
| height     | (number)                | the block height at which the puzzle was generated                                          |
| amount     | (number)                | the reward provided to the first node to submit the correct solution                        |
| txid       | (string)                | a transaction id representing the generation of this puzzle, also called the `puzzle_txid`  |
| numpending | (number)                | the total number of on-chain unsolved puzzles                                               |
| total      | (number)                | the collective value of all outstanding bounties for unsolved puzzles                       |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=SUDOKU cclib pending 17
```


<collapse-text hidden title="Response">


```bash
{
   "result":"success",
   "name":"sudoku",
   "method":"pending",
   "pending":[
      {
         "height":665,
         "amount":10000.00000000,
         "txid":"2944aa188737301bb863ea926dd9cca3ec55331c56339dba9ed0ec7fb09a1600"
      },

        ... (omitted for brevity) ...

      {
         "height":766,
         "amount":10.00000000,
         "txid":"0aaa8fdc83aa9111b1f1d143ca7baf5730cd68c02f1422b3f8cf4186959db6ff"
      }
   ],
   "numpending":3290,
   "total":3504801.00000000
}
```

</collapse-text>


## solution

**cclib solution 17 '["puzzle_txid","solution",t0,t1,t2,...]'**

The `solution` method submits the proposed `solution` to the blockchain for the indicated `puzzle_txid` puzzle.

The `t0...` values represent the timestamp at which the solution was found for each number. Pre-filled cells have an automated timestamp of `tX=0`, where `X` is the index of the puzzle number.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

#### Arguments

| Name | Type | Description |
| ---- | ---- | ----------- |
| txid | (string) | a transaction id representing the generation of this puzzle, also called the `puzzle_txid` |
| solution | (numeric string) | the proposed solution, provided in a concatenated format |
| tX... | (81 UNIX timestamps separated by comma) | there are `81` total `t...` arguments. `X` is the index of the indicated argument. The argument is a timestamp representing the time at which `X` number was input. Timestamp value should be 0 for numbers which were already known |

#### Response

JSON output:

| Name | Type | Description |
| ---- | ---- | ----------- |
| name | (string) | name of the module |
| hex | (string) | a `hex` value representing the encoded data; this must be broadcast using `sendrawtransaction` |
| txid | (string) | a transaction id representing the generation of this Sudoku puzzle, also called the `puzzle_txid` |
| amount | (number) | the reward provided to the first node to submit the correct solution |
| result | (string) | whether the command executed successfully |
| sudokuaddr | (string) | the Antara address that owns this puzzle reward and will distribute the reward |
| method | (string) | name of the method |

Daemon `stdout`:

| Name | Type | Description |
| ---- | ---- | ----------- |
| solved | (string) | this returns three values: the block height at which the puzzle was solved, the amount of coins rewarded, the solution txid |
| solution | (number) | this contains three values: a number-based concatenated representation of the solved puzzle; a string representing the concatenated unsolved puzzle; the total score for solving this puzzle |
| statistics | (string) | information which helps this module developer to detect was puzzle solved by robot or human |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=ROGUE cclib solution 17 [%22b5d7e2b50ace182e0ab7b5a18875818fa8e56b937689376bc5bdc8727b78ad52%22,%22157392864829461357436587129795634218381279645642815973978146532563728491214953786%22,1552297383,1552297384,1552297386,0,1552297387,0,0,1552297389,1552297389,1552297391,0,1552297392,1552297394,1552297396,1552297396,1552297397,1552297398,1552297399,1552297401,1552297402,1552297403,1552297404,1552297405,1552297407,1552297408,1552297409,1552297410,1552297412,1552297413,0,1552297415,1552297416,1552297417,0,0,1552297419,0,1552297422,1552297423,1552297424,1552297429,0,1552297431,0,1552297432,1552297435,1552297436,1552297437,1552297439,0,1552297440,1552297441,1552297443,0,1552297445,0,0,1552297446,1552297447,0,1552297449,0,1552297451,0,1552297453,0,1552297455,0,0,0,1552297457,0,1552297458,1552297459,0,0,1552297460,0,1552297462,1552297462,0]
```


<collapse-text hidden title="Response">


```bash
{
   'name':'sudok',
   'hex':'0400008085202f890252ad787b72c8bdc56b378976936be5a88f817588a1b5b70a2e18ce0ab5e2d7b5000000007b4c79a276a072a26ba067a56580210223b2b9d35fb6383bbbc0dd6668825c91713bc21081b9ce33df3d7edbafa883058140f6e597c2b4454dd6c2203744bcdf133e98b4330d0df27933d6db8fb5ccc443d919a04d072b35f6660ca80e647485b8c7f5bee08a56e47e636db67232ebf36fbfa100af03800111a10001ffffffff52ad787b72c8bdc56b378976936be5a88f817588a1b5b70a2e18ce0ab5e2d7b5010000007b4c79a276a072a26ba067a5658021027e0bf5ddd579d858b7997a60f3cd91c1cd99ed78df1753464cb12685251d5bf181401be4b2e389756a56e544e53cc9755ab737d1cd1cec180c2f5993b0a49d3787686d32dbb0364aaf1a8bd17c49e8ede3c4ea05d4705c33b65f16df131ef2a46f16a100af03800111a10001ffffffff0200e40b5402000000232102c4d7a2001384c7c2b95eb3927f6b1cec0c6fc29c35d9b17dc7a012d02203a17cac0000000000000000fd9f016a4d9b01115351313537333932383634383239343631333537343336353837313239373935363334323138333831323739363435363432383135393733393738313436353332353633373238343931323134393533373836fd44015c862da75c862da85c862daa000000005c862dab00000000000000005c862dad5c862dad5c862daf000000005c862db05c862db25c862db45c862db45c862db55c862db65c862db75c862db95c862dba5c862dbb5c862dbc5c862dbd5c862dbf5c862dc05c862dc15c862dc25c862dc45c862dc5000000005c862dc75c862dc85c862dc900000000000000005c862dcb000000005c862dce5c862dcf5c862dd05c862dd5000000005c862dd7000000005c862dd85c862ddb5c862ddc5c862ddd5c862ddf000000005c862de05c862de15c862de3000000005c862de500000000000000005c862de65c862de7000000005c862e5a000000005c862deb000000005c862ded000000005c862def0000000000000000000000005c862df1000000005c862df25c862df300000000000000005c862df4000000005c862df65c862df60000000000000000ade400000000000000000000000000',
   'txid':'b5d7e2b50ace182e0ab7b5a18875818fa8e56b937689376bc5bdc8727b78ad52',
   'amount':100.0,
   'result':'success',
   'sudokuaddr':'RWXsjC1zc7zGqsxa2YdL9zS7G3PwN5xc9m',
   'method':'solution'
}
```

</collapse-text>



<collapse-text hidden title="Response">


```bash
SOLVED ht.58521 100.00000000 4c3fb21e60ef0af863da43c5ebbdf38651f080a3fff1c04855fc42857479f9e5
157392864829461357436587129795634218381279645642815973978146532563728491214953786 score.55 ---3-28---2------------------5---21-3----9-4-----1---3-78--6-3-5-3-284-1--49-3--6
1 2 1 2 0 2 1 2 2 0 1 1 1 2 1 1 1 1 2 1 1 1 2 1 2 1 1 2 3 1 1 5 2 1 3 1 1 2 1 1 2 2 1 1 4 2 2 2 1 1 1 2 0 100 solvetime.179 n.55 avetime.3 variance.177 vs ave2 9
```

</collapse-text>


## txidinfo

**cclib txidinfo 17 '["puzzle_txid"]'**

The `txidinfo` method returns information about the indicated `puzzle_txid` puzzle.

#### Arguments

| Name | Type | Description |
| ---- | ---- | ----------- |
| puzzle_txid | (string) | the unique transaction id of the requested puzzle, as returned from the broadcast hex of the [gen](../customconsensus/sudoku.html#gen) method  |

#### Response

| Name | Type | Description |
| ---- | ---- | ----------- |
| result | (string) | whether the command executed successfully |
| txid | (string) | a transaction id representing the generation of this Sudoku puzzle, also called the `puzzle_txid` |
| result | (string) | whether the command executed successfully |
| height | (number) | the block height at which the puzzle was generated |
| sudokuaddr | (string) | the Antara address that owns this puzzle funds and will distribute the reward |
| amount | (number) | the reward provided to the first node to submit the correct solution |
| unsolved | (string) | the unsolved puzzle, provided in concatenated form, filling playing field from left to right horizontally, and from top to bottom vertically |
| name | (string) | name of the module |
| method | (string) | name of the method |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=SUDOKU cclib txidinfo 17 \%220aaa8fdc83aa9111b1f1d143ca7baf5730cd68c02f1422b3f8cf4186959db6ff%22\"
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "txid": "0aaa8fdc83aa9111b1f1d143ca7baf5730cd68c02f1422b3f8cf4186959db6ff",
  "result": "success",
  "height": 766,
  "sudokuaddr": "RAFVbQbZ5esSkktLQq9mdQWrvi7UBnzqwE",
  "amount": 10.0,
  "unsolved": "4--13--6---89--2--37-2--541--5-8-1-66---4-----1-7------8-------------3---------9-",
  "name": "sudoku",
  "method": "txidinfo"
}
```

</collapse-text>

# Tokens

## Introduction

The Tokens Module enables support for the on-chain creation of colored coins, also called tokens. This module enables the basic functionality, such as creation, transfer and balance validation. The created tokens are typically used with another module that supports operations on tokens. For example, the Assets Module provides buy/sell operations for `tokens`.

Functionality for this module is facilitated by utxo technology. Tokens can be generated on any chain where the [ac_cc](../installations/asset-chain-parameters.html#ac-cc) customization is enabled

Each token is identified by its unique token id.

The `tokens` module requires locking a proportional amount of satoshis of the native coins. These satoshis create the supply for the token.

For example, if you desire to create a non-fungible token, use 1 satoshi in its creation.

Each non-fungible token has the amount of 1 and contains an additional array of data describing its corresponding asset. The data has an eval code which binds this non-fungible token to an Antara Module responsible for validation. The `tokeninfo` method outputs data for non-fungible tokens.

## tokenaddress

**tokenaddress (pubkey)**

The `tokenaddress` method returns information about a token address according to a specific `pubkey`. If no `pubkey` is provided, the `pubkey` used to launch the daemon is the default.

### Arguments

| Name   | Type               | Description                       |
| ------ | ------------------ | --------------------------------- |
| pubkey | (string, optional) | the pubkey of the desired address |

### Response

| Name | Type | Description | 
| --------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------- |
| result          | (string) | whether the command executed successfully                                                                                        |
| AssetsCCaddress | (string) | taking the token module's EVAL code as a modifier, this is the public address that corresponds to the token contract's privkey |
| Assetsmarker    | (string) | the unmodified public address generated from the token contract's privkey                                                        |
| CCaddress       | (string) | taking the token module's EVAL code as a modifier, this is the Fluidity address from the pubkey of the user                          |
| myCCaddress     | (string) | taking the token module's EVAL code as a modifier, this is the Fluidity address from the pubkey of the user                          |
| myaddress       | (string) | the public address of the pubkey used to launch the chain                                                                        |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD tokenaddress 028702e30d8465d6aa85f35d2f58c06a6ee17f23f376b56044dadf7b793f2c12b9
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "TokensCCaddress": "RAMvUfoyURBRxAdVeTMHxn3giJZCFWeha2",
  "myCCaddress": "RG6mr23tQ9nUhmi5GEnYqjfkqZt9x2MRXz",
  "myaddress": "RDjG4sM1y4udiJSszF6BLotqUnZX79Rom9"
}
```

</collapse-text>

## tokenask

**tokenask numtokens tokenid price**

The `tokenask` method posts a public ask order.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

### Arguments

| Name | Type | Description | 
| --------- | -------- | ------------------------------------------------------------------------------ |
| numtokens | (number) | the number of tokens to request in the order                                   |
| tokenid   | (string) | the txid that identifies the token                                             |
| price     | (number) | the price to pay for each token (units are in coins of the parent Smart Chain) |

### Response

| Name | Type | Description | 
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1:

```bash
./komodo-cli -ac_name=HELLOWORLD tokenask 1000 c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59 1
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "010000000248403cd63777a2086206592c096ddfa1d4ba2647673b330610968eace2cf7b540200000049483045022100bde9eaf43a43fe252530bcf346be3e336e86f0171b817977d38d6ebd4bb0756e0220735f3292ef012fd56f7476700f5649b23aacf2387f4fa5a537e1b6c6daa6c1d101ffffffff4f2016d356282fca9d8278aa04fbdbed98ac6af0bf7a479959c5bb91f95e8ef5020000007b4c79a276a072a26ba067a5658021028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e278140fe6a2cd6fdb5a359d5d6eea9bcf34e5b7d8e2def612afe9c01af1129b006e68344d8f9905ea5f226cdb1556659df0c8741e8e3def1238761721b66718dabe92ca100af038001e3a10001ffffffff03e803000000000000302ea22c80201ab400e039122028345520ba041ac3e6ec81ad28d8415e78d760d55f41097dd58103120c008203000401cc5087b00e000000002321028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e27ac00000000000000004f6a4c4ce373c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b5900e876481700000021028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e2700000000"
}
```

</collapse-text>


Step 2: Use sendrawtransaction to broadcast the order

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000248403cd63777a2086206592c096ddfa1d4ba2647673b330610968eace2cf7b540200000049483045022100bde9eaf43a43fe252530bcf346be3e336e86f0171b817977d38d6ebd4bb0756e0220735f3292ef012fd56f7476700f5649b23aacf2387f4fa5a537e1b6c6daa6c1d101ffffffff4f2016d356282fca9d8278aa04fbdbed98ac6af0bf7a479959c5bb91f95e8ef5020000007b4c79a276a072a26ba067a5658021028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e278140fe6a2cd6fdb5a359d5d6eea9bcf34e5b7d8e2def612afe9c01af1129b006e68344d8f9905ea5f226cdb1556659df0c8741e8e3def1238761721b66718dabe92ca100af038001e3a10001ffffffff03e803000000000000302ea22c80201ab400e039122028345520ba041ac3e6ec81ad28d8415e78d760d55f41097dd58103120c008203000401cc5087b00e000000002321028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e27ac00000000000000004f6a4c4ce373c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b5900e876481700000021028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e2700000000
```


<collapse-text hidden title="Response">


```bash
8d5bb0ae5cc8406b8b12fff04437c748495f4f8852ae124e6a137bc130d3be64
```

</collapse-text>

## tokenbalance

**tokenbalance tokenid (pubkey)**

The `tokenbalance` method checks the token balance according to a provided `pubkey`. If no `pubkey` is provided, the `pubkey` used the launch the daemon is the default.

### Arguments

| Name    | Type     | Description                                                                                                                |
| ------- | -------- | -------------------------------------------------------------------------------------------------------------------------- |
| tokenid | (string) | the txid that identifies the token                                                                                         |
| pubkey  | (string) | the pubkey for which to examine the balance; if no pubkey is provided, the pubkey used to launch the daemon is the default |

### Response

| Name      | Type     | Description                                                                                             |
| --------- | -------- | ------------------------------------------------------------------------------------------------------- |
| result    | (string) | whether the command executed successfully                                                                |
| CCaddress | (string) | taking the token module's EVAL code as a modifier, this is the Fluidity address from the pubkey of the user |
| tokenid   | (string) | the txid that identifies the token                                                                      |
| balance   | (number) | the balance of the address that corresponds to the pubkey                                               |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD tokenbalance c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "CCaddress": "RRPpWbVdxcxmhx4xnWnVZFDfGc9p1177ti",
  "tokenid": "c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59",
  "balance": 99989
}
```

</collapse-text>

Check the token balance of a specific pubkey

```bash
./komodo-cli -ac_name=HELLOWORLD tokenbalance c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59 028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e27
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "CCaddress": "RQymbXA8FfWw2AaHv7oC8JRKo9W5HkFVMm",
  "tokenid": "c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59",
  "balance": 999900011
}
```

</collapse-text>

## tokenbid

**tokenbid numtokens tokenid price**

The `tokenbid` method posts a public bid order.

To fill the order, the parent chain's coin must be used.

The method returns a raw hex, which must be broadcast using [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) to complete the command.

The `sendrawtransaction` method then returns a `txid`, which is the identification method of the bid order, and should be saved for future use.

### Arguments

| Name | Type | Description | 
| --------- | -------- | ------------------------------------------------------------------------------ |
| numtokens | (number) | the number of tokens to request in the order                                   |
| tokenid   | (string) | the txid that identifies the token                                             |
| price     | (number) | the price to pay for each token (units are in coins of the parent Smart Chain) |

### Response

| Name | Type | Description | 
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD tokenbid 1000 c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59 1
```


<collapse-text hidden title="Response">


```bash
0100000001484256677a6417030dd99716a47b8c9cb06fba6e57ff4617e9932a6cde2972830100000049483045022100fc1926401b27ba044bbf17c36f36030adae52a188594efc75fe42861ab0b997802205e729d6f5587e5a5296b5649a154ce1fe3c581078fac7ae4e2b4577978c05c8901ffffffff0300e8764817000000302ea22c80201ab400e039122028345520ba041ac3e6ec81ad28d8415e78d760d55f41097dd58103120c008203000401cc10d262684a0300002321028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e27ac00000000000000004f6a4c4ce362c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59e80300000000000021028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e2700000000`
```

</collapse-text>


Use `sendrawtransaction` to publish order

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 0100000001484256677a6417030dd99716a47b8c9cb06fba6e57ff4617e9932a6cde2972830100000049483045022100fc1926401b27ba044bbf17c36f36030adae52a188594efc75fe42861ab0b997802205e729d6f5587e5a5296b5649a154ce1fe3c581078fac7ae4e2b4577978c05c8901ffffffff0300e8764817000000302ea22c80201ab400e039122028345520ba041ac3e6ec81ad28d8415e78d760d55f41097dd58103120c008203000401cc10d262684a0300002321028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e27ac00000000000000004f6a4c4ce362c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59e80300000000000021028bb4ae66aa4f1960a4aa822907e800eb688d9ab2605c8067a34b421748c67e2700000000
```


<collapse-text hidden title="Response">


```bash
5fc8c472bc0e5f994b5a9a3fda23af1a3e1cfd746b902d7216352732e6adba05
```

</collapse-text>


## tokencancelask

**tokencancelask tokenid asktxid**

The `tokencancelask` method cancels a specific `ask`/`sell` order that you created.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

### Arguments

| Name | Type | Description | 
| --------- | -------- | ------------------------------------------------- |
| tokenid   | (string) | the txid that identifies the token                |
| asktxid   | (string) | the txid that identifies the original ask request |

### Response

| Name | Type | Description | 
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1: Issue the call and get your raw transaction HEX value

```bash
./komodo-cli -ac_name=HELLOWORLD tokencancelask 9217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e 7194ae293330af80fdbe4b4b2c8b51194f12e334b4a0489288288c1b7336a65c
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "010000000234c335a46dadea8e42420b0e284f5577cfbcb7764a8d5c3b61312b71c5b14d0800000000494830450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601ffffffff5ca636731b8c28889248a0b434e3124f19518b2c4b4bbefd80af303329ae9471000000007b4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001ffffffff030a00000000000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401ccf078724e18090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000246a22e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e00000000"
}
```

</collapse-text>


Step 2: Broadcast using `sendrawtransaction`

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000234c335a46dadea8e42420b0e284f5577cfbcb7764a8d5c3b61312b71c5b14d0800000000494830450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601ffffffff5ca636731b8c28889248a0b434e3124f19518b2c4b4bbefd80af303329ae9471000000007b4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001ffffffff030a00000000000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401ccf078724e18090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000246a22e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e00000000
```


<collapse-text hidden title="Response">


```bash
AssetValidate (x)
vin1 10, vout0 10, AssetValidateSellvin
Got 0.00000010 to origaddr.(RANyPgfZZLhSjQB9jrzztSw66zMMYDZuxQ)
21d152480275568e3f82a5049d8b30308e3739ebd98171e075a75fea504364cd
```

</collapse-text>


Step 3 (optional): Decode the raw transaction (check if the values are sane)

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 010000000234c335a46dadea8e42420b0e284f5577cfbcb7764a8d5c3b61312b71c5b14d0800000000494830450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601ffffffff5ca636731b8c28889248a0b434e3124f19518b2c4b4bbefd80af303329ae9471000000007b4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001ffffffff030a00000000000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401ccf078724e18090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000246a22e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e00000000
```


<collapse-text hidden title="Response">


```json
{
  "txid": "21d152480275568e3f82a5049d8b30308e3739ebd98171e075a75fea504364cd",
  "size": 434,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "084db1c5712b31613b5c8d4a76b7bccf77554f280e0b42428eeaad6da435c334",
      "vout": 0,
      "scriptSig": {
        "asm": "30450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601",
        "hex": "4830450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601"
      },
      "sequence": 4294967295
    },
    {
      "txid": "7194ae293330af80fdbe4b4b2c8b51194f12e334b4a0489288288c1b7336a65c",
      "vout": 0,
      "scriptSig": {
        "asm": "a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001",
        "hex": "4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 0.0000001,
      "valueSat": 10,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["RRPpWbVdxcxmhx4xnWnVZFDfGc9p1177ti"]
      }
    },
    {
      "value": 99999.9999,
      "valueSat": 9999999990000,
      "n": 1,
      "scriptPubKey": {
        "asm": "03fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc OP_CHECKSIG",
        "hex": "2103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RANyPgfZZLhSjQB9jrzztSw66zMMYDZuxQ"]
      }
    },
    {
      "value": 0.0,
      "valueSat": 0,
      "n": 2,
      "scriptPubKey": {
        "asm": "OP_RETURN e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e",
        "hex": "6a22e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e",
        "type": "nulldata"
      }
    }
  ]
}
```

</collapse-text>


## tokencancelbid

**tokencancelbid tokenid bidtxid**

The `tokencancelbid` method cancels a specific `bid`/`buy` order that you created.

The method returns a hex value which must then be broadcast using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

### Arguments

| Name | Type | Description | 
| --------- | -------- | ------------------------------------------------- |
| tokenid   | (string) | the txid that identifies the token                |
| bidtxid   | (string) | the txid that identifies the original bid request |

### Response

| Name | Type | Description | 
| --------- | -------- | ---------------------------------------------------------------------------------------------------- |
| result:   | (string) | whether the command succeeded                                                                        |
| hex:      | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1: Issue the call and get your raw transaction HEX value

```bash
./komodo-cli -ac_name=HELLOWORLD tokencancelbid 9217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e 7194ae293330af80fdbe4b4b2c8b51194f12e334b4a0489288288c1b7336a65c
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "hex": "010000000234c335a46dadea8e42420b0e284f5577cfbcb7764a8d5c3b61312b71c5b14d0800000000494830450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601ffffffff5ca636731b8c28889248a0b434e3124f19518b2c4b4bbefd80af303329ae9471000000007b4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001ffffffff030a00000000000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401ccf078724e18090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000246a22e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e00000000"
}
```

</collapse-text>


Step 2: Send raw transaction / broadcast the HEX value from above

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 010000000234c335a46dadea8e42420b0e284f5577cfbcb7764a8d5c3b61312b71c5b14d0800000000494830450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601ffffffff5ca636731b8c28889248a0b434e3124f19518b2c4b4bbefd80af303329ae9471000000007b4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001ffffffff030a00000000000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401ccf078724e18090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000246a22e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e00000000
```


<collapse-text hidden title="Response">


```bash
AssetValidate (x)
vin1 10, vout0 10, AssetValidateBuyvin
Got 0.00000010 to origaddr.(RANyPgfZZLhSjQB9jrzztSw66zMMYDZuxQ)
21d152480275568e3f82a5049d8b30308e3739ebd98171e075a75fea504364cd
```

</collapse-text>


Step 3: Decode the raw transaction (optional to check if the values are sane)

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 010000000234c335a46dadea8e42420b0e284f5577cfbcb7764a8d5c3b61312b71c5b14d0800000000494830450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601ffffffff5ca636731b8c28889248a0b434e3124f19518b2c4b4bbefd80af303329ae9471000000007b4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001ffffffff030a00000000000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401ccf078724e18090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000246a22e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e00000000
```


<collapse-text hidden title="Response">


```json
{
  "txid": "21d152480275568e3f82a5049d8b30308e3739ebd98171e075a75fea504364cd",
  "size": 434,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "084db1c5712b31613b5c8d4a76b7bccf77554f280e0b42428eeaad6da435c334",
      "vout": 0,
      "scriptSig": {
        "asm": "30450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601",
        "hex": "4830450221009f365d429d03df66b34cad764368092498ebd7340587c558ea19c4248202317b0220531524ef076f9e5b26ec5aa38b3078c041f8d0603b85552177ef14d00b0e499601"
      },
      "sequence": 4294967295
    },
    {
      "txid": "7194ae293330af80fdbe4b4b2c8b51194f12e334b4a0489288288c1b7336a65c",
      "vout": 0,
      "scriptSig": {
        "asm": "a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001",
        "hex": "4c79a276a072a26ba067a565802102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702814066f6a9d580da0ac901ada8c61922d93da005e92c9e419a44c1bcbf9ec8ad43790dfc8ca71b5c21b79a58aa173fb71e1ab0b82c590dc883359de60f743fabda16a100af038001e3a10001"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 0.0000001,
      "valueSat": 10,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["RRPpWbVdxcxmhx4xnWnVZFDfGc9p1177ti"]
      }
    },
    {
      "value": 99999.9999,
      "valueSat": 9999999990000,
      "n": 1,
      "scriptPubKey": {
        "asm": "03fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc OP_CHECKSIG",
        "hex": "2103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RANyPgfZZLhSjQB9jrzztSw66zMMYDZuxQ"]
      }
    },
    {
      "value": 0.0,
      "valueSat": 0,
      "n": 2,
      "scriptPubKey": {
        "asm": "OP_RETURN e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e",
        "hex": "6a22e3789217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e",
        "type": "nulldata"
      }
    }
  ]
}
```

</collapse-text>

## tokencreate

**tokencreate name supply description**

The `tokencreate` method creates a new token.

For every token created, the method requires one satoshi of the parent blockchain's coins. For example, `1 COIN` of the blockchain provides `100000000` tokens.

The method returns a hex-encoded transaction which should then be broadcast using `sendrawtransaction`.

`sendrawtransaction` then returns a `txid`, which is your `tokenid`.

::: tip
Tokens that can be divided and transferred in fractional amounts can be created too. If you consider 10 tokens as a single unit, then this unit can be named anything and it will be divisible to a single decimal place. This can be handled on the application side as it is just a change in the way of interpreting the numbers.
:::

### Arguments

| Name          | Type     | Description                                      |
| ------------- | -------- | ------------------------------------------------ |
| name          | (string) | the proposed name of the token                   |
| supply        | (number) | the intended supply of the token, given in coins |
| "description" | (string) | the description of the token                     |

### Response

| Name   | Type     | Description                                                                                          |
| ------ | -------- | ---------------------------------------------------------------------------------------------------- |
| result | (string) | whether the command succeeded                                                                        |
| hex    | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD tokencreate TAK 10 "Testing phase."
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "01000000022c223cfc9c3349aed24ca89e44af6fcdb030150443bd6ac55e2080ce4b097c3002000000484730440220316605c400c47e2d5aa6104ac5c5229e71683b8db9482efa1655d257690d338802202344f254b208a6d724f52f4503531cf005a8ca68119bde4b6cb281ab9fccaf1101ffffffff80e66c0c47311449c5effc2782134006f05fd31e79659bc4b0608d7e247e280c0000000049483045022100ec494d3fa5c76fe0382e83980affdfd091509fb4e18b20fff8c095374e6b6bee022015ddaf95dc8b03e8cbba00ff7a377b80a7bd2200a68669718c329c617549757701ffffffff0400a0724e18090000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401cc1027000000000000232102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702acc01f66fa15090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000396a37e3632103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc0354414b0e54657374696e672070686173652e00000000"
}
```

</collapse-text>

Step 2: Broadcast the raw transaction hex

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 01000000012c223cfc9c3349aed24ca89e44af6fcdb030150443bd6ac55e2080ce4b097c300200000049483045022100dc83b88f5ed1f01aab7dee8bd8f2b3c0bf83537c9b3cbb0c6ea78ebafdf4c6f60220518440e7f43d24c5733531a8d5a825dbb90e716f7ba20c0d469e7004c1fcc5aa01ffffffff0400ca9a3b00000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401cc1027000000000000232102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702acc055cbbe15090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000396a37e3632103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc0354414b0e54657374696e672070686173652e00000000
```

<collapse-text hidden title="Response">

```bash
e4895451cae47f8f10303c3594888b739f044f7c778623318d877e8df365cc66
```

</collapse-text>

Step 3 (Optional): Use decoderawtransaction to verify the output is sane

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 01000000012c223cfc9c3349aed24ca89e44af6fcdb030150443bd6ac55e2080ce4b097c300200000049483045022100dc83b88f5ed1f01aab7dee8bd8f2b3c0bf83537c9b3cbb0c6ea78ebafdf4c6f60220518440e7f43d24c5733531a8d5a825dbb90e716f7ba20c0d469e7004c1fcc5aa01ffffffff0400ca9a3b00000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401cc1027000000000000232102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702acc055cbbe15090000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000396a37e3632103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc0354414b0e54657374696e672070686173652e00000000
```

<collapse-text hidden title="Response">

```json
{
  "txid": "e4895451cae47f8f10303c3594888b739f044f7c778623318d877e8df365cc66",
  "size": 335,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "307c094bce80205ec56abd43041530b0cd6faf449ea84cd2ae49339cfc3c222c",
      "vout": 2,
      "scriptSig": {
        "asm": "3045022100dc83b88f5ed1f01aab7dee8bd8f2b3c0bf83537c9b3cbb0c6ea78ebafdf4c6f60220518440e7f43d24c5733531a8d5a825dbb90e716f7ba20c0d469e7004c1fcc5aa01",
        "hex": "483045022100dc83b88f5ed1f01aab7dee8bd8f2b3c0bf83537c9b3cbb0c6ea78ebafdf4c6f60220518440e7f43d24c5733531a8d5a825dbb90e716f7ba20c0d469e7004c1fcc5aa01"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 10.0,
      "valueSat": 1000000000,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["RRPpWbVdxcxmhx4xnWnVZFDfGc9p1177ti"]
      }
    },
    {
      "value": 0.0001,
      "valueSat": 10000,
      "n": 1,
      "scriptPubKey": {
        "asm": "02adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702 OP_CHECKSIG",
        "hex": "2102adf84e0e075cf90868bd4e3d34a03420e034719649c41f371fc70d8e33aa2702ac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RFYE2yL3KknWdHK6uNhvWacYsCUtwzjY3u"]
      }
    },
    {
      "value": 99889.9996,
      "valueSat": 9988999960000,
      "n": 2,
      "scriptPubKey": {
        "asm": "03fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc OP_CHECKSIG",
        "hex": "2103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RANyPgfZZLhSjQB9jrzztSw66zMMYDZuxQ"]
      }
    },
    {
      "value": 0.0,
      "valueSat": 0,
      "n": 3,
      "scriptPubKey": {
        "asm": "OP_RETURN e3632103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc0354414b0e54657374696e672070686173652e",
        "hex": "6a37e3632103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc0354414b0e54657374696e672070686173652e",
        "type": "nulldata"
      }
    }
  ]
}
```

</collapse-text>

## tokeninfo

**tokeninfo tokenid**

The `tokeninfo` method reveals information about any token.

### Arguments

| Name    | Type     | Description                        |
| ------- | -------- | ---------------------------------- |
| tokenid | (string) | the txid that identifies the token |

### Response

| Name          | Type              | Description                                                                  |
| ------------- | ----------------- | ---------------------------------------------------------------------------- |
| result        | (string)          | whether the command executed successfully                                    |
| tokenid       | (string)          | the identifying txid for the token id                                        |
| owner         | (string)          | the identifying pubkey of the token creator                                  |
| name          | (string)          | the name of the token                                                        |
| supply        | (number)          | the total supply of the token                                                |
| description   | (string)          | the token description provided by the owner at token creation                |
| data          | (string,optional) | the data related to the non-fungible token, in hex                           |
| IsImported    | (string,optional) | if 'yes' this token was imported from another chain                          |
| sourceChain   | (string,optional) | the name of the imported token's source chain                                |
| sourceTokenId | (string,optional) | for an imported token, the `tokenid` of the source token on the source chain |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD tokeninfo 43850dfce744581ef44775086625745adecd628993c5ff4c1c786cfd21009add
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "tokenid": "43850dfce744581ef44775086625745adecd628993c5ff4c1c786cfd21009add",
  "owner": "03fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc",
  "name": "TAKA",
  "supply": "100000.00000000",
  "description": "Testing phase 3."
}
```

</collapse-text>

## tokenlist

**tokenlist**

The `tokenlist` method lists all available tokens on the Smart Chain.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |

### Response

| Name    | Type               | Description                           |
| ------- | ------------------ | ------------------------------------- |
| tokenid | (array of strings) | the identifying txid for the token id |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=HELLOWORLD tokenlist
```

<collapse-text hidden title="Response">

```bash
[
  "307c094bce80205ec56abd43041530b0cd6faf449ea84cd2ae49339cfc3c222c",
  "e7d034fb7dbad561c9a86dcbcc64aa89e1d311891b4e7c744280b7de13b1186f",
  "21020a609c162fa2d0bc223acfff14bb0b886743303f5e4a661dade7a69b24a5",
  "c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59",
  "e4895451cae47f8f10303c3594888b739f044f7c778623318d877e8df365cc66",
  "045a31b7e38b1538d111ea87ad9ec53952a70e9a5e8d076f7ed7923d8723f02d",
  "f4131ee56a47273195a899f60a187862aa8e39a974b5a19d860e2fe69f60242f",
  "9217014eae0a83a0b64632f379c1b474859794f9eaf1cf1eecf5804ed6124a5e",
  "9eec77a3e02dec0ca60ead7e8cfb6cb6809c40fe54b804e51d5c6c2a445ffbf3",
  "43850dfce744581ef44775086625745adecd628993c5ff4c1c786cfd21009add"
]
```

</collapse-text>

## tokenorders

**tokenorders (tokenid)**

The `tokenorders` method displays the public on-chain orderbook for a specific token. If no `tokenid` is provided, it displays the on-chain orderbook for all available tokens.

Information about the `funcid` property:

- A lowercase `b` describes an bid offer.

- An uppercase `B` describes a bid fill.

- A lowercase `s` describes an ask offer.

- An uppercase `S` describes the ask fill.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | ------------------------------------- |
| tokenid   | (string, optional) | the identifying txid for the token id |

### Response

| Name | Type | Description | 
| ------------------- | -------------------------- | ------------------------------------------------------------------------------ |
| funcid              | (string)                   | describes either a bid ask `b`, a bid fill `B`, an ask `s`, or an ask fill `S` |
| txid                | (string)                   | the txid of the identifying order or fill                                      |
| vout                | (number)                   | the vout value                                                                 |
| amount              | (number)                   | the amount remaining in the bid/ask request                                    |
| bidamount/askamount | (number)                   | the total amount of the relevant bid or ask request                            |
| origaddress         | (string)                   | the address that made the original bid `b` or ask `s`                          |
| tokenid             | (string)                   | the tokenid for the relevant bid/ask request/fill                              |
| totalrequired       | (number, `b` and `s` only) | the total amount available in the original big/ask request/fill                |
| price               | (number, `b` and `s` only) | the price per token, units are in the parent Smart Chain's coin                |

#### :pushpin: Examples

Show all available orders

```bash
./komodo-cli -ac_name=HELLOWORLD tokenorders
```


<collapse-text hidden title="Response">


```json
[
  {
    "funcid": "B",
    "txid": "b9d305e9b6a82e715efce9b6244cc15fef131baf1893a7eb45b199c23b3fb806",
    "vout": 0,
    "amount": 0,
    "bidamount": 0,
    "origaddress": "RQymbXA8FfWw2AaHv7oC8JRKo9W5HkFVMm",
    "tokenid": "c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59"
  },
  {
    "funcid": "b",
    "txid": "45b3f7874fc4a2699729a9792bc7679f6b5f11035a29ad9f661425b19534dd1d",
    "vout": 0,
    "amount": 1000,
    "bidamount": 1000,
    "origaddress": "RQymbXA8FfWw2AaHv7oC8JRKo9W5HkFVMm",
    "tokenid": "c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59",
    "totalrequired": 1000,
    "price": 1
  },
  {
    "funcid": "B",
    "txid": "d4643ce47e9799681a4549468d47c85337367f0ef2733afe1d79c50175e6ae32",
    "vout": 0,
    "amount": 0,
    "bidamount": 0,
    "origaddress": "R9sDyKt2kW5uJaoZT6GF9e3WRbGioBuhoZ",
    "tokenid": "e7d034fb7dbad561c9a86dcbcc64aa89e1d311891b4e7c744280b7de13b1186f"
  },
  {
    "funcid": "B",
    "txid": "0909df82ade3193c9a630dd80947141f34489732e9a2f8346790304ebbdcc251",
    "vout": 0,
    "amount": 0,
    "bidamount": 0,
    "origaddress": "R9sDyKt2kW5uJaoZT6GF9e3WRbGioBuhoZ",
    "tokenid": "e7d034fb7dbad561c9a86dcbcc64aa89e1d311891b4e7c744280b7de13b1186f"
  },
  {
    "funcid": "b",
    "txid": "a8d60a3ce429ccb885ad445e7a4534130a35d2424d1883c6513d0f4da2fe9a92",
    "vout": 0,
    "amount": 150,
    "bidamount": 150,
    "origaddress": "RQymbXA8FfWw2AaHv7oC8JRKo9W5HkFVMm",
    "tokenid": "c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59",
    "totalrequired": 100,
    "price": 1.5
  },
  {
    "funcid": "B",
    "txid": "03e118fc442a223df4dd87add64f142e1bfd99baee94c8be26bc77ed809d50a4",
    "vout": 0,
    "amount": 0,
    "bidamount": 0,
    "origaddress": "R9sDyKt2kW5uJaoZT6GF9e3WRbGioBuhoZ",
    "tokenid": "e7d034fb7dbad561c9a86dcbcc64aa89e1d311891b4e7c744280b7de13b1186f"
  }
]
```

</collapse-text>


Show orders for specific token

```bash
./komodo-cli -ac_name=HELLOWORLD tokenorders c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59
```


<collapse-text hidden title="Response">


```json
[
  {
    "funcid": "B",
    "txid": "b9d305e9b6a82e715efce9b6244cc15fef131baf1893a7eb45b199c23b3fb806",
    "vout": 0,
    "amount": 0,
    "bidamount": 0,
    "origaddress": "RQymbXA8FfWw2AaHv7oC8JRKo9W5HkFVMm",
    "tokenid": "c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59"
  },
  {
    "funcid": "b",
    "txid": "9dabd8c01bb7d59455b64fe100617149c20cb4520d266183686aa4986fd3021d",
    "vout": 0,
    "amount": 100,
    "bidamount": 100,
    "origaddress": "RQymbXA8FfWw2AaHv7oC8JRKo9W5HkFVMm",
    "tokenid": "c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59",
    "totalrequired": 100,
    "price": 1
  },
  {
    "funcid": "b",
    "txid": "45b3f7874fc4a2699729a9792bc7679f6b5f11035a29ad9f661425b19534dd1d",
    "vout": 0,
    "amount": 1000,
    "bidamount": 1000,
    "origaddress": "RQymbXA8FfWw2AaHv7oC8JRKo9W5HkFVMm",
    "tokenid": "c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59",
    "totalrequired": 1000,
    "price": 1
  },
  {
    "funcid": "b",
    "txid": "a8d60a3ce429ccb885ad445e7a4534130a35d2424d1883c6513d0f4da2fe9a92",
    "vout": 0,
    "amount": 150,
    "bidamount": 150,
    "origaddress": "RQymbXA8FfWw2AaHv7oC8JRKo9W5HkFVMm",
    "tokenid": "c5bbc34e6517c483afc910a3b0585c40da5c09b7c5d2d9757c5c5075e2d41b59",
    "totalrequired": 100,
    "price": 1.5
  }
]
```

</collapse-text>

## tokentransfer

**tokentransfer tokenid destpubkey amount**

The `tokentransfer` method transfers tokens from one cc address to another.

It is similar to the [sendmany](../komodo-api/wallet.html#sendmany) method used to send coins on the parent chain.

The method returns a raw hex, which must be broadcast using [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) to complete the command.

::: tip
The source `txid/vout` needs to be specified as it is critical to match outputs with inputs.
:::

::: tip
A token may be burned by using `tokentransfer` to send to a burn address.
:::

### Arguments

| Name       | Type               | Description                                |
| ---------- | ------------------ | ------------------------------------------ |
| tokenid    | (string, optional) | the identifying txid for the token id      |
| destpubkey | (string)           | the pubkey where the tokens should be sent |
| amount     | (number)           | the number of tokens to send               |

### Response

| Name   | Type     | Description                                                                                          |
| ------ | -------- | ---------------------------------------------------------------------------------------------------- |
| result | (string) | whether the command succeeded                                                                        |
| hex    | (string) | a raw transaction in hex-encoded format; you must broadcast this transaction to complete the command |

#### :pushpin: Examples

Step 1: Create the rawtransaction

```bash
./komodo-cli -ac_name=HELLOWORLD tokentransfer e4895451cae47f8f10303c3594888b739f044f7c778623318d877e8df365cc66 02ebc786cb83de8dc3922ab83c21f3f8a2f3216940c3bf9da43ce39e2a3a882c92 500000
```

<collapse-text hidden title="Response">

```json
{
  "result": "success",
  "hex": "01000000023b61e44ce3cedf536b52d8da11faacd041494a078e971551ed4e2bd496bc8da1000000006a4730440220111c67172740c0c2556979fdf84639ba299ff22586ebd220f25aa301f029003f02203da97a2575c0ed1b309774309f5dc952ee305a46cd83e95eae99e3564a1772f6012103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcffffffff66cc65f38d7e878d312386777c4f049f738b8894353c30108f7fe4ca515489e4000000007b4c79a276a072a26ba067a565802103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc8140c875a14edcbece61a6c18721398c927dc1e4509863e075b3922a8e3a2da6848e037142436e9102b529ee93a9ec618a4c67b63c52790d71812bb94179056913bba100af038001e3a10001ffffffff0420a1070000000000302ea22c8020541be9f843b476373fc18d8c8fab59c98c2c009f49c07fa66b7b431e4142feae8103120c008203000401cce028933b00000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401cc28b9486cb2430000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000246a22e374e4895451cae47f8f10303c3594888b739f044f7c778623318d877e8df365cc6600000000"
}
```

</collapse-text>

Step 2: Broadcast using `sendrawtransaction`

```bash
./komodo-cli -ac_name=HELLOWORLD sendrawtransaction 01000000023b61e44ce3cedf536b52d8da11faacd041494a078e971551ed4e2bd496bc8da1000000006a4730440220111c67172740c0c2556979fdf84639ba299ff22586ebd220f25aa301f029003f02203da97a2575c0ed1b309774309f5dc952ee305a46cd83e95eae99e3564a1772f6012103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcffffffff66cc65f38d7e878d312386777c4f049f738b8894353c30108f7fe4ca515489e4000000007b4c79a276a072a26ba067a565802103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc8140c875a14edcbece61a6c18721398c927dc1e4509863e075b3922a8e3a2da6848e037142436e9102b529ee93a9ec618a4c67b63c52790d71812bb94179056913bba100af038001e3a10001ffffffff0420a1070000000000302ea22c8020541be9f843b476373fc18d8c8fab59c98c2c009f49c07fa66b7b431e4142feae8103120c008203000401cce028933b00000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401cc28b9486cb2430000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000246a22e374e4895451cae47f8f10303c3594888b739f044f7c778623318d877e8df365cc6600000000
```

<collapse-text hidden title="Response">

```bash
ProcessAssets
AssetValidate (t)
vin1 1000000000, vout0 500000, vout1 999500000, transfer validated 10.00000000 -> 10.00000000
AssetValidate.(t) passed
88ac2d4d27654e9d8ac195d5ab482ee9895303902eaacfbb687b1e736bb06fb4
```

</collapse-text>

Step 3: Decode the raw transaction and check against the following if the data is sane

```bash
./komodo-cli -ac_name=HELLOWORLD decoderawtransaction 01000000023b61e44ce3cedf536b52d8da11faacd041494a078e971551ed4e2bd496bc8da1000000006a4730440220111c67172740c0c2556979fdf84639ba299ff22586ebd220f25aa301f029003f02203da97a2575c0ed1b309774309f5dc952ee305a46cd83e95eae99e3564a1772f6012103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcffffffff66cc65f38d7e878d312386777c4f049f738b8894353c30108f7fe4ca515489e4000000007b4c79a276a072a26ba067a565802103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc8140c875a14edcbece61a6c18721398c927dc1e4509863e075b3922a8e3a2da6848e037142436e9102b529ee93a9ec618a4c67b63c52790d71812bb94179056913bba100af038001e3a10001ffffffff0420a1070000000000302ea22c8020541be9f843b476373fc18d8c8fab59c98c2c009f49c07fa66b7b431e4142feae8103120c008203000401cce028933b00000000302ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401cc28b9486cb2430000232103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac0000000000000000246a22e374e4895451cae47f8f10303c3594888b739f044f7c778623318d877e8df365cc6600000000
```

<collapse-text hidden title="Response">

```json
{
  "txid": "88ac2d4d27654e9d8ac195d5ab482ee9895303902eaacfbb687b1e736bb06fb4",
  "size": 524,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "a18dbc96d42b4eed5115978e074a4941d0acfa11dad8526b53dfcee34ce4613b",
      "vout": 0,
      "scriptSig": {
        "asm": "30440220111c67172740c0c2556979fdf84639ba299ff22586ebd220f25aa301f029003f02203da97a2575c0ed1b309774309f5dc952ee305a46cd83e95eae99e3564a1772f601 03fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc",
        "hex": "4730440220111c67172740c0c2556979fdf84639ba299ff22586ebd220f25aa301f029003f02203da97a2575c0ed1b309774309f5dc952ee305a46cd83e95eae99e3564a1772f6012103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc"
      },
      "sequence": 4294967295
    },
    {
      "txid": "e4895451cae47f8f10303c3594888b739f044f7c778623318d877e8df365cc66",
      "vout": 0,
      "scriptSig": {
        "asm": "a276a072a26ba067a565802103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc8140c875a14edcbece61a6c18721398c927dc1e4509863e075b3922a8e3a2da6848e037142436e9102b529ee93a9ec618a4c67b63c52790d71812bb94179056913bba100af038001e3a10001",
        "hex": "4c79a276a072a26ba067a565802103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc8140c875a14edcbece61a6c18721398c927dc1e4509863e075b3922a8e3a2da6848e037142436e9102b529ee93a9ec618a4c67b63c52790d71812bb94179056913bba100af038001e3a10001"
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 0.005,
      "valueSat": 500000,
      "n": 0,
      "scriptPubKey": {
        "asm": "a22c8020541be9f843b476373fc18d8c8fab59c98c2c009f49c07fa66b7b431e4142feae8103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c8020541be9f843b476373fc18d8c8fab59c98c2c009f49c07fa66b7b431e4142feae8103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["RLB1YWh4N115NFh8tbArCBGaTQ3F43Yg1F"]
      }
    },
    {
      "value": 9.995,
      "valueSat": 999500000,
      "n": 1,
      "scriptPubKey": {
        "asm": "a22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401 OP_CHECKCRYPTOCONDITION",
        "hex": "2ea22c8020bc485b86ffd067abe520c078b74961f6b25e4efca6388c6bfd599ca3f53d8dae8103120c008203000401cc",
        "reqSigs": 1,
        "type": "cryptocondition",
        "addresses": ["RRPpWbVdxcxmhx4xnWnVZFDfGc9p1177ti"]
      }
    },
    {
      "value": 744335.99945,
      "valueSat": 74433599945000,
      "n": 2,
      "scriptPubKey": {
        "asm": "03fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abc OP_CHECKSIG",
        "hex": "2103fe754763c176e1339a3f62ee6b9484720e17ee4646b65a119e9f6370c7004abcac",
        "reqSigs": 1,
        "type": "pubkey",
        "addresses": ["RANyPgfZZLhSjQB9jrzztSw66zMMYDZuxQ"]
      }
    },
    {
      "value": 0.0,
      "valueSat": 0,
      "n": 3,
      "scriptPubKey": {
        "asm": "OP_RETURN e374e4895451cae47f8f10303c3594888b739f044f7c778623318d877e8df365cc66",
        "hex": "6a22e374e4895451cae47f8f10303c3594888b739f044f7c778623318d877e8df365cc66",
        "type": "nulldata"
      }
    }
  ]
}
```

</collapse-text>
# Smart Chain Customizations 

Smart Chains offer various default customizations. The desired combination of parameters should be included with the `komodod` execution every time the Smart Chain daemon is launched.

Changing these customizations at a later time is possible, but this typically requires a hard-fork of your Smart Chain. In general, it is best to have your Smart Chain's parameters finalized before decentralizing the ownership of your coin. Should you discover a need to change these parameters after the fact, please reach out to our development team for assistance.

## ac_algo

::: warning
This parameter is in its final testing stages. Please reach out to us if you would like to use it on a production chain.
:::

The `ac_algo` parameter changes the chain's mining algorithm from the default equihash to the verushash.

To enable this feature, set `-ac_algo=verushash`.

This activates verushash1.0. More recent versions of verushash are not yet supported.

The verushash feature serves as a proof of concept for adding support for additional mining algorithms.

The Komodo team is currently testing methods to support compatibility for `ac_staked`, but this feature is not yet recommended for external testing.

## ac_blocktime

This parameter sets the average time (in seconds) by which a new block should be mined.

If this parameter is not included, the default value is `ac_blocktime=60`.

When the value of `ac_blocktime` is less than `60`, the Smart Chain's block time will stabilize within less than twelve hours after launch. If the Smart Chain's `ac_blocktime` value is greater than `60`, the Smart Chain's block time can require several days to stabilize.

When the value of `ac_blocktime` is less than `12` seconds (a high speed Smart Chain), the variances in network quality between consensus nodes (miners and stakers) can create difficulties in achieving a stable blockchain consensus. High-speed Smart Chains may function effectively on a LAN or other stable network, but Komodo recommends caution when attempting to manage a high-speed Smart Chain on the public Internet.

#### :pushpin: Examples

<collapse-text hidden="true" style="margin-top: 1rem;" title="Examples">

A 777777 coin pre-mine with a 1-coin block reward and a block speed of 20 seconds.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_reward=100000000 -ac_blocktime=20 &
```

</collapse-text>

## ac_cc

::: warning Notice
This parameter is still in testing.
:::

The `ac_cc` parameter sets the network cluster on which the chain can interact with other chains via Antara modules and MoMoM technology.

Once activated, the `ac_cc` parameter can allow features such as cross-chain fungibility -- coins on one Smart Chain can be directly transferred to any other Smart Chain that has the same `ac_cc` setting and the same set of notary nodes (same set of `notary pubkeys`) .

Most functionalities enabled by `ac_cc` can function with or without Komodo's notarization service. However, cross-chain transaction validation and its dependent features, including cross-chain fungibility, require notarization.

### ac_cc=0

Setting `ac_cc=0` disables Antara on the Smart Chain entirely.

::: tip
It is better to <b>NOT</b> use `ac_cc=0` for a Smart Chain where Antara should not be enabled. Omitting the `ac_cc` parameter altogether will achieve the same result.
:::

### ac_cc=1

Setting `ac_cc=1` permits Antara on the Smart Chain, but will not allow the Smart Chain to interact in cross-chain Antara functionality with other Smart Chains.

### ac_cc=2 to 99

The values of `2` through `99` (inclusive) indicate Smart Chains that can validate transactions that occur on other Smart Chains on the same cluster (i.e. the same `ac_cc` value), but their coins are not fungible.

However, coins are not fungible, and therefore cannot be transferred between blockchains.

### ac_cc=100 to 9999

Setting the value of `ac_cc` to any value greater than or equal to `100` will permit cross-chain interaction with any Smart Chain that has the same `ac_cc` value and is secured by notary nodes with the same `pubkey`.

All Smart Chains that have the same `ac_cc (>= 100)` value form a cluster, where the base tokens of all the chains in the cluster are fungible via the burn protocol.

For example, a Smart Chain set to `ac_cc=201` in its parameters can interact with other Smart Chains with `ac_cc=201` on the same notary-node network, but cannot interact with a Smart Chain set to `ac_cc=301`.

### Summary of `ac_cc`

::: tip Consider a chain with -ac_cc=N

- If <b>N = 0</b>, Antara is disabled
- If <b>N > 0</b>, Antara is enabled
- If <b>N = 1</b>, on-chain Antara is active, cross-chain validation is disabled
- If <b>N >= 2 and <= 99</b>, the chain allows for cross-chain contracts between all other chains bearing the same N value. The base coins in each Smart Chain are non-fungible across chains.
- If <b>N >= 100</b>, the chain can form a cluster with all other chains with the same N value and on the same dPoW notarization network. The base coins of all chains in the cluster are fungible via the burn protocol.
  :::

#### :pushpin: Examples

<collapse-text hidden="true" style="margin-top: 1rem;" title="Example">

A 777777 pre-mined chain with no Antara modules enabled.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 &
```

A 777777 pre-mined chain with Antara modules on-chain only; no cross-chain Antara modules.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_cc=1 &
```

A 777777 pre-mined chain where Antara modules are allowed between all fellow Smart Chains that have -ac_cc=2 in their launch parameters. However, the cross-chain burn protocol is not active, and therefore coins cannot be transferred between chains.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_cc=2 &
```

A 777777 pre-mined chain. Antara modules are allowed between all fellow Smart Chains that have -ac_cc=102 in their launch parameters. Also, all -ac_cc=102 chains can use the cross-chain burn protocol to transfer coins from one chain to another.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_cc=102 &
```

</collapse-text>

## ac_ccactivate

**-ac_ccactivate=block_height**

The `ac_ccactivate` launch parameter allows for the activation of Antara on an existing Komodo-based Smart Chain wherein Antara was not originally enabled.

Add the `ac_ccactivate` parameter to the existing launch command for the Smart Chain and set the value equal to a future block height. When this block height is reached, Antara will be available on the Smart Chain.

This change requires a hard fork of the Smart Chain. If the Smart Chain is receiving Komodo's dPoW security service, the notary nodes must relaunch their Smart Chain daemons with the new launch parameter. All nodes must also update their daemons in the same manner.

By default, `ac_ccactivate` uses the default `ac_cc` value of `ac_cc=2`. It is not necessary to further specify `ac_cc` in the launch parameters, unless a value other than `2` is required.

#### :pushpin: Examples

<collapse-text hidden="true" style="margin-top: 1rem;" title="Examples">

##### Before Using `ac_ccactivate`

```bash
./komodod -ac_name=EXAMPLE -ac_supply=72000000 -addnode=24.54.206.138 &
```

##### After Using `ac_ccactivate`

```bash
./komodod -ac_name=EXAMPLE -ac_supply=72000000 -ac_ccactivate=140 -addnode=24.54.206.138 &
```

In this example, Antara will be available at blockheight `140`. All nodes, include the notary nodes, must relaunch the daemon with the new parameters before blockheight `140`.

</collapse-text>

## ac_ccenable

::: warning
This parameter is at the end of the beta development phase and is prepared for public testing. If you are interested in adopting this feature for a production Smart Chain, please reach out to us so that we can assist you.
:::

The `ac_ccenable` parameter restricts the Smart Chain so that only indicated Antara modules can be enabled. `ac_ccenable` requires [ac_cc](../installations/asset-chain-parameters.html#ac-cc) to be active.

To indicate which Antara modules should be available, insert each module's eval code in decimal and separated by commas.

The following table presents an abbreviated list of EVAL codes. For more information, please see [this linked content](https://github.com/jl777/komodo/blob/master/src/cc/eval.h).

| Name of the module | EvalCode |
| ------------------ | -------- |
| ASSETS             | 227      |
| FAUCET             | 228      |
| REWARDS            | 229      |
| DICE               | 230      |
| FSM                | 231      |
| AUCTION            | 232      |
| LOTTO              | 233      |
| HEIR               | 234      |
| CHANNELS           | 235      |
| ORACLES            | 236      |
| PRICES             | 237      |
| PEGS               | 238      |
| TRIGGERS           | 239      |
| PAYMENTS           | 240      |
| GATEWAYS           | 241      |

For example, the following parameters create a Smart Chain where only the `faucet` and `rewards` modules are active:

```bash
./komodod -ac_name=EXAMPLE -ac_supply=0 -ac_reward=100000000 -ac_cc=2 -ac_ccenable=228,229
```

When `-ac_cc` is set, but `-ac_ccenable` is not, all Antara modules are enabled.

::: warning
`ac_ccenable` disables spending utxos that are created under a non-enabled Antara module. We have also implemented additional functionality that disables API functions. This prevents the user from creating a utxo that `ac_ccenable` would render unspendable. It is still possible to create raw transactions that bypass this security feature, and thus create utxos that are unspendable. A normal user or developer relying on our API functionality should not be concerned with this. However, those who experiment with raw transactions should be cautious.
:::

::: warning
If the developer is also using a new feature that has yet to be documented here, `ac_cclib`, the eval codes in the `libcc.so` will not disable Antara API calls. Therefore, there remains a risk that a disabled API call can still be used to create a utxo, which will then be non-spendable.
:::

## ac_cclib

The `ac_cclib` parameter is used in conjunction with various Antara modules.

Typically, the Smart Chain that uses the `ac_cclib` parameter will have a unique build process. This is described as a part of each Antara module in question. Once the Smart Chain is properly built, the terminal command to launch the chain will include the `ac_cclib` parameter in a manner similar to the following:

```bash
-ac_cclib=desired_CC_module
```

Each Antara module uses the `ac_cclib` parameter differently, and therefore the reader should refer to the desired Antara module for further instructions.

## ac_decay

This is the percentage which determines the block reward decrease on each block-reward "halving".

This parameter will have no effect if [ac_reward](../installations/asset-chain-parameters.html#ac-reward) is not set.

This is the formula that `ac_decay` follows:

```bash
block_reward_after = block_reward_before * ac_decay / 100000000;
```

For example, if this parameter is set to `75000000`, at each "halving" the block reward will drop to 75% of its previous value.

#### :pushpin: Examples

<collapse-text hidden="true" style="margin-top: 1rem;" title="Examples">

A 777777-coin pre-mine, with a 10-coin block reward, and the block reward decreases by 25% every 2000 blocks.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_reward=1000000000 -ac_halving=2000 -ac_decay=75000000 &
```

</collapse-text>

## ac_end

This is the block height at which block rewards will end. Every block after this height will have 0 block reward (this means that, assuming all other settings are default, the only incentive to mine a new block will be transaction fees).

#### :pushpin: Examples

<collapse-text hidden="true" style="margin-top: 1rem;" title="Examples">

A 777777-coin pre-mine, with a block reward of 0.0005 coin. The block reward ends at block 25000.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_reward=50000 -ac_end=25000 &
```

A 777777-coin pre-mine, with a 5-coin block reward, and the block reward ends at block 200.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_reward=500000000 -ac_end=200 &
```

A 777777-coin pre-mine, with a 5-coin block reward, the block reward decreases by 50% every 2000 blocks, and the block reward ends at block 10000.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_reward=500000000 -ac_halving=2000 -ac_end=10000 &
```

</collapse-text>

## ac_eras

The `ac_eras` parameter allows the value of a chain's block reward to vary over time.

Each different time interval is called an "era" and a chain can have at most three eras.

When active, `ac_eras` changes the behavior of coinbase coins (i.e. the coins that are created as a result of mining). `ac_eras` forces the `COINBASE_MATURITY` value of coinbase coins to be `100` instead of the normal value of `1`. Therefore, coinbase coins become spendable after `100` confirmations.

The `ac_eras` parameter accepts only one value (`1`, `2`, or `3`). When activated, it allows certain other Smart Chain parameters to accept multiple values.

The principle parameter that is affected by `ac_eras` is [ac_reward](../installations/asset-chain-parameters.html#ac-reward), and it must receive at least one value.

Also, [ac_decay](../installations/asset-chain-parameters.html#ac-decay), [ac_halving](../installations/asset-chain-parameters.html#ac-halving), and [ac_end](../installations/asset-chain-parameters.html#ac-end) can each receive multiple values and thereby affect reward functionality.

For every era, there must be a corresponding value in `ac_end` that indicates the block height at which this era ends. To set the final era to last indefinitely, set the `ac_end` value of that era to `0`; the `0` setting should only be used for the last era.

In all parameters receiving multiple values, the values for the second and third eras must be preceded by a comma.

For example:

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_eras=3 -ac_reward=5000000000,7000000000,4000000000 -ac_end=1000,10000,0
```

In this Smart Chain, the first era will have a reward of 5000000000, the second will have 7000000000, and the third will have 4000000000. The reward for the first era ends at block 1000, for the second era at block 10000, and the third era lasts indefinitely.

If any of the relevant parameters has fewer distinct values than eras, the parameter's final value will carry through the remaining eras.

For example:

```bash
-ac_eras=2 -ac_reward=100000000,200000000 -ac_halving=100 -ac_end=10000,0
```

In this Smart Chain, the `ac_halving` value for both eras is `100`.

One more feature of `ac_eras` is the ability to transition from one era to the next with a linear progression, rather than a direct switch. To achieve this effect, in the initial era (the point at which the linear progression should begin) set the `ac_decay` value to `100000000` and the `ac_halving` value to `1`.

For example, the following parameters create a Smart Chain with a "slow start" reward:

```bash
./komodod -ac_name=HELLOWORLD -ac_reward=0,10000000000 -ac_eras=2 -ac_end=1000,0 -ac_decay=100000000,100000000 -ac_halving=1
```

This chain's block reward will grow linearly from 0 to 100 over 1000 blocks, then stay at 100 indefinitely.

::: tip
Use the [getblocksubsidy](../komodo-api/mining.html#getblocksubsidy) API method to verify your Smart Chain will work as expected at each relevant height: `./komodo-cli -ac_name=HELLOWORLD getblocksubsidy <blockheight>`
:::

## ac_founders

The `ac_founders` parameter creates a "founder's reward."

This parameter requires [ac_perc](../installations/asset-chain-parameters.html#ac-perc). If the `ac_perc` value is not declared, the `ac_founders` value defaults to `35%`. Also, either [ac_pubkey](../installations/asset-chain-parameters.html#ac-pubkey) OR [ac_script](../installations/asset-chain-parameters.html#ac-script) must be set.

The `ac_perc` value determines the percentage of block rewards paid to the founder. These rewards are not paid out immediately, but rather according to the `ac_founders` setting.

`ac_founders` determines the frequency at which the founder's reward is paid.

For example:

```bash
-ac_reward=100000000 -ac_perc=10000000 -ac_founders=100
```

The above parameters result in mining rewards of 100000000 satoshis (1 coin) per block, with a difference on every 100th block. On the 100th block exception, 1000000000 additional satoshis (10 coins) are paid to the founder's address.

The coins rewarded to the founder are created at the moment of payment, thus increasing the overall coin supply. See [ac_perc](../installations/asset-chain-parameters.html#ac-perc) for more details.

Use `ac_pubkey` to send the founder's reward to a normal address.

Use `ac_script` to send the founder's reward to a multi-signature address.

Set `ac_founders=1` to stay compatible with most stratum implementations. Any other value requires team member @blackjok3r's fork of knomp using the [disable-cb feature](https://github.com/blackjok3rtt/knomp#disable-coinbase-mode). Please reach out to our team on [discord](https://komodoplatform.com/discord) if you have further questions about how to set up a stratum.

## ac_halving

This is the number of blocks between each block reward halving. This parameter will have no effect if [ac_reward](../installations/asset-chain-parameters.html#ac-reward) is not set. The lowest possible value is `1440` (~1 day). If this parameter is set, but [ac_decay](../installations/asset-chain-parameters.html#ac-decay) is not, the reward will decrease by 50% each halving.

#### :pushpin: Examples

<collapse-text hidden="true" style="margin-top: 1rem;" title="Examples">

A 777777-coin pre-mine, with a 5-coin block reward, and the block reward decreases by 50% every 2000 blocks.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_reward=500000000 -ac_halving=2000 &
```

</collapse-text>

## ac_name

::: warning
All Smart Chains are required to set ac_name.
:::

This is the ticker symbol for the coin you wish to create. We recommended it consist only of numbers and uppercase letters.

#### :pushpin: Examples

<collapse-text hidden="true" style="margin-top: 1rem;" title="Example">

A simple Smart Chain

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 &
```

</collapse-text>

## ac_perc

The `ac_perc` parameter has two different functionalities depending on the configuration of the chain parameters.

#### ac_perc without ac_founders

When `ac_perc` is used without [-ac_founders](../installations/asset-chain-parameters.html#ac-founders) the chain will follow an inflation tax model. In this model, the `-ac_perc` parameter is the percentage added to the block reward, and the transactions that allocate these rewards are sent to the `-ac_pubkey` address. Naturally, for this configuration to function the `-ac_pubkey` parameter must be included.

For example, if `-ac_reward=100000000` and `-ac_perc=10000000`, for each block mined the miner receives 100000000 satoshis (1 coin), and the owner of the `-ac_pubkey` address receives 10000000 satoshis (0.1 coin, which is 10% of the miner's reward). The amount sent to the pubkey is not taken from the user, rather it is created at this point. Therefore, each transaction inflates the overall coin supply.

The maximum amount of coins created via this method across all transactions per block is capped at `(1000000 * <percentage>)`.

::: tip
Vout 1 of each coinbase transaction must be the correct amount sent to the corresponding pubkey. This only affects a miner trying to use a stratum. Team member, [Blackjok3r](https://github.com/blackjok3rtt/), developed a coinbase-override method for this purpose. Please see [this repo](https://github.com/blackjok3rtt/knomp#disable-coinbase-mode) for details.
:::

#### ac_perc with ac_founders

Please see the [-ac_founders](../installations/asset-chain-parameters.html#ac-founders) documentation for this functionality.

#### :pushpin: Examples

<collapse-text hidden="true" style="margin-top: 1rem;" title="Examples">

This example coin combines both `ac_staked` and `ac_perc`. As described in the section, ["Notes on How ac_staked Functions"](../installations/asset-chain-parameters.html#notes-on-how-ac-staked-functions), the method of rewards for the coin will vary over time. The coins used to stake will be included in the `ac_perc` calculations until block height `100000`. Therefore, the `pubkey` that receives `ac_perc` block rewards will receive more for the first `100000` blocks.

Other coin details include that it is a 777777-coin pre-mine, with a 10-coin block reward, and the chain adjusts difficulty so that 50% of the blocks are mined via PoS, and 50% via PoW.

For the first `100000` blocks, the `pubkey` address receives at least 1 coin for every mined block (an additional 10% above the block reward). The pubkey address also receives at least an additional 10% for every transaction made on the chain. For example, if a transaction sends 100 coins, an additional 10 coins are created and sent to the pubkey address. This includes the additional verification transaction in PoS blocks, meaning the pubkey address receives more coins for every PoS block. The extra amount sent to the `pubkey` address derives from blocks that are mined via `ac_staked`, the rewards of which are calculated into `ac_perc`.

After the first `100000` blocks, the rewards from `ac_staked` are no longer included in the `ac_perc` rewards sent to the `pubkey`.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_reward=1000000000 -ac_perc=10000000 -ac_pubkey=DO_NOT_USE_5efca96674b45e9fda18df069d040b9fd9ff32c35df56005e330392 -ac_staked=50 &
```

</collapse-text>

<!--

## ac_private

If `ac_private` is set to `1`, all transactions other than coinbase transactions (block rewards) must use zk-SNARKs. Beyond sending mined coins from a transparent addresses to a z address, all other transparent activity is disabled.

[Click here for more information about privacy features in the Komodo ecosystem.](../../../basic-docs/start-here/core-technology-discussions/miscellaneous.html#the-nature-of-privacy-features-in-the-komodo-ecosystem)

::: tip Note
The dPoW security mechanism requires that transactions are sent to a transparent address. Therefore, on a chain with `ac_private` enabled, any address can send funds to the transparent notary-node addresses.
:::

#### :pushpin: Examples

<collapse-text hidden="true" style="margin-top: 1rem;" title="Example">

A private-only Smart Chain.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_private=1 &
```

</collapse-text>

-->

## ac_pubkey

The `ac_pubkey` parameter designates a pubkey for receiving payments from the network. These payments can come in the genesis block, in all blocks mined thereafter, and from every transaction on the network.

This parameter is not intended for isolated use. It should only be activated on chains that also use at least one of the following parameters: `ac_perc`, `ac_founders`, or `ac_import=PUBKEY`.

The `pubkey` must be a 66 character string (a compressed pubkey). You can find this pubkey for any address by using the [validateaddress](../komodo-api/util.html#validateaddress) command, and searching for the returned `pubkey` property. The first two digits of a compressed `pubkey` are only either `02` or `03`. (The corresponding `private key` must be present/imported to the wallet before using `validateaddress`.)

#### :pushpin: Examples

<collapse-text hidden="true" style="margin-top: 1rem;" title="Example">

This example coin combines both `ac_staked` and `ac_perc`. As described in the section, ["Notes on How ac_staked Functions"](../installations/asset-chain-parameters.html#notes-on-how-ac-staked-functions), the method of rewards for the coin will vary over time. The coins used to stake will be included in the `ac_perc` calculations until block height `100000`. Therefore, the `pubkey` that receives `ac_perc` block rewards will receive more for the first `100000` blocks.

Other coin details include that it is a 777777-coin pre-mine, with a 10-coin block reward, and the chain adjusts difficulty so that 50% of the blocks are mined via PoS, and 50% via PoW.

For the first `100000` blocks, the `pubkey` address receives at least 1 coin for every mined block (an additional 10% above the block reward). The pubkey address also receives at least an additional 10% for every transaction made on the chain. For example, if a transaction sends 100 coins, an additional 10 coins are created and sent to the pubkey address. This includes the additional verification transaction in PoS blocks, meaning the pubkey address receives more coins for every PoS block. The extra amount sent to the `pubkey` address derives from blocks that are mined via `ac_staked`, the rewards of which are calculated into `ac_perc`.

After the first `100000` blocks, the rewards from `ac_staked` are no longer included in the `ac_perc` rewards sent to the `pubkey`.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_reward=1000000000 -ac_perc=10000000 -ac_pubkey=DO_NOT_USE_5efca96674b45e9fda18df069d040b9fd9ff32c35df56005e330392 -ac_staked=50
```

</collapse-text>

## ac_public

If `ac_public` is set to `1`, zk-SNARKs are disabled, and all z address functionality is disabled. Therefore, all transactions on the blockchain are public.

#### :pushpin: Examples

<collapse-text hidden="true" style="margin-top: 1rem;" title="Example">

A public-only Smart Chain.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_public=1 &
```

</collapse-text>

## ac_reward

::: warning
Komodo recommends that this parameter be included on all Smart Chains. Please see below for additional notes.
:::

This is the block reward for each mined block, given in satoshis.

If both `ac_reward` and `ac_staked` are not set, the default block reward will be `10000` satoshis and blocks will be on-demand after block `127` (a new block will not be mined unless there is a transaction in the mempool).

Komodo recommends that `ac_reward` be included in all Smart Chains. This prevents the Smart Chain from becoming an on-demand blockchain, and therefore this increases the Smart Chain's security.

To make a Smart Chain that has no block reward and is not on-demand, include the parameters: `-ac_reward=1 -ac_end=1`. The Smart Chain's first block will reward only the `-ac_supply` value, after which the `ac_reward` value will be `0`.

#### :pushpin: Examples

<collapse-text hidden="true" style="margin-top: 1rem;" title="Examples">

A 777777 coin pre-mine, with a 1 coin block reward that does not end. (Note that ac_supply is given in coins, while ac_reward is given in satoshis.)

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_reward=100000000 &
```

A 0 coin pre-mine with a 1-coin block reward that does not end. This is an example of a pure PoW Smart Chain that has no pre-mined coins.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=0 -ac_reward=100000000 &
```

A 777777-coin pre-mine, with a 10-coin block reward, and the block reward decreases by 25% every 2000 blocks.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_reward=1000000000 -ac_halving=2000 -ac_decay=75000000 &
```

</collapse-text>

## ac_sapling

The `ac_sapling` parameter adjusts the block height of a Smart Chain's default sapling activation. (Sapling is an upstream privacy technology provided by [Zcash](https://z.cash/), of which Komodo is a fork.)

By default, sapling will activate at block 61 on a newly created Smart Chain.

This can also be used to activate sapling prior to block 61. (Activating sapling prior to block 61 should not be done on a chain intended for production use.)

To delay sapling activation, set `ac_sapling` to a block height far in the future. For example, `-ac_sapling=5000000` will delay sapling activation to block `5000000`. At block `5000000` sapling will be activated.

## ac_script

The `ac_script` parameter enables the `ac_founders` reward to be sent to a multi-signature address or any p2sh address. If this parameter is used, block 1 (the "premine") will be mined to the `ac_script` address.

This parameter requires that `ac_founders` also be active. If `ac_script` is set, `ac_pubkey` must not be.

`ac_script` should be set to the `"hex"` value of `"scriptPubKey"`.

#### Finding the scriptPubKey

To find the `"scriptPubKey"` value, first create a multi-signature address with the [createmultisig](../komodo-api/util.html#createmultisig) command.

##### Command

```bash
./komodo-cli -ac_name=EXAMPLE createmultisig 2 "[\"RMnZJpfLbFHUxMS3HM5gkvtFKeduhr96Ec\",\"RW2Yx4Tk9WGfUvhbJTXGFiRhr7PKcVtrm5\",\"RQ1uqBj9yk94BcxEZodbeNqb3jWv8pLeA4\"]"
```

##### Response

```json
{
	"address": "bGHcUFb7KsVbSFiwcBxRufkFiSuhqTnAaV",
	"redeemScript": 	"522102040ce30d52ff1faae7a673c2994ed0a2c4115a40fa220ce055d9b85e8f9311ef2102a2ba4606206c032914dd48390c15f5bf996d91bf9dbd07614d972f39d93a511321026014ef4194f6c7406a475a605d6a393ae2d7a2b12a6964587299bae84172fff053ae"
}
```

On a test chain, send coins to the `bGHcUFb7KsVbSFiwcBxRufkFiSuhqTnAaV` address.

##### Command

```bash
./komodo-cli -ac_name=EXAMPLE sendtoaddress bGHcUFb7KsVbSFiwcBxRufkFiSuhqTnAaV 10
```

##### Response (txid)

```bash
ef0d05f14ea2a5bfa1c99142c2e3d78c851223d7476ed2e57b61b6e07f741f0f
```

Observe the resulting transaction with `getrawtransaction <txid> 1`.

##### Command

```bash
./komodo-cli -ac_name=EXAMPLE getrawtransaction ef0d05f14ea2a5bfa1c99142c2e3d78c851223d7476ed2e57b61b6e07f741f0f 1
```

##### Response

```json
{
	"value": 10.00000000,
	"valueSat": 1000000000,
	"n": 1,
	"scriptPubKey": {
		"asm": "OP_HASH160 2706324daaac92c93420e985f55d88ea20e22ae1 OP_EQUAL",
		"hex": "a9142706324daaac92c93420e985f55d88ea20e22ae187",
		"reqSigs": 1,
		"type": "scripthash",
		"addresses": [
			"bGHcUFb7KsVbSFiwcBxRufkFiSuhqTnAaV"
		]
	}
}
```

Set `ac_script` to the `"hex"` value from the returned json object.

##### Command

```bash
-ac_script=a9142706324daaac92c93420e985f55d88ea20e22ae187
```

## ac_staked

`ac_staked` indicates the percentage of blocks the chain will aim to mine via Proof of Stake (PoS), with the remainder via Proof of Work (PoW). For example, an `ac_staked=90` chain will have ~90% PoS blocks and ~10% PoW blocks.

Measurements of the `PoS:PoW` ratio are approximate; the PoW difficulty will automatically adjust based on the overall percentage of PoW-mined blocks to adhere to the approximate `PoS` value.

When creating a chain with the `ac_staked` parameter, the creation process is slightly different.

- Start both the first and second nodes **without** `-gen -genproclimit=0`.
- Once both are connected, execute `setgenerate true 1` on the node that should receive the pre-mine.
- Observe the debug.log by executing `tail -f ~/.komodo/<CHAIN>/debug.log`
- Wait for the Smart Chain to mine two blocks
- Execute `setgenerate false` to stop mining
- All of the coins (including the pre-mine) are now located on the node that mined two blocks. Do not split them with a normal transaction. Rather, split them using this tool: [link](https://github.com/KMDLabs/pos64staker).
- On the first node use 'setgenerate true 0' to enable staking.
- On the second node use 'setgenerate true 1' (or use a desired processor number instead '1') to enable mining.
- Use the [getbalance64](../komodo-api/wallet.html#getbalance64) method to ensure that there are coins staking in all 64 segids before block 10. The utxos may appear on any list, including both staking and nonstaking.

Following the above instructions will ensure that the Smart Chain is stable.

::: warning

On a chain using a high percentage for PoS, it's vital to have coins staking by block 100. If too many PoW blocks are mined consecutively at the start of the chain, the PoW difficulty may increase enough to stop the chain entirely. This can prevent users from sending transactions to staking nodes.

:::

::: warning

Set [ac_reward](../installations/asset-chain-parameters.html#ac-reward) parameter to any desired value for staking to function properly.
:::

::: warning

It is vital to stake coins in all 64 segids. You can use the genaddresses.py script in [this repository](https://github.com/KMDLabs/pos64staker) to generate an address for each segid. This functionality will soon be integrated directly into the daemon.

:::

::: tip
The first 100 blocks will allow PoW regardless of the ac_staked value.
:::

::: tip
It is not possible to both PoW mine and stake on the same node. Therefore, when the chain's consensus mechanism allows both PoS and PoW, the chain creator needs a minimum of two nodes mining/staking to keep the blockchain moving.
:::

### Notes on How ac_staked Functions

Once staking is active, utxos available in the `wallet.dat` file will stake automatically.

On an `ac_staked` Smart Chain there are 64 global segments (`segid`'s) to which all addresses and the corresponding utxos belong. These 64 `segid`'s become eligible to stake blocks in turns. The segment a utxo belongs to is determined automatically, according to the address in which the utxo resides.

You can see which segment an address belongs to by using the [validateaddress](../komodo-api/util.html#validateaddress) API command. You can use the [getbalance64](../komodo-api/wallet.html#getbalance64) API command to observe how your staked coins are distributed across the separate segids.

Each staked block will have an additional transaction added to the end of the block in which the coins that staked the block are sent back to the same address. This is used to verify which coins staked the block, and this allows for compatibility with existing Komodo infrastructure.

There are additional considerations when `ac_staked` is used in conjunction with [ac_perc](../installations/asset-chain-parameters.html#ac-perc) and [ac_pubkey](../installations/asset-chain-parameters.html#ac-pubkey). The coins used to stake will be included in the `ac_perc` calculations until the Smart Chain reaches block height `1000000`. Therefore, the [ac_pubkey](../installations/asset-chain-parameters.html#ac-pubkey) address will receive more coins for each staked block compared to a mined block. After block `1000000`, `ac_perc` will no longer include the coins used for staking, and therefore the amount of coins sent to the `ac_pubkey` address will normalize.

### Rules for Staking a Block

The following are the (current) rules for staking a block:

- Block timestamps are used as the monotonically increasing on-chain clock. It is important to have a synced system clock. Use the following sequence to sync your clock:`sudo apt-get install chrony`, `sudo systemctl restart chrony.service`, then check `timedatectl` for `NTP syncronized: Yes`

- A utxo is not eligible for staking until a certain amount of time has passed after its creation. By default, between blocks `1` and `2000` the amount of time required for a utxo to be eligibile is `blockheight * 3 seconds`. After block `2000`, the required amount of time is 6000 seconds. More precisely, after block `2000` a utxo is not eligible for staking until `100 * the expected blocktime (i.e. 1 minute)`. For example, utxos on a one-minute block-time Smart Chain would be eligible for staking one-hundred minutes after their creation.

- The `segid`s rotate through a queue to determine which `segid` has the most likely chance to stake a new block. The formula that determines this is based on the block height: `(height % 64) = the segid0 for this height`. For each block, the eligibility to stake a new block begins with `segid[0]`, and then the eligibility expands to the next segment in queue at every two-second interval until the block is staked. For example, if `segid[0]` has not mined a new block within two seconds, the consensus mechanism opens up the priority to include the second, `segid[1]`. This continues either until the block is staked, or all 64 `segid`'s are eligible to stake a new block. Once a block is staked, the `height` of the blockchain changes, pushing the `segid[0]` segment to the end of the queue, etc.

- By internal design, a utxo is more likely to win a block within a `segid` based on age of the utxo and amount of coins. Regarding the age eligibiility, the maximum maturity level is one month (e.g. after reaching one month of age, a utxo's likelihood of staking a coin does not further increase). The age of the utxo is set by the `nlocktime` property of the utxo, or if `nlocktime` is not set, the age is determined by the utxo's `blocktime` property.

#### :pushpin: Examples

<collapse-text hidden="true" style="margin-top: 1rem;" title="Example">

A 777777-coin pre-mine with a 1-coin block reward. The chain adjusts difficulty to keep 90% of blocks mined via PoS, and 10% mined via PoW.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_reward=100000000 -ac_staked=90 &
```

A 777777 coin pre-mine with a 10-coin block reward. The chain adjusts difficulty so 2% of blocks are mined via PoS, 98% via PoW.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_reward=1000000000 -ac_staked=2 &
```

A 777777-coin pre-mine, with a 1-coin block reward, block reward decreases by 50% every 2000 blocks, and the chain adjusts difficulty so 10% of blocks are mined via PoS, 90% via PoW.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_reward=100000000 -ac_havling=2000 -ac_staked=10 &
```

A 777777-coin pre-mine, a 10000-coin block reward, the block reward decreases by 40% every 2000 blocks, and the chain adjusts difficulty so 50% of blocks are mined via PoS, 50% via PoW.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_reward=1000000000000 -ac_halving=2000 -ac_decay=60000000 -ac_staked=50 &
```

A 777777-coin pre-mine, a 1000-coin block reward, the block reward decreases by 25% every 100000 blocks, the block reward ends at block 1000000, and the chain adjusts difficulty so 1% of blocks are mined via PoS, 99% via PoW. The pubkey address receives an additional 0.5% above the block reward for each mined block. For example, before the first halving, the pubkey address will receive 5 coins (0.5% of 1000 coin block reward) for every mined block. After the first halving, the pubkey address will receive 3.75 coins for every mined block (0.5% of 750-block reward). The pubkey address receives an additional 0.5% for every transaction made on the chain. For example, if a transaction sends 100 coins, an additional 0.5 coins are created and sent to the pubkey address. This includes the additional verification transaction in PoS blocks, meaning the pubkey address receives more coins for every PoS block.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_reward=100000000000 -ac_halving=100000 -ac_decay=75000000 -ac_end=1000000 -ac_perc=500000 -ac_pubkey=DO_NOT_USE_5efca96674b45e9fda18df069d040b9fd9ff32c35df56005e330392 -ac_staked=1 &
```

</collapse-text>

## ac_supply

This is the amount of pre-mined coins you would like the chain to have.

The node that sets [gen](../installations/common-runtime-parameters.html#gen) during the creation process will mine these coins in the genesis block.

If `ac_supply` is not set, [ac_reward](../installations/asset-chain-parameters.html#ac-reward) must be set, and a default value of 10 coins will be used in the genesis block. If [ac_founders](../installations/asset-chain-parameters.html#ac-founders) is set, the pre-mined coins will be mined to the founder's reward address.

The `ac_supply` parameter should be set to a whole number without any decimals places. It should also be set to less than `2000000000` to avoid 64-bit overflows.

::: tip
An additional fraction of a coin will be added to the initial supply based on the Smart Chain's parameters. This is used by nodes to verify the genesis block. For example, the DEX chain's `ac_supply` parameter is set to `999999`, but in reality the genesis block was `999999.13521376`. When using `ac_staked`, the additional amount may be more than a full coin, and can add up to two digits left of the decimal point.
:::

#### :pushpin: Examples

<collapse-text hidden="true" style="margin-top: 1rem;" title="Example">

A simple Smart Chain with pre-mined coins and a block reward of 0.0005.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_reward=50000 &
```

</collapse-text>

## ac_timelock...

**-ac_timeunlockgte=satoshis -ac_timelockfrom=height -ac_timelockto=height**

The `ac_timelock...` parameters enforce "coinbase locking".

In coinbase locking, the Smart Chain's block-reward feature behaves in a different manner compared to a default Smart Chain. Any block reward that is greater than or equal to the `ac_timeunlockgte` satoshi amount is temporarily locked. It will be unlocked (and therefore spendable) on a random block between the `ac_timelockfrom` and `ac_timelockto` heights.

The random unlock time for each reward is independent of the unlock time of other rewards.

For example:

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=0 -ac_reward=10000000000 -ac_halving=10000 -ac_timelockgte=10000000000 -ac_timeunlockfrom=10000 -ac_timeunlockto=100000
```

For the first 10000 blocks, any rewards that are greater than or equal to 10000000000 are locked until a random block between 10000 and 100000.

## ac_txpow

::: warning
This parameter is in its final testing stages. Please reach out to us if you would like to use it on a production chain.
:::

Setting `-ac_txpow=1` enforces a transaction-rate limiter. This can help to prevent spam transactions on a Smart Chain.

`ac_txpow` forces all transactions (other than coinbase transactions) to have a txid starting and ending with `00`.

This parameter is currently a proof of concept. Many of the traditional API commands, such as `sendtoaddress` or `sendmany`, are not currently supported. Instead, use [createrawtransaction](../komodo-api/rawtransactions.html#createrawtransaction) and [signrawtransaction](../komodo-api/rawtransactions.html#signrawtransaction).

## ac_veruspos

::: warning
This parameter is in its final testing stages. Please reach out to us if you would like to use it on a production chain.
:::

The `ac_veruspos` parameter is an alternative to [ac_staked](../installations/asset-chain-parameters.html#ac-staked).

When activated, the chain uses [Verus](http://veruscoin.io/)'s proof of stake implementation instead.

The only valid value for this parameter is `-ac_veruspos=50`. (`ac_veruspos` does not have the same segid mechanism as `-ac_staked`.)

# Introduction to Antara

Welcome to the Antara technical documentation.

#### About the Antara Section

This documentation is intended for developers learning about, building, and interacting with the Antara framework.

Users who are not interested in these activities, but are searching for documentation assistance, can find support in the Komodo Support Center.

[<b>Link to Komodo Support Center</b>](https://support.komodoplatform.com/support/home)

#### Conceptual Overview

A brief conceptual overview of the Antara framework can be found in the <b>Start Here</b> > <b>Product Introductions</b> > <b>Smart Chains & Antara </b> section.

[<b>Link to "Smart Chains & Antara" Introduction</b>](../basic-docs/start-here/about-komodo-platform/product-introductions.html#smart-chains-fluidity)

The [<b>Antara Tutorials</b>](../basic-docs/fluidity/fluidity-tutorials/introduction-to-fluidity-tutorials.md) section contains more thorough conceptual explanations of Antara.

Please consult our [Learning Path Outlines](../basic-docs/start-here/learning-launchpad/learning-path-outlines.html#type-b-developers-smart-chains) section for more details on approaches to learning Antara from both a conceptual and technical perspective.

#### About Antara Setup

The Antara Setup section contains basic information about setting up and using an Antara-enabled environment. Example topics include:

- [<b>Understanding Antara Addresses</b>](../basic-docs/fluidity/fluidity-setup/fluidity-instructions.html#understanding-the-types-of-addresses)
- [<b>Antara Customizations Available for Smart Chains During Creation and Hard Forks </b>](../basic-docs/smart-chains/smart-chain-setup/smart-chain-customizations.html#smart-chain-customizations)

#### About Antara Tutorials

The Antara Tutorials section contains various tutorials that provide instruction for Antara usage and creation.

For a walkthrough covering multiple tutorials in a targeted fashion, please see the [Learning Launchpad](../basic-docs/start-here/learning-launchpad/learning-path-outlines.html) section.

#### About Antara API

The Antara API section contains all available API commands for all default Antara modules.

These API commands can also be called Remote Procedure Calls, or RPCs. 
<!--Sidd: Since the below HTML content is not a repeating element, I'm not going to create a unique component, nor a separate CSS class at this time.-->

<div>

<div class="introductoryImage">

<img src="/start-here-pics/Dev_Docs_Introduction_small.png">

</div>

<h1>Introduction</h1>

<div style="width: 4rem; height: .5rem; margin: .1rem 0rem 2rem .3rem; background-color: #18F4BF;"></div>

<h4>Welcome to Komodo's Developer Documentation.</h4>

<div class="mobileIntroductoryImage">

<img src="/start-here-pics/Dev_Docs_Introduction_small.png">

</div>

</div>

<hr style="clear: both;">

Komodo's blockchain technology enables developers to create fully independent blockchains in a secure and highly competitive environment.

Each independent blockchain built on the Komodo framework has a wide range of capabilities, including:

* Bitcoin-hash rate supported security

* Enterprise-level scalability

* Consensus customization

* Blockchain clustering

* ...and more!

Because a Komodo-based blockchain is independently managed, the developer has complete freedom, so long as the essential connections to the Komodo ecosystem remain.


[Get Started →](./basic-docs/start-here/about-komodo-platform/about-komodo-platform.html)

<!-- Sidd: Divs below cause issues when loading page. Very ugly, and blinks. 

<div class="introductionLinkDiv">

<a class="introductionLink" href="../basic-docs/start-here/outline-for-new-developers.html">Get Started →</a>

</div>
-->
### Komodo Platform Overview

After years of innovation and development, Komodo's multi-chain architecture overcomes the challenges faced by other smart-contract platforms.

The philosophy behind Komodo's multi-chain architecture relies on four pillars.

- Security
- Scalability
- Interoperability
- Adaptability

With these four pillars in place, users of all types will find powerful, customizable solutions that will set your blockchain creativity free. 

<div style="clear: both; margin-top: 1.4rem; margin-right: 1.3rem; float: left; display: block;">

<img style="padding: 0.2rem; height: 6rem;" src="/Documentation_Portal_Icons/Security/Security_Light.svg">

</div>

<div style="margin-bottom: 1.5rem; margin-top: 2.3rem;">

### Security

#### Enjoy the Protection of the Bitcoin Hash Rate

Secure your project with the power of the Bitcoin network via Komodo’s delayed proof of work security mechanism. Don’t waste time worrying about attackers.

</div>

<div style="clear: both;">

- Approximately every half hour, a hash of the developers blockchain is notarized to Bitcoin
- All transactions included in the hash are considered to have achieved finality
- For the consensus mechanism, arbitrarily choose between a mixture of Proof-of-Work and Proof-of-Stake

</div>

<div style="clear: both; margin-top: 1.4rem; margin-right: 1.3rem; float: left; display: block;">

<img style="padding: 0.2rem; height: 6rem;" src="/Documentation_Portal_Icons/Scalability/Scalability_Light.svg">

</div>

<div style="margin-bottom: 1.5rem; margin-top: 2.3rem;">

### Scalability

#### Have a Blockchain All To Yourself. Want More Than One? No Problem.

Developers and their users have a full Smart Chain all to themselves, and can combine any number of Smart Chains together into one cluster. 

</div>

<div style="clear: both;">

- Developers and their users can securely own a full Smart Chain
- Each Smart Chain is completely autonomous
- If your project grows beyond the capacity of a single chain, simply add more
- Scale your maximum transaction-per-second throughput into the millions, if desired
- No gas fees. All transaction fees are paid in your Smart Chain’s coin

</div>

<div style="clear: both; margin-top: 1.4rem; margin-right: 1.3rem; float: left; display: block;">

<img style="padding: 0.2rem; height: 6rem;" src="/Documentation_Portal_Icons/Interoperability/Interoperability_Light.svg">

</div>

<div style="margin-bottom: 1.5rem; margin-top: 2.3rem;">

### Interoperability 

#### Link Your Smart Chain to Other Chains

Your project is interoperable with all others in the Komodo ecosystem, plus connected with over 99% of coins and tokens through Komodo’s industry-leading atomic-swap technology.

</div>

<div style="clear: both;">

- Komodo’s Multi-Chain Syncing feature allows you to scale out linearly on demand
- Smart Chains can verify and update local state based on the activity of compatible Smart Chains
- Transfer assets and tokens between compatible Smart Chains
- Use Komodo's atomic-swap DEX software to trade your Smart Chain assets with Non-Smart assets.

</div>

<div style="clear: both; margin-top: 1.4rem; margin-right: 1.3rem; float: left; display: block;">

<img style="padding: 0.2rem; height: 6rem;" src="/Documentation_Portal_Icons/Adaptability/Adaptability_Light.svg">

</div>

<div style="margin-bottom: 1.5rem; margin-top: 2.3rem;">

### Adaptability 

#### Develop Your Smart Chain at Will

Adapt your blockchain to create a purpose-built solution that fits your individual needs. Receive all new features developed by Komodo to ensure your project is future-proofed. 

</div>

<div style="clear: both;">

- Twenty-four different launch parameters are available to customize the functionality of your Smart Chain
- Rely on the Antara framework to fully customize your Smart Chain with unique and arbitrary code within the consensus mechanism
- Share and adopt code in Komodo's open-source community
- Dispose of Smart Chains that become data-weight heavy, or transfer them to fresh Smart Chains for ease of use
- No need for a virtual machine (VM) nor a VM-based programming language

</div>

#### Together, the Komodo Platform is Unlike Anything Else

With the Komodo architecture at your command, you are prepared to lift your Smart Chain software to levels never before seen in the blockchain industry.

### Komodo's White-Label Software Brings Your Innovation to Market Faster

The Komodo Platform offers many free white-label applications that can help you bring your innovation to market faster.

- Atomic-Swap Decentralized Exchange & Multi-Asset Wallet
- Decentralized-Crowdfunding App
- Custom Block Explorers 
- SPV Electrum Server Integration
- Core Antara Modules

### Installing, Using, and Testing Komodo Software is Free

The best way to learn about Komodo is to use it for yourself.

<!-- Needs directions to next section. -->
# Documentation Orientation

The following section answers common questions a newcomer may have, and prepares the new reader for the installation procedure.

### Intended Audience of this Technical Documentation Website

This website is targeted for developers in the Komodo ecosystem.

Users who are not interested in developing Komodo-based software, but only in using existing software, should instead turn to the Komodo Support website for questions and answers.

[<b>Link to Komodo Support Website</b>](https://support.komodoplatform.com)

### Assumptions for this Documentation

To limit the scope of what we cover on the technical-documentation website, we list the following prerequisite knowledge. 

#### Familiarity with the Concept of Blockchain Technology

The reader should be generally familiar with the basic concept of blockchain technology and why it matters. If you're not yet familiar, we recommend that you first read our Core Technology Discussion regarding our <b>Delayed Proof of Work</b> consensus mechanism.

[<b>Link to Core Technology Discussion: Delayed Proof of Work</b>](../../../basic-docs/start-here/core-technology-discussions/delayed-proof-of-work.html)

#### Simple Programming Skills

Much of the content on this site will be more understandable for the reader who has a rudimentary understanding of a mainstream programming language. 

Beginner-level knowledge should be sufficient for the majority of the site. For example, the reader should be able to:

- Execute commands on the command line
- Utilize an Application Programming Interface (API)
- Write and execute a rudimentary script in any mainstream language

If you do not have these prerequisite experiences, we encourage you to reach out to our community on [<b>Discord.</b>](https://komodoplatform.com/discord) There are thousands of free tutorials online that can help you quickly cover these topics. We will be happy to help you in your search.

### A Note Regarding Komodo Language Compatability 

Komodo is a highly capable blockchain technology, and it is designed for compatability with essentially all mainstream programming languages. However, not all developers will need to use its most advanced aspects.

#### A Normal Developer in the Komodo Ecosystem

A typical developer in the Komodo ecosystem will build all their application logic in a separate application that runs outside of their Smart Chain daemon. 

The developer's software will send API requests to their Smart Chain's daemon to update the blockchain state and take advantage of Komodo's default Antara Modules. (Antara Modules provide functionality similar to the "smart contracts" that are common on other platforms. However, we argue that Antara Modules are dramatically more powerful.) 

For this developer, any programming language that is capable of sending API requests to the software daemon is compatible.

#### An Advanced Antara Developer

A highly advanced developer may be interested to take advantage of the full potential of Komodo technology. 

This developer can utilize Komodo's Antara Framework to add arbitrary code to the consensus mechanism of their autonomous Smart Chain.

Although the Antara Framework can be compatible with essentially all mainstream programming languages, at this time we encourage developers to stay close to the C/C++ languages. 

### The Cost of a Smart Chain

#### Installation and Testing is Free

Creating and experimenting with Komodo Smart Chains is completely free.

#### Production Smart Chains Typically Require Komodo's Security Services

In nearly all circumstances, a Smart Chain is only secure once it receives the Komodo dPoW Security Service.

Please reach out to our third-party service providers for a cost quote.

Our third-party providers are available on our [<b>Discord</b>](https://komodoplatform.com/discord) live-chat server. Their usernames are:

- @siu
- @ptyx
- @bitcoinbenny
- @TwilightPunkster.

::: tip
We have a limited supply of early-adopter discounts. Please inquire while supply last.
:::

### The Cost of Using AtomicDEX Software

Currently, there are no additional costs for AtomicDEX beyond the fees listed for each trade. 

<!--

### The Cost of Using Chainlizards API

-->

### Differences between KMD and a Smart Chain

The main KMD blockchain runs on the same underlying framework as all Smart Chains in the ecosystem, but not all features are active on the KMD blockchain.

The KMD chain's active features include Bitcoin-hash rate supported security and the ability to execute Antara Modules. Other features, such as zero-knowledge privacy, are disabled.

This limitation is intentional. The KMD chain holds all the meta data of the ecosystem. By keeping the functionality limited, Komodo discourages rapid data growth on this central blockchain.

All other Smart Chains in the ecosystem are fully customizable. 

<!--

## Educational Outline for New Developers

The Komodo Platform offers a wide variety of functionality. Komodo can seem overwhelming at first. We hope this outline can help the reader to structure their approach. 

#### Install the Basic Komodo Software

The first step is to install Komodo software on your machine.

[Follow through the instructions here,](../installations/basic-instructions.html#installing-basic-komodo-software) and return to this spot in the outline when you are finished.

#### Get Acquainted With komodod and komodo-cli

Now that you have `komodod` and `komodo-cli` installed, [skim briefly through the instructions on how to interact with a Komodo-based daemon, linked here](../installations/basic-instructions.html#interacting-with-komodo-chains).

You'll come back to this section later, once you're ready to execute API commands and runtime parameters.

::: tip
You do not need to launch or sync the main Komodo chain (KMD), and you do not need to own any KMD to test a Smart Chain.
:::

#### Create Your First Asset Chain

With `komodod` and `komodo-cli` installed you're ready to spin up a Smart Chain.

[Follow the instructions in this linked guide to build your first Smart Chain.](../installations/creating-asset-chains.html#creating-a-new-asset-chain)

We recommend that you use the simplest of settings for now.

For example:

`./komodod -ac_name=HELLOWORLD -ac_supply=777777 &`

#### Execute Elementary RPC's

After you have your Smart Chain running on both nodes, we recommend executing some basic rpc calls in the terminal.

Here are links to some simple and common rpc examples:

[getnewaddress](../komodo-api/wallet.html#getnewaddress)

[sendtoaddress](../komodo-api/wallet.html#sendtoaddress)

[getinfo](../komodo-api/control.html#getinfo)

As Komodo is downstream from both [Bitcoin](https://bitcoin.org) and [Zcash](https://z.cash), essentially all of the commands that are available on those two upstream blockchains are also available here.

#### Test Out Platform-Specific Features

We create many features, functionalities, and commands that are specifically designed for dApp and platform-oriented developers.

For example, you can learn how to make Smart Chains that are more complicated in nature.

[Read this documentation first to get the basic idea](../installations/asset-chain-parameters.html).

Once you understand the concept, you can test a few asset-chain tricks -- like making your Smart Chain's consensus mechanism [a mix between Proof of Work and Proof of Stake](../installations/asset-chain-parameters.html#ac-staked).

Or, you could make your Smart Chain suitable for a rapid mining period, followed by complete blockchain disposal. Use parameters such as [ac_end](../installations/asset-chain-parameters.html#ac-end), [ac_reward](../installations/asset-chain-parameters.html#ac-reward), [ac_decay](../installations/asset-chain-parameters.html#ac-decay), and [ac_perc](../installations/asset-chain-parameters.html#ac-perc) for this effect.

#### Discover Custom Consensus Modules

Now you should be ready to head into the territory for utilizing Komodo's built-in methods to customize your own consensus mechanism.

Playing with your consensus mechanism is akin to creating what other blockchain platforms call a "smart contract." However, on Komodo, things are different. We would argue this method is better, but we admit we're biased.

If you need to catch the general idea, read the section, [Custom Consensus Overview](custom-consensus-overview.html).

First, you must create a Smart Chain that has the [ac_cc runtime parameter properly enabled](../installations/asset-chain-parameters.html#ac-cc).

With this activated, you can try a few existing templates:

- [Create ERC20 tokens on your new Smart Chain](../customconsensus/tokens.html)
- Try using your [built-in on-chain DEX](../customconsensus/gateways.html)
- Use [the oracles smart-contract template](../customconsensus/oracles.html) to import real-world data to your blockchain, which can then affect blockchain behavior

...and more!

#### Learn About BarterDEX and Agama

Your Smart Chain can easily be integrated into our native atomic-swap powered DEX, [BarterDEX](../installations/basic-instructions.html#komodo-s-native-dex-barterdex), and our multi-coin wallet, [Agama](https://komodoplatform.com/komodo-wallets/).

You can learn more about both on [docs.komodoplatform.com](https://docs.komodoplatform.com).


-->

# Product Introductions

## Smart Chains & Antara

Komodo's Smart Chain technology allows you to create secure and fully autonomous blockchains that are designed for a specific purpose.

<!--

| Embedded Video |

-->

#### Smart Chains Rely on the Next Step in Blockchain Evolution: The Antara Framework

The Antara framework allows you to customize your Smart Chain and add arbitrary code to the consensus mechanism.

This blockchain evolution allows innovators to better meet the demands of your customers.

#### Comparing a Smart Chain to a Smart-Contract Platform

| Layer | Branded Terminology | Universally Defined As: | Smart-Contract Comparison |
| ----- | ------------------- | ----------------------- | ------------------------- |
| Application Layer | Antara Apps | Smart-Chain Apps | dApps |
| API Layer | Antara API | Smart-Chain API | - |
| Service Layer | Antara Module | Smart-Chain Module | Smart Contract |
| Blockchain Layer | Antara Smart Chains | Smart Chains | (Shared Chain) |
| Platform Layer | Komodo Platform | Smart-Chain Platform | Smart-Contract Platform |

### Smart Chains and Antara Create a Convenient Development Workflow

For developers, the unique combination of Smart Chain technology and Antara simplifies the adoption of blockchain technology.

- Start by creating a new Smart Chain that will serve your specific application
- Use the library of existing Antara modules to craft application-specific functionality
- Optionally, use Antara to add arbitrary code to your consensus mechanism
- When your Smart Chain becomes popular, scale into a cluster of Smart Chains
- Link your Smart Chain to other Smart Chains using Antara and Komodo technology
- Trade your assets with essentially any blockchain token using Komodo's AtomicDEX
- Stay up-to-date with the latest industry innovations through no-cost updates

[Link to Antara content]()

### The Architecture of Antara-Powered Smart Chains

<div style="clear: both; width: 70%; margin-top: 1rem; margin-left: auto; margin-right: auto; margin-bottom: 4rem; display: block;">

<img style="padding: 0.2rem; border: 0.05rem solid;" src="/start-here-pics/Komodo-layers-5.png">

</div>

--------------------------------------
<div class="inlineImageDiv"  style="clear: both; margin-top:1rem; float: right; display: block;">

<img style="padding: 0.2rem; border: 0.05rem solid;" src="/start-here-pics/Komodo-layers-4.png">

</div>

<div style="margin-bottom: 2.5rem;">

#### Antara API

Produced by Antara Modules

- Open API
- Permissionless Innovation
- Language Agnostic

</div>

--------------------------------------
<div style="clear: both; margin-top:1rem; float: right; display: block;">

<img style="padding: 0.2rem; border: 0.05rem solid;" src="/start-here-pics/Komodo-layers-3.png">

</div>

<div style="margin-bottom: 2.5rem;">

#### Antara Modules

Attached to the chain daemon.

- Pluggable Modules
- Growing Module Library
- Build Your Own

</div>

--------------------------------------
<div style="clear: both; margin-top:1rem; float: right; display: block;">

<img style="padding: 0.2rem; border: 0.05rem solid;" src="/start-here-pics/Komodo-layers-2.png">

</div>

<div style="margin-bottom: 2.5rem;">

#### Antara Smart Chains

Purpose-built blockchains

- Autonomous & Sovereign
- Customizable Parameters
- Atomic Swap Compatible

</div>

--------------------------------------
<div style="clear: both; margin-top:1rem; float: right; display: block;">

<img style="padding: 0.2rem; border: 0.05rem solid;" src="/start-here-pics/Komodo-layers-1.png">

</div>

<div style="margin-bottom: 2.5rem;">

#### Komodo Platform

Composable & Open

- Connect to the Bitcoin Hash Rate
- Composable Architecture
- Open-Source Innovation

</div>

--------------------------------------

### Advantages of the Antara Framework

#### Programmable Daemon

Arbitrary code is added directly into the blockchain daemon. This stands apart from the traditional smart-contract platforms, which abstract a smart contract on top of a virtual machine.

#### Modular Design

Smart Chains are composed of independent and autonomous modules that are decoupled from the underlying blockchain consensus mechanism.

#### Autonomous & Sovereign

Smart Chains are not child chains, nor are they dependent on other blockchains.

#### Turing-Complete

The Antara framework supports C/C++, and in the future it will also support other languages. Therefore, Antara allows for Turing-complete code. With Antara, any program or software can be coded to run within your blockchain daemon.

#### No Gas Fees

There are no gas fees with Antara. Regardless of how many processes an Antara module requires, running an instance of the module will only need a single transaction fee, paid in your blockchain’s coin.

#### Antara Module Library

The Antara framework already hosts a library of plug-and-play modules. Each module can add special conditions that affect the nature of transaction consensus on your Smart Chain.

#### Create Your Own Modules

Experienced developers can write custom modules, creating the building blocks and RPC calls they need to build more advanced blockchain-based software.

[Link to smart chain section]()

## AtomicDEX

Komodo provides open-source atomic-swap software for trading seamlessly between essentially any blockchain asset in existence.

<div class="video-wrapper">

<iframe width="560" height="315" src="https://www.youtube.com/embed/PeavTHz8LSA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

</div>

#### Enjoy All the Benefits of the Old System, and of the New

Everything that was possible in the old centralized-exchange system is also possible in the new atomic-swap system.

High-speed trading is easy, the DEX API allows you to create atomic-swap powered apps and trading bots, and you can even trade on your mobile phone.

Our DEX software is not bound to Komodo-based blockchain assets. If a blockchain asset can trade on a centralized exchange, odds are you can atomically swap this asset on our DEX software.

#### Skip the Centralized Middleman and Trade Directly with Your Trading Partner

In an atomic swap, there is no need to lend your money to a third party for temporary holding. This keeps security in the hands of the user, reduces the cost of fees, and prevents the users from coalescing their funds into a large target for hackers.

#### Keep Your Private Keys Private, At All Times

Unlike a centralized exchange, users maintain ownership over their blockchain assets at all times, right up until the moment when their assets are atomically swapped.

#### Join the Crowd, or Start a New One

Users create their own liquidity pools for trading between assets. You can use a pool that is already established, or start your own pool.

#### No Off-Chain Settlements Required

The Komodo software uses atomic-swap technology, pioneered by Tier Nolan and our very own JL777, to ensure that a trade either happens, or it doesn't. If a trade stalls or fails halfway through the process, blockchain software ensures that these funds automatically reappear in the users' wallets.

#### Integrate Your Smart-Chain Asset with Our Software

Integration requires only a few simple steps, and once up and running, you are free to trade your new blockchain-based asset with whomever you decide.

You are free to discover your own audience.

[Link to AtomicDEX]()

<!-- 

Chain lizards would go here.

## Chainlizards

Introduction to Chain Lizards

-->
# Simple Installations

## Smart Chain Installation

#### Installing Basic Komodo Software

To install the Komodo daemon, `komodod`, and its necessary counterpart, `komodo-cli`, the simplest method is to download pre-compiled binaries.

Downloadable packages are available for Linux, MacOS, and Windows.

[Download and unzip the pre-compiled executables found here.](https://github.com/KomodoPlatform/komodo/releases)

Once unzipped, the executables do not require installation. Simply find `komodod` and `komodo-cli` in the directory where you unzipped the files.

You may also build `komodod` and `komodo-cli` from source. This is not required, but it is considered the best practice. Building from source enables you to receive the latest patches and security upgrades the moment they are pushed to the `komodod` source.

#### See the Smart Chains Documentation for Further Details

Please see the full [Smart Chains]() technical documentation for full software explanations.

You will find [a walkthrough on building from source here.](https://docs.komodoplatform.com/komodo/installation.html)

## AtomicDEX Installation

#### Installing AtomicDEX Software

The following links contain downloadable AtomicDEX software. Simply download the files appropriate for your operating system, extract them to your desired location, and double click the application to begin.

[<b>Link to AtomicDEX Software - Simple Installations</b>](http://195.201.0.6/mm2/)

#### Additional AtomicDEX Documentation

Please see the following links for further details regarding AtomicDEX software.

[Link to Source Code Installation Methods](../../../basic-docs/atomicdex/atomicdex-setup/get-started-atomicdex.html)

[Link to AtomicDEX API](../../../basic-docs/atomicdex/atomicdex-setup/get-started-atomicdex.html)
# Learning Path Outline

## Introduction

Welcome to the educational center for Komodo technology. This section provides a descriptive outline for new developers in the Komodo ecosystem. 

The content first familiarizes the developer with basic blockchain principles, and then narrows down on principles that are unique to Komodo.

Once the developer is comfortable on a conceptual level, the content leads the developer into the process of utilizing the Komodo software itself in a development environment.

Using Komodo software is about as difficult as using any other programming framework. The developer needs to first understand how the software functions on a conceptual level, and then the developer learns the vocabulary necessary to integrate Komodo software into their personal creative endeavors.

This process can take anywhere from a single full day to a few weeks, depending upon the skill level of the developer. Each step of the journey provides a time estimate based on a normal developer that has a few years' experience in a mainstream programming language.

## A Description of Our Intended Audience

As mentioned in the [Documentation Orientation](../../../basic-docs/start-here/about-komodo-platform/orientation.html) section, this website is intended for readers who are already familiar with a mainstream programming language.

Now, we divide readers further into two categories.

##### The Normal Komodo Developer

The first is a developer who intends to utilize Komodo technology only as it is provided to them. This is the most common type of developer we expect in the Komodo ecosystem.

This developer likely intends to utilize Komodo software  to release a blockchain product that either stands alone, or compliments another software product the developer is creating.

For example, this developer could be involved with the creation of a blockchain-based asset for a business they are building. This developer expects an audience to purchase and trade these assets, and the audience may utilize Komodo's white-label software for asset management.

As another example, this type of developer could be building a web application that integrates with blockchain technology. The developer could be utilizing Antara Modules, such as [<b>Oracles,</b>](../../../basic-docs/antara/antara-api/oracles.html#introduction) to securely record data that is relevant to or even created by their audience. Once the data is recorded, the developer could display this information on their website, for simple gameplay enhancements or data-driven storytelling.

##### The Advanced Komodo Developer

The advanced Komodo developer intends both to use the Komodo software as it is provided to them, and also to add in their own customized functionality beyond the scope of the default software. This developer is highly skilled in a mainstream programming language, such as C/C++, and is prepared to thoroughly understand and manipulate blockchain software.

For example, this developer may intend to build customized Antara Modules to add to the consensus mechanism of their Smart Chain. These customized modules could create unique and fully playable blockchain-based games of a complexity level similar to [<b>this Komodo-based Roguelike game</b>](../../../basic-docs/antara/antara-tutorials/rogue-module-tutorial.html#introduction), or [<b>this Komodo-based version of Sudoku.</b>](../../../basic-docs/antara/antara-api/sudoku.html) 

#### How Each Type of Developer Should Approach the Educational Outlines

Both types of developers should begin at the beginning.

The Normal Developer should proceed until they reach the content with a difficulty level labeled `Advanced` and then stop, while the Advanced Developer there should proceed.

We recommend that developers complete steps with a priority label of `Recommended`. There are also a few sections labeled `Optional` that may be skipped, although the developer who completes them will, hopefully, find them worth the while as these sections contain short cuts and other recommended best practices.

## Step 0: Install Komodo Software

Priority: Recommended

Difficulty: Normal

Time: 10 Minutes

-------

Access to Komodo software allows the developer to immediately begin learning through direct experimentation.

We recommend that all developers install Komodo software not by using pre-built binaries, but rather by installing and compiling from source code. 

This allows the developer to later have instant access to Komodo security patches, feature enhancements, and upgrades.

[Link to Komodo Source Code Installation Methods](../../../basic-docs/smart-chains/smart-chain-setup/installing-from-source.html)

[Link to AtomicDEX Source Code Installation Methods](../../../basic-docs/atomicdex/atomicdex-setup/get-started-atomicdex.html)

## Step 1: Reach Out to Our Community on Discord

Priority: Recommended

Difficulty: Normal

Time: 5 Minutes

-------

Discovering Komodo is best accomplished with a friend. 

Komodo utilizes a third-party chat service called Discord.

[Reach out to us on Discord at this link.](https://komodoplatform.com/discord)

Once you are logged in to the Komodo Discord server, you will see a list of channels on the left side of your browser. All channels begin with a `#` hashtag.

Say hello in channels such as `#arrivals`, `#start-here`, or `#introductions`.

The `#community-support` channel is a good place to ask for basic support with Komodo software.

To find fellow developers, head to the `#dev-general` channel. All channels that begin with `dev` are created for developers.

We look forward to meeting you there!

## Step 2: Begin a Conceptual Understanding of Komodo's Software

Priority: Recommended

Difficulty: Normal

Time: 10 Minutes

-------

With the Komodo software installed and a connection made to our community, you are prepared to begin learning about Komodo on a conceptual level.

These conceptual concepts must be grasped first, before attempting to manipulate blockchain assets and software. The concepts help to orient you in your development process. 

##### Platform Overview

The Platform Overview section provides the broadest conceptual understanding of the Komodo Platform.

[<b>Link to Platform Overview.</b>](../../../basic-docs/start-here/about-komodo-platform/about-komodo-platform.html)

##### Product Introductions

The Production Introductions section contains simplified introductions to Komodo software products and their architecture.

[<b>Link to Product Introductions</b>](../../../basic-docs/start-here/about-komodo-platform/product-introductions.html)

##### Doc Orientation

The Doc Orientation section gives the reader an understanding of the nature of this documentation website.

[<b>Doc Orientation</b>](../../../basic-docs/start-here/about-komodo-platform/orientation.html)

## Step 3: Read the Core Technology Discussions Section

Priority: Recommended

Difficulty: Normal

Time: 1 - 5 Hours

-----------

The Core Technology Discussions section provides a thorough explanation of blockchain technology and Komodo. The principles explained herein are crucial in later stages.

##### Introduction

The Introduction section presents a broad overview of the nature of the Komodo ecosystem and the philosophy and goals that drive this community.

[<b>Link to Introduction Section</b>](../../../basic-docs/start-here/core-technology-discussions/introduction.html)

##### Delayed Proof of Work

The Delayed Proof of Work section explains to the reader the fundamental aspects of blockchain technology that apply to members of the Komodo ecosystem. The primary aspects that a developer should understand here are the value of the consensus mechanism and the nature of Komodo notarization.

[<b>Link to Delayed Proof of Work Section</b>](../../../basic-docs/start-here/core-technology-discussions/delayed-proof-of-work.html)

##### Creating and Distributing a New Komodo Smart Chain

This section helps the reader to understand the basic process an entrepreneur and developer goes through in releasing a new blockchain-based product. This can be called a "Decentralized Initial Coin Offering," or dICO for brevity.

This also helps the reader to understand how Komodo uses runtime forks to allow each Komodo developer to create their own blockchain that can be connected to the rest of the ecosystem.

[<b>Link to Creating and Distributing a New Komodo Smart Chain Section</b>](../../../basic-docs/start-here/core-technology-discussions/creating-and-distributing-a-new-komodo-smart-chain.html)

##### The Antara Framework

The Antara Framework section explains to the reader the basic concepts of the Antara Framework. This framework is a key aspect of the Komodo development process. The framework provides functionality that can be compared to "smart contracts" found on other blockchain platforms.

[<b>Link to Antara Framework Section</b>](../../../basic-docs/start-here/core-technology-discussions/antara.html)

##### AtomicDEX and Atomic Swaps

As a developer gains understanding of blockchain technology, and as your audience grows, you will likely seek to make atomic swaps available to your users. The AtomicDEX software is our signature method for conducting atomic swaps. 

This section helps the reader to understand why atomic swaps are a key to the future of cryptocurrency trading and how they work. 

[<b>Link to AtomicDEX and Atomic Swaps Section</b>](../../../basic-docs/start-here/core-technology-discussions/atomicdex.html)

##### Miscellaneous

The Miscellaneous section explains a few leftover concepts that we recommend the reader understand. For example, a developer will no doubt encounter a "Utxo," or the developer may be curious about privacy on a Komodo Smart Chain, and this section provides preparation.

[<b>Link to Miscellaneous Section</b>](../../../basic-docs/start-here/core-technology-discussions/miscellaneous.html)

## Step 4: Complete the Beginner Series in the Antara Tutorials Section

Priority: Recommended

Difficulty: Normal

Time: 1 Hour

------------

The Beginner Series tutorials provide the reader with an easy pathway into the process of using Komodo technology.

Many of the technical aspects of using Komodo software are simplified here, to allow you to familiarize yourself with the nature of blockchain commands and responses without having to encounter everything all at once.

As a part of this tutorial, you will download a separate piece of software (a Docker-based image) in which you will enter your first commands.

Towards the end of the series, we then walk you through the process of interacting with Komodo Smart Chains in the terminal.

[<b>Link to Beginner Series Tutorial - Part 0 - Preparation</b>](../../../basic-docs/antara/antara-tutorials/beginner-series-part-0.html)

## Step 5: Familiarize Yourself with Smart Chain API Basics

Priority: Recommended

Difficulty: Normal

Time: < 1 Hour

--------------

Having completed the Beginner Series, the reader is now prepared to use the terminal more frequently while interacting with Komodo Smart Chains.

The Smart Chain API Basics tutorial walks the reader through many of the common commands and Remote Procedure Calls (RPCs) and assists the reader in becoming comfortable in the Komodo environment.

[<b>Link to Smart Chain API Basics Tutorial</b>](../../../basic-docs/antara/antara-tutorials/understanding-antara-addresses.html)

## Step 6: Enhance Your Development Environment and Experience

Priority: Optional

Difficulty: Normal

Time: 1 - 5 Hours

----------------

At this point, the Normal Developer should be generally comfortable with the basic concepts of utilizing the default Komodo Smart Chain software.

The following tutorials are optional, but we still recommend that the developer explore the concepts contained herein. You may find short cuts and solutions that will help you avoid common pitfalls in the development process.

##### Basic Environment Setup for Linux VPS

Many, if not most, developers in the Komodo ecosystem use a Linux-based Virtual Private Server (VPS) to build software. Working on a VPS simplifies many aspects of the development process, as the VPS grants the developer a disposable and rapidly customizable environment for troubleshooting.

There are free VPS services available and links are provided.

[<b>Link to Basic Environment Setup for Linux</b>](../../../basic-docs/smart-chains/smart-chain-tutorials/basic-environment-setup-for-linux-vps.html#introduction)

##### Creating Komodo Smart Chains

Up to this point in the outline, the developer has either relied on tutorial software to provide a Smart Chain, or the developer has relied on a `regtest` chain. 

Now, it is time to try creating your own Smart Chain.

[<b>Link to Creating a Default Smart Chain</b>](../../../basic-docs/smart-chains/smart-chain-tutorials/create-a-default-smart-chain.html#creating-a-new-smart-chain)

##### Creating a Smart Chain on a Single Node

Sometimes in the development process, the developer may find convenience in having a Smart Chain running on a single node. This is not the way that blockchain software is intended to function, but single-node blockchains are useful, nonetheless.

[<b>Link to Creating a Smart Chain on a Single Node</b>](../../../basic-docs/smart-chains/smart-chain-tutorials/creating-a-smart-chain-on-a-single-node.html)

##### Running Komodo Software in Debug Mode

Debug Mode allows a developer to access the last lines of code executed by the daemon before the software crashes.

A Normal Developer will likely only use this when communicating with a support agent, in the unlikely event of a malfunction in the default software. An Advanced Developer, on the other hand, may use Debug Mode frequently.

[<b>Link to Running Komodo Software in Debug Mode</b>](../../../basic-docs/smart-chains/smart-chain-tutorials/running-komodo-software-in-debug-mode.html)

##### Updating Smart Chain Software From Source Code

As the developer installs their software from source code, updating frequently is easy and recommended. Read the following section to become familiarized.

[<b>Link to Updating Smart Chain Software From Source Code</b>](../../../basic-docs/smart-chains/smart-chain-setup/updating-from-source.html)

##### Ecosystem Launch Parameters

The developer is likely to encounter an opportunity to interact with members of another Smart Chain community in the Komodo ecosystem.

At some future point, you may also be interested in having your own Smart Chain added to this list by purchasing Komodo's dPoW security services.

The list of launch parameters for all Smart Chains supported by the Komodo notary nodes can be found here.

[<b>Link to Ecosystem Launch Parameters</b>](../../../basic-docs/smart-chains/smart-chain-setup/ecosystem-launch-parameters.html)

##### Learn How to Manually Delete Blockchain Data

Sometimes, a developer will need to delete their synced blockchain data and re-sync with the network. The following section teaches the safe way to conduct this process.

[<b>Link to Smart Chain Maintenance Section</b>](../../../basic-docs/smart-chains/smart-chain-setup/smart-chain-maintenance.html)

##### Common Runtime Parameters

As Komodo Smart Chain software is based on the Bitcoin protocol, we inherit many runtime parameters that are useful in creating a secure and efficient blockchain network.

We recommend that the developer search through our abbreviated list of popular runtime parameters and experiment with one or two, to gain a conceptual understanding. This can help to expand your growing awareness of the potential of blockchain technology and how it is superior to fiat-based currency systems.

[<b>Link to Common Runtime Parameters</b>](../../../basic-docs/smart-chains/smart-chain-setup/common-runtime-parameters.html)

## Step 7: Experiment with Antara Customizations

Priority: Recommended

Difficulty: Normal

Time: 20 - 60 Minutes

------------

The most basic aspect of Komodo's Antara Framework is the ability to customize your Smart Chain. These customizations are provided by Komodo as enhancements to the default Bitcoin/Zcash protocol.

We recommend that you scan through the list of enhancements, read the basic descriptions, and experiment with one or two that interest you.

[<b>Link to Antara Customizations</b>](../../../basic-docs/antara/antara-setup/antara-customizations.html#smart-chain-customizations)

## Step 8: Read the Overview of Antara Modules - Part I

Priority: Recommended

Difficulty: Normal

Time: 30 Minutes

---------------

Antara Modules are where the power of the Komodo Smart Chain and the Antara Framework begin to come into full display. Antara Modules allow the developer to expand blockchain potential far beyond the limits by which many other blockchain ecosystems are bound.

The Overview Part I provides a more thorough discussion about how the framework overcomes many problems faced by the blockchain industry.

[<b>Link to Overview of Antara Modules - Part I</b>](../../../basic-docs/antara/antara-tutorials/overview-of-antara-modules-part-i.html#introduction)

## Step 9: Read the Overview of Antara Modules - Part II

Priority: Recommended

Difficulty: Normal

Time: 30 Minutes

----------

Part II of this discussion delves more deeply into the underlying methods by which Antara allows developers to solve problems.

[<b>Link to Overview of Antara Modules - Part II</b>](../../../basic-docs/antara/antara-tutorials/overview-of-antara-modules-part-ii.html)

## Step 10: Understand Antara Addresses

Priority: Recommended

Difficulty: Normal

Time: 5 Minutes

---------------

At this point, the developer is likely familiar with common blockchain addresses.

However, Antara requires the user to manage additional addresses for Antara-based currency. The passphrase for these addresses can all be the same, but the public address will not be. 

These addresses keep funds separate between difficult modules on a Smart Chain, and assist in maintaining token scarcity, among other uses.

[<b>Understanding Antara Addresses</b>](../../../basic-docs/antara/antara-tutorials/understanding-antara-addresses.html)

## Step 11: Experiment With the Default Heir Antara Module

Priority: Recommended

Difficult: Normal

Time: 15 Minutes

-------------

A simple application of the Antara Framework is the Heir Antara Module. This simple module allows a user to designate an inheritor of their funds, should the user become inactive on a Smart Chain. 

Read the introductory section to gain a more thorough understanding, and then try executing each command found in the Heir Module Flow section.

The Heir Antara Module is active on the MORTY Smart Chain that serves as a test chain in the Komodo ecosystem.

```bash
./komodod -pubkey=$pubkey -ac_name=MORTY -ac_supply=90000000000 -ac_reward=100000000 -ac_cc=3 -addnode=138.201.136.145 &
.
```

Funds are freely available on this chain. Use the following [<b>faucetget</b>](../../../basic-docs/antara/antara-api/faucet.html#faucetget) RPC to tap the community faucet and receive `0.1` coins. This should be enough for the Heir Module Flow experiment.

```bash
./komodo -ac_name=MORTY faucetget
```

Copy the returned hex value and broadcast it using the [<b>sendrawtransaction</b>](../../../basic-docs/smart-chains/smart-chain-api/rawtransactions.html#sendrawtransaction) RPC.

[<b>Link to Heir Module Introduction</b>](../../../basic-docs/antara/antara-api/heir.html#introduction)

[<b>Link to Heir Module Flow</b>](../../../basic-docs/antara/antara-api/heir.html#heir-module-flow)

## Step 12: Experiment with the Tokens Antara Module

Priority: Recommended

Difficulty: Normal

Time: 15 Minutes

--------------

The Tokens Antara Module is often useful as it allows the developer to quickly and easily mint new currencies on their Smart Chain.

Use the `tokenscreate` RPC method to create your own tokens, and then experiment with other RPCs. This module is also available on the MORTY Smart Chain. Make sure to save the returned `txid` after broadcasting your raw transaction. (See the Examples section for a demonstration of the token creation method.)

[<b>Link to Tokens Antara Module - tokenscreate RPC</b>](../../../basic-docs/antara/antara-api/tokens.html#tokencreate)

Use the `tokensinfo` RPC method to view your new tokens.

[<b>Link to Tokens Antara Module - tokensinfo RPC</b>](../../../basic-docs/antara/antara-api/tokens.html#tokeninfo)

## Step 13: Read the Introduction to AtomicDEX

Priority: Optional

Difficulty: Normal

Time: 15 Minutes

------------

The Normal Developer is now nearly finished with a grand tour of the Komodo software. The key remaining target is AtomicDEX, our signature method for exchanging cryptocurrencies using atomic swaps. Be one of the first people in the history of mankind to exchange assets with an anonymous person over the Internet without any middleman whatsoever.  

This introductory discussion covers some of the same concepts that the reader encountered in the Core Technology Discussions section, but with several useful additional details.

[<b>Link to Introduction to AtomicDEX</b>](../../../basic-docs/atomicdex/atomicdex-tutorials/introduction-to-atomicdex.html#why-is-atomicdex-special)

## Step 14: Experiment with Atomic Swaps

Priority: Recommended

Difficulty: Normal

Time: 1 Hour

-----------

Follow this walkthrough to perform your first atomic swaps.

[<b>Link to AtomicDEX Walkthrough</b>](../../../basic-docs/atomicdex/atomicdex-tutorials/atomicdex-walkthrough.html#setting-up-the-coin-list)

(If you still need to install AtomicDEX software, [click here for instructions on installing from source code.)](../../../basic-docs/atomicdex/atomicdex-setup/get-started-atomicdex.html)

For those Normal Developers who make it this far, congratulations! You have completed the grand tour of the Komodo software suite. 

Going forward, we recommend that you experiment with individual RPCs and customizations throughout the documentation, until you feel fluent in utilizing Komodo technology.

Please keep in touch with our community on [Discord.](https://komodoplatform.com/discord) We are excited to see what you create!

## Step 15: Begin the Advanced Development Tutorial

Priority: Recommended

Difficulty: Advanced

Time: 5 - 15 Hours

---------

Advanced Developers should now be familiar enough with the nature of Komodo technology to begin a more thorough approach to manipulating blockchain technology.

The following tutorial series walks the developer through the initial development process. The tutorial will first explain several integral aspects of blockchain technology that blockchain engineers are required to understand. Then, the series walks the reader through the process of creating a simplified version of the Heir Antara Module.

This tutorial series expects that you are comfortable with downloading a Github repository and manually inspecting the source code to determine the nature of the source code's functionality. 

Once you complete this tutorial, you are among the most advanced of community developers. You may feel prepared to offer your services to businesses that would like to use your skills to commission customized Antara Modules for their unique business purposes and competitive-advantage desires.

[<b>Link to Advanced Series - Part 0 - Introduction</b>](../../../basic-docs/antara/antara-tutorials/advanced-series-introduction.html#introduction)

## Step 16: Inspect Komodo Community Bounties

Priority: Optional

Difficulty: Advanced

Time: ~

----------

Now that you are comfortable building new Antara Modules, it's time to put your skills to use and build something for the community.

The Komodo team is looking for talented C/C++ developers to build new Antara Modules that can be included with Komodo's default suite of modules. 

Creating a new default module can take up to a month's worth of time, and we try to make sure the value of the bounties is worth your while. 

[<b>Link to Komodo Bounties</b>]()

Alternatively, reach out to the Komodo development team on the `#dev-general` channel on [Discord](https://komodoplatform.com/discord) and ask where help is needed. 

We look forward to working with you! 
# The Antara Framework

## Introduction

Antara is an adaptable framework for end-to-end blockchain development. This framework allows developers to build blockchain-based applications in a more simple, quick, and less resource intensive manner than ever before. The framework reduces the barriers to adopting blockchain technology and opens up a universe of possibilities.

#### The Three Layers of the Antara Framework

There are three layers to Komodo’s Antara Framework.

##### Generating Customizable Smart Chains

The first layer allows for the generation of a customized, independent chain called a Smart Chain. 

##### Core-Level Antara Modules

Modules are inserted into the consensus mechanism of a Smart Chain that allow the developer to change the nature of the chain.

##### Antara Application Programmable Interface

The third layer is the technology that integrates a Komodo Smart chain with other software. This includes an open API for language-agnostic, blockchain-based application development, an atomic-swap powered DEX, and more.

### Antara Smart Chains

Chains launched with Antara are not ordinary blockchains. They’re “Smart Chains.” They’re smart because they’re customizable, completely independent, scalable, and modular.

Smart Chains are customizable along 18 different parameters, allowing for customization of block time, block rewards, consensus rules, algorithm, privacy settings, and much more.

Smart Chains are also infinitely scalable, as multiple Smart Chains can be clustered together to function as one. Moreover, each Smart Chain comes with built-in modules that accelerate development. This leads us to the second layer of the Antara Framework.

### Antara Modules

Each Smart Chain comes with a library of powerful modules built-in. These modules include features like tokens, oracles, stablecoins, quantum security, lightning payments, and more.

Antara Modules are activated prior to launch to meet the unique needs of every project that builds with Komodo’s Antara Framework. They provide an enormous boost in performance and drastically reduce the workload for a new project, ultimately leading to a faster product launch.

Advanced developers can optionally program new modules, giving the developer complete freedom over their Smart Chain's behavior.

### Antara Integration Layer 

The third layer of the Antara Framework is the Integration Layer. The Integration Layer offers a series of white label products, including a multi-coin wallet, a fully decentralized exchange, a decentralized crowdfunding application, custom block explorers, and SPV server integration. 

The Antara Integration Layer also provides an open API that can be used to write blockchain-based applications and software in any programming language. All custom-built apps and software run natively and at the consensus level of each individual Smart Chain.

## Antara Smart Chains 

Antara Smart Chains are completely independent and sovereign. 

Each Smart Chain has its own consensus rules, decentralized network, and currency. The consensus rules are decided prior to launch and the network validates transactions and blocks according to those rules. Transaction fees are always paid in each Smart Chain’s coin, not in the Komodo Platform’s native currency. Smart Chains never pay any gas fees to the platform.

While multi-chain platforms are on the rise, many of Komodo’s competitors do not offer true sovereignty. The chains offered on other prominent multi-chain platforms are “child chains” or “side chains." Those types of chains are almost always forced to rely upon the platform’s parent chain in some way.

Antara Smart Chains never depend on the Komodo Platform, the Komodo blockchain, or the KMD coin. Komodo believes that this open model is the only way to create an ecosystem in which blockchain startups can thrive. Further, a forced dependence on the Komodo blockchain or the KMD coin may provide short-term demand but is sure to be self-defeating in the long run.

In addition, Smart Chains can also choose to participate in delayed Proof of Work (dPoW) security and Platform Synchronizations to enable interoperability and scalability features.

Antara Smart Chains are customizable along 18 different parameters, offering hundreds of billions of different configurations to all projects that build with Komodo’s Antara Framework.

| Customization | Description |
| ------------- | ----------- |
| Name | the name of the Smart Chain and the ticker symbol for the chain’s coin |
| Block Time | the number of seconds that elapse between block generation |
| Consensus Rules | Proof of Work (PoW) or Proof of Stake (PoS) or a combination |
| PoS Implementation | VerusPoS rules or PoS64 rules |
| PoW Hashing Algorithm | Equihash or VerusHash |
| Privacy Settings | mandatory privacy, optional privacy, or complete transparency  |
| Interoperability Settings | choose which chains your Smart Chain will communicate with |
| Pre-Mine Supply | the number of coins mined in the first block of the Smart Chain |
| Block Rewards | the number of coins awarded to a miner or staker for finding a block |
| Reward Reductions | the number of blocks between reductions in block rewards |
| Block Reward Decay | percentage by which block rewards decline at each reduction
| Reward Eras | an optional feature to fully customize a chain’s coin emission schedule |
| Time Locking | the option to make block rewards frozen for a set number of blocks |
| Taxation | an optional, inflationary feature that generates a small tax for all transactions |
| Founder’s Bonus | optional feature that makes periodic payouts to the chain’s founder |
| Pub Key | designate the address to which pre-mine supply, tax, and bonuses are paid |
| Multi-Signature | the option to designate a multi-sig address to receive pub key payouts |
| Antara Modules | choose which Antara Modules that you would like to activate |

## Antara Modules 

Antara Modules act as the foundation upon which advanced blockchain-based applications and software can be built. They offer an enormous level of functionality and cut down on the amount of time a new blockchain project needs to spend on development before going to market.

As they run natively on every individual Smart Chain, Antara Modules are faster and more secure than traditional smart contracts. They also run at the consensus level, meaning every module is verified by every node in the network upon each use. 

In addition, Antara Modules are written in the C and C++ programming languages so they are Turing complete and can be coded to perform any functions that any existing software performs. 

Significantly, Antara Modules do not require any gas fees. Instead, a single use of a module requires just one ordinary transaction fee, which is always paid in each respective Smart Chain’s coin. This makes it far more practical and profitable to build and run a complex blockchain-based applications on Komodo than on any other multi-chain platform in existence.  

All Smart Chains come with a library of powerful, built-in modules to choose from.

| Module | Description |
| ------ | ----------- |
| Tokens | create tokens (fungible or non-fungible) on your own Smart Chain |
| Oracles | use an aggregated data oracles solution to bring off-chain data on chain |
| Proxy Token DEX |  trade tokenized representations of foreign blockchain assets |
| Instant Micropayments | a channel for secure and instant micropayments  |
| Funds Recovery | allow users to designate a backup address to safeguard funds |
| Stablecoins | an algorithmic stablecoin solution with optional digital asset backing |
| Trustless Price Feeds | bring price data on-chain in a trustless, decentralized manner |
| Rewards | give users the option to earn rewards by locking coins for a set time |
| Quantum Security | make all transactions on your Smart Chain quantum secure |
| MuSig Payments | enable private, fast, low-data multi-signature payments |
| Faucet | an automated crypto faucet feature with built-in spam prevention  |

The option to code custom modules is also available to all Smart Chain projects. While coding custom modules is an advanced development task, it offers an unparalleled degree of flexibility and customization. Any processes imaginable can be coded into an Antara Module, which will then run natively and at the consensus level of a project’s Smart Chain.


## Antara Integration Layer

The third and final layer of Komodo’s Antara Framework is the Integration Layer, which consists of an open API and a selection of white label applications to accelerate development.

Each Antara Module activated on a Smart Chain provides a number of remote procedure calls (RPC). Each individual call executes a different process and offers a unique functionality. Together, these RPCs from all of the the Antara Modules make up the open API.

The Antara open API is language agnostic so developers can use it to code blockchain-based applications in the programming language of their choosing. This makes Komodo’s Antara Framework the fastest, easiest, and most cost effective way to adopt blockchain technology.

Further still, the Antara Integration Layer comes with a series of white label products, available to every Smart Chain project. 

- A multi-coin wallet that offers storage of more than 250 different digital assets
- A peer-to-peer crowdfunding app that allows every project to choose which digital assets they would like to accept in the fund raise. New coins are distributed immediately.
- A decentralized exchange powered by Komodo’s industry-leading atomic swap technology. This product allows peer-to-peer trading with unrestricted trading pairs.
- A custom block explorer to make your Smart Chain’s ledger publicly visible.
Integration to SPV servers, which allows users to access their assets on mobile devices.

These products can be adjusted to fit any project’s branding, accelerating a go-to-market.

# AtomicDEX and Atomic Swaps

## Introduction

Komodo’s decentralized exchange, AtomicDEX, allows people to trade cryptocurrency coins without a counterparty risk. The protocol is open source and trading is available for any coin that any developers choose to connect to AtomicDEX.

Our service fully realizes decentralized order matching and trade clearing. The order-matching aspect relies on a peer-to-peer network to build public orderbooks, and the trade clearing is executed through an atomic cross-chain protocol, also called an "atomic swap." 

## Current Problems in Cryptocurrency Exchange

#### Centralized Exchanges are Popular, but Limited

The current, most practical method for cryptocurrency exchange requires the use of centralized exchange services. 

These centralized solutions require vouchers to perform the exchange, wherein the user sends their funds into the care of a corporate entity and receives "I Owe You" (IOU) statements in return. The user then uses these IOUs to trade within a controlled environment and, when finished, returns their IOUs to the corporate entity for reimbursement. 

Centralized exchanges carry great risk. Among many dangers present in this system, users are under the constant risk of their assets being stolen either by an inside theft or an outside hack. Furthermore, the operators of centralized exchanges are under intense legal and social pressure, as the operators are responsible both for the safety of thousands of users' funds and for the users' behaviors on their platforms. 

To eliminate such dangers and limitations requires the creation of a decentralized alternative, wherein either the entity holding the funds during the trading process is not centralized, or the users are allowed to trade directly without middleman involvement.

### The Beginnings and Travails of Decentralized Exchanges

A decentralized exchange (DEX) allows users to trade funds within an environment that is at least partially decentralized. 

Decentralization of an exchange can take many forms. For example, in 2014 Komodo began one of the earliest instances of a decentralized exchange, called "The MultiGateway." 

In this DEX, users sent their blockchain coins not to a centralized entity, but rather to a decentralized "gateway." The gateway was owned and controlled by several cooperating entities who were chosen from the online community. The gateway automatically distributed IOUs (called "proxy tokens") to the users, who then traded within the partially decentralized environment.

When finished, users sent their proxy tokens back to the gateway, and the gateway managers collectively signed for the release of the users' blockchain funds. The underlying technology of this solution is still in use by many blockchain platforms, and is sometimes referred to as a proxy-token protocol. 

This form of a DEX is too limited to compete with centralized exchanges. Among many drawbacks, a proxy-token decentralized exchange must still have a storage center to hold the external cryptocurrencies represented by the proxy tokens. At best, this storage center is only distributed across several authority figures, and therefore users must still surrender control over their assets for the duration of the trading process.

As of today, no decentralized exchange has successfully replaced any of their centralized counterparts.

## AtomicDEX — A Complete Solution

We now present a fully functional, new decentralized technology that makes a competitive decentralized exchange possible. We call our technology AtomicDEX, and it allows people to freely and safely exchange cryptocurrency coins from one person to another.

The AtomicDEX decentralized exchange creates a competitive method for bartering cryptocurrencies, combining the key components of order matching and trade clearing.

These components are combined into a single integrated system that allows users to make a request to trade their coins, find a suitable trading partner, and complete the trade using an "atomic swap."

Unlike previous DEXs, AtomicDEX does not require users to send funds to either a centralized or decentralized party during the trading process. Rather, users maintain full control over the private keys of their funds at all times.

## The Decentralized Orderbook

The first component of AtomicDEX is Order Matching. This is the process of pairing a user’s offer to buy with another user’s offer to sell. The data of these offers form an orderbook.

The process of matching orders is not the actual trade itself, but is only a digitally created promise between users stating that they will perform their parts of the trade.

AtomicDEX features several technologies to facilitate order matching, including a peer-to-peer network, a decentralized orderbook, and a multicoin passphrase.

##### Order Matching with Full-Relay and Non-Relay Nodes

To create a decentralized orderbook, AtomicDEX creates a custom peer-to-peer (P2P) network.

In this network, when a node places an order, other nodes on the network collaborate to distribute the data until all nodes are informed. Each node utilizes the data to build the orderbook locally. No centralized server is required.  

To manage this P2P network, AtomicDEX utilizes two separate types of nodes: a full-relay node and a non-relay node.

The difference between a full-relay node and a non-relay node is that the former is typically a high-volume trader who provides liquidity to the network in exchange for being a trading hub on the network. This puts the trader in the position of being able to complete trades more quickly than their competitors.

The latter type of node (non-relay) is the more common user, and these nodes rely on the full-relay nodes. A non-relay node has all the same available trading options. We expect that most nodes joining the network will be non-relay nodes.


There are no requirements or payments necessary to become either type of node, and so anyone desiring to become a high-volume full-relay node will find no restrictions.

##### One Passphrase, Many Addresses

As a part of order matching, AtomicDEX features a specialty wallet that can manage and trade among a multiplicity of different blockchain coins. In this technology, the user creates a single passphrase and uses this to unlock all public addresses associated with their desired coins. 

The complexities of this process are managed by Komodo's Iguana Core technology.

## Atomic Swaps

For trade clearing, AtomicDEX implements our own unique variation of atomic swaps.

An atomic swap is a technology that allows two users to trade cryptocurrencies across two separate blockchains without requiring an intermediary third party.

The original concept of an atomic swap was created in 2013 by Tier Nolan and many other Bitcoin enthusiasts on the Bitcointalk.org chat forum. In 2014, this conversation inspired members of the Komodo development team to experiment with atomic swaps, and they have remained a key technology in our strategy ever since.

#### The Value of the Atomic Swap

To understand why the atomic-swap protocol is necessary, one must first recall that computer code is executed in linear fashion. Even if we were to assume that both parties in a trade may be honest, on a computer the process of taking money from each digital wallet and pulling the money into the open must happen one wallet at a time.

Therefore, one person must release control over their money first. The atomic-swap protocol protects that person from vulnerability. Without the atomic swap, any malicious party involved would be able to destroy the fairness of the trade.

A key aspect of a proper atomic swap is that at each stage of the trade-clearing process, each user has incentives to proceed to the next step in the proper manner and disincentives to avoid abandoning the procedure. With this structure in place, regardless of a failure by either user to complete the protocol, each user receives a proper reward.

#### AtomicDEX Manages a Public Trading Profile for Bob and Alice

In addition to the atomic-swap protocol, AtomicDEX also allows users to track the behavior of trading partners on the network via a Trust API. 

The Trust API is not based on personal identity, but rather on behavior as associated with public addresses.

As a user practices good behavior on the network while maintaining a consistent public address, their network trust can increase, thus improving their odds of a willing trading partner.

Use of the Trust API is optional for all users.

#### Introducing Alice and Bob

There are two parties in an atomic swap: the liquidity provider and the liquidity receiver. We call the provider "Bob" and the receiver "Alice."

##### Alice Makes a Request

The process of an atomic swap begins with the person who makes the initial request. Typically, this is Alice.

Alice will need two transactions to perform her swap. One transaction will cover the protocol fee, which is roughly 1/777th the size of her desired order. We call this fee the `<dexfee>`, and its primary purpose is to serve as a disincentive to Alice from spamming the network with rapid requests.

The second transaction required of Alice sends the actual amount she intends to swap. AtomicDEX first verifies that she has these funds, but for the moment she retains these funds in the safety of her own digital wallet.

##### Bob Answers Alice

On the other side of the atomic swap, we have the liquidity provider—we call this person "Bob." Bob sees the request on the network for Alice’s atomic swap and decides to accept the trade. Now his part of the process begins.

To complete the trade, he must also perform two transactions, but with one important difference.

The first transaction sends to the AtomicDEX network an amount equal to 112.5% of the amount that Alice requested. This acts as a security deposit. The network’s encryption holds the deposit safely in view, but untouchable. We call this transaction, `<bobdeposit>`.

When Bob completes his side of the bargain in full, or should Alice’s request for a swap time out, Bob will receive `<bobdeposit>` in return from the network.

The second transaction Bob makes will be worth 100% of what he and Alice intend to actually trade. The second transaction does yet take place, however, but waits for Alice to continue with her part.

Note that Bob must hold liquidity of 212.5% of the total amount of the currency that he and Alice intend to trade.

#### Alice and Bob Are Committed

Assuming Alice and Bob are successfully connected, the process from this point forward becomes quite simple:

A summary of the procedure, starting from the beginning.

1. Alice requests a swap and sends the `<dexfee>` to the AtomicDEX full-relay nodes.

    - The full-relay nodes receive her request and publish it to the network

2. Bob sees the request on the network, accepts it, and sends out `<bobdeposit>`

    - `<bobdeposit>` enters a state of limbo on the AtomicDEX network, held safely by encryption, awaiting either Alice to proceed, or for the swap to time out

    - If the latter occurs, `<bobdeposit>` is automatically refunded to Bob via the AtomicDEX protocol

3. Alice now sends her `<alicepayment>` to Bob

    - She does not send the payment to Bob directly, but rather into a temporary holding wallet on the AtomicDEX exchange

    - Only Bob has access to this wallet, via the set of private keys that only he owns

    - However, the AtomicDEX code does not yet allow Bob to unlock this temporary holding wallet; he must continue his end of the bargain first

    - The `<alicepayment>` will remain in Bob’s temporary holding wallet for a limited amount of time, giving him the opportunity to proceed

4.  Bob now sends his `<bobpayment>` to Alice

    - Again, this is not sent to Alice directly, but rather into yet another temporary holding wallet

    - Likewise, only Alice has access to the necessary private keys for this wallet

    - The `<bobpayment>` will automatically be refunded if she does not complete her part of the process

5.  Alice now "spends" the `<bobpayment>`

    - By the word "spends," we simply mean that she activates her private keys and moves all the funds to another wallet—most likely to her own personal address

    - AtomicDEX registers that Alice’s temporary holding wallet successfully "spent" the funds

6.  Bob "spends" the `<alicepayment>`

    - Likewise, Bob simply moves the entirety of the `<alicepayment>` into a wallet of his own—again, it will most typically be his own address

    - AtomicDEX now knows that Bob also successfully received his money

7.  Seeing both temporary holding wallets now empty, the AtomicDEX protocol recognizes that the atomic swap was a complete success.

    - AtomicDEX now refunds `<bobdeposit>` back to Bob and the process is complete

While it may seem inefficient to have seven transactions for a swap that could be done with two, the complexity of this process provides us with the requisite "trustless-ness" to maintain user safety.

### Incentives and Disincentives to Maintain Good Behavior

As we will now explain, at every step along the way there are incentives for each side to proceed, and there are various financial protections in place should one side fail.

Also, because payments are sent to these "temporary holding wallets" that exist within the AtomicDEX protocol, the protocol itself can assist in the process of moving money at the appropriate steps.

Let us now examine what is happening after each step.

#### 1 - Alice Sends `<dexfee>`

If Bob accepts the offer to trade, but does not send `<bobdeposit>`, Alice only stands to lose her `<dexfee>`. This is only 1/777th of the entire transaction amount, so she loses very little.

Bob, on the other hand, stands to lose more. Since Bob did not follow through with his end of the bargain, the AtomicDEX network indicates on his public AtomicDEX trading profile that he failed in a commitment, thus decreasing his profile’s reputation. If Bob continues this behavior as a habit, he may find it difficult to discover trading partners.

So long as the frequency of "Bobs" failing is low, the occasional extra `<dexfee>` paid by an Alice is a minor issue. However, if there is a sudden spike in misbehavior, the AtomicDEX code has in-built contingency plans which can provide refunds to Alice(s).

#### 2 - Bob Successfully Sends `<bobdeposit>`

If Alice does not follow with her next step, the `<alicepayment>`, then Alice loses not only the `<dexfee>`, but she also receives a mark on her public AtomicDEX profile. She gains nothing, and Bob has no reason to fear as `<bobdeposit>` will automatically return to him via the AtomicDEX protocol.

#### 3 - Alice Successfully Sends `<alicepayment>`

If Bob does not proceed with his next step, the `<bobpayment>`, then after 4 hours Alice can simply activate an AtomicDEX protocol that will allow her to claim `<bobdeposit>`. 

Recall that `<bobdeposit>` is 112.5% of the original intended trade; Bob has every incentive therefore to continue with his end of the bargain, and Alice has nothing to fear should Bob fail. She even stands to gain a 12.5% bonus, at Bob’s expense.

#### 4 - Bob Sends `<bobpayment>`

Now, if Alice does not follow by claiming the `<bobpayment>`, then after 2 hours Bob can activate an AtomicDEX protocol that allows him to reclaim his `<bobpayment>`. Furthermore, four hours later Bob may activate a refund of `<bobdeposit>`.

For Alice, the AtomicDEX protocol allows Alice to reclaim her `<alicepayment>` after Bob reclaims both of his payments.

At this integral stage of the process, every step of the path is intricately interconnected and maintains various levels of protection.

#### 5 - Alice Spends `<bobpayment>`

At this point, Alice is entirely through with any risk to her reputation, her `<dexfee>` payment, or of the loss of her time.

If Bob does not follow by also "spending" the `<alicepayment>`, it is of no concern to Alice because she has already received her funds. If Bob is simply sleeping and forgets to spend the `<alicepayment>`, he can only hurt himself.

Naturally, for Bob this is slightly dangerous. Bob’s best course of action is to remain alert and spend the `<alicepayment>` once it is received.

If after four hours, Bob is still sleeping, Alice can still activate the protocol that allows her to claim `<bobdeposit>`. In this scenario, she receives both the `<bobpayment>` and `<bobdeposit>`, at only the costs of the `<alicepayment>` and `<dexfee>`.

Bob can still make a later claim for the `<alicepayment>` when he regains his awareness.

#### 6 - Bob Spends `<alicepayment>`

Assuming all has gone according to plan, and having spent the `<alicepayment>`, Bob may now reclaim `<bobdeposit>`. Just as before, if Bob does not refund his own deposit, it is his loss; in four hours Alice will be able to activate a claim on `<bobdeposit>`.

#### 7 - Bob Reclaims `<bobdeposit>`

The process is complete. Alice received the `<bobpayment>`. Bob received the `<alicepayment>`. Bob has `<bobdeposit>` back in his own possession. The entire process only cost Alice the original `<dexfee>`.

At each step along the way, the side that needs to take the next step is motivated to do so, with greater and greater urgency until the process is complete.

## Additional Details

#### Always Manage Risk Appropriately

Naturally, users must understand that outside forces can disable the process and thereby damage one of the users. For instance, an Internet outage for Bob could be particularly dangerous. Therefore, users are advised only to trade manageable sums that they are willing to put at risk, and only with nodes that have reliable reputations.

#### The Connection is the True Challenge of an Atomic Swap

Performing a successful connection between Bob and Alice, and verifying their funds, is the most complex and difficult aspect of creating the AtomicDEX network.

Myriad factors are involved in a successful attempt for Bob and Alice to connect: human motivation; the experience level of the users; economics; connection technology; user hardware setups; normal variations within Internet connections; etc.

We emphasize to users here that the process of performing these actions over a peer-to-peer network has almost an artistic element to it. An attempt to successfully connect Bob and Alice can be thought of more like fishing, where we must simply cast and recast our line until we successfully connect with our target.

If a user attempts a trade and no response returns from the network, the user should slightly adjust the parameters of their offer and try again. As AtomicDEX continues to iterate and improve, and as the number of users increases, we expect any required effort to lessen for users, the network, and the AtomicDEX GUI apps.

#### The DEX Fee

People will notice that there is a small `<dexfee>` required as part of the AtomicDEX protocol. This is 1/777 of the transaction amount and it is calibrated to make spam attacks impractical. The 1/777 fee is about equal to 0.1287% of the `<alicepayment>`.

By forcing a would-be attacker to spend real money, attacking the network becomes costly. Without this spam prevention, the AtomicDEX could otherwise be attacked at the protocol level by any person performing a plethora of trade requests.

It is possible that some atomic swaps can initiate, and then fail to complete, which raises questions about what happens to the `<dexfee>` in this scenario. The `<dexfee>` is the first charge in the protocol; in this sense, there is a `<dexfee>` charged for these failed atomic swaps.

However, this failure should not be looked upon in isolation. The AtomicDEX protocol is based on statistics. Statistically speaking, there will be some percentage of atomic swaps that start and will not complete. 

Let us suppose a 15% failure rate at this stage of the atomic swap (15% is three times higher than the rate of failure we currently observe in our testing). Even in this scenario, the effective `<dexfee>` cost is still only 0.15% to all Alice-side requests across the entire network.

If you experience the loss of a `<dexfee>` transaction for an atomic swap that fails to complete, know that this is all part of the statistical process. If you find yourself paying more than 0.15% of your completed trades in fees, please let us know.

As an organization, when speaking generally to our audience online, we state that the `<dexfee>` is just 0.15%. In this manner, we hope to create the expectation that 0.15% is normal; if the network performs perfectly, on the other hand, users will get a blessing in the form of a lower fee, 0.1287%.

#### Dealing with Confirmations

Since AtomicDEX is trading permanently on blockchains — as opposed to updating an internal database of vouchers — both sides of the trading pair need to wait and watch as miners on the respective blockchains calculate transaction confirmations.

Because the payments that occur on one blockchain will proceed regardless of the actions on the other blockchain — a confirmation failure on one chain will not stop with the other blockchain performing its duties as normal — it is therefore important that the AtomicDEX protocol observe and adjust as necessary. 

Each side of the AtomicDEX protocol (Bob-side and Alice-side) watches and attempts to provide a level of protection for the human users. AtomicDEX achieves this protection by an array of `<setconfirms>` API calls, which gives each side the option to specify how many confirmations they expect before the automated process should be satisfied on behalf of the human users’ interests. 

If the users have differing preferences for the total `<numconfirms>` they prefer, the AtomicDEX protocol automatically sets the larger of the two preferences as the requirement for both parties.

Furthermore, this feature also includes a `<maxconfirms>` value to prevent one side from specifying an unreasonable or malicious number of required confirmations.

#### Zero Confirmations

AtomicDEX also supports a high-speed trading mode. Using this feature, a user can activate an extremely fast mode of trading: `<zeroconf>`. This initiates a form of atomic-swap trading that does not wait for any confirmations at all. When using this feature, atomic swaps can be completed in as little as three seconds. This is a high-risk endeavor, naturally, and users should exercise extreme caution when implementing it.

#### AtomicDEX is Entirely Experimental, and Should Be Treated As Such

We should warn our readers, nevertheless. Every element of the Komodo ecosystem is still considered to be highly experimental. We provide no investment advice, nor any guarantees of any funds utilized on our network. Use our products only at your own risk.

#### The AtomicDEX API

We created an API model that is generally the same for all coins. 

For more information, [please turn to the AtomicDEX documentation.](../../../basic-docs/atomicdex/introduction-to-atomicdex.html)

# Creating and Distributing a New Komodo Smart Chain

## Abstract

There lies a great power in the idea that any person, regardless of nationality, creed, or background, can obtain funding to innovate and prosper. An integral tenet of blockchain technology is "decentralization." By decentralizing systems, we reduce the number of control points that can be compromised and manipulated.

Decentralization plays a more common role in our new cryptocurrency economy, but there is one area of the market that remains centralized and vulnerable: the initial coin offering (ICO). The cryptocurrency industry needs a solution, and Komodo presents an answer with our decentralized initial coin offering (dICO).

In today’s common ICO model, the high level of centralization creates many problems. Third-parties can block or manipulate entrepreneurs’ efforts to innovate and prosper. The centralized location of releasing the ICO blockchain product is vulnerable, allowing whales, hackers, and human error to corrupt or destroy an entrepreneur’s efforts. The negative experience of users in these situations can also impact the perception and adoption of cryptocurrency. Furthermore, the traceable nature of an ICO prevents society from crowdsourcing and purchasing within our inherent right to barter in private.

The dICO model, as created by the Komodo project, overcomes these challenges. It provides the necessary technology to create and release a blockchain product to the world with the full power of decentralization.

Entrepreneurs building on our platform begin by creating a Smart Chain, and our technology simplifies this process. One need only install the necessary software, execute a few commands on a command prompt, and then establish a connection between two or more Komodo-enabled devices. Komodo’s core technology will do the rest of the work necessary to create a fully independent blockchain, empowered with an array of Komodo features.

Our dPoW technology is a key feature. dPoW provides the necessary security to protect the integrity of the blockchain. Use of dPoW is optional, and since Smart Chains in the Komodo ecosystem are independent by nature, entrepreneurs can discontinue dPoW services at will.

Having thus created the blockchain, the entrepreneur then uses our software to release the project to the world. Our decentralized exchange, AtomicDEX, is a useful software solution to conduct their decentralized initial coin offering. Because AtomicDEX relies on "atomic swaps," no third-party manipulators can prevent the entrepreneur from their crowdsourcing and innovative endeavors.

Through [the privacy technology](../../../basic-docs/antara/antara-tutorials/jumblr.html#abstract) available on Komodo Smart Chains, dICO participants can purchase the product within their inherent right to barter in private.

## The Challenges in Current ICO Platforms

#### Specific Weaknesses in the Centralized ICO Model

There are many weaknesses present in today’s Initial Coin Offering (ICO) model.  Several notable weaknesses include third-party discrimination, the vulnerability to theft and human error, and a lack of privacy.

##### Third-Party Discrimination

An entrepreneur seeking to serve their intended audience may experience adverse intervention from a third party. The antagonists may display personal and malicious intent, regardless of the value of the entrepreneur’s innovation.

##### Centralization of Technology: Theft and Human Error

Today’s ICOs are typically conducted in escrow, where the purchasers must transfer money to one location for holding. This typically occurs through a single website, and the cryptocurrency funds are held on a centralized collection of server(s). 

The user must wait while the ICO administrators first verify the transactions and distribute the coins.  During this time the funding is centralized, and therefore vulnerable to thieves and human error.

##### Lack of Privacy

Because ICO transactions are highly traceable it is difficult, if not impossible, to perform ICOs within our right to barter in private.

#### Third-Party Discrimination via the Centralized ICO

One weakness of the ICO process is, paradoxically, rooted in a great strength of blockchain technology: its borderless nature. A key power of any blockchain is that any human capable of accessing the technology can activate the blockchain, regardless of their geographical location or social status. Thus, anyone can provide yet another verifiable record of the transaction history, and this decentralization provides a crucial element of security to the blockchain.

An ICO innovator, therefore, may prefer to use a blockchain platform that transcends man-made barriers, to protect their innovation. Circumventing man-made barriers could be integral to the blockchain’s survival, because the element of decentralization prevents malicious actors from creating subjective borders around the blockchain records and then using authority to falsify and manipulate.

This creates a conundrum, however. As a human race, we also find strength and empowerment in subjectively defining our own demographics for various reasons, whether they be to form companies, cultures, communities, etc.

While we find the ability to create subjective demographics useful, it contrasts with the borderless nature of blockchain technology. Members of one demographic may desire to participate in a specific ICO, but another demographic may find this unfavorable. Therefore, the second party might try to forestall progress. The paradox lies in the fact that for the underlying blockchain product to maintain its integrity, it must serve both communities without regard to any man-made barrier between them.

The problem compounds even further as we observe that on a decentralized blockchain platform, a new ICO product is capable of functioning anywhere there is access to the underlying technology. On a decentralized platform, once a new blockchain product is released any person from either demographic is now able to utilize it. The sentiment of either demographic is irrelevant. The problem becomes most pronounced if members of a competing group attempt to even maliciously prevent an innovation out of selfish reasons. Thus, it is imperative that the innovator have the option of protection against would-be malicious competitors.

The overall centralized nature of today’s ICO process, therefore, presents a problem.  Entrepreneurs who are not able to navigate the adverse effects of an inhibiting third party may be unable to realize their creative potential.

#### Centralization of ICO Technology: Hackers and Human Error

Yet another issue plaguing ICOs is that the technology upon which an ICO is released is also centralized. This presents a vulnerability to human foibles.

##### Hackers and Human Error

Because all coins of an ICO typically process through one centralized point during the purchasing period, the entire supply is vulnerable to any person with access to the node.  Therefore, both malicious and clumsy human agents can destroy an ICO. The data holding the cryptocurrency can be damaged, stolen, or simply lost through incompetence.

An entrepreneur can also consider that in today’s ICO model both the funding provided by the purchasers, as well as the actual ICO coins that the entrepreneur intends to sell, remain on the centralized node for a long period of time. It is not just one side of the crowdsourcing endeavor that is at risk, but both.

This central point of failure can be catastrophic for all participants.

##### The Right to Barter in Private

Finally, the lack of current privacy options in the ICO process inhibits blockchain participants from purchasing within our right to barter in private. This right to privately exchange goods and services extends further into history than the written word.  We have, as a species, utilized this right to organize into communities, institutions, and even nations.

Many of humanity’s most meaningful advancements in art, technology, and other human endeavors began in situations where the creator had the security of privacy in which to explore, to discover, to make mistakes, and to learn thereby.

The right to barter in private, however, is under modern threat as the recent monumental and historical phenomenon, "The Internet of Information," permits many kinds of people to quietly and without inhibition; monitor other people’s shopping and bartering behavior. This is a dangerous development, as it destroys the privacy that empowers much of humanity’s personal growth. We must reserve our right to barter in private, for we observe that there are myriad ways in which a common person may explore personal growth in an economic environment.

Yet, the highly traceable nature of today’s centralized ICO model is in direct contradiction to this human need.

#### The Blockchain Industry Needs a Solution, and Komodo Presents an Answer

Together, these issues show that the current state of the ICO market is plagued with limitations that inhibit freedom, security, entrepreneurship, and even human growth. The cryptocurrency industry needs a solution to these problems, and Komodo presents an answer.

## The Decentralized Initial Coin Offering

The Komodo ecosystem presents a solution, the decentralized initial coin offering (dICO), that solves these issues and even adds new possibilities to the cryptocurrency market.

The decentralized nature of the dICO enables the entrepreneur to release a blockchain product beyond the reach of a malicious third-party influencer.

Furthermore, through our decentralized exchange, AtomicDEX, the dICO allows an entrepreneur to release their product in a manner that mitigates and even eliminates many of the issues regarding hackers and human error.

With the advantage of Komodo’s privacy technology, the participants in a dICO are empowered with their right to barter in private.

## The Process of Creating a New Blockchain in the Komodo Ecosystem

Formerly, coding and generating the blockchain itself were a most difficult aspect of the development process. Now, the Komodo team has simplified the process into easy steps. Through Komodo’s Iguana Core technology (introduced in Part I), the entrepreneur can create a new independent blockchain by entering just two simple commands in the command prompt of their computer.

The following steps rely on one of Komodo’s underlying software processes that run in the background on a user’s computer. The name of this software is the "Komodo daemon," or `komodod`, for short. `komodod` is rooted in Iguana Core technology.

#### The First Command to Create a New Coin

```bash
./komodod -ac_name=[ENTREPRENEUR'S COIN] -ac_supply=[TOTAL COIN SUPPLY] -gen
```

The first part of the command, `./komodod`, initiates a new instance of Komodod.

By default, the initial `./komodod` command executed alone would launch the Komodo main chain, KMD, on the user’s computer. However, the next part of the command tells komodod to behave differently.

```bash
-ac_name=[ENTREPRENEUR'S COIN]
```

This command tells komodod to look for a coin with the inserted name.

```bash
-ac_supply=[TOTAL COIN SUPPLY]
```

This tells komodod how many total coins there should be in this chain.

```bash
-gen
```

This tells komodod that the user desires to mine this network.

The underlying code of Iguana Core can now make several decisions. First, it will check its connection to the Komodo ecosystem to see if there is a coin with the given name and supply. If no similar coin is found, komodod will assume that the user is attempting to create a new coin, and the `-gen` command tells komodod that the user wants to mine it.

Komodod now begins the automated process of creating a new Smart Chain in the Komodo ecosystem. Komodod will first make a fresh and empty clone of the KMD main chain (though it will not yet generate the actual coins), with only a few differences to the underlying nature of the chain.

#### The Features of the New Smart Chain

There are several primary differences between a Smart Chain and the main Komodo chain. For example, the Smart Chain will not automatically generate 5.1% rewards for all wallet addresses holding coins, unlike the main chain. Furthermore, the Smart Chain’s dPoW consensus mechanism is built to notarize to the KMD main chain.

Some of the differences reveal strong advantages held by members of the Komodo ecosystem. By design, this Smart Chain is capable of automatically adopting any updates that the Komodo core development team add to the framework. The Smart Chain also has a built-in capacity within the framework to allow the entrepreneur to code new rules.

For example, the entrepreneur may decide not to use a PoW consensus mechanism, but may instead prefer PoS. Other changes can also be made, according to the entrepreneur’s imagination and developer knowledge. So long as the new code that the entrepreneur adds to the Smart Chain does not interfere with the overall framework, the Smart Chain will smoothly integrate with the rest of the Komodo ecosystem.

For the purposes of our discussion, this new Smart Chain is otherwise the same as the Komodo main chain, including the features to communicate natively with other blockchains via AtomicDEX. The reader may note that this new Komodo Smart Chain is not a colored-token running on top of a parent blockchain, as is often the case in other blockchain ecosystems (consider the ERC20 token of the Ethereum platform).  Instead, this Smart Chain is an entirely unique and independent blockchain unto itself.

This empowers the entrepreneur with significant advantages over other blockchain ecosystems. The Smart Chain can run on its own nodes, act according to whatever rules the entrepreneur can imagine, and can scale according to its own audience.  Should a Smart Chain in the Komodo network experience a sudden explosion of activity, the sudden change will not negatively impact the overall Komodo ecosystem.  This independence grants a significant competitive advantage in the form of overall security, speed, and ease of use.

Consider the advantage of developing an entrepreneurial product as a fully independent blockchain. Should the entrepreneur desire at a future point to leave the Komodo ecosystem for any reason, they are free to take their blockchain product with them.

#### Generating and Mining the New Coins

Let us return now to the moment after the entrepreneur executes the first command in the command prompt, and Komodod creates a fresh and empty clone of the Komodo main chain. While the instance of the Komodod program (running on the entrepreneur’s local computer device) will create the necessary code for the new Smart Chain, Komodod will not yet generate the coin supply itself. Komodod instead will wait for the next few steps to occur.

The reason for the wait is that a blockchain’s essence depends upon existing not in isolation, but in a network of multiple devices. This is the nature of decentralization. Komodod will wait until it receives a signal from another device, thus indicating that it has a peer with which to form the Smart Chain network.

##### The Entire Coin Supply is Distributed in the Genesis Block

Typically, the entire coin supply for the dICO is created and distributed immediately to the device that mines the first block, the Genesis Block. The code performs this distribution as a one-time reward for discovering the first valid block hash.

Having established a secure connection with a second device, the entrepreneur will enter the following command on the second device.

```bash
./komodod -ac_name=[ENTREPRENUER'S COIN] -ac_supply=[TOTAL COIN SUPPLY] -addnode=[INSERT IP ADDRESS OF FIRST DEVICE]
```

Note that the first three elements of the command, `./komodod`, `-ac_name`, and `-ac_supply`, are the same. It is important that the parameters inserted into these commands match exactly. Otherwise, the instances of Komodod running on the separate devices will ignore each other, and the coin will not be mined.

::: tip Note

In the second VPS, the <b>-gen</b> command is not present. In this circumstance, we are assuming that the entrepreneur wants to capture the entire coin supply on the first device. Technically speaking, assuming the entrepreneur has ownership over both devices, it does not matter if both devices initiate the <b>-gen</b> command. Both devices will attempt to mine the first block and the superior device will receive the coin supply.

:::

There is another key difference in the command.

```bash
-addnode=[INSERT IP ADDRESS OF FIRST DEVICE]
```

With the execution of the IP address command, the second device knows to look across the available connection (the Internet, VPS service, etc.) for the first device, which is already running an instance of Komodod and the new coin. The command here simply tells the computer the proper IP address of the first device.

As soon as these two devices connect, having all the proper Komodod software running and set in place, the mining begins. One of the devices will mine the first block and instantly receive the total coin supply of the entire blockchain into the user’s chosen wallet.

Both devices sync this information to each other, and the `ENTREPRENEUR’S COIN` now exists in the world. The entrepreneur can also add more and more devices to the network.

#### Notarizing to the Komodo Main Chain

To receive the security of the dPoW consensus mechanism, the entrepreneur simply needs to have the elected notary nodes add the `ENTREPENEUR’S COIN` to their internal list of coins to notarize. This will empower the entrepreneur’s product with the same verifiable and decentralized security of the Komodo parent chain.

The process of adding a new notarization service can be executed by the notary nodes with just a simple command. While we are at this early stage of development, this sign-up process for new dICO products is not yet automated. In the future, we intend to automate as much of this process as possible.

There is a fee for receiving notarization services. This helps to cover the business costs associated with notarization (recall that all notarizations are financial transactions, by nature).

Entrepreneurs are thus able to use the Smart Chain’s native dPoW consensus mechanism to notarize to the Komodo main chain to create a secure backup of the coin’s history. Even in the event of an attack at this early state of existence the entrepreneur can rest assured that their product will survive, so long as one copy of the blockchain’s history exists.

Everything is set on the backend for the entrepreneur, and they are now fully prepared to begin the dICO process. Naturally, we understand that for many potential entrepreneurs in the Komodo ecosystem, this process is unfamiliar territory. We encourage interested entrepreneurs to reach out to our team for guidance during development.

## The Distribution of Coins

#### The Trials and Travails of the Centralized ICO Method

Previously, the entrepreneur at this point would have been required to go through a centralized ICO process.

This could have required several cumbersome and possibly dangerous steps. For example, the entrepreneur would begin gathering cryptocurrencies from their audience to personally hold in escrow while the process of matching purchases to the new blockchain coin were verified.

To distribute these coins, the entrepreneur had two primary options. They could have created and distributed a digital software wallet capable of holding the entrepreneur’s coins. This would require their audience to download the software. The entrepreneur would then have to send all the appropriate coins to each wallet address, according to the process they established during their ICO.

Or, the entrepreneur would have to make formal arrangements with another service to manage this process, such as with a centralized exchange. This would require a successful negotiation with this third party, likely paying fees as a part of the agreement.

The entrepreneur would then be required to act within the centralized exchange’s arbitrary framework.

The centralized ICO process can be arduous and, at times, disastrous.

#### Enter the dICO

##### Powered by Komodo’s AtomicDEX & Privacy Technology

The Komodo dICO model is an extension of Komodo’s AtomicDEX technology.  AtomicDEX is an atomic-swap powered, decentralized exchange. It enables users to directly exchange cryptocurrencies from one person to another without third-party involvement (i.e. no centralized exchanges, escrow services, vouchers, etc.). Furthermore, as the dICO model is entirely decentralized, anyone can use it at will. There are no centralized authority figures capable of creating artificial control points that can be manipulated at the expense of the users

To begin the distribution process, the entrepreneur first chooses how many nodes they would like to use for the distribution. Nodes can be any type of machine capable of connecting to AtomicDEX. Typically, a small-business entrepreneur may choose to use server machines. Server capacity can be rented online, and the servers can be distributed geographically throughout the world, if desired.

While renting a multiplicity of servers may be the method of choice for an established small-business, it is not a requirement. An owner of an even smaller business, operating on a low budget, can simply use their own computer(s), geographically stationed nearby for convenience. On the other hand, a large corporation could use the server capacity they already own. The number and strength of the machines is a choice made by the entrepreneur.

Having decided the method of distribution, the entrepreneur will then prepare the total supply of coins. (We are assuming the coins are still located on the first device that mined the entrepreneur’s Genesis Block.) The entrepreneur will first break down the total collection of coins into smaller digital pouches. These small bags of coins are ultimately what will be traded on AtomicDEX with their audience.

The size of the bags is chosen by the entrepreneur, and therefore the entrepreneur can choose a size that is agreeable to their outlook on any KYC legal requirements. 

Having created these bags of coins, the entrepreneur then sends them to all chosen nodes throughout the AtomicDEX network. Coins are distributed to each node’s wallet(s) by a normal transaction.  With the coins distributed as desired, the entrepreneur sets the time and date when each bag of coins will be available for purchase. When a bag of coins becomes available on AtomicDEX for trading, members of the Komodo ecosystem simply purchase the coins. 

##### The Many Solutions of the dICO Model: Security, Privacy, Decentralization, and Freedom

This method of conducting a decentralized initial coin offering mitigates and circumvents the issues found in a centralized ICO. The entire process is conducted in a decentralized manner. The dICO entrepreneur has direct access to their audience, as there are no centralized human authorities acting as middlemen.

Concerning theft, the dICO provides solutions to both methods of theft in the centralized ICO. Unlike the centralized ICO, once the distribution of the bags takes place the effect of their distribution adds a layer of security from a would-be hacker. The hacker can only steal funds at the node they manage to penetrate. Were the hacker to steal coins before the actual dICO, the entrepreneur would have the option to simply create a `NEW ENTREPRENEUR’S COIN` again, without losing any personal wealth.

Furthermore, since the trades happen instantaneously with each bag available for sale, the entrepreneur is only in possession of either their own `ENTREPRENEUR’S COIN`, or the cryptocurrency funds provided by the dICO participants—but not both. The entrepreneur is never at risk of losing both their own funds and the funds of their audience, which is a strong advantage over today’s ICO model.

Regarding human error, should one of the node’s databases be corrupted by accident or hardware failure, only one node’s coin supply is lost.

Since the coins are immediately available on the AtomicDEX exchange for trading, the entrepreneur’s audience has an immediate trading market. This stands in contrast to today’s ICO model, where users often wait weeks or even months before liquidity for their ICO product arises in a centralized exchange.

Finally, through Komodo's [inherent zero-knowledge technology](), participants have the option of privacy when purchasing the dICO product. This enables them to support the crowdsourcing efforts of the entrepreneur within their inherent right to barter in private.

Upon conclusion of the distribution of the dICO coin supply the entrepreneur has successfully and immediately completed all the crowdsourcing-related steps that could have taken months in today’s typical ICO model.

Komodo’s dICO model is significantly easier, freer from manipulation, more flexible, and more secure.

# Delayed Proof of Work

## A Foundational Discussion of Blockchain Security

Komodo’s form of providing security is called Delayed Proof of Work technology (dPoW). It builds on the most advanced form of blockchain security in existence, Proof of Work technology (PoW). The latter form of security is the method that the Bitcoin network utilizes.

To understand the value of Komodo’s dPoW security, we must first explain how PoW works and why it is the most secure method of maintaining a decentralized blockchain. We must also examine PoW’s shortcomings, so that we may understand the need for Komodo’s dPoW method and the advantages it provides to the blockchain community.

To understand how PoW technology functions, we begin by explaining the roots that make the Bitcoin protocol a viable means of securely transferring value.

## What Is A Consensus Mechanism?

#### The "Double Spend" Problem

The creation of blockchain technology stems from the early mathematical studies of encryption using computer technology.

One such example is related to the information-encoding device, "Enigma," invented by the Germans at the end of World War I. Alan Turing, a British Intelligence agent, famously beat the Enigma device by inventing the world’s first "digital computer." This provided enough computing power to break [Enigma’s](https://en.wikipedia.org/wiki/Enigma_machine) encryption and discover German secret communications.

This early affair with encryption set off a race throughout the world to develop myriad forms of securely transferring information from one party to another via computer technology. While each new form of computer encryption provided more advantages, there remained one problem that prevented encryption from being useful as a means of transferring not just information, but also financial value.

This challenge is known as the "Double Spend" problem. The issue lies in the ability of computers to endlessly duplicate information. In the case of financial value, there are three important things to record: who owns a specific value; the time at which the person owns this value; the wallet address in which the value resides. When transferring financial value from one person to another, it is essential that if Person A sends money to Person B, Person A should not be able to duplicate the same money and send it again to Person C.

The [Bitcoin protocol](https://en.wikipedia.org/wiki/Bitcoin_network), invented by an anonymous person (or persons) claiming the name of Satoshi Nakamoto, solved the Double Spend problem. The underlying math and computer code is both highly complex and innovative. For the purposes of this paper we need only focus on the one aspect of the Bitcoin protocol that solves the Double Spend problem: the consensus mechanism.

#### The Consensus Mechanism Provides Security Against a "Double Spend"

The consensus mechanism created by Nakamoto is perhaps one of the most powerful innovations of the twenty-first century. His invention allows individual devices to work together, using high levels of encryption, to securely and accurately track ownership of digital value (be it financial resources, digital real estate, etc.). It performs this in a manner that does not allow anyone on the same network (i.e. the Internet) to spend the same value twice.

Let us suppose a user, Alice, indicates in her digital wallet that she wants to send cryptocurrency money to a friend. Alice’s computer now gathers several pieces of information, including any necessary permissions and passwords, the amount that Alice wants to spend, and the receiving address of her friend’s wallet. All this information is gathered into a packet of data, called a "transaction," and Alice’s device sends the transaction to the Internet.

There are several types of devices that will interact with Alice’s transaction on the Internet. These devices will share the transaction information with other devices supporting the cryptocurrency network. For this discussion, we need only focus on one type of device: a cryptocurrency miner.

::: tip Note

The following descriptions are simplified explanations of a truly complex process. There are many other strategies cryptocurrency miners devise to out-mine their competition, and those strategies can vary widely.

:::

#### A Miner Competes to Add Blocks to the Network’s History, in Exchange for a Reward

##### Step One: Preparing the Preliminary Information

This device is performing an activity called cryptocurrency "mining." Let us focus now on a mining device that captures Alice’s raw transaction data. This device is owned by a tech-savvy miner, named Bob, who wants to add Alice’s transaction to the permanent history of the Bitcoin network.

If Bob is the first person to properly process Alice’s transaction he will receive a financial reward. One key part of this reward is a percentage-based fee, taken from Alice’s total transaction amount.

##### The Mempool is the Collection of All Raw Transactions Waiting to be Processed

Furthermore, Bob does not have just one transaction alone to mine. Rather, he has an entire pool of raw transactions, created by many people across the Internet. The raw data for each of these transactions sits in the local memory bank of each miner’s mining device, awaiting the miner’s commands. Miners call this pool of transactions, the "mempool." Most miners have automated systems to determine the transaction-selection process, based on estimated profit.

##### Creating Transaction Hashes

After Bob makes his choices about which transactions he will attempt to mine (and we assume that he includes Alice’s transaction), Bob’s mining device then begins a series of calculations.

His device will first take each individual transaction’s raw data and use mathematical formulas to compress the transaction into a smaller, more manageable form. This new form is called a "transaction hash." For instance, Alice’s transaction hash could look like this:

```bash
b1fea52486ce0c62bb442b530a3f0132b826c74e473d1f2c220bfa78111c5082
```

Bob will prepare potentially hundreds of transaction hashes before proceeding to the next step. One important thing to understand about the compression of data in the Bitcoin protocol, including the transaction hash above, is that calculations herein obey a principle called, The Cascade Effect.

##### The Cascade Effect: Changing One Bit of Data Changes the Entire Result

The Cascade Effect simply means that were Bob to attempt to change even the smallest bit in the raw data—whether from a desire to cheat, or by mistake, or for any other reason—the entire transaction hash would dramatically change. In this way, the mathematical formulas in the Bitcoin protocol ensure that Bob cannot create an improper history.

Were Bob to attempt to create an incorrect transaction hash, other miners on the network could use the raw transaction data from Alice, perform the proper mathematical formulas in the Bitcoin protocol, and immediately discover that Bob’s hashes are incorrect. Thus, all the devices on the network would reject Bob’s incorrect attempts and prevent him from claiming rewards.

##### Step One Continued: Finishing the Preliminary Calculations

Now, using more mathematical formulas, Bob takes the transaction hashes he is attempting to process and compresses them into a new manageable piece of data.

This is called, "the merkle root." It represents all the transactions that Bob hopes to process, and from which he hopes to gain a reward. Bob’s merkle root could look like this:

```bash
7dac2c5666815c17a3b36427de37bb9d2e2c5ccec3f8633eb91a4205cb4c10ff
```

Finally, Bob will gather information provided from the last miner that successfully added to the permanent blockchain history. This information is called, "the block header." It contains a large amount of complex data, and we won’t go into all the details. The one important element to note is that the block header gives Bob clues about how to properly add the next piece of information to the permanent Bitcoin history. One of these hints could look like this:

```bash
"difficulty" : 1.00000000
```

We will return to this clue further on.

Having all this information, Bob is nearly prepared. His next step is where the real challenge begins.

##### Step Two: The Race to Finish First

Bob’s computer is going to gather all the above information and collect it into a set of data called a "block." Mining this block and adding it to the list of blocks that came before is the process of creating a "chain" of blocks—hence the industry title, "blockchain."

However, adding blocks to the blockchain is not so easy. While Bob may have everything up to this point correctly prepared, the Bitcoin protocol does not yet give Bob the right to add his proposed block to the chain.

The consensus mechanism is designed to force the miners to compete for this right. By requiring the miners to work for the right to mine a new valid block, competition spreads across the network. This provides many benefits, including time for the trans- actions of users (like Alice) to disseminate around the world, thus providing a level of decentralization to the network.

Therefore, although Bob would prefer to immediately create a new valid block and collect his reward, he cannot. He must win the competition by performing the proper work first. This is the source of the title of the Bitcoin-protocol consensus mechanism, "Proof of Work" (PoW).

The competition that Bob must win is to be the first person to find an answer to a simple mathematical puzzle, designed by Satoshi Nakamoto. To solve the puzzle, Bob guesses at random numbers until he discovers a correct number. The correct number is determined by the internal complex formulas of the consensus mechanism and cannot be discovered by any means other than guessing. Bitcoin miners call this number a "nonce," which is short for "a ‘number’ you use ‘once.’"

Bob’s mining device will make random guesses at the nonce, one after another, until a correct nonce is found. With each attempt, Bob will first insert the proposed nonce into the rest of his block. To find out if his guess is correct, he will next use mathematical formulas (like those he used earlier) to compress his attempt into a "block hash." A block hash is a small and manageable form of data that represents the entire history of the Bitcoin blockchain and all the information in Bob’s proposed block. A block hash can look like this:

```bash
000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
```

Recall now The Cascade Effect, and how it states that changing one small number in the data before performing the mathematical computations creates a vastly different outcome. Since Bob is continually including new guesses at the nonce with each computation of a block hash, each block-hash attempt will produce a widely different sequence of numbers. Miners on the Bitcoin network know when a miner, such as Bob, solves the puzzle; by observing the clues that were provided earlier. Recall that the last time a miner successfully added data to the blockchain, they provided these clues in their block header. One of the clues from the previous block header can look like this:

```bash
"difficulty" : 1.00000000
```

This detail, "difficulty," simply tells miners how many zeros should be at the front of the next valid block hash. When the difficulty setting is the level displayed above, it tells miners that there should be exactly ten zeros. Observe Bob’s attempted block hash once again, which he created after making a guess at a nonce, adding this proposed nonce into his block, and performing the mathematical formulas:

```bash
000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
```

The block hash above has ten zeros at the beginning, which matches the number of zeros in the difficulty level. Therefore, the hash that Bob proposed is correct. This must mean that he guessed a correct nonce. All the miners on the network can prove for themselves that Bob was correct by taking all the same information from their mempools, adding Bob’s nonce, and performing the mathematical calculations. They will receive the same result, and therefore Bob is the winner of this round.

On the other hand, due to the Cascade Effect, if Bob’s attempted nonce had produced a block hash with the incorrect number of zeros at the front, his block hash would be invalid. The network would not afford him the right to add an incorrect block hash to the network, and all the miners would continue searching.

##### Step Three: Bob Finds the Nonce

Once a miner discovers a nonce that produces a valid block hash, the miner has "found a new block," and can send the signal across the Internet. The consensus mechanism running on every other mining device can verify for themselves the calculations. Once verified, the consensus mechanism grants the miner the right both to add the proposed block to the blockchain, and to receive the reward.

Let us return to Bob’s machine, having just guessed a correct nonce, and thus holding a valid block hash. Bob’s machine instantly sends out the winning information across the Internet, and Bob collects his reward from the Bitcoin network. All the other miners must readjust. Earlier, they were searching for the correct nonce based off the information from the previous block header. However, Bob’s new valid block includes a new block header. All the other miners on the network abandon their current work, adopt Bob’s new block header, make many recalculations in their underlying data, and begin their search for the next nonce.

There is no sympathy in the Bitcoin protocol for any miner’s wasted efforts. Suppose another machine on the network was also trying to mine Alice’s transaction, and lost to Bob in the race. Only Bob earns the reward from Alice’s transaction, and the other miner receives nothing in return for their costs and time.

For Alice, this process seems simple. She first indicated the wallet address of her friend and sent cryptocurrency. After a certain amount of time, her friend received the money. Alice can ignore the byzantine process of the miners that occurred between these two events. Alice may not realize it, but the PoW consensus mechanism provides the foundation of security upon which she relies.

## The Dominance of the Proof-of-Work Consensus Mechanism

#### Proof of Work (PoW) Fosters Ever Increasing Security

There are several reasons why PoW networks, especially Bitcoin, continue to dominate in terms of security and blockchain success.

A simple, preliminary reason is that PoW networks foster ever-increasing speed and computer power. Miners must constantly update and innovate above their competitors to continue earning rewards.

##### Speed and Power are of the Essence

Among miners, having a faster and more powerful computer can mean earning rewards more frequently. For miners seeking to maximize profit, competition requires constant upgrades to machinery and to a miner’s customized underlying code.

The frequency at which a device can create proposed block hashes is called "hash power." The more hash power a collective PoW network has across all miners mining the blockchain, the more secure the network. This competitive pressure provides one important advantage in security to PoW networks, when compared to alternate consensus mechanisms.

##### The Network Effect: Bitcoin’s Ability to Dominate Begins

A high level of security fosters a sense of trust among users, and this can grow a PoW network’s audience. As the audience grows, both the number of transactions and the price of the coin increase. This attracts more miners. The rising level of miners provides greater overall hash rate to the network, which in turn fosters a stronger sense of trust. This increased sense of security can raise the number of users on the network, which can increase the number of miners, and the cycle repeats.

In economics, this is classified as a "Network Effect," where a cycle of behavior encourages more of the same behavior, with compounding interest. Due to the Network Effect, and the fact that Bitcoin is the oldest PoW network, Bitcoin is increasing its security at a rate faster than the rate of other PoW networks.

Furthermore, consider the effect caused when the price of a PoW-blockchain coin rises. Before the rise, assume the blockchain coin is worth one dollar. A miner is justified in spending the necessary money (on equipment, upgrades, and electrical costs, etc.) to justify one dollar’s worth of hash rate. If the price shifts upwards to two dollars, the miner must upgrade their entire business to justify two dollars’ worth of a matching hash rate. If the miner does not upgrade, their competitor will, and then the miner will no longer be able to compete for rewards.

#### The Longest Chain Rule: The True "Secret Sauce" of Pow Domination

There are many more reasons why PoW networks continue to dominate in security.  Yet, for our discussion, there is one element that rises above all others. It is called, "The Longest Chain Rule," and some blockchain developers may argue that it is "the secret sauce" that fuels PoW’s strength.

The Longest Chain Rule is the determining factor whenever two competing versions of the blockchain history arise on the network. The rule simply states that whichever of the two versions grows longer first, wins. The other version is overwritten, and therefore all transactions and rewards on that version are erased. The simplicity of this rule is a key to understanding why PoW consensus mechanisms continue to outperform their competition.

##### The Simple Effects of The Longest Chain Rule

On a surface level, this rule prevents a double spend by a network user. For instance, consider a husband and wife accidentally attempting to spend the same money at the exact same time, while each person is traveling in a different part of the world.

::: tip Note

For the sake of the discussion, we are oversimplifying the following actions so that they take place within only a few milliseconds. We also oversimplify the technical details, for clarity. The full explanation of this process is provided in the [Bitcoin wiki](https://en.bitcoin.it/wiki/Main_Page), for those who would like to gain a deeper understanding.

:::

##### A Tale of Two Blockchains

Let us suppose that the husband is in Asia and the wife is in the Americas. Both are purchasing a car. The husband uses all the funds from the family Bitcoin wallet to purchase a car at precisely 8:00 PM (UTC). The wife makes her purchase at the exact same moment, for a similar amount.

After making his purchase, the husband’s transaction hash is immediately sent to a mining device in China, where it is held in the miner’s local mempool (recall that a mempool is a collection of all raw transaction data across the network).

Let us suppose that the husband’s transaction arrives in the Chinese miner’s mempool at the exact moment that the Chinese mining equipment finds a correct nonce and a valid block hash. The Chinese miner declares the winning information, mines a new block, and collects a reward. All the miners in his local (Asian) vicinity (who receive the winning information faster than in the Americas, due to proximity) complete the block verification process, increase the length of the blockchain, and begin searching for the next valid block hash.

On the opposite side of the world, essentially the exact same actions happen. The wife’s transaction is sent to the nearest miner, this time located in Washington state of the United States. Just as the transaction enters the Washington state miner’s mempool, the miner discovers a valid block hash. He sends out the signal, mines a new block, and also collects the reward (this is the same reward that the Chinese miner is attempting to claim). All the miners in the local (US) vicinity verify the information immediately and begin searching for a new valid block hash based on the Washington state miner’s recent block.

##### An Internal Conflict of Interest Arises Within the Bitcoin Network

Note the paradox here. There are now two versions of the Bitcoin history that are valid, yet different.

These two versions make their way across the Internet, around the world, each to the other side. When the competing messages arrive, the Bitcoin protocol sees that there is a conflict: the same money was spent twice.

Consider how on each side of the world the miners are spending their financial and temporal resources to further their own interests. There is no economic incentive for either side to submit to the other, by nature. Therefore, there is a conflict of interest within the Bitcoin network itself. The Bitcoin network would swiftly fail, were it not for The Longest Chain Rule.

##### The Longest Chain Rule: The History Which is Longer First, Wins

The Longest Chain Rule simply declares that whichever of the two competing blockchains grows longer first, wins. The consensus mechanism erases the other version.

Let us suppose that the Chinese mining equipment is superior in this instance, and the Chinese miner manages to discover the next valid block hash and send out the signal before the Washington state miner can do likewise. Across the world, the moment the information arrives that the Chinese miner completed yet another valid block, the Bitcoin protocol erases the Washington state miner’s version of the Bitcoin history.

There is no sympathy for any wasted efforts, nor for any misunderstandings between the wife and her car dealer. The Bitcoin protocol’s consensus mechanism simply presses forward. The Washington state miner’s rewards disappear, as though they never occurred. The wife’s purchase of a car likewise evaporates.

_(Typically, a normal and prepared car dealer utilizing cryptocurrency would not consider a customer’s transactions acceptable until several new blocks were added to the blockchain. In this manner,cryptocurrency users can ensure that a transaction is beyond contestation before the customer can, for example, drive a new car off the lot.)_

The Washington state miner gets a raw deal in this scenario, but the network benefits as a whole. The Longest Chain Rule provides the necessary security to prevent a Double Spend. The network accurately recorded one family member’s purchase of a car, prevented the mistaken double spend, and ensured that the most competitive miner received a just reward.

This example illuminates the importance of The Longest Chain Rule. However, there is a dark side to this rule for the unsuspecting and unprepared blockchain developer.

## The 51% Attack

Here’s where intrigue enters the picture. The "easiest" way to steal money on a PoW blockchain (such as Bitcoin) is to perform a 51% Attack.

In this attack, the malicious actor first spends cryptocurrency in exchange for something of value, which they take from their victim. Next, the malicious actor creates an alternate version of the PoW network’s history wherein those transactions never took place. Using advanced mining equipment, the malicious actor then "attacks" the PoW network by mining blocks to this "false" history faster than the rate at which other miners on the PoW network can mine blocks to the "true" history.

Assuming the malicious actor has a sufficient hash rate, as this "false" history grows longer than the "true" history, the Longest Chain Rule will cause the consensus mechanism to overwrite the "true" version. The earlier transactions the malicious actor made would be as though they never occurred. Therefore, the malicious actor would keep both their original funds and whatever item of value they exacted from their victim.

This is known as the 51% Attack. The number 51% derives from the fact that to successfully perform this attack, the attacker must add enough hashing power to the overall PoW network to form a majority of the hash rate.

##### Size is Yet Another Reason Behind Bitcoin’s Current Success Among PoW Networks

Today, Bitcoin’s overall hash rate is enormous. The collective of computers around the world mining Bitcoin is effectively the largest supercomputer ever created by man.  As of the writing of this paper, some estimate that [the Bitcoin network consumes more electricity than the entire country of Denmark](https://arstechnica.com/tech-policy/2017/12/bitcoins-insane-energy-consumption-explained/), and the number of miners continues to grow.

Therefore, to attempt a 51% Attack against the Bitcoin network could cost millions, if not billions of dollars in computer hardware. It would also require a sustained consumption of electricity that is likely unfeasible for a single geographical location, and would be expensive even for a decentralized-hardware network. So long as the miners of Bitcoin remain interested in the Bitcoin network, therefore, Bitcoin has a level of security that is nigh impenetrable.

_We will return to the proposition of the miners’ ability to choose a different network to mine later in our discussion._

## The Genesis Attack

##### A Genesis Attack on the Bitcoin Network

Recall that according to the original version of the Bitcoin protocol, sometimes called the ["vanilla" version,](https://www.worldcryptoindex.com/bitcoin-scaling-problem-explained/) the Longest Chain Rule only requires that the blocks in the longest chain all be properly mined. Furthermore, recall that computers can endlessly duplicate code.

Finally, note that during our explanation, when describing a malicious actor’s attempt to create an empty, meaningless blockchain history, we use quotation marks when employing the word, "false." Likewise, when describing the blockchain history trusted by the people on the network, we include the word "true" in quotations.

We do this because at the core level, the consensus mechanism is purposefully blind regarding any human user’s preference between "truth" and "false." The code only sees "truth" in terms of properly mined blocks, and overall blockchain length.  Nothing more.

Now suppose the existence of a supercomputer a thousand times more powerful than the entirety of the Bitcoin-miner network. This supercomputer could, in theory, stealthily re-create and execute the initial code that spawned the very first block of the Bitcoin blockchain—the "Genesis Block." The supercomputer could then grind out block hashes, one-by-one, mining meaningless blocks and adding them to this empty, "false" version of the Bitcoin history.

Once this meaningless blockchain’s length sufficiently exceed the so-called "true" blockchain used today, the supercomputer could then release its "false" version to the Internet.

Throughout the world, (assuming the vanilla protocol) the Bitcoin network would automatically recognize the "false" blockchain as the correct blockchain! This would all be according to the code. The so-called "false" blocks would be properly mined, and the length would be longer than the chain that users currently trust. The vanilla protocol would, in theory, replace the so-called "true" history with the empty variant.

It might seem to users like a virus being uploaded to the Internet. It could destroy all human trust in the current version of the Bitcoin protocol, wreaking financial havoc throughout the cryptocurrency realm. While users of the Bitcoin protocol would naturally protest, the entire operation would be entirely in agreement with the underlying code.

When observing Bitcoin’s current hash power, the creation of such an anti-Bitcoin supercomputer is clearly not feasible in the immediate future. Assuming Bitcoin miners remain interested in the Bitcoin network, the risk of a Genesis Attack on Bitcoin is essentially non-existent.

However, consider the implications of the Genesis Attack on unsuspecting or underprepared smaller PoW blockchain projects.

##### The More Realistic Dangers of The Genesis Attack

Let us assume a naïve blockchain entrepreneur building a new product. They are generally aware that malicious actors throughout the world are likely to attack their blockchain, stealing funds and otherwise causing trouble. Therefore, the naïve entrepreneur decides to implement what they believe is the most secure method of a blockchain consensus mechanism, PoW, and they offer ample financial rewards to miners to incentivize a secure network.

The entrepreneur and their entire audience may not realize it, but so long as their network’s overall hash rate remains below the threshold of an attack by even an average supercomputer, their entire blockchain history is vulnerable to complete annihilation. A technically astute competitor, seeing the vulnerability, and possessing ownership of the requisite computer hardware, would be able to create an empty and longer version of the same blockchain code and vaporize their competitor’s financial records.

The cryptocurrency industry is young, and few but the most advanced of developers understand the many ways in which blockchain competition can be technically eliminated. Therefore, we have seen but a few serious cases of the Genesis Attack. 

One notable instance occurred when an original Bitcoin developer, Luke-jr, used a variation of the attack to destroy a blockchain project called Coiledcoin. Luke-jr performed this attack out of a belief that Coiledcoin was a [disingenuous project.](https://bitcointalk.org/index.php?topic=56675.msg678006#msg678006) Setting aside any human sentiment on either side of the event, the fact stands that Luke-jr’s variation of the Genesis Attack was the end of the Coiledcoin network.

The complexity in establishing a secure PoW blockchain remains a challenge for would-be entrepreneurs. Furthermore, there are existing PoW developers that are not fully aware of their vulnerability. Likewise, there are would-be malicious actors that have yet to realize the many methods available to cause frustration. The potential danger surrounding the issue of the Genesis Attack shows the relative youthfulness of the cryptocurrency industry.

For a PoW blockchain network to maintain Bitcoin-level security, therefore, it must maintain a hash rate that is high enough to constantly mine blocks faster than a potential competitor could either perform the 51% Attack (destroying the most recent of transactions), or the deadly Genesis Attack (complete annihilation).

## The Financial and Eco-Unfriendly Problems With All PoW Networks

The problems with young PoW networks do not stop there, and furthermore, even Bitcoin’s PoW network has issues: the security of a PoW network comes at a high cost to the environment, and miners have no obligation to mine any particular network.

#### PoW Networks Are Expensive

Some estimate that by 2020, the Bitcoin network alone will consume more electricity than the entire world currently consumes (as of [2017.](https://arstechnica.com/tech-policy/2017/12/bitcoins-insane-energy-consumption-explained/)) Having just one PoW network in existence, therefore, is already strain enough on our environment. It is also a burden on our infrastructure and our worldwide economy. 

On the one hand, adding additional PoW blockchains to the world can serve the purpose of forcing free-market competition on the Bitcoin developers, encouraging ethical and innovative behavior. Therefore, some competition among PoW networks is likely useful.

However, as a human species, we can consider that there are more financially sound and eco-friendly methods of innovating with blockchain technology without always directly competing with Bitcoin PoW security. Our innovation, delayed Proof of Work, is one response to this fact, as we will soon discuss.

#### Miners are Free to Mine Other Networks

Another inherent weakness of the PoW consensus mechanism to discuss is the ability of miners to choose alternate networks.

In November of 2017, for a few hours the majority of Bitcoin network miners switched their hash power to a competitor’s PoW network, the "[Bitcoin Cash](https://www.coinwarz.com/network-hashrate-charts/bitcoincash-network-hashrate-chart)" network. This switch was the result of clever software engineering on the part of the Bitcoin Cash team.

The team recognized that most miners on the Bitcoin network are set to automatically mine whichever network is most profitable. Therefore, the team conducted a calculated change in their underlying protocol that caused the profitability of the Bitcoin Cash network to dramatically increase. The majority of the world’s Bitcoin mining equipment, running via automation, recognized the higher profitability and switched to the Bitcoin Cash network automatically.

While Bitcoin Cash’s play for a majority hash rate proved effective only for a matter of hours, their accomplishment raised awareness to a tacit principle in the network: Bitcoin’s hash rate is not bound to Bitcoin. The hardware is free to serve any compatible network the miners choose.

At the time of the writing of this paper, between Bitcoin and Bitcoin Cash, ~80% of the available hash rate is aligned with the former, and ~20% with the latter. There is speculation in the industry that if the Bitcoin Cash network creates a more favorable position, the balance of hashing power could change on a long-term basis. Furthermore, there are many other blockchain competitors who may gain the attention of Bitcoin’s miners in the future.

Were a shift in the balance of hash rate to occur, Bitcoin would no longer be the leader of security in the cryptocurrency realm. The price of Bitcoin would likely drop as users realized the resulting lack of security leadership. This might cause more miners to switch to a more profitable network to cover the cost of operating their expensive hardware. As miners abandon Bitcoin, and as users continue to leave, the situation becomes a reversal of the Network Effect. The Bitcoin network would come crashing downwards at an ever-compounding rate.

This is all theoretical, but it raises yet another concern that we need to illuminate: the security of a blockchain depends on many things, including the potentially fickle support of human blockchain miners. Our innovation, delayed Proof of Work (dPoW), takes this fact into account as we empower members of the Komodo ecosystem with Bitcoin-level security. Before we finally turn to our own solution, we must discuss the primary competitor to the PoW consensus mechanism, Proof of Stake (PoS).

#### The Primary Alternative: Proof of Stake

Perhaps the most popular alternative consensus mechanism is Proof of Stake (PoS).  In this mechanism, blocks are mined not by miners performing work, but rather by any user "staking" their coins on the open network for the right to mine blocks.

The meaning of "staking" has different variations depending on the specific rules set forth by the developers of the unique variant of the PoS consensus mechanism. In general, staking one’s coins means placing them as collateral on the open network in exchange for the right to mine new blocks.

Users who stake their coins, thereby, can periodically extract a portion of the mempool, mine new blocks, and earn rewards. There is no need to perform any hardware-expensive proof-of-work calculations, as the user’s incentive to be honest is encouraged by the fact that their own wealth hangs in the balance.

#### The Security Risks and Shortcomings of PoS

The downside to PoS is that a user who simply leaves a large portion of wealth staked (and therefore continually claims rewards) gradually becomes a centralized point of wealth through the power of compound interest. On PoS networks, monopolies are a constant danger. The owner of a monopoly has power over the well-being of the network.

Once a majority of the supply is obtained, the owner gains a position known as "Nothing at Stake." The owner can mine "false" blocks to the PoS blockchain and use their own majority supply over the network to declare these "false" blocks valid. All other stakeholders on the network must adopt these "false" blocks, lest the majority holder use their strength to declare competing blockchain versions as invalid.

If a non-majority holder attempts to challenge the monopoly holder’s version, the non-majority holder can achieve little more than the loss of coins they placed at stake. Compare this with non-majority holder in a PoW system: the question over the "truth" of the blockchain history depends not upon ownership of wealth, but upon the miner’s innovation and performance. PoW-based systems do not suffer from the risk of monopolies, therefore, as majority stakeholders gain no unique control over the mining of new blocks.

Variations of PoS, including the popular Delegated Proof of Stake (DPoS) and Delegated Byzantine Fault Tolerance (DBFT) systems, do not resolve the underlying issue of monopoly ownership and centralized manipulation. In a vanilla PoS system, the malicious actor needs only to purchase a majority supply of the coin to mine "false" blocks. In a DPoS/DBFT type system, wherein the ecosystem stakeholders elect and endow delegates with the responsibility to mine new blocks, the malicious actor has only to compromise most of the delegates. Thereafter, the compromised delegates can mine "false" blocks, and the users of the ecosystem have no direct means to retaliate, beyond abandoning the network.

This is not to say that PoS and its variants have no use cases. Indeed, there are scenarios in which PoS can be useful for entrepreneurs. In the Komodo ecosystem, our dPoW consensus mechanism can provide security to networks that use either type of consensus mechanism.

After the following section summary, we finally turn our attention to our dPoW consensus mechanism.

## A Summary of the PoW Consensus Mechanism

In short, the PoW consensus mechanism, as designed by Satoshi Nakamoto, is currently the soundest method of blockchain security. It solves the Double Spend problem and creates a secure network, capable of transferring financial value. Furthermore, competition among miners and the Longest Chain Rule create fairness on the blockchain. The combination of features provides a high level of defense against two of the most dangerous methods of blockchain destruction—the 51% Attack and the Genesis Attack—assuming a strong overall hash rate on the network.

New PoW blockchains can opt to compete directly with Bitcoin’s hash rate, and some level of competition is good for the ethical values and innovative power of the cryptocurrency industry. However, it is not necessary, cost-effective, nor eco-friendly that every new blockchain innovation requiring security should attempt to compete directly with Bitcoin. Not only is this unsustainable, but it is also unreliable, as it depends on the arbitrary choices of the decentralized network of miners around the world.

## The Komodo Solution: Delayed Proof Of Work (dPOW)

Komodo presents a technology, the delayed Proof of Work consensus mechanism, that solves the problems described above. Komodo’s unique consensus mechanism provides the same level of security as the strongest PoW network, without attempting direct competition. Instead, Komodo’s consensus mechanism uses the chosen PoW network as a storage space for "backups" of Komodo transactions. By this method, in the event of an attempted attack on Komodo’s blockchain history, even a single surviving copy of the Komodo main chain will allow the entire ecosystem to overwrite and overrule any of the attacker’s attempted changes.

In a key difference separating Komodo from regular PoW networks, our dPoW consensus mechanism does not recognize the Longest Chain Rule for any transactions that are older than the most recent "backup" of the Komodo blockchain. For conflicts that may arise which refer to transactions that are older than the most recent "backup," our consensus mechanism looks to the backups in the chosen PoW blockchain to find the accurate record.

Furthermore, entrepreneurs who build independent blockchains (Smart Chains) in the Komodo ecosystem can likewise elect to have backups of their own records inserted into the Komodo main chain. In this manner, the records of the entrepreneur’s chain are then included in the backup that is pushed into the protective hash rate of the main PoW blockchain (Bitcoin). Thus, entrepreneurs and developers in the Komodo ecosystem can have their independent blockchains protected by the chosen PoW network’s hash rate.

Therefore, to destroy even the smallest Smart Chain that is employing Komodo’s dPoW security, the attacker would have to destroy: a) all existing copies of the Smart Chain; b) all copies of the Komodo main chain; c) the accompanying PoW security network into which the dPoW backups are inserted (Bitcoin). This endows the Komodo ecosystem with higher than Bitcoin-level security, while avoiding the excessive financial and eco-unfriendly costs.

In addition, the dPoW security provided by Komodo is not only greater than Bitcoin, but is also more flexible. The Komodo security services are performed by notary nodes, chosen through a stake-weighted vote. Notary nodes have the freedom to switch notarization to another PoW network. Reasons the notary nodes might elect to switch networks could include an event where worldwide miners’ hashing power changes to another PoW network, or the cost of notarization to the current PoW network becomes more than necessary. Through this flexibility, the Komodo ecosystem maintains both a superior level of security and a more flexible and adaptive nature than Bitcoin itself.

#### A Note About Komodo’s Iguana Core Technology

All the following processes are supported by a deeper Komodo technology called Iguana Core. Readers of this entire section of documentation will note that Iguana Core is featured in each section. This is because Iguana Core is the heart of the underlying technology that enables the vast Komodo ecosystem to work together. The Iguana Core code itself is complex and to fully explain would require a separate whitepaper.

In short, Iguana Core is a collection of code that serves many purposes. One function of Iguana Core is to empower the blockchain technologies Komodo either builds or adopts to act in coordination with each other. Often, Iguana Core can advance their initial capabilities beyond original expectations. In the case of dPoW, the code that underlies notary-node functionality spawned from Iguana Core technology.

Iguana Core is coded in the C programming language—the language of choice of our lead developer, JL777. The C language is designed to enable computers to process high volumes of information in a secure manner at high speed. This aligns with Komodo’s directives to provide security and scalability to our users.

#### A Brief Discussion on the Security Provided by the Notary Nodes

Security is the foundational aspect of the Komodo ecosystem. Therefore, for the reader, we must first discuss the nature of the security the notary nodes provide.  More detailed explanations on individual components will follow.

The Komodo ecosystem uses a stake-weighted vote to elect parties who will run sixty-four separate "notary nodes." These notary nodes perform the "backup" process via automation provided by the Iguana Core software that runs at the heart of our system. These backups are called "notarizations." Each notarization performed by the notary nodes acts as a marker of the "true" history for the Komodo ecosystem, and this marker’s accuracy is secured by the hash power of the chosen PoW network.

The notary nodes work together in a decentralized and trustless manner both to create each notarization and to write it to the chosen PoW network (Bitcoin). Frequency varies between two to six notarizations per hour, and the yearly cost to perform this service is ~180 BTC. Funds for this service were raised as a part of our initial Komodo ICO, and our holdings allow us to continue this method for many years before we will be required to implement a business model to replenish our reserves.

With our dPoW mechanism, each confirmation on the chosen PoW network is also a confirmation of the entire Komodo ecosystem’s history. The only sacrifice that is made is the time it takes to push the Komodo ecosystem’s records into the protection of the main hash rate. For this reason, we name our consensus mechanism, "delayed Proof of Work" (dPoW).

Our consensus mechanism is designed to keep the advantages provided by the PoW system, circumvent the excessive financial and eco-unfriendly overhead costs, and avoid the security risks found in a PoS system. We accomplish these measures by several means. The most important measure is that all actions a notary node takes are publicly verifiable, and the Iguana Core software running on the users’ machines verifies notary nodes’ actions. The notary nodes themselves are not arbiters of "truth."

Therefore, the only type of "false" behavior a malicious notary node can perform is to withhold notarization. There are sixty-four notary nodes. The minimum number of notary nodes required to maintain the Komodo ecosystem is thirteen. Thus, a malicious actor would have to compromise fifty-one notary nodes to shut down the Komodo ecosystem. Such an action would be uneconomic, as this would be destroying the access to the financial rewards a notary node receives for performing its duties. By this design, notary nodes have only one economically favorable position: to properly transfer the records of the Komodo ecosystem into a secure location and to increase Komodo’s market share and value.

For the average user, when performing a trade of goods and services where security is desired, the user simply needs to wait until the notarization process is complete.  After the notary nodes are finished, the only way to break the security protecting their transaction history requires breaking the security of the chosen PoW network (Bitcoin). The Iguana Core code running in the main Komodo software automates the verification process. Entrepreneurs and developers should be aware of this information as they design business models and services for their users.

Thus, Komodo’s dPoW consensus mechanism maintains the security innovated by Satoshi Nakamoto, and because it enables the Bitcoin hash rate to serve more independent blockchains than just the single Bitcoin blockchain, dPoW even expands on Nakamoto’s original design.

## The Notarization Process

#### Step One: Gathering the Appropriate Data

The process of notarization is simple. Roughly every ten to twenty-five minutes, notary nodes perform a special block hash mined on the Komodo blockchain and take note of the overall Komodo blockchain "height" (i.e. the number of total blocks in the Komodo blockchain since inception). The notary nodes process this specific block in such a manner that their signatures are cryptographically included within the content of the notarized data.

[<i>All examples herein are estimated based off an actual KMD notarization to the BTC network, linked here.</i>](https://www.blocktrail.com/BTC/tx/313031a1ed2dbe12a20706dff48d3dffb0e39d15e3e4ff936d01f091fb3b8556#tx_messages)

The pieces going into the notarization process could look like this:

##### The Block Hash

```bash
0a88371cc63969d29492110592189f839557e606db6f2b418ecfe8af24451c07
```

This is the "block hash" from the KMD blockchain—mined and cryptographically signed by the notary nodes

##### Block 607240

This is the blockchain "height" of the Komodo blockchain at the time of notarization (i.e. the total number of KMD blocks ever created)

##### KMD

The letters "KMD" are added into the notarization mixture to indicate the name of the blockchain to which this notarization belongs


#### Creating a Notarization

The notary nodes will take these three pieces of information and compress them into a format that is more computer-friendly. The result will look like this:

```bash
6a28071c4524afe8cf8e412b6fdb06e65795839f189205119294d26939c61c37880a084409004b4d4400
```

The above number can be said to be a cryptographic representation of all that has happened on the Komodo blockchain up to this point in time. According to the Cascade Effect, were an attacker to attempt to go back in the history of the Komodo blockchain and change even a single character of data, and then perform the same hashing formulas in the Komodo code, the number above would dramatically change.

This makes the notary nodes’ notarization a useful backup, assuming this number is in a safe location where anyone on the Internet can view and verify it. It enables a single surviving copy of the "true" Komodo main chain to identify itself to the rest of the Komodo network, as only the "true" data can produce the same result.

On the other hand, an incorrect history of the Komodo network will not be able to produce the same notarization. Through the automation in the Iguana Core software that underlies the Komodo ecosystem, all users will align with the "true" blockchain history and ignore any malicious actors’ "false" attempts.

#### Step Two: Notarizing the Data to a Secure Location

Naturally, for security purposes this number cannot simply be saved to one person’s local computer, or be written down on a piece of paper. Were the number to be in such a centralized location, a would-be attacker could simply destroy the backup, or replace it with a "false" version.

For the number to be useful, it must be placed in a secure and decentralized location. Here is where Komodo adopts security from another network: Komodo will perform a simple transaction in which it writes the above number into the data history of the strongest PoW blockchain (currently Bitcoin). This location is as secure as the miners’ hash rate makes it, and the location is decentralized, by nature.

To place this information in the accompanying PoW network, the notary nodes will use a feature that exists at the core of the Bitcoin protocol when making a transaction.  The feature is called "OP_RETURN," and it allows for a message to be added to the blockchain, permanently, as a part of performing a transaction.

A notable use of the ability to write messages to a PoW blockchain is found in the first actions of Satoshi Nakamoto himself (themselves). In the first Bitcoin block ever mined, Satoshi used a feature like OP_RETURN to include this [message](https://en.bitcoin.it/wiki/Genesis_block):

```bash
03-Jan-2009 Chancellor on brink of second bailout for banks
```

::: tip

Nakamoto used a feature called "coinbase," which is similar to OP_RETURN. A primary difference between coinbase and OP_RETURN is that coinbase is used by miners when mining a block, whereas OP_RETURN can be used by any user when performing transactions.

:::

Readers who have downloaded the Bitcoin blockchain to their local computer, and who possess the knowledge necessary to inspect the raw Bitcoin data, can discover these very words written to their own hard drive. The important thing to understand for our discussion is that any message written to a secure and decentralized PoW blockchain is viewable and verifiable to all.

The permanence and security of OP_RETURN messages are a core aspect of dPoW’s security. In the event of a powerful attack on the Komodo network, there need be no argument over the correct notarized marker upon which the ecosystem members should rely. The Iguana Core code running at the heart of each user’s Komodo software can continue securing, decentralizing, and distributing the accurate version of the Komodo history as though the attack never occurred.

#### Step Three: Notarizing the PoW Network Information Back to the KMD Main Chain

One final step remains to complete the loop of security between the KMD main chain and the chosen PoW network. The KMD blockchain must record within its own records the specific location where it placed this backup into the PoW blockchain.  This enables the Iguana Core software to identify the location of the most recent notarization.

To create this reminder, the notary nodes will now gather one more piece of information, this time drawn from the accompanying PoW network: the transaction hash (txid) identifying the location of the first notarization. This information could look like this:

```bash
313031a1ed2dbe12a20706dff48d3dffb0e39d15e3e4ff936d01f091fb3b8556
```

The notary nodes will combine it with all the information that has come before. The result will be transformed, again, into a computer-friendly version:

```bash
6a28071c4524afe8cf8e412b6fdb06e65795839f189205119294d26939c61c37880a0844090056853bfb91f0016d93ffe4e3159de3b0ff3d8df4df0607a212be2deda13130314b4d4400
```

This number is a compressed cryptographic representation of everything that has happened in the Komodo ecosystem up to this point in time. The notarization is placed as a transaction message directly into the KMD main chain itself. It enables the Komodo ecosystem to know how to find a reference of its own history.

As each notarization is built upon all the notarizations that came before, Iguana Core does not need to monitor each notarization. Rather, it only needs to observe the most recent iteration. This is favorable for Komodo security, as there is always a possibility that the chosen PoW network (Bitcoin) could fail. In this event, the notary nodes would place their next notarization in a competing PoW network (such as Bitcoin Cash) and the entire Komodo ecosystem would remain secure. The notarizations in the failing PoW network would no longer be required to verify ecosystem accuracy.

## Understanding Security and Economic Incentives

The nature of mining in the Komodo ecosystem serves as an incentive to motivate the notary nodes to perform their job well. This setup is also a principle method by which the Komodo ecosystem dramatically reduces the overhead costs necessary to function. Portions of the mining rewards are available not just to the notary nodes, but also to all members of the Komodo ecosystem, through various means.

The Komodo network on a surface-level is a minable network, like other PoW networks. Any technically savvy user can activate a device capable of mining the Komodo network, and thereby process users’ transactions, mine blocks, and receive rewards. For these miners, the Komodo protocol functions in almost the exact same manner as the Bitcoin blockchain’s mining rewards function.

Understanding the similarities will explain to the reader the motivations for the notary nodes and other Komodo miners to secure the Komodo network. The differences, on the other hand, are explained in [Part V](./chapter8.md) of this paper. <i>(See the section regarding the 5.1% rewards allocated to all users who hold at least 10 KMD in their wallet address. This 5.1% reward is given to users out of the funds that would normally be given to a Bitcoin miner as a method of minting new Bitcoin coins.)</i>

#### "Easy Difficulty" in dPoW: The Key to Notary Nodes’ Financial Incentives

The foundational similarity to understand is that with each block header, clues are provided for miners to find the next valid block hash. The specific clue, "difficulty," changes with each block header.

Under normal circumstances on a PoW blockchain, with each block header the difficulty level can change. The Bitcoin protocol itself decides what the difficulty for the next valid block should be.

The difficulty is decided based on the amount of overall hash power mining the network. If many miners are active, then the hash rate is high, and the Bitcoin protocol sets the difficulty to a higher number. On the other hand, if the hash rate is low, then the protocol sets the difficulty to a lower number.

Recall that the "difficulty" level determines the number of zeros at the beginning of the next valid block hash. The more zeros at the beginning of a valid block hash, the more unlikely each attempt at finding a valid block hash will be.

When the Bitcoin protocol was in its infancy, the difficulty setting was easy. In fact, the block hash we used earlier as an example is, in truth, the very first block hash ever created—by Satoshi Nakamoto himself (themselves).

```bash
000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
```

He (they) designed the difficulty setting to encourage the network to find new block hashes once every ten minutes, on average.

For a computer, to guess within ten minutes a nonce that will produce a block hash beginning with ten zeros is relatively easy. It is so simple, in fact, no special computer is required. Early Bitcoin miners could use nothing more than the average desktop machine, having the CPU—the small heart of the computer—performing the calculations.

As more miners joined the network, however, the Bitcoin protocol automatically increased the difficulty. This maintained the speed at which the pool of all miners discovered new blocks, despite the increased size of the pool. Stabilizing the speed created several benefits, including an amount of economic predictability upon which users can rely.

Today, at Bitcoin’s current level of overall hash power, a valid block hash requires a much higher level of difficulty. Here is a recent successful block hash:

```bash
0000000000000000002d08398d6f21f038019600266b419bad5ab88add5b638d
```

There are seventeen zeros, and to find a valid block hash at this level requires a prodigious effort.

In the race to win blockchain rewards, miners all over the world have built entire farms of specialized equipment for mining. The small CPU of a desktop is no longer useful, and the time of "easy difficulty" on Bitcoin has passed.

#### The dPoW System has Sixty-Four Elected Notary Nodes

Here is where our dPoW consensus mechanism diverges from the Bitcoin protocol’s limitations. In addition to performing the notarizations of the Komodo ecosystem, notary nodes are also a special type of blockchain miner. They have a certain feature in their underlying code that both enables them to maintain an effective and cost-efficient blockchain ecosystem and provides the notary nodes with a financial incentive. The combination of benefits prevents the Komodo ecosystem from falling into the trap of directly competing with other PoW networks for hash-rate security status.

#### Each Notary Node Gets One Chance Per Every Sixty-Five Blocks to Mine on Easy

Each individual node periodically receives the privilege to mine a block on "easy difficulty." In other words, while the rest of the miners in the Komodo ecosystem are mining at a calculated difficulty level, the notary nodes occasionally receive the chance to mine as though they are alone on the network.

The notary nodes’ "easy difficulty" setting operates in a cyclical manner, with each notary node on its own cycle. At the start of the cycle the notary node holds the "easy difficulty" ability until it mines one "easy" block. Then the Iguana Core code removes the ability for the next sixty-four blocks. After the sixty-four-block period passes, the notary node can once again attempt to capture a block on "easy difficulty."

Therefore, while everyone else on the network mines at an adjustable level of difficulty according to the normal PoW consensus mechanism (which keeps the overall speed of the Komodo network stable) the notary nodes have a chance to step outside the normal rules. For every sixty-five-block period on the Komodo blockchain, the odds that a block will be mined by a notary node, as opposed to a normal miner, are essentially 3:1.

Since the rest of the miners have an adjustable difficulty ratio, it does not matter how many more miners attempt to mine Komodo. Most of the valid blocks will always be found by the sixty-four elected notary nodes, even were the entire hash power of the Bitcoin network to switch all its attention to mining Komodo.

The mining rewards that a notary node receives through this feature are ~50 KMD per day. This reward occurs regardless of KMD’s popularity, market value, or even of the competition from normal KMD miners. The reward notary nodes receive creates an economic incentive for each party controlling a notary node to support and protect the Komodo ecosystem, and to increase the relative value of this daily ~50 KMD reward.

## Komodo’s Protective Measures in Action

There are myriad ways that an attacker can assail a blockchain project, and the Komodo ecosystem is well prepared. In this foundational paper, we only discuss two of the most crucial attacks—the 51% Attack and the Genesis Attack.

In a separate technical whitepaper, written by our lead developer, we provide several more discussions on how Komodo responds to many other forms of attack.

Some mentioned therein include the Sybil Attack, the Eclipse Attack, and more. We encourage any reader searching for information about the deepest levels of Komodo security not only to read the accompanying whitepaper, but also to reach out to our team directly.

::: tip Note (2019)

The whitepaper referred to above was written in ~2016 and is now obsolete, and therefore is no longer posted here. Please reach out to our team directly for a copy, if interested.

:::

#### Notarizations Provide a Defense Against Both the 51% Attack and the Genesis Attack

By relying on the notarizations in the chosen PoW network’s hash rate (Bitcoin), users in the Komodo ecosystem are well protected from both the 51% Attack and the Genesis Attack. Recall that in a 51% Attack, the attacker first makes a transaction and then erases it by providing 51% of the total hash rate to a "false" blockchain where the transaction never occurred. In the Genesis Attack, the attacker recreates the genesis block of a blockchain and mines an entirely false history. For either of these attacks to play any part in the Komodo ecosystem, the successful attack would have to destroy every transaction at every level it is recorded.

First, let us consider the implications of the notarization process provided against the Genesis Attack. Once an independent blockchain has even just a single transaction pushed through the notarization process into the chosen PoW network, that notarization protects against the Genesis Attack. To successfully complete a Genesis Attack against a Komodo-built blockchain, the attacker would have to destroy the chosen PoW network’s records from that moment going forward. The attacker would also have to destroy the KMD main chain from that moment forward, and the entire independent Smart Chain. The likelihood of achieving this task is effectively as probable as performing a Genesis Attack on the chosen PoW network itself.

The Komodo ecosystem is also well protected against the 51% Attack, so long as users wait for a desirable number of notarizations. Consider a transaction that is recently performed on a Smart Chain in the Komodo ecosystem. While the notary nodes have not yet notarized the transaction into the KMD main chain, then it is plausible that during this approximately ten-minute period an attacker could successfully perform a 51% Attack on this transaction. The attacker would simply make a transaction, and then provide 51% of the total hash rate to a "false" version of the independent Smart Chain to erase the transaction. Therefore, users should always wait until they receive at least one notarization to the KMD main chain before considering any transaction final.

::: tip Update 2019

Additionally, Komodo's new (2019) Antara Framework provides additional options that allow Smart Chain users to greatly reduce the required wait time for notarizations. In some instances, the wait time can be effectively eliminated.

An introduction to the Antara Framework is discussed [in this linked Core Technology Discussion section.](../../../basic-docs/start-here/core-technology-discussions/antara.html#introduction)

On the other hand, for the full Antara documentation, [click here](../../../basic-docs/antara/introduction-to-antara.html)

:::

Once the transaction reaches the KMD main chain, at this point, the attacker would have to successfully perform the 51% Attack against both the KMD main chain and the independent Smart Chain. This is already quite difficult to achieve, as it would require overcoming the notary nodes and other KMD miners, while simultaneously attacking the independent chain. Entrepreneurs, developers, and users should decide for themselves how much trust they wish to place in the system at this point of the notarization process.

When considering large sums of money, the need for protection grows. A large sum of money can be both a single large transaction, or it can be the collective value of many small and normal-sized transactions that build up over hours, days, and years. These transaction histories need protection against the sophisticated blockchain attacker. It is for this reason that the notarization process exists.

Once the notary nodes have pushed the most recent version of the Komodo ecosystem’s history into the chosen PoW network (Bitcoin), the entire ecosystem relies only on that notarization as the arbiter of truth. All transaction records that have been pushed into the chosen PoW network can only be rescinded by altering the chosen PoW network itself (while simultaneously altering the histories of the KMD main chain and the independent Smart Chain). Accomplishing such a task is highly improbable (though we warn the reader never to consider any attack impossible).

Therefore, any record that has been on the Komodo main chain for at least one notarization has a fortress of hash rate and other security measures at its guard. So long as users and developers are mindful to wait for the desired number of notarizations to secure their payments, both the 51% Attack and the Genesis Attack are highly unlikely either to be successful, or to provide economic value to the would-be malicious actor.

Nevertheless, we remind all users of our ecosystem to consider their own vigilance and mindfulness as the most effective protection against the would-be attacker. Users, entrepreneurs, and developers utilize all aspects of the Komodo network at their own risk.

#### Considering an Attack on the Notarization Process

To create a notarization for the KMD main chain, the minimum number of notary nodes required is 13. If the notary nodes themselves come under attack and must work to maintain access to the Internet, just 13 of the full 64 are required for the Komodo ecosystem to continue its operations.

In the possible event of a disconnect from the minimum number of notary nodes, chains in the Komodo ecosystem should simply be on the alert. Users, developers, and entrepreneurs would simply need to wait for the notary nodes to regain access to the Internet and resume the notarization process before considering any transaction final.

For this reason, the position of a notary node is held with high importance, and the parties which gain these positions are measured foremost by their Information Technology experience and capabilities. Komodo stakeholders are responsible to vote for candidates that are the most qualified to perform in the notary-node duties.

## The dPOW Consensus Mechanism is Inherent in all Komodo Smart Chains

These security features extend to any Smart Chain relying on the notarization process. The primary difference between a Smart Chain and the main chain is that the main chain notarizes to an exterior PoW network (Bitcoin), whereas the Smart Chain notarizes to the KMD main chain.

The notarization for the Smart Chain is performed by the notary nodes as a service to the independent developer and entrepreneur. Notary nodes create a notarization of the Smart Chain and write it into the KMD main chain. Then they write their actions into the Smart Chain itself. This allows Iguana Core (running at the heart of the Smart Chain) to identify where its most recent notarization can be found. The notarization process cycles every ten minutes, assuming the Smart Chain’s network is consistently active. If the network has periods of inactivity, the notary nodes halt the process (to save against unnecessary notarization costs) and reactivate as soon as new transaction activity appears on the Smart Chain’s network.

There is also a difference in the number of notary nodes required to notarize a Smart Chain as compared to the KMD main chain. Whereas with the KMD main chain 13 notary nodes are required, only 11 notary nodes are required to notarize a Smart Chain. This difference is based on the underlying math that ensures that the number of Smart Chains in the Komodo ecosystem can scale into the tens of thousands.

We invite the reader to consider the fact as each Smart Chain can support thousands of transactions per minute, this makes the combined ecosystem capable of supporting millions of transactions per minute. This includes cross-blockchain interoperability, via our atomic-swap powered technology and our Antara Framework. This makes Komodo among the most scalable of financial-technology solutions in existence, and capable of competing with the transaction volumes of fiat networks.

Naturally, as each level of notarization takes time to perform, there is an additional delay for Smart Chains as compared to the KMD main chain. A Smart Chain’s history is notarized into the KMD main chain approximately every ten minutes, assuming constant activity. This notarization will then be pushed through the notarization process into the chosen PoW network (Bitcoin). We estimate that a transaction performed on a Smart Chain will receive the KMD main chain’s protection within approximately ten minutes, and will receive the Bitcoin hash rate’s protection in approximately twenty to thirty minutes.

Another difference between the KMD main chain and a Smart Chain is that the notary nodes only mine the KMD main chain. Asset-chain developers are responsible to create any required network of miners to process their Smart Chain’s transactions.  This does not need to be a full network of mining farms, such as those in Bitcoin.  Rather, it only needs to be enough computing power to process transactions, and to provide any desired level of hash-rate security to cover the ten-minute waiting period. For a small business with intermittent periods of transaction activity, a single, dedicated, full-time server may be enough. Larger businesses can scale as desired and can also work to attract a network of freelance miners.

It is also possible that a network of freelance miners will naturally arise within the Komodo ecosystem, to observe and manage transaction-processing services wherever and whenever they are required, through automation.

This setup dramatically reduces the overhead costs and effort the entrepreneur and developer would otherwise have to allocate to a network of high-hash rate miners.  These freed resources of the entrepreneur and developer can therefore be allocated to other uses in their business models.

The total yearly cost for the Komodo notary nodes to notarize the KMD main chain into the currently chosen PoW chain, Bitcoin, is approximately ~180 BTC/year (a value of ~\$1.5M USD at the time of the writing of this paper). Funding for the notary nodes to perform this service was raised during the Komodo ICO, and current BTC holdings give us many years to come before we will be required to implement any business models to replenish our BTC funds.

On the other hand, the total cost for the Smart Chain developer to notarize their independent chain into the KMD main chain is but a fraction of the cost. This security mechanism is not limited to Smart Chains created within the Komodo ecosystem. In fact, Komodo’s Blockchain Security Services are available to any existing blockchain. With Komodo, any blockchain can be protected with the power of the Bitcoin hash rate for a tiny percentage of the cost.

Thus, an entrepreneur in our ecosystem can have their own independent blockchain that is backed up by the hash rate of the Bitcoin mining network, at only a fraction of the cost. In the following sections, we discuss the formation of a new Komodo Smart Chain, the method of distribution and trading using our atomic-swap technology, AtomicDEX, and our "smart contract" like technology, the Antara Framework.

# Introduction

-----------------

<div style="text-align: center;">

<i><b>Advanced Blockchain Technology, Focused On Freedom</b></i>

</div>

-----------------

The Komodo project focuses on empowering users with Freedom through
blockchain technology. There are many forms of Freedom that Komodo can provide, and we currently focus on empowering two types of users: the blockchain entrepreneur, and the average cryptocurrency investor. Together, our community of entrepreneurs, investors, and other users form an economic ecosystem.

The foundational pillar of the Komodo ecosystem is security. Komodo provides a unique and innovative form of security that is as strong as the Bitcoin network, yet does not require the incredible cost. Every member of the Komodo ecosystem receives the benefits of this security. The investor relies on it for everyday use. The entrepreneur relies on it to protect their blockchain innovation at a cost that is affordable even to small businesses and startups.

Another of Komodo’s powerful technologies is a new method of trading cryptocurrencies directly from one person to another. It is a new kind of "decentralized exchange." Our decentralized exchange removes all forms of middlemen, vouchers, and escrow services. It relies on an underlying concept called the "atomic swap", and we are the leaders in this technology.

Our atomic-swap powered decentralized exchange serves both the investor and the blockchain entrepreneur.

For the investor, they can trade cryptocurrencies without having to pass through a centralized exchange, which can be an arduous and even dangerous process. They also do not have to use an escrow service, voucher, nor even an intermediary coin—not even Bitcoin. Furthermore, there is no registration process required, nor are there any withdrawal limits. We currently support approximately 95% of the cryptocurrencies in existence, including Bitcoin-protocol based coins, Ethereum, and Ethereum-based ERC20 tokens.

For the entrepreneur, our decentralized exchange enables the release of new products to the world without middleman involvement. Furthermore, even entrepreneurs who have previously built other blockchain projects outside our ecosystem can easily feature their coin on our decentralized exchange. The only requirement is that the blockchain product have the proper security elements in the core of the blockchain’s code.

Komodo also has powerful privacy features built into our platform. When activated, these features allow the investor to trade and purchase goods and services within their right to privacy. This also allows the entrepreneur to release their product, and to crowdsource funds, from an audience that may prefer to maintain this privacy.

There are many other technologies and features in the Komodo ecosystem, and we are experiencing a rapid growth of both entrepreneurs and investors.

The documentation in the <b>Core Technology Discussion</b> section provides an in-depth discussion about Komodo’s unique security features, our decentralized exchange, the method of releasing new products on it, and our native privacy features.

We welcome feedback from our readers. If you have any questions or concerns over the course of reading this material, please reach out to our team directly. You may find our contact information on our accompanying website: [https://komodoplatform.com](https://komodoplatform.com)

#### Note on Changes Since Whitepaper Creation (cr. 2019)

The documentation in this section is based on the Komodo whitepaper that was written in 2017. The content was updated in July 2019 to ensure technical accuracy. We recommend that all newcomers read this documentation to enhance their understanding of the nature and design of Komodo.

Since 2017, the Komodo team has greatly advanced the technologies on the Komodo Platform, and these new technologies are discussed in other areas of the technical-documentation website.

Also, the Jumblr feature and zero-knowledge transactions are still available on Komodo-based blockchains, but they are no longer available on the KMD main chain. This change was made largely in response to community feedback and industry developments.
# Miscellaneous

## Details Regarding KMD Main Chain


| Circulating Coin Supply:      | \~100000000 |
|-------------------------------|-------------|
| Total Coin Supply (yr. 2030): | \~200000000 |

The foundational coin of the Komodo ecosystem is named after the ecosystem itself, Komodo (KMD).

#### Rewards

Those who hold KMD may earn rewards of up to 5.1% annually. Any wallet address that holds at least 10 KMD is eligible. KMD holders must simply move their KMD once a month—even if the funds are sent back to the same address from which they originated—in order to earn their reward. This reward is built into the core code of Komodo.

The reward comes from an opportunity provided by our unique security system, dPoW. The nature of the reward is rooted in the financial incentive that is typically given to miners on a normal PoW chain. On a normal PoW, when a miner mines a new block, the blockchain mints new coins and delivers them to the miner’s indicated wallet. For instance, on the Bitcoin blockchain, the reward for mining a new block is currently ~12.5 BTC. In dPoW, we do not need to allocate such a high incentive to miners, as we already maintain access to the hash rate of our chosen PoW network, Bitcoin. Therefore, when we created the KMD main chain, we recoded this coin-minting reward to distribute 5.1% annual rewards to all holders of at least 10 KMD.

To earn rewards in the full amount of 5.1%, users must move their funds on the blockchain at least once per month. The reward is calculated as a part of the utxo transfer process. The KMD code only calculates rewards for utxos up to one month, and then stops. By simply sending the full balance of a wallet to the same receiving address, a user can generate a new utxo. In this manner, the user can claim their current rewards, and continue receiving them for at least one month.

The KMD 5.1% reward will continue for a period of approximately twelve to fourteen years. When Komodo’s overall coin supply reaches ~200M, this reward will also discontinue. Specifically, the reward will cease when the KMD chain reaches a block height of 7777777.

Note that no one is forced into using KMD in our ecosystem. We are often asked why we chose this route, as the free nature of the Komodo ecosystem can be in direct contrast to the philosophies of many other ecosystems and exchanges. Other ecosystems often require users to use the developer’s coin.

The reason why we follow a more open practice is that we strive to adhere to the guiding principles of decentralization and open-source technology. We want to create a blockchain platform where people are free to use whatever is most useful for them in their entrepreneurial endeavors. Keeping KMD as an optional element empowers the members of the Komodo ecosystem with freedom.

## The Nature of Privacy Features in the Komodo Ecosystem

##### The Option of Privacy is Essential

One primary goal of the Komodo ecosystem is to provide our users with the highest levels of security. The option to enable oneself with privacy is an inherent part of a strong security system. Privacy empowers users with the ability to make choices without being directly controlled or observed by a third-party actor.

Many of humanity’s most meaningful advancements in art, technology, and other human endeavors began in situations where the creator had the security of privacy in which to explore, to discover, to make mistakes, and to learn thereby.

##### Privacy Issues in Popular Privacy-Centric Blockchains

Across the entire cryptocurrency industry, current pathways to obtain privacy in the blockchain industry have many problems.

One of the most popular methods to obtain privacy is the use of a centralized mixing service. In this process, users send their cryptocurrencies to service providers, who then mix all the participants’ coins together, and return the coins according to the relevant contributions. With this method, the most dangerous issue, among many, is that for the duration of the mixing period users lose control over their currency.  The funds, therefore, are subject to theft and human error.

Other decentralized coin-mixing methods, such as the [coin shuffle,](https://bitcoinmagazine.com/articles/shuffling-coins-to-protect-privacy-and-fungibility-a-new-take-on-traditional-mixing-1465934826/) require coordinating with other human parties. This also introduces the potential for the same issues of theft and human error, and adds yet another risk: the coordination between human parties can result in the disclosure of a user’s privacy.

Some cryptocurrencies support mixing as a part of the normal transaction process out of a desire to provide constant anonymization. Varying methods for randomizing these transaction-mixing patterns exist among the many different brands of relevant cryptocurrencies, and each feature strengths and weaknesses in their approach.

#### Komodo's Approach to Privacy Technologies

The roots of the Komodo ecosystem stem from the seminal work of Satoshi Nakamoto and his Bitcoin protocol. One of the key challenges in this technology is that the original protocol does not make any account for privacy. Therefore, Komodo began not as a fork of the vanilla Bitcoin protocol, but rather as a fork of Zcash. The latter is a privacy-centric fork of Bitcoin, and therefore Komodo inherits technology from both Bitcoin and Zcash by this action. 

The Komodo Smart Chain software, komodod, retains the inherent privacy features of Zcash. These primarily consist of the ability to convert money from a transparent address to a private address, and then to transfer money from one private address to another. When sending money that is already private to an address that is also private, Zcash technology allows the funds to move without leaving a public data trail for later analysis.

This is one of the most powerful forms of blockchain privacy in existence, as the provided privacy is effectively permanent.  

##### Private and Non-Private Addresses

On any privacy-enabled Smart Chain, there are two types of addresses. One is transparent, the other is private.


##### Transparent Addresses

We call a transparent address a "T address." These are fully accessible to the user, and they are the means of conducting normal transactions. All currency entering and leaving a T address is fully visible to the network.

The user must use these addresses for most interactions on-chain, including most, if not all, of the Antara Module transactions, and when using AtomicDEX.

##### Private Addresses

We call a privacy-enabled address a "Z address," as they utilize the Zcash parameters and zk-SNARK technology.

Z addresses often have RPCs that are separate from the RPCs used for T address. For example, [<b>z_gettotalbalance</b>](../../../basic-docs/smart-chains/smart-chain-api/wallet.html#z-gettotalbalance) is separate from [<b>getbalance.</b>](../../../basic-docs/smart-chains/smart-chain-api/wallet.html#getbalance)

The cost of interacting with Z addresses is often higher than the cost of interacting with a T address. This is due to the fact that Z transactions require more block space, due to their demands for increased levels of encryption.

### Method of Moving Funds Privately

There are three types of transactions that can take place in respect to privacy technology.


#### Transparent to Private

-------

<div style="text-align: center;">

<b>T -> Z</b>

</div>

------

A user uses the [<b>z_sendmany</b>](../../../basic-docs/smart-chains/smart-chain-api/wallet.html#z-sendmany) RPC to send funds from a T address to a Z address.

This is <b>not</b> a private transaction. An observer of the blockchain can observe both the T address from which the funds are consumed and the Z address to which the funds are sent.

#### Private to Private

------

<div style="text-align: center;">

<b>Z -> Z</b>

</div>

------

This <b>is</b> a private transaction. Using zk-SNARK technology inherited from Zcash, this transaction moves funds from one address <b>without leaving any data available in the public domain for later observation.</b> 

So long as the user does not reveal any information regarding this transaction, no other party may ever know the amount, specific time, or destination of funds in this transaction. The user may also consider enhancing their privacy through services such as [Tor](https://www.torproject.org/).

All privacy from zk-SNARK technology is derived solely as a part of this type of transaction.

#### Private to Transparent

------

<div style="text-align: center;">

<b>Z -> T</b>

</div>

------

This is <b>not</b> a private transaction. Rather, this is the transaction wherein funds again become public, and therefore usable for services such as a typical Antara Module or an AtomicDEX exchange.

Observers on the blockchain can observe both the Z address from which the funds are consumed and the T address to which the funds are sent.

### Additional Privacy Considerations

Although the anonymization process provides a measure of privacy and may appear to be sufficient, there are still more precautions a user must take. Two main attacks are available to a would-be sleuth.

#### The Timing Attack

In this attack, the sleuth simply studies the time the funds disappear from a T address and looks for funds to appear in another T address soon thereafter. If the privacy-user persistently chooses predictable timing for initiating and completing their transfer of funds from a T address, through a series of Z addresses, and back to a public T address, a determined sleuth may deduce the user's trail of funds.

For effective privacy, the user should wait for other users on the Smart Chain to exercise privacy transactions, and thereby conceal their own privacy behavior. The more users using privacy features, the more private the transactions become.

#### The Knapsack Attack

The Knapsack Attack is similar to the Timing Attack, but as applied to amounts. For example, if there is only one KMD address that sends 1000000 KMD from a T address to a Z address, and later 1000000 KMD emerges from a Z address to a T address, the sleuth can easily discern the user’s trail of funds.

To protect against the Knapsack Attack, users can vary their amount of funds in both `T -> Z` and `Z -> T` transactions.

### A Word on Risks Inherent in zk-SNARK Technology

Zero-knowledge transactions rely on the Zcash parameters as put forth by the Zcash team. The Zcash parameters are a "zero-knowledge" form of technology. This is a powerful form of privacy, and arguably superior to other forms as it is effectively permanent. Relying on the Zcash parameters allows us to turn our creative resources to other blockchain-technology challenges, while still empowering members of the Komodo ecosystem with the option of privacy.

To create the Zcash parameters, the original Zcash developers had to create a series of keys that, when combined, created a master key that could unlock and lock the parameters. After using the master key to create the parameters, the team destroyed every individual key. The team conducted this endeavor in a public manner. We encourage interested readers to view the "Zcash Ceremony" explanation, and to search for other viewpoints as well.

To briefly summarize the security measures, the Zcash team used several layers of protection including: multi-party computation, air-gapped compute nodes, hard-copy evidence trails, a uniquely crafted distribution of the Linux operating system, and the physical destruction of each piece of hardware that held an individual key. The resulting layers of defense would be of the highest level of difficulty for an outsider to penetrate. Furthermore, the method of creation and destruction ensured that the internal security of the project was faultless, so long as at least one member of the entire Zcash team was honest.

By our observation, the team performed this endeavor with sufficient competence and due diligence. Furthermore, given the nature of the project, the longstanding reputation of the Zcash developers, and the modus operandi of their lives’ work, we believe they were properly motivated to perform the creation and destruction in a capable and honest manner.

Nevertheless, there are privacy advocates in the cryptocurrency industry who maintain a degree of suspicion over any project that requires an element of human trust.  This suspicion extends to the Zcash parameters. These observers continually scrutinize the Zcash project, searching for more and more processes by which the creation ceremony could have failed. Yet, while various theories have been put forth, no actual failure in the Zcash parameters has been discovered.

In adopting the Zcash parameters, we receive frequent questions regarding how they affect Komodo-based currency. The answer is that the privacy in the Komodo ecosystem is permanent, regardless of any potential fault by the Zcash team. Furthermore, we can adopt any updates the Zcash team releases to the parameters.

In the unlikely event that someone was able to retain a complete copy of the master key, the only power the holder would have, would be the ability to create new private money in the currency of any Smart Chains utilizing zero-knowledge transactions.

This holder could then shift that value into transparent, spendable money. This could negatively impact any affected Smart Chain's local community, and we would be required to adapt our platform. If a fault in the Zcash parameters were to be discovered, the Komodo team has various contingency methods at our disposal to remove the Zcash parameters and replace them with a new set of parameters.

Though in Komodo we do not see this as a realistic threat, we nevertheless include the information here in our documentation to provide complete transparency for any user who seeks to invest their resources in a privacy-enabled Komodo Smart Chain.

## The Utxo: An Elusive, Yet Fundamental Concept

All Bitcoin-based software relies heavily on a technology called the "utxo," short for Unspent Transaction. This technology was invented in the original Bitcoin protocol. Yet despite the technology's age, even the most active of cryptocurrency users rarely know what utxos are or why they exist.

To better understand utxos, let us first examine the language of a common user when describing how much cryptocurrency money they have and how they perceive those funds. We will therefore need to understand the concept of "satoshis," the way a blockchain handles the collection and distribution of funds, and how we utilize these core technologies when trading on AtomicDEX.

### Comparing the Utxo to Fiat Money

Let us assume a cryptocurrency user, whom we name Charlie, has $10,000 in his physical wallet. Naturally, when Charlie thinks about the amount of physical (or "fiat") money he has, he says to himself, "I have $10,000."

However, there is no such thing as a $10,000-dollar bill. Instead, Charlie actually has a collection of smaller bills stacked together. For instance, he could have a stack of $100-dollar bills, the total of which equals $10,000 dollars.

If Charlie goes to purchase an item that costs $1, and he only has $100-dollar bills in his wallet, to make his purchase he will take out a single $100-dollar bill and give it to the cashier. The cashier then breaks that $100-dollar bill down into a series of smaller bills. The cost for the item, $1, remains with the cashier, and the cashier then provides change—perhaps in the form of one $50-dollar bill, two $20-dollar bills, one $5-dollar bill, and four $1-dollar bills.

Charlie now thinks to himself, "I have $9,999." Specifically, however, he has ninety-nine $100-dollar bills, a $50-dollar bill, two $20-dollar bills, one $5-dollar bill, and four $1-dollar bills.

We emphasize that not only does he not have ten thousand $1-dollar bills, he also does not have one million pennies ($0.01). Furthermore, because pennies are the smallest divisible unit of value in Charlie’s wallet, we could point out that each bill is a collection of its respective units of pennies. For instance, a $1-dollar bill in Charlie’s wallet we could describe as, "a bill that represents a collection of one hundred pennies and their value."

### Understanding Cryptocurrencies and Their Utxos

#### A Satoshi is The Smallest Divisible Unit of a Cryptocurrency

Continuing with our explanation of utxos, we next need to understand the concept of "satoshis." The name "satoshi" is derived in honor of Satoshi Nakamoto, author of the original Bitcoin whitepaper. By convention in the cryptocurrency community, one satoshi is equal to one unit of a coin at the smallest divisible level. For instance, 1 satoshi of Bitcoin is equal to 0.00000001 BTC.

Let us suppose now that Charlie has 9.99000999 BTC (Bitcoin) in his digital wallet. Assuming Charlie correctly understands the concept of satoshis, Charlie could say to himself, "I have nine hundred and ninety-nine million, nine hundred and ninety-nine satoshis of bitcoin." This is how Charlie might mentally perceive the collection of money that exists in his digital wallet, like he perceives the $9,999 in his fiat wallet.

#### A Utxo is a Packet of Satoshis, just as a Fiat Dollar Bill is a Packet of Pennies

Recall now that with fiat money, Charlie did not think about how his original $10,000 was comprised of smaller individual $100-dollar bills. Similarly, Charlie also does not think about how his 9.99000999 BTC could be comprised of smaller collections of satoshis.

Furthermore, just as Charlie did not carry around fiat money as a collection of pennies, he also is not carrying around a raft of satoshis. Were he to try to carry a million pennies in his physical wallet, the weight of the wallet would be unmanageable. Similarly, if the Bitcoin protocol were to attempt to manage nine hundred and ninety-nine million, nine-hundred and ninety-nine satoshis, the "data weight" would be so heavy, the Bitcoin protocol would be enormous and unmanageable.

To optimize "data weight," the Bitcoin protocol therefore bundles up the satoshis into something that is like the example of dollar bills earlier, but with one important difference. In fact, here is where the Bitcoin protocol exercises a superiority over fiat money by deviating from the limitations fiat money must obey when bundling smaller values into larger values.

In fiat money, one hundred pennies are bundled into a one-dollar bill, which can then be bundled into a larger bill, and so on. All the sizes of fiat money are preset and predetermined by the issuer of the fiat money when they print their bills and coins.

The Bitcoin protocol, however, does not need to pre-plan the sizes of "bills" (i.e. the collections of satoshis) in the owner’s wallet. Bitcoin is freer in this sense; it can shift and change the sizes of its "bills" at will because there is no need to accommodate for the printing of physical coins and paper.

Instead, the Bitcoin protocol allows for the developer of digital wallets to write code that can optimize how bitcoin satoshis are packaged into "bills," and thus the community of developers can work together to keep the data weight of the blockchain manageable. The better the digital-wallet developer, the more efficient the size of the "bills" (a.k.a. the packets of satoshis).

The Bitcoin protocol does have one limitation, however: It must keep track of how these satoshis are being collected into larger "bills" in everyone’s digital wallets. After all, a key idea of Bitcoin is that everything happens under the public eye, where it can be verified.

Because the Bitcoin blockchain must keep track of the sizes of these packets of satoshis, the only time the packets can be assembled or disassembled into larger and smaller sizes is at the moment when the user is spending money on the public blockchain. It is at this time that the user is under the public eye, and therefore his actions can be verified.

To compare this limitation to fiat money, consider the effect created were Charlie to cut a $100-dollar bill into smaller pieces. The $100-dollar bill would no longer be respected as a valid form of currency.

As the word, "utxo," is not a sonorous word, some users in the Komodo ecosystem simply refer to utxos as "bills." The concept is effectively the same. However, as the rest of the blockchain industry primarily uses the word "utxo," we frequently must use this word to maintain a common line of communication. The word utxo will be used throughout the rest of this documentation, to keep in line with industry practices.

The utxo packet can be any size, and the developer of the GUI software decides on this process. Most importantly, and to reiterate, a utxo can only be resized during the process of spending, as this is the moment when the user interacts with the public blockchain.

To further clarify this, let us return to Charlie’s example with fiat money. Recall that when Charlie went to purchase a $1-dollar item, he only had $100-dollar bills in his wallet. He had to give out one $100-dollar bill, and then receive a broken-down collection of dollar bills in return.

This is exactly how it works with utxos. Charlie has a collection of utxos in his digital wallet. When he goes to buy something, he will give out utxos until he surpasses how much he owes, and then the extra change from the last utxo used will be broken down and returned to him.

For example, let us suppose that Charlie’s 9.99000999 BTC is comprised of three utxos worth the following values:
| Utxos in Charlie’s Wallet | Value          |
| ------------------------- | -------------- |
| Utxo #1:                 | 0.50000000 BTC |
| Utxo #2:                 | 0.49000999 BTC |
| Utxo #3:                 | 9.00000000 BTC |
| Total                     | 9.99000999 BTC |

Charlie now desires to purchase an item that costs 0.60000000 BTC. He will have to hand out enough utxos from his wallet until he covers the costs of this transaction, just as he would if he were using fiat money. The Bitcoin protocol calculates the change from the transaction and then returns his change to him.

Remember that there is a fee when spending money on a blockchain. Since we are using Bitcoin in this example, the fee would be paid to cryptocurrency miners. Let us imagine that the fee the miners charge Charlie is 999 satoshis.

We begin by looking at how Charlie would see the process of making the purchase, assuming he does not understand the concept of utxos. For now, Charlie only understands how much is in his wallet at the satoshi level as he conducts his transaction.

| Value              | Description                                                       |
| ------------------ | ----------------------------------------------------------------- |
| 9.99000999 BTC     | The amount Charlie initially owns                                 |
| (-) 0.60000000 BTC | The amount Charlie sends to the digital cashier for his purchase  |
| (-) 0.00000999 BTC | The network fee paid to miners                                    |
| ------------------ | ----------------------------------------------------------------- |
| 9.39000000 BTC     | The amount left in his wallet                                     |

This deduction for his purchase all appears very simple to Charlie—a testament to
the Bitcoin protocol’s effective design.

In the background, however, the digital wallet handles the utxos and the change process in a manner as determined by the programmer. In Charlie’s example, let us assume that it proceeds this way:

| Value                    | Description                                                              |
| ------------------------ | ------------------------------------------------------------------------ |
| 0.60000999 BTC           | The total amount that Charlie owes to the cashier and network            |
| (-) 0.50000000 BTC   | The wallet sends the full value of **utxo #1** to the digital cashier   |
| ------------------------ | ------------------------------------------------------------------------ |
| 0.10000999 BTC           | This is the remaining total amount that Charlie still owes               |

The wallet now brings out utxo #2, which is worth 0.49000999 BTC:

This utxo is broken down or shattered into smaller pieces.

| Value                | Description                                                            |
| -------------------- | ---------------------------------------------------------------------- |
| 0.49000999 BTC       | The size of Charlie’s **utxo #2**, now in the process of change       |
| (-) 0.10000000 BTC   | This shatter of **utxo #2** goes to the cashier (payment fulfilled)   |
| (-) 0.00000999 BTC   | This shatter of **utxo #2** pays the network fee to the miners        |
| -------------------- | ---------------------------------------------------------------------- |
| 0.39000000 BTC       | This last shatter now returns to Charlie’s wallet as a new utxo        |

Charlie now has one new utxo in his wallet, and it is worth 0.39000000 BTC:

| Charlie’s New Wallet State   | Value            |
| ---------------------------- | ---------------- |
| Utxo #3:                    | 9.00000000 BTC   |
| Utxo #4:                    | 0.39000000 BTC   |
| ---------------------------- | ---------------- |
| Total                        | 9.39000000 BTC   |

If Charlie wants to buy something later, these utxos will have to be broken up once more, according to the costs and programming of the digital wallet. Again, whatever is left over from his last utxo comes back to his own wallet as a new utxo.

Now let us suppose that Charlie receives 0.4 BTC from someone else. In Charlie’s wallet, he will see a total of 9.79 BTC. However, in his wallet there are now actually three utxos:

| Charlie’s New Wallet State | Value          |
| -------------------------- | -------------- |
| Utxo #3:                  | 9.00000000 BTC |
| Utxo #4:                  | 0.39000000 BTC |
| Utxo #5:                  | 0.4000000 BTC  |
| Total                      | 9.79000000 BTC |

As a result, the number and sizes of utxos in Charlie’s wallet will vary over time. He may have many smaller utxos that make up his full balance, or sometimes he might just have one large utxo that comprises all of it. For Charlie, it is normally possible to ignore this since the wallet developer could handle everything automatically.

However, a developer in the Komodo ecosystem will likely encounter the concept of utxos in the course of software development, and therefore we encourage developers to practice their understanding.

## Conclusion

This concludes a thorough explanation of the foundational technologies of the Komodo ecosystem. We are working diligently to improve the user experience. While some may say that the cryptocurrency industry is but a bubble, at Komodo we believe we have not yet begun the fight. We hope that the innovations we provide will be a meaningful contribution to the remarkable advent of blockchain, decentralization, and open-source technologies.
# Acknowledgements and References

- BarterDEX – A Practical Native DEX ( [https://github.com/SuperNETorg/komodo/wiki/barterDEX-Whitepaper-v2](https://github.com/SuperNETorg/komodo/wiki/barterDEX-Whitepaper-v2) )
- Nakamoto Satoshi (2008): Bitcoin: A peer-to-peer electronic cash system. ( [http://www.bitcoin.org/bitcoin.pdf](http://www.bitcoin.org/bitcoin.pdf) )
- Mtchl (2014): The math of Nxt forging ( [https://www.docdroid.net/ahms/forging0-4-1.pdf.html](https://www.docdroid.net/ahms/forging0-4-1.pdf.html) )
- King Sunny, Nadal Scott (2012): PPCoin: Peer-to-Peer Crypto-Currency with Proof-of-Stake ( [https://peercoin.net/assets/paper/peercoin-paper.pdf](https://peercoin.net/assets/paper/peercoin-paper.pdf) )
- Delegated Proof-of-Stake Consensus ( [https://bitshares.org/technology/delegated-proof-of-stake-consensus/](https://bitshares.org/technology/delegated-proof-of-stake-consensus/) )
- Miers Ian, Garman Christina, Green Matthew, Rubin Aviel: Zerocoin: Anonymous Distributed E-Cash from Bitcoin ( [https://isi.jhu.edu/~mgreen/ZerocoinOakland.pdf](https://isi.jhu.edu/~mgreen/ZerocoinOakland.pdf) )
- Ben-Sasson Eli, Chiesa Alessandro, Garman Christina, Green Matthew, Miers Ian, Troer Eran, Virza Madars (2014): Zerocash: Decentralized Anonymous Payments from Bitcoin ( [http://zerocash-project.org/media/pdf/zerocash-extended-20140518.pdf](http://zerocash-project.org/media/pdf/zerocash-extended-20140518.pdf) )
- Ben-Sasson Eli, Chiesa Alessandro, Green Matthew, Tromer Eran, Virza Madars (2015): Secure Sampling of Public Parameters for Succinct Zero Knowledge Proofs ( [https://www.ieee-security.org/TC/SP2015/papers-archived/6949a287.pdf](https://www.ieee-security.org/TC/SP2015/papers-archived/6949a287.pdf) )
- NXT Community: NXT White paper ( [http://wiki.nxtcrypto.org/wiki/Whitepaper:Nxt](http://wiki.nxtcrypto.org/wiki/Whitepaper:Nxt) )
- Larimer Daniel, Scott Ned, Zavgorodnev Valentine, Johnson Benjamin, Calfee James, Vandeberg
- Michael (March 2016): Steem, An incentivized, blockchain-based social media platform.( [https://steem.io/SteemWhitePaper.pdf](https://steem.io/SteemWhitePaper.pdf) )
- BitFury Group (Sep 13, 2015): Proof of Stake versus Proof of Work White Paper ( [http://bitfury.com/content/5-white-papers-research/pos-vs-pow-1.0.2.pdf](http://bitfury.com/content/5-white-papers-research/pos-vs-pow-1.0.2.pdf) )
# Introduction to Smart Chain Documentation 

Welcome to the Smart Chain technical documentation.

#### About the Smart Chain Section

This documentation is intended for developers learning about, building, and interacting with Smart Chain products.

Users who are not interested in these activities, but are searching for assistance, can find support in the Komodo Support Center.

[<b>Link to Komodo Support Center</b>](https://support.komodoplatform.com/support/home)

[<b>Link to Simple Installation Procedure</b>](../../basic-docs/start-here/about-komodo-platform/simple-installations.html#simple-installations)

#### Conceptual Overview

A conceptual overview of Smart Chain technology can be found in the <b>Start Here</b> > <b>Product Introductions</b> section.

[<b>Link to Smart Chain Product Introduction</b>](../basic-docs/start-here/about-komodo-platform/product-introductions.html#smart-chains-fluidity)

Also, the reader may turn to the Komodo Whitepaper for a thorough explanation.

[<b>Link to Komodo Whitepaper</b>](https://komodoplatform.com/whitepaper)

#### About Smart Chain Setup

The Smart Chain Setup section contains basic information about Smart Chains and their creation. Topics include the following:

- [<b>Installing Smart Chain Software from Source Code</b>](../basic-docs/smart-chains/smart-chain-setup/installing-from-source.html#installing-smart-chain-software-from-source-code)
- [<b>Interacting with Smart Chains</b>](../basic-docs/smart-chains/smart-chain-setup/interacting-with-smart-chains.html)
- [<b>Smart Chain Launch Parameters Common to Most Blockchain Software</b>](../basic-docs/smart-chains/smart-chain-setup/basic-launch-parameters.html#accessing-the-coin-daemon-remotely)

#### About Smart Chain Tutorials

The Smart Chain Tutorials section contains various tutorials that provide instruction in Smart Chain creation and usage.

For a walkthrough covering multiple tutorials in a targeted fashion, please see the [Learning Launchpad](../basic-docs/start-here/learning-launchpad/learning-path-outlines.html) section.

#### About Smart Chain API

The Smart Chain API section contains all available API commands for a default Smart Chain daemon.

These API commands can also be called Remote Procedure Calls, or RPCs. 

The API section does not include commands that are unique to Antara modules, as Antara modules are not active by default on a Smart Chain daemon. Please see the Antara section for further information.
# Address Index

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## getaddressbalance

**getaddressbalance '{ "addresses" : [ "address" , ... ] }'**

The `getaddressbalance` method returns the confirmed balance for an address, or addresses. It requires [addressindex](../installations/common-runtime-parameters.html#addressindex) to be enabled.

### Arguments

| Name | Type | Description | 
| --------- | -------- | ----------- |
| "address" | (string) | the address |

### Response

| Name | Type | Description | 
| ---------- | -------- | ------------------------------------------------------------------ |
| "balance"  | (number) | the current confirmed balance in satoshis                          |
| "received" | (number) | the total confirmed number of satoshis received (including change) |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getaddressbalance '{"addresses":["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"]}'
```


<collapse-text hidden title="Response">


```json
{
  "balance": 40000,
  "received": 1011916229
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressbalance", "params": [{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "balance": 450010000,
    "received": 1711916229
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getaddressdeltas

**getaddressdeltas '{ "addresses" : [ "address" , ... ] }'**

**getaddressdeltas '{ "addresses" : [ "address" , ... ] , "start": start, "end": end, "chainInfo": boolean }'**

The `getaddressdeltas` method returns all confirmed balance changes of an address. The user can optionally limit the response to a given interval of blocks. The method requires [addressindex](../installations/common-runtime-parameters.html#addressindex) to be enabled.

### Arguments

| Name | Type | Description | 
| ----------- | --------- | ----------------------------------------------------------------------- |
| "address"   | (string)  | the address                                                             |
| "start"     | (number)  | the start block height                                                  |
| "end"       | (number)  | the end block height                                                    |
| "chainInfo" | (boolean) | include chain info in results (only applies if start and end specified) |

### Response

| Name | Type | Description | 
| ---------- | -------- | --------------------------------- |
| "satoshis" | (number) | the difference in satoshis        |
| "txid"     | (string) | the related transaction id        |
| "index"    | (number) | the related input or output index |
| "height"   | (number) | the block height                  |
| "address"  | (string) | the address                       |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getaddressdeltas '{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"]}'
```


<collapse-text hidden title="Response">


```json
[
  {
    "satoshis": 1011876229,
    "txid": "39c61e8ea769ba1fc971cb7dadc531f25a2528d01a4244f379043248b6c51cc1",
    "index": 0,
    "blockindex": 0,
    "height": 1,
    "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"
  }
]
```

</collapse-text>


Command:

```bash
./komodo-cli getaddressdeltas '{"addresses":["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"],"start":1,"end":200,"chainInfo":true}'
```


<collapse-text hidden title="Response">


```json
{
  "deltas": [
    {
      "satoshis": 1011876229,
      "txid": "39c61e8ea769ba1fc971cb7dadc531f25a2528d01a4244f379043248b6c51cc1",
      "index": 0,
      "blockindex": 0,
      "height": 1,
      "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"
    }
  ],
  "start": {
    "hash": "022df4cd1b0bdf548fedc48f27c6367536a560857f61f9bec4b35179c8a45734",
    "height": 1
  },
  "end": {
    "hash": "001fd35407abd8f4e2ec9734ce6f91d820ff553efcb9c39d657afed84da84963",
    "height": 200
  }
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressdeltas", "params": [{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    {
      "satoshis": 1011876229,
      "txid": "39c61e8ea769ba1fc971cb7dadc531f25a2528d01a4244f379043248b6c51cc1",
      "index": 0,
      "blockindex": 0,
      "height": 1,
      "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"
    }
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressdeltas", "params": [{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"],"start":1,"end":200,"chainInfo":true}]}' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "deltas": [
      {
        "satoshis": 1011876229,
        "txid": "39c61e8ea769ba1fc971cb7dadc531f25a2528d01a4244f379043248b6c51cc1",
        "index": 0,
        "blockindex": 0,
        "height": 1,
        "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"
      }
    ],
    "start": {
      "hash": "022df4cd1b0bdf548fedc48f27c6367536a560857f61f9bec4b35179c8a45734",
      "height": 1
    },
    "end": {
      "hash": "001fd35407abd8f4e2ec9734ce6f91d820ff553efcb9c39d657afed84da84963",
      "height": 200
    }
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getaddressmempool

**getaddressmempool '{ "addresses" : [ "address" , ... ] }'**

The `getaddressmempool` method returns all mempool deltas for an address, or addresses. It requires [addressindex](../installations/common-runtime-parameters.html#addressindex) to be enabled.

### Arguments

| Name | Type | Description | 
| --------- | -------- | ----------- |
| "address" | (string) | the address |

### Response

| Name | Type | Description | 
| ----------- | -------- | ------------------------------------------------------ |
| "address"   | (string) | the address                                            |
| "txid"      | (string) | the related txid                                       |
| "index"     | (number) | the related input or output index                      |
| "satoshis"  | (number) | the difference in satoshis                             |
| "timestamp" | (number) | the time the transaction entered the mempool (seconds) |
| "prevtxid"  | (string) | the previous txid (if spending)                        |
| "prevout"   | (string) | the previous transaction output index (if spending)    |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getaddressmempool '{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"]}'
```


<collapse-text hidden title="Response">


```json
[
  {
    "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb",
    "txid": "55c9830c0b2efcbbbac4fb813ff0d85722c6d720a748459287b60ef96cdb6732",
    "index": 1,
    "satoshis": 200000000,
    "timestamp": 1536356143
  }
]
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressmempool", "params": [{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    {
      "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb",
      "txid": "708d8b67ea1f1b0a534515088911e90e77d623cddf901633e24cbb5b4c6f793c",
      "index": 0,
      "satoshis": -50000000,
      "timestamp": 1536603876,
      "prevtxid": "17474b73ec5a985c78a46435a021a1ad3ebd5609724ffd23d9c787c30f661342",
      "prevout": 1
    }
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getaddresstxids

**getaddresstxids '{ "addresses" : [ "address" , ... ] }'**

The `getaddresstxids` method returns the txids for an address, or addresses. It requires [addressindex](../installations/common-runtime-parameters.html#addressindex) to be enabled.

### Arguments

| Name | Type | Description | 
| --------- | -------- | ---------------------- |
| "address" | (string) | the address            |
| "start"   | (number) | the start block height |
| "end"     | (number) | the end block height   |

### Response

| Name | Type | Description | 
| ---------------- | -------- | ------------------ |
| "transaction_id" | (string) | the transaction id |

#### :pushpin: Examples

Command:

```bash
	komodo-cli getaddresstxids '{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb","RQUAkqRiRMqxcNrB29B4duTK4qkqfV9HVJ"]}'
```


<collapse-text hidden title="Response">


```bash
  [
    "39c61e8ea769ba1fc971cb7dadc531f25a2528d01a4244f379043248b6c51cc1",
    "800e4331018d02458ff4f2a7722f0508b810f7fcf53bc1c5ac85aec4e5fa706b",
    "2a3c3664851370ff762b47d735cc661e3dbce4cf36b6c1b74799f3b1c847bd52",
    "275f8383d85c0873c91ebfea3917d4136c89f43526da053177922d6c036634af"
  ]

```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddresstxids", "params": [{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    "39c61e8ea769ba1fc971cb7dadc531f25a2528d01a4244f379043248b6c51cc1",
    "800e4331018d02458ff4f2a7722f0508b810f7fcf53bc1c5ac85aec4e5fa706b",
    "2a3c3664851370ff762b47d735cc661e3dbce4cf36b6c1b74799f3b1c847bd52"
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getaddressutxos

**getaddressutxos '{ "addresses" : [ "address" , ... ], "chaininfo" }'**

The `getaddressutxos` method returns all unspent outputs for an address. It requires [addressindex](../installations/common-runtime-parameters.html#addressindex) to be enabled.

### Arguments

| Name | Type | Description | 
| ----------- | --------- | ------------------------------- |
| "address"   | (string)  | the address                     |
| "chainInfo" | (boolean) | include chain info with results |

### Response

| Name | Type | Description | 
| ------------- | -------- | ------------------------------------ |
| "address"     | (string) | the address                          |
| "txid"        | (string) | the output txid                      |
| "height"      | (number) | the block height                     |
| "outputIndex" | (number) | the output index                     |
| "script"      | (string) | the script hex encoded               |
| "satoshis"    | (number) | the number of satoshis of the output |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getaddressutxos '{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"]}'
```


<collapse-text hidden title="Response">


```json
[
  {
    "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb",
    "txid": "2a3c3664851370ff762b47d735cc661e3dbce4cf36b6c1b74799f3b1c847bd52",
    "outputIndex": 0,
    "script": "2102e0d9ea73a391400ed2cb090e029d3f03eda0efaf371da11f436c076d817025e4ac",
    "satoshis": 10000,
    "height": 3
  }
]
```

</collapse-text>


Command:

```bash
./komodo-cli getaddressutxos '{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"], "chainInfo": true}'

```


<collapse-text hidden title="Response">


```json
{
  "utxos": [
    {
      "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb",
      "txid": "2a3c3664851370ff762b47d735cc661e3dbce4cf36b6c1b74799f3b1c847bd52",
      "outputIndex": 0,
      "script": "2102e0d9ea73a391400ed2cb090e029d3f03eda0efaf371da11f436c076d817025e4ac",
      "satoshis": 10000,
      "height": 3
    }
  ],
  "hash": "0dd66ee1f151c38f73843378c08715ee3f4d3cf2888783e2846b81c057987084",
  "height": 398
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressutxos", "params": [{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    {
      "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb",
      "txid": "2a3c3664851370ff762b47d735cc661e3dbce4cf36b6c1b74799f3b1c847bd52",
      "outputIndex": 0,
      "script": "2102e0d9ea73a391400ed2cb090e029d3f03eda0efaf371da11f436c076d817025e4ac",
      "satoshis": 10000,
      "height": 3
    }
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressutxos", "params": [{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"], "chainInfo": true}] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "utxos": [
      {
        "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb",
        "txid": "2a3c3664851370ff762b47d735cc661e3dbce4cf36b6c1b74799f3b1c847bd52",
        "outputIndex": 0,
        "script": "2102e0d9ea73a391400ed2cb090e029d3f03eda0efaf371da11f436c076d817025e4ac",
        "satoshis": 10000,
        "height": 3
      }
    ],
    "hash": "0dd66ee1f151c38f73843378c08715ee3f4d3cf2888783e2846b81c057987084",
    "height": 398
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getsnapshot

**getsnapshot top**

The `getsnapshot` method returns a snapshot of addresses and their amounts at the asset chain's current height. 

The method requires [addressindex](../installations/common-runtime-parameters.html#addressindex) to be enabled.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | ---------------------------------------------------- |
| "top"     | (number, optional) | Only return this many addresses, i.e. top N rich list |

### Response

| Name | Type | Description | 
| ----------------- | ---------------- | --------------------------------------------------- |
| "addresses"       | (array of jsons) | the array containing the address and amount details |
| "addr"            | (string)         | an address                                          |
| "amount"          | (number)         | the amount of coins in the above address            |
| "total"           | (numeric)        | the total amount in snapshot                        |
| "average"         | (numeric)        | the average amount in each address                  |
| "utxos"           | (number)         | the total number of utxos in snapshot               |
| "total_addresses" | (number)         | the total number of addresses in snapshot,          |
| "start_height"    | (number)         | the block height snapshot began                     |
| "ending_height"   | (number)         | the block height snapshot finished,                 |
| "start_time"      | (number)         | the unix epoch time snapshot started                |
| "end_time"        | (number)         | the unix epoch time snapshot finished               |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getsnapshot 5
```


<collapse-text hidden title="Response">


```json
{
  "start_time": 1552473201,
  "addresses": [
    {
      "addr": "RRyyejME7LRTuvdziWsXkAbSW1fdiohGwK",
      "amount": "6193787.46198546",
      "segid": 13
    },
    {
      "addr": "RNaNh2fDvnoimuFGSFtp2c6xb5pN7mMWQV",
      "amount": "6169247.09074260",
      "segid": 44
    },
    {
      "addr": "RTu3JZZKLJTcfNwBa19dWRagEfQq49STqC",
      "amount": "5124337.23955756",
      "segid": 61
    },
    {
      "addr": "RBpEnyzuQNj1hNdAG1pKLALpAWEUS67PBj",
      "amount": "3029259.10629025",
      "segid": 24
    },
    {
      "addr": "RCyANUW2H5985zk8p6NHJfPyNBXnTVzGDh",
      "amount": "2700034.72826615",
      "segid": 48
    }
  ],
  "total": 23216665.62684202,
  "average": 4643333,
  "utxos": 2416430,
  "total_addresses": 5,
  "ignored_addresses": 31,
  "start_height": 1266933,
  "ending_height": 1266933,
  "end_time": 1552473348
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getsnapshot", "params": ["5"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "start_time": 1552473714,
    "addresses": [
      {
        "addr": "RRyyejME7LRTuvdziWsXkAbSW1fdiohGwK",
        "amount": "6193787.46198546",
        "segid": 13
      },
      {
        "addr": "RNaNh2fDvnoimuFGSFtp2c6xb5pN7mMWQV",
        "amount": "6169247.09074260",
        "segid": 44
      },
      {
        "addr": "RTu3JZZKLJTcfNwBa19dWRagEfQq49STqC",
        "amount": "5124337.23955756",
        "segid": 61
      },
      {
        "addr": "RBpEnyzuQNj1hNdAG1pKLALpAWEUS67PBj",
        "amount": "3029259.10629025",
        "segid": 24
      },
      {
        "addr": "RCyANUW2H5985zk8p6NHJfPyNBXnTVzGDh",
        "amount": "2700034.72826615",
        "segid": 48
      }
    ],
    "total": 23216665.62684202,
    "average": 4643333,
    "utxos": 2416443,
    "total_addresses": 5,
    "ignored_addresses": 31,
    "start_height": 1266941,
    "ending_height": 1266941,
    "end_time": 1552473829
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>

# Blockchain

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## coinsupply

**coinsupply height**

The `coinsupply` method returns the coin supply information for the indicated block `height`. If no height is given, the method defaults to the blockchain's current height.

::: tip
To use this method for large block heights, first execute the method for a small block height, such as `1000`. Then execute the method for an incrementally higher block height, such as `10000`. Continue increasing the height until reaching the desired height.
:::

### Arguments

| Name | Type | Description | 
| --------- | ------------------- | ------------------------ |
| "height"  | (integer, optional) | the desired block height |

### Response

| Name | Type | Description | 
| --------- | --------- | ------------------------------------------------------------- |
| "result"  | (string)  | whether the request was successful                            |
| "coin"    | (string)  | the ticker symbol of the coin for asset chains, otherwise KMD |
| "height"  | (integer) | the height of this coin supply data                           |
| "supply"  | (float)   | the transparent coin supply                                   |
| "zfunds"  | (float)   | the shielded coin supply (in `z`addrs)                        |
| "sprout"  | (float)   | the sprout coin supply (in `zc`addrs)                         |
| "total"   | (float)   | the total coin supply, i.e. `sum of supply + zfunds`          |

#### :pushpin: Examples

Command:

```bash
./komodo-cli coinsupply 80000
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "coin": "KMD",
  "height": 80000,
  "supply": 100239878.15241314,
  "zfunds": 86.999868,
  "sprout": 86.999868,
  "total": 100239965.15228114
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "coinsupply", "params": ["80000"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "result": "success",
    "coin": "KMD",
    "height": 80000,
    "supply": 100239878.15241314,
    "zfunds": 86.999868,
    "sprout": 86.999868,
    "total": 100239965.15228114
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getbestblockhash

**getbestblockhash**

The `getbestblockhash` method returns the hash of the best (tip) block in the longest block chain.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |             |

### Response

| Name | Type | Description | 
| --------- | -------- | --------------------------- |
| "hex"     | (string) | the block hash, hex encoded |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getbestblockhash
```


<collapse-text hidden title="Response">


```json
0dd66ee1f151c38f73843378c08715ee3f4d3cf2888783e2846b81c057987084
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getbestblockhash", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "0dd66ee1f151c38f73843378c08715ee3f4d3cf2888783e2846b81c057987084",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getblock

**getblock hash|height ( verbose )**

The `getblock` method returns the block's relevant state information.

The verbose input is optional. The default value is true, and it will return a json object with information about the indicated block. If verbose is `false`, the command returns a string that is serialized hex-encoded data for the indicated block.

### Arguments

| Name | Type | Description | 
| ---------------- | --------------------------------- | ---------------------------------------------------------- |
| hash `OR` height | string `OR` number, respectively  | the block hash `OR` the block height                       |
| verbose          | (boolean, optional, default=true) | true returns a json object, false returns hex-encoded data |

### Response (verbose = true)

| Name | Type | Description | 
| ------------------------------- | ------------------ | --------------------------------------------------------------------------------------------------------------------------------- |
| "hash"                          | (string)           | the block hash (same as provided hash)                                                                                            |
| "confirmations"                 | (numeric)          | a confirmation number that is dPoW aware; see this [article](https://docs.komodoplatform.com/komodo/dPOW-conf.html) for more info |
| "rawconfirmations"              | (numeric)          | the raw confirmations (number of blocks on top of this block); the returned value is `-1` if the block is not on the main chain   |
| "size"                          | (numeric)          | the block size                                                                                                                    |
| "height"                        | (numeric)          | the block height or index (same as provided height)                                                                               |
| "version"                       | (numeric)          | the block version                                                                                                                 |
| "merkleroot"                    | (string)           | the merkle root                                                                                                                   |
| "tx" : [ "transaction_id" ,...] | (array of strings) |
| "time"                          | (numeric)          | the block time in seconds since epoch (Jan 1 1970 GMT)                                                                            |
| "nonce"                         | (numeric)          | the nonce                                                                                                                         |
| "bits"                          | (string)           | the bits                                                                                                                          |
| "difficulty"                    | (numeric)          | the difficulty                                                                                                                    |
| "previousblockhash"             | (string)           | the hash of the previous block                                                                                                    |
| "nextblockhash"                 | (string)           | the hash of the next block                                                                                                        |

### Response

| Name | Type | Description | 
| --------- | -------- | --------------------------------------------------------------------- |
| "data"    | (string) | a string that is serialized, hex-encoded data for the indicated block |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getblock "0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320"
```


<collapse-text hidden title="Response">


```json
{
  "hash": "0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320",
  "confirmations": 1,
  "rawconfirmations": 1,
  "size": 26321,
  "height": 1268723,
  "version": 4,
  "merkleroot": "9cdd912d6aa82a5f55db4a79bb2181a74485df386c80e3936ce46d6e35f64d78",
  "segid": -1,
  "finalsaplingroot": "1ccce5445c492209c1d6e3e0bf21711e6f4012fddb724073dca473eb34a7d8a2",
  "tx": [
    "d500535236301413318ca05abc99a3136b3f72111ab06683f0e03ded15ec5663",
    "d7f9b34ad3e86f48fce55dbec1f2925b8dcbd15199977fd75d224254db9ae80d",
    "29939ca572cc61ddb67dbeab4e17c885213c367231cfc02419d5c9f44d2a92e0",
    "7ed658dbb045195f5dd39a2e4c0e9e70c4d1088fde446f563d297612401a61b1",
    "bdbc36996104f8b33bd5c82c678493bddf8d562bb5c8f5d796ace8b09b21d6a8",
    "c89e4bcb285b97f3da9ffcb43bb8e300fb3a3911352f47495730c75cabe04ff0",
    "9ee811357a9d4ed1d3844b426dd5fd8fcb386336d65eddae488ac8d1fc2af69b",
    "89c2c61ed95901714dac57bc8720e436af0fe156bece05da1e894fd96e029f77",
    "c3b308f768bcc3c748a12d8883176b4ff3e44bd5fab42b06306e281804c7c8ba",
    "a8cdac6943562ac051bed5c6cd6e515498c4ccbc5389580dce2f58ff0e103ba5",
    "f310e661ab39ff600ec2c98e9c0afd2f0652ce14c423fcf8d13a8e25616b0580",
    "a077fab812d8a35c998e3178fa945c2575dc5010d703960f71f16989d6f858de",
    "ca0672f70d5f668d806a8265fd607237ab718b66fb4c67a841fd7677ed5b208a",
    "40670bb9ee51a9370d8849f58ed219aa42a5206b46281dd8639ddf8a30e22316",
    "ae980edde333720483cb6db0f633e2d3825e9aa1d46a0db67faad3a56f7c8e7f",
    "a8f81af1e3cf7dee220a8348f0addd33cd961ca640a79dee0eb64ead9c566c1e",
    "2250c19f3ae06625644b8b3a455c323a44d2ca5746fe5b3671941e56d20be613"
  ],
  "time": 1552582977,
  "nonce": "000054c888f9f2c08f1b0112d10ab6b739fc7f0f324dd15277efc3eaa634000a",
  "solution": "00bfd611d3c531f8a3e962cd46d62109685518a2ed078c0ea1ed4b555db2ed5108603aaedd3ee98ac463084a50d2080a9384a1bb718053a08a55507fce56b83694930194e91bab7260b79bfffd520e5d973c2c9e01221b74d7544383712ca1033ea2caaa499efdf59e06c3f423689c7a7b7a2f5345cbcae6f26afdb7d8300462848ffb1ae69f2f11f13d3f52ebac8aca51f6721a056d8ac5525517ca4079442fdac19ac0b5f7b66004b8448286090b4b29f390b58272157eaa733d011d14cfcaa19813b692e5057556a35dc86e0da613f46605ba7f4ec88ddec30ead8b4b5df032bef638da39092a7d39661723d0b7ea07a5d6fd422fcf423efdd1a90ad094c444481ae950dc41e02d20044555623cec5b2679873fa44ef75acf1c592ca96765f28f3b5f853219b1b140e2467aef56e5b71aca6a4a86d9c918504b2758fbcc8812b9332f7fe52309e95d455f9a7e49c300f17511590fd33befc370e5a5619602732299dad7227e21e4271f6767873a43132dc08c4d488a310c7105b2a45d4536bff1b7cb70f0d68f5e996050cc55da23bf86fb3ad10e3b9028a48a8ef2376a2c2039210409d5b85a922dbe3d7ddbd399e632435957a776c9bc0a77ad8a62d623f0f15df49e543d869d51790cadee496b36bf6368ebb568ed69cf3578913aa097f99eb86b2e2701691bba85fc7d383aede90317877cdcaa4803610fea9d42729635cc623cb7397279c426fb5cee0cab13f3a217a456cd61a34dbc5990cde5de55b0ac12e8429a2e586298f3e8313febe6e6b1f590f885432433aac18d6e7b7b99f3425720d35b30d8b234475c04f09951df512cfc947fb4237cd0279ad276f86de910c30b79da45b7e76531f4bce2e8d03dfbbf11ee5712c9c92c69a96d69b05cb18e418f4e98b3c067e5cb19de2375865b51450a79e80a4fc5a5c716b0bee64b0256542f0a6f9871c02656d90846dca9fb381519682397514f522b3045ce88744f2b5af53d51b4bac3d409139a6b588309e90bbc836ea079e4e4eed7eae7ab0f1871bd6aee35cd7637d3525153ca2d77c1eebc010a5a905e8ed9b97bb18427592c60bd52c13e7e7fa5191323a5f6b03b4dbf2074edf97087b6340ab3dcc11a56bb04c89a22e2f6f8c27123561800e55e1afae61abd2c2809ddf3fbad93e372e2d1febf6f2e9f7e7a0489069e7a927e37025b32661b9c0fc576ac2dd3db4fe79331e4a48ff54c848a45a7679fdee69899af2320a5cd338b8f15f732d353a95ecf16ed82290d073f22381bc7d81743b7ea8343ac20c25fda4f179f142f10a2a2f6f556cc12de3c728a1ae005ed954752558c1a81ff709ea10f49b80774eca5bcf681a7dc2e5101151c95f94fc80df2ecd9c334ed75195a81bc7a0bfe1af5c3f7703de3dff447f338d819d789a725dcac6c028f0a9a43cc8fd140abb0d40a630a84fbdd751c2a08c28f7fd1d376f98c0fc418f4f0929de03f3038640388abc0ee44a14d7094130e0b503a61a6229f10891ab90dc9c9cc76469c0ab30f7fca9386760676194e04a8db6d2506ecaba8e800bccbe2ddc53d46b9771307445efbf15454e35f5a30bb4cf9aedd129bacd19d05c63645c9589e73829ba5abd87e0bee0fccbb06e4214acbee7c240d1586e05a9a50f0661712e4dc9e71050b36dbc7133bfd32df2cc8ddf9356fd4701f37f32635d3a7be0a50b6d6b85597d95a948df1f91a58a70a221cdc1e880ce1a54644ec91eabd7625497f02e02b291381978ccbdd4761e3ca0128efa146a0ea4e9a13003bc1558db863c2a183460455a0560bc75c7f061449714ddc5431458483630fc3ff769e78c71901ea1e516e5fe04cd0a553f5f2403afaef2e33c31eb55d326c030d76e188676099b5b9f43f100afe25994feb",
  "bits": "1d01e71c",
  "difficulty": 132777470.6040096,
  "chainwork": "000000000000000000000000000000000000000000000000000241daab323e77",
  "anchor": "4e43e43d3569c1155cc9340f46b58425e3d86890076739f19298bc66e6a7acf2",
  "blocktype": "mined",
  "valuePools": [
    {
      "id": "sprout",
      "monitored": true,
      "chainValue": 84948.93692198,
      "chainValueZat": 8494893692198,
      "valueDelta": 0.0,
      "valueDeltaZat": 0
    },
    {
      "id": "sapling",
      "monitored": true,
      "chainValue": 3.07618319,
      "chainValueZat": 307618319,
      "valueDelta": 0.0,
      "valueDeltaZat": 0
    }
  ],
  "previousblockhash": "0474f6be4f1efb132cfedc252559ef3aee166e6bb58e99160edcf029d13f8017"
}
```

</collapse-text>


Command:

```bash
./komodo-cli getblock "0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320" false
```


<collapse-text hidden title="Response">


```bash

```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblock", "params": ["0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "hash": "0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320",
    "confirmations": 1,
    "rawconfirmations": 5,
    "size": 26321,
    "height": 1268723,
    "version": 4,
    "merkleroot": "9cdd912d6aa82a5f55db4a79bb2181a74485df386c80e3936ce46d6e35f64d78",
    "segid": -1,
    "finalsaplingroot": "1ccce5445c492209c1d6e3e0bf21711e6f4012fddb724073dca473eb34a7d8a2",
    "tx": [
      "d500535236301413318ca05abc99a3136b3f72111ab06683f0e03ded15ec5663",
      "d7f9b34ad3e86f48fce55dbec1f2925b8dcbd15199977fd75d224254db9ae80d",
      "29939ca572cc61ddb67dbeab4e17c885213c367231cfc02419d5c9f44d2a92e0",
      "7ed658dbb045195f5dd39a2e4c0e9e70c4d1088fde446f563d297612401a61b1",
      "bdbc36996104f8b33bd5c82c678493bddf8d562bb5c8f5d796ace8b09b21d6a8",
      "c89e4bcb285b97f3da9ffcb43bb8e300fb3a3911352f47495730c75cabe04ff0",
      "9ee811357a9d4ed1d3844b426dd5fd8fcb386336d65eddae488ac8d1fc2af69b",
      "89c2c61ed95901714dac57bc8720e436af0fe156bece05da1e894fd96e029f77",
      "c3b308f768bcc3c748a12d8883176b4ff3e44bd5fab42b06306e281804c7c8ba",
      "a8cdac6943562ac051bed5c6cd6e515498c4ccbc5389580dce2f58ff0e103ba5",
      "f310e661ab39ff600ec2c98e9c0afd2f0652ce14c423fcf8d13a8e25616b0580",
      "a077fab812d8a35c998e3178fa945c2575dc5010d703960f71f16989d6f858de",
      "ca0672f70d5f668d806a8265fd607237ab718b66fb4c67a841fd7677ed5b208a",
      "40670bb9ee51a9370d8849f58ed219aa42a5206b46281dd8639ddf8a30e22316",
      "ae980edde333720483cb6db0f633e2d3825e9aa1d46a0db67faad3a56f7c8e7f",
      "a8f81af1e3cf7dee220a8348f0addd33cd961ca640a79dee0eb64ead9c566c1e",
      "2250c19f3ae06625644b8b3a455c323a44d2ca5746fe5b3671941e56d20be613"
    ],
    "time": 1552582977,
    "nonce": "000054c888f9f2c08f1b0112d10ab6b739fc7f0f324dd15277efc3eaa634000a",
    "solution": "00bfd611d3c531f8a3e962cd46d62109685518a2ed078c0ea1ed4b555db2ed5108603aaedd3ee98ac463084a50d2080a9384a1bb718053a08a55507fce56b83694930194e91bab7260b79bfffd520e5d973c2c9e01221b74d7544383712ca1033ea2caaa499efdf59e06c3f423689c7a7b7a2f5345cbcae6f26afdb7d8300462848ffb1ae69f2f11f13d3f52ebac8aca51f6721a056d8ac5525517ca4079442fdac19ac0b5f7b66004b8448286090b4b29f390b58272157eaa733d011d14cfcaa19813b692e5057556a35dc86e0da613f46605ba7f4ec88ddec30ead8b4b5df032bef638da39092a7d39661723d0b7ea07a5d6fd422fcf423efdd1a90ad094c444481ae950dc41e02d20044555623cec5b2679873fa44ef75acf1c592ca96765f28f3b5f853219b1b140e2467aef56e5b71aca6a4a86d9c918504b2758fbcc8812b9332f7fe52309e95d455f9a7e49c300f17511590fd33befc370e5a5619602732299dad7227e21e4271f6767873a43132dc08c4d488a310c7105b2a45d4536bff1b7cb70f0d68f5e996050cc55da23bf86fb3ad10e3b9028a48a8ef2376a2c2039210409d5b85a922dbe3d7ddbd399e632435957a776c9bc0a77ad8a62d623f0f15df49e543d869d51790cadee496b36bf6368ebb568ed69cf3578913aa097f99eb86b2e2701691bba85fc7d383aede90317877cdcaa4803610fea9d42729635cc623cb7397279c426fb5cee0cab13f3a217a456cd61a34dbc5990cde5de55b0ac12e8429a2e586298f3e8313febe6e6b1f590f885432433aac18d6e7b7b99f3425720d35b30d8b234475c04f09951df512cfc947fb4237cd0279ad276f86de910c30b79da45b7e76531f4bce2e8d03dfbbf11ee5712c9c92c69a96d69b05cb18e418f4e98b3c067e5cb19de2375865b51450a79e80a4fc5a5c716b0bee64b0256542f0a6f9871c02656d90846dca9fb381519682397514f522b3045ce88744f2b5af53d51b4bac3d409139a6b588309e90bbc836ea079e4e4eed7eae7ab0f1871bd6aee35cd7637d3525153ca2d77c1eebc010a5a905e8ed9b97bb18427592c60bd52c13e7e7fa5191323a5f6b03b4dbf2074edf97087b6340ab3dcc11a56bb04c89a22e2f6f8c27123561800e55e1afae61abd2c2809ddf3fbad93e372e2d1febf6f2e9f7e7a0489069e7a927e37025b32661b9c0fc576ac2dd3db4fe79331e4a48ff54c848a45a7679fdee69899af2320a5cd338b8f15f732d353a95ecf16ed82290d073f22381bc7d81743b7ea8343ac20c25fda4f179f142f10a2a2f6f556cc12de3c728a1ae005ed954752558c1a81ff709ea10f49b80774eca5bcf681a7dc2e5101151c95f94fc80df2ecd9c334ed75195a81bc7a0bfe1af5c3f7703de3dff447f338d819d789a725dcac6c028f0a9a43cc8fd140abb0d40a630a84fbdd751c2a08c28f7fd1d376f98c0fc418f4f0929de03f3038640388abc0ee44a14d7094130e0b503a61a6229f10891ab90dc9c9cc76469c0ab30f7fca9386760676194e04a8db6d2506ecaba8e800bccbe2ddc53d46b9771307445efbf15454e35f5a30bb4cf9aedd129bacd19d05c63645c9589e73829ba5abd87e0bee0fccbb06e4214acbee7c240d1586e05a9a50f0661712e4dc9e71050b36dbc7133bfd32df2cc8ddf9356fd4701f37f32635d3a7be0a50b6d6b85597d95a948df1f91a58a70a221cdc1e880ce1a54644ec91eabd7625497f02e02b291381978ccbdd4761e3ca0128efa146a0ea4e9a13003bc1558db863c2a183460455a0560bc75c7f061449714ddc5431458483630fc3ff769e78c71901ea1e516e5fe04cd0a553f5f2403afaef2e33c31eb55d326c030d76e188676099b5b9f43f100afe25994feb",
    "bits": "1d01e71c",
    "difficulty": 132777470.6040096,
    "chainwork": "000000000000000000000000000000000000000000000000000241daab323e77",
    "anchor": "4e43e43d3569c1155cc9340f46b58425e3d86890076739f19298bc66e6a7acf2",
    "blocktype": "mined",
    "valuePools": [
      {
        "id": "sprout",
        "monitored": true,
        "chainValue": 84948.93692198,
        "chainValueZat": 8494893692198,
        "valueDelta": 0.0,
        "valueDeltaZat": 0
      },
      {
        "id": "sapling",
        "monitored": true,
        "chainValue": 3.07618319,
        "chainValueZat": 307618319,
        "valueDelta": 0.0,
        "valueDeltaZat": 0
      }
    ],
    "previousblockhash": "0474f6be4f1efb132cfedc252559ef3aee166e6bb58e99160edcf029d13f8017",
    "nextblockhash": "000000003331516a9b135e3273ebad53a60921e5d3132fe7d596f5903337f504"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblock", "params": ["0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320", false] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


Command:

```bash
./komodo-cli getblock 120
```


<collapse-text hidden title="Response">


```json
{
  "hash": "028d455c8b61d4ee5959e2d3d6e6b60d4d779e0ba8b0e1c093e9443ba5c42179",
  "confirmations": 1268619,
  "rawconfirmations": 1268619,
  "size": 1587,
  "height": 120,
  "version": 4,
  "merkleroot": "d390975e989394e046ef0000f47367fa59e96cb9a4ddfa930a3a378689060149",
  "segid": -1,
  "finalsaplingroot": "0000000000000000000000000000000000000000000000000000000000000000",
  "tx": ["d390975e989394e046ef0000f47367fa59e96cb9a4ddfa930a3a378689060149"],
  "time": 1473825108,
  "nonce": "000078d1eba5ea592b0c1a6728f86df449ee17bd64cb14cd246481d18a830003",
  "solution": "003f9ef9cf78d687c8e4c56f98d2afc5670c34ce0a0d4c72c2115bd70dddf803535f9cf11343a47b4ec30642354007ab856b9942c21e4f47ee8cb9c6f268160eccea157f0a0f3678cfe107569d998d0d959c0c52047220911125802f7d2b9221ab33fd708b429db55319e6750b65076d9e7ca522a221bfff98b6278938742616a7b2e89fb3e9ce7d645e29c1de7d4425d6a339512072b53f9d430f1dca491f0cf00c8ab5f116dc2204a97ff65553a41d43fef0f4b6f0621c6fbe580db218bf2fb241749995b5e2129e1ef5fa40b293cf47570724bf202055255988f47526d95121b1e6e7b9364814af7b4eaaf4e0dfc11ea4a253341b96e70bb92d2305d96e1c5c08bafcb13d20c3e7b9f8d3298979fff112c400f0c3d2a335118da25c42d035f898c8b728f034c414f8281b09f1d0b6754894e9f72285273b1711363c4583079344910dbd9705cde8534efbb838de7f008321268318e68b08bd524952b0d42cbedb3a50e03d5b4d560f370f95d7a43657ca56a83b73bdbd22a9124018f23f154319cc1d0520a150edf6748539074a2164be459b2077afca94638f0f45d29f6f42fcf05301d9581f944a137dfd5f80eac5df99f6b4129f23d50c65fc2231791525dc1523c8b64c6df55cdfdfdbc70b8b811c2b0e9e554ba113f238edcb392bf1cdc9e918a4df7e1ce21a138e9501b6eac8ab889793fda38d02a99bf74f6281e1d55be1ff729fc215529f94e7892b7686e1829bdb0fd432b780b4e28a6e5b973e1b04137f75b0ff1786f1562402adfad8476981a3b23a1b3251c54ca9538d5b4927e8bdc2c72d62fd705eab750a810d6c2b928477849f252afff9330e3d34be4ffe5d79fea92f19d10d3627862754df6449c71e5ffe69276731c9e00ab91ab747a5c0b2ba19a9be4872becb3510b248de5bbd5fc1b5735b65d2b5f36c18dcf30300b50f20b6c3e79114505044ccca604f9f6fde0d460bfc220a4c450d93e5dde0eaebc747c1b3f3349d5705e80d9afdc200d6981a131c3fc80fd19ae3d44bbc305f7fd5c5d03011f1a489460d55ccbaef7d9fb8dc0148ab399b4e38b1ef19c2083766563dcd8af8e8f42629cd72d6d956b374a1e59800f75435e362d2b1e95ba834ad2434b26be7f33670d3e7e54da5d8766ad86d13d61536a587e99414ea34847599cf9d92fe92dc079a920c7492067115a874eb98e5f36632a2d30ba5114625cd04497f5d413dc2add3cdd8fa4eb2f641b210f38541380e3d00a175462a9fe107d2dad559d9e317490d9ad489d7ff3e2b32f9fe3d98015b86fc45aa07d5e0614f8bd123b4e0960690c8e846eafa3b34f016a9418752c9942edb83e1783df05fb653cadfae0c18e604702d5f328b4ccf01d17c22e7f2f0ddfb3ef9395267dbc3170f8366a7144310e015ea6d763d769c01c40fc516d97614f18504c59ced8a9fa749ffeacd02cd47072a0564c5748a30dca894c1904f53ab606a0789d1809adabb01f6fe486e9e6d20f3d5f63f91c02428fc74a6e608a345bf2543ed7646c9af6a7709ba0aa38af74f0a12a33febc30ea39ecde221613d62b60c701974dae2dcbfb81d10ec39229e23c2c2fe6d970f10ddfb16049ee86c36f1546af704808b596566cc1b85dc6e40df0a29488be1feac3d13c1140998d6c303600b7fe207c62fd7ca13431e2be09e3c01fe6bb803a1e84e8160c31539d6588ffc6e6ece38a9d890611f3f0108ef60333da3d37224d2732b366aac75603125203fedc5e1d5ad1918e30dbd59e8ae516cbbf9e30e5fcbf314db2263a0598d3a35f5aa4f732bdf01cf313424422cede953ec45a7945f563b6f2294fa5960185f5f626056d141194775b00e5051ab7c0fbccaff3607825491da72f73dd3c3da17ae65d52053fb6a6d",
  "bits": "200f0f0f",
  "difficulty": 1,
  "chainwork": "0000000000000000000000000000000000000000000000000000000000000809",
  "anchor": "59d2cde5e65c1414c32ba54f0fe4bdb3d67618125286e6a191317917c812c6d7",
  "blocktype": "mined",
  "valuePools": [
    {
      "id": "sprout",
      "monitored": true,
      "chainValue": 0.0,
      "chainValueZat": 0,
      "valueDelta": 0.0,
      "valueDeltaZat": 0
    },
    {
      "id": "sapling",
      "monitored": true,
      "chainValue": 0.0,
      "chainValueZat": 0,
      "valueDelta": 0.0,
      "valueDeltaZat": 0
    }
  ],
  "previousblockhash": "009ccd7da3a2c6212b56147b5491773bde944bb6169160d88dc5879a9e005087",
  "nextblockhash": "06ea921ade69ca13f8a2220ed6633f35ed6afd94368c404e7cbdee374c7c11d6"
}
```

</collapse-text>


Command:

```bash
./komodo-cli getblock 120 false
```


<collapse-text hidden title="Response">


```bash
040000008750009e9a87c58dd8609116b64b94de3b7791547b14562b21c6a2a37dcd9c004901068986373a0a93fadda4b96ce959fa6773f40000ef46e09493985e9790d3000000000000000000000000000000000000000000000000000000000000000054c9d8570f0f0f200300838ad1816424cd14cb64bd17ee49f46df828671a0c2b59eaa5ebd1780000fd4005003f9ef9cf78d687c8e4c56f98d2afc5670c34ce0a0d4c72c2115bd70dddf803535f9cf11343a47b4ec30642354007ab856b9942c21e4f47ee8cb9c6f268160eccea157f0a0f3678cfe107569d998d0d959c0c52047220911125802f7d2b9221ab33fd708b429db55319e6750b65076d9e7ca522a221bfff98b6278938742616a7b2e89fb3e9ce7d645e29c1de7d4425d6a339512072b53f9d430f1dca491f0cf00c8ab5f116dc2204a97ff65553a41d43fef0f4b6f0621c6fbe580db218bf2fb241749995b5e2129e1ef5fa40b293cf47570724bf202055255988f47526d95121b1e6e7b9364814af7b4eaaf4e0dfc11ea4a253341b96e70bb92d2305d96e1c5c08bafcb13d20c3e7b9f8d3298979fff112c400f0c3d2a335118da25c42d035f898c8b728f034c414f8281b09f1d0b6754894e9f72285273b1711363c4583079344910dbd9705cde8534efbb838de7f008321268318e68b08bd524952b0d42cbedb3a50e03d5b4d560f370f95d7a43657ca56a83b73bdbd22a9124018f23f154319cc1d0520a150edf6748539074a2164be459b2077afca94638f0f45d29f6f42fcf05301d9581f944a137dfd5f80eac5df99f6b4129f23d50c65fc2231791525dc1523c8b64c6df55cdfdfdbc70b8b811c2b0e9e554ba113f238edcb392bf1cdc9e918a4df7e1ce21a138e9501b6eac8ab889793fda38d02a99bf74f6281e1d55be1ff729fc215529f94e7892b7686e1829bdb0fd432b780b4e28a6e5b973e1b04137f75b0ff1786f1562402adfad8476981a3b23a1b3251c54ca9538d5b4927e8bdc2c72d62fd705eab750a810d6c2b928477849f252afff9330e3d34be4ffe5d79fea92f19d10d3627862754df6449c71e5ffe69276731c9e00ab91ab747a5c0b2ba19a9be4872becb3510b248de5bbd5fc1b5735b65d2b5f36c18dcf30300b50f20b6c3e79114505044ccca604f9f6fde0d460bfc220a4c450d93e5dde0eaebc747c1b3f3349d5705e80d9afdc200d6981a131c3fc80fd19ae3d44bbc305f7fd5c5d03011f1a489460d55ccbaef7d9fb8dc0148ab399b4e38b1ef19c2083766563dcd8af8e8f42629cd72d6d956b374a1e59800f75435e362d2b1e95ba834ad2434b26be7f33670d3e7e54da5d8766ad86d13d61536a587e99414ea34847599cf9d92fe92dc079a920c7492067115a874eb98e5f36632a2d30ba5114625cd04497f5d413dc2add3cdd8fa4eb2f641b210f38541380e3d00a175462a9fe107d2dad559d9e317490d9ad489d7ff3e2b32f9fe3d98015b86fc45aa07d5e0614f8bd123b4e0960690c8e846eafa3b34f016a9418752c9942edb83e1783df05fb653cadfae0c18e604702d5f328b4ccf01d17c22e7f2f0ddfb3ef9395267dbc3170f8366a7144310e015ea6d763d769c01c40fc516d97614f18504c59ced8a9fa749ffeacd02cd47072a0564c5748a30dca894c1904f53ab606a0789d1809adabb01f6fe486e9e6d20f3d5f63f91c02428fc74a6e608a345bf2543ed7646c9af6a7709ba0aa38af74f0a12a33febc30ea39ecde221613d62b60c701974dae2dcbfb81d10ec39229e23c2c2fe6d970f10ddfb16049ee86c36f1546af704808b596566cc1b85dc6e40df0a29488be1feac3d13c1140998d6c303600b7fe207c62fd7ca13431e2be09e3c01fe6bb803a1e84e8160c31539d6588ffc6e6ece38a9d890611f3f0108ef60333da3d37224d2732b366aac75603125203fedc5e1d5ad1918e30dbd59e8ae516cbbf9e30e5fcbf314db2263a0598d3a35f5aa4f732bdf01cf313424422cede953ec45a7945f563b6f2294fa5960185f5f626056d141194775b00e5051ab7c0fbccaff3607825491da72f73dd3c3da17ae65d52053fb6a6d0101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0401780101ffffffff0100a3e11100000000232103e0e548e1c42e3a1b26a414d33c8862e10799557d3758b981c921c776054deb53ac00000000
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblock", "params": ["120"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "hash": "028d455c8b61d4ee5959e2d3d6e6b60d4d779e0ba8b0e1c093e9443ba5c42179",
    "confirmations": 1268622,
    "rawconfirmations": 1268622,
    "size": 1587,
    "height": 120,
    "version": 4,
    "merkleroot": "d390975e989394e046ef0000f47367fa59e96cb9a4ddfa930a3a378689060149",
    "segid": -1,
    "finalsaplingroot": "0000000000000000000000000000000000000000000000000000000000000000",
    "tx": ["d390975e989394e046ef0000f47367fa59e96cb9a4ddfa930a3a378689060149"],
    "time": 1473825108,
    "nonce": "000078d1eba5ea592b0c1a6728f86df449ee17bd64cb14cd246481d18a830003",
    "solution": "003f9ef9cf78d687c8e4c56f98d2afc5670c34ce0a0d4c72c2115bd70dddf803535f9cf11343a47b4ec30642354007ab856b9942c21e4f47ee8cb9c6f268160eccea157f0a0f3678cfe107569d998d0d959c0c52047220911125802f7d2b9221ab33fd708b429db55319e6750b65076d9e7ca522a221bfff98b6278938742616a7b2e89fb3e9ce7d645e29c1de7d4425d6a339512072b53f9d430f1dca491f0cf00c8ab5f116dc2204a97ff65553a41d43fef0f4b6f0621c6fbe580db218bf2fb241749995b5e2129e1ef5fa40b293cf47570724bf202055255988f47526d95121b1e6e7b9364814af7b4eaaf4e0dfc11ea4a253341b96e70bb92d2305d96e1c5c08bafcb13d20c3e7b9f8d3298979fff112c400f0c3d2a335118da25c42d035f898c8b728f034c414f8281b09f1d0b6754894e9f72285273b1711363c4583079344910dbd9705cde8534efbb838de7f008321268318e68b08bd524952b0d42cbedb3a50e03d5b4d560f370f95d7a43657ca56a83b73bdbd22a9124018f23f154319cc1d0520a150edf6748539074a2164be459b2077afca94638f0f45d29f6f42fcf05301d9581f944a137dfd5f80eac5df99f6b4129f23d50c65fc2231791525dc1523c8b64c6df55cdfdfdbc70b8b811c2b0e9e554ba113f238edcb392bf1cdc9e918a4df7e1ce21a138e9501b6eac8ab889793fda38d02a99bf74f6281e1d55be1ff729fc215529f94e7892b7686e1829bdb0fd432b780b4e28a6e5b973e1b04137f75b0ff1786f1562402adfad8476981a3b23a1b3251c54ca9538d5b4927e8bdc2c72d62fd705eab750a810d6c2b928477849f252afff9330e3d34be4ffe5d79fea92f19d10d3627862754df6449c71e5ffe69276731c9e00ab91ab747a5c0b2ba19a9be4872becb3510b248de5bbd5fc1b5735b65d2b5f36c18dcf30300b50f20b6c3e79114505044ccca604f9f6fde0d460bfc220a4c450d93e5dde0eaebc747c1b3f3349d5705e80d9afdc200d6981a131c3fc80fd19ae3d44bbc305f7fd5c5d03011f1a489460d55ccbaef7d9fb8dc0148ab399b4e38b1ef19c2083766563dcd8af8e8f42629cd72d6d956b374a1e59800f75435e362d2b1e95ba834ad2434b26be7f33670d3e7e54da5d8766ad86d13d61536a587e99414ea34847599cf9d92fe92dc079a920c7492067115a874eb98e5f36632a2d30ba5114625cd04497f5d413dc2add3cdd8fa4eb2f641b210f38541380e3d00a175462a9fe107d2dad559d9e317490d9ad489d7ff3e2b32f9fe3d98015b86fc45aa07d5e0614f8bd123b4e0960690c8e846eafa3b34f016a9418752c9942edb83e1783df05fb653cadfae0c18e604702d5f328b4ccf01d17c22e7f2f0ddfb3ef9395267dbc3170f8366a7144310e015ea6d763d769c01c40fc516d97614f18504c59ced8a9fa749ffeacd02cd47072a0564c5748a30dca894c1904f53ab606a0789d1809adabb01f6fe486e9e6d20f3d5f63f91c02428fc74a6e608a345bf2543ed7646c9af6a7709ba0aa38af74f0a12a33febc30ea39ecde221613d62b60c701974dae2dcbfb81d10ec39229e23c2c2fe6d970f10ddfb16049ee86c36f1546af704808b596566cc1b85dc6e40df0a29488be1feac3d13c1140998d6c303600b7fe207c62fd7ca13431e2be09e3c01fe6bb803a1e84e8160c31539d6588ffc6e6ece38a9d890611f3f0108ef60333da3d37224d2732b366aac75603125203fedc5e1d5ad1918e30dbd59e8ae516cbbf9e30e5fcbf314db2263a0598d3a35f5aa4f732bdf01cf313424422cede953ec45a7945f563b6f2294fa5960185f5f626056d141194775b00e5051ab7c0fbccaff3607825491da72f73dd3c3da17ae65d52053fb6a6d",
    "bits": "200f0f0f",
    "difficulty": 1,
    "chainwork": "0000000000000000000000000000000000000000000000000000000000000809",
    "anchor": "59d2cde5e65c1414c32ba54f0fe4bdb3d67618125286e6a191317917c812c6d7",
    "blocktype": "mined",
    "valuePools": [
      {
        "id": "sprout",
        "monitored": true,
        "chainValue": 0.0,
        "chainValueZat": 0,
        "valueDelta": 0.0,
        "valueDeltaZat": 0
      },
      {
        "id": "sapling",
        "monitored": true,
        "chainValue": 0.0,
        "chainValueZat": 0,
        "valueDelta": 0.0,
        "valueDeltaZat": 0
      }
    ],
    "previousblockhash": "009ccd7da3a2c6212b56147b5491773bde944bb6169160d88dc5879a9e005087",
    "nextblockhash": "06ea921ade69ca13f8a2220ed6633f35ed6afd94368c404e7cbdee374c7c11d6"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblock", "params": ["120", false] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "04000000285e37c2190d03bdc2395fcd05226bc25de50adf3f46363bc579e050efbfd1013163caf3ad654ee90412d51e6d77b559ae912397ae89df7c6d4fe1f7fbce81470000000000000000000000000000000000000000000000000000000000000000f2ce925b080f0f200b00ea624b040b9c73b7d68ecdf8caf81c513f9aa8679a3172b52b82c55400002403fc1abba5f415b1c422942835d46c7ba3e94665964da4c31e236c6cf9b3dfe6ffb65db10101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0401780101ffffffff011027000000000000232103c0259e1a166e53f6ccf094ce37c0843d4a013622603bc301b4eb0f89c7cce823acf1ce925b",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getblockchaininfo

**getblockchaininfo**

The `getblockchaininfo` method returns a json object containing state information about blockchain processing.

::: tip
When the chain tip is at the last block before a network upgrade activation, the <b>consensus.chaintip</b> value is not equal to the <b>consensus.nextblock</b> value.
:::

[getblockchaininfo](../komodo-api/blockchain.html#getblockchaininfo) now returns a new size_on_disk key, which is the size of the blockchain, on disk, in bytes.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| ---------------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |
| "chain"                | (string)  | the current network name, as defined in BIP70 (main, test, regtest)                                                                               |
| "blocks"               | (numeric) | the current number of blocks processed in the server                                                                                              |
| "headers"              | (numeric) | the current number of headers we have validated                                                                                                   |
| "bestblockhash"        | (string)  | the hash of the currently best block                                                                                                              |
| "difficulty"           | (numeric) | the current difficulty                                                                                                                            |
| "verificationprogress" | (numeric) | an estimate of verification progress [0..1]                                                                                                       |
| "chainwork"            | (string)  | the total amount of work in the active chain, in hexadecimal                                                                                      |
| "pruned"               | (bool)    | whether the current state is in pruning mode; if true, the blockchain will not keep all transaction and block information, to preserve disk space |
| "size_on_disk"         | (numeric) | the size of the blockchain on disk, measured in bytes                                                                                             |
| "commitments"          | (numeric) | the current number of note commitments in the commitment tree                                                                                     |
| "softforks": { ..... } | (array)   | the status of softforks in progress                                                                                                               |
| "id"                   | (string)  | the name of the softfork                                                                                                                          |
| "version"              | (numeric) | the block version                                                                                                                                 |
| "enforce": { ... }     | (object)  | the progress toward enforcing the softfork rules for blocks of the new version                                                                    |
| "status"               | (boolean) | true if threshold reached                                                                                                                         |
| "found"                | (numeric) | the number of blocks with the new version found                                                                                                   |
| "required"             | (numeric) | the number of blocks required to trigger                                                                                                          |
| "window"               | (numeric) | the maximum size of the examined window of recent blocks                                                                                          |
| "reject": { ... }      | (object)  | the progress toward rejecting pre-softfork blocks (same fields as "enforce")                                                                      |
| "upgrades":            | (object)  | the status of network upgrades                                                                                                                    |
| "xxxxxxxxx_string":    | (string)  | the branch ID of the upgrade                                                                                                                      |
| "name"                 | (string)  | the name of upgrade                                                                                                                               |
| "activationheight"     | (numeric) | the block height of activation                                                                                                                    |
| "status"               | (string)  | the status of the upgrade                                                                                                                         |
| "info"                 | (string)  | additional information about the upgrade                                                                                                          |
| "consensus": { ..... } | (object)  | branch IDs of the current and upcoming consensus rules                                                                                            |
| "chaintip"             | (string)  | branch ID used to validate the current chain tip                                                                                                  |
| "nextblock"            | (string)  | branch ID under which the next block will be validated                                                                                            |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getblockchaininfo
```


<collapse-text hidden title="Response">


```json
{
  "chain": "regtest",
  "blocks": 398,
  "headers": 398,
  "bestblockhash": "0dd66ee1f151c38f73843378c08715ee3f4d3cf2888783e2846b81c057987084",
  "difficulty": 1.000023305960651,
  "verificationprogress": 1,
  "chainwork": "0000000000000000000000000000000000000000000000000000000000001a7f",
  "pruned": false,
  "size_on_disk": 5058467629,
  "commitments": 0,
  "valuePools": [
    {
      "id": "sprout",
      "monitored": true,
      "chainValue": 0.0,
      "chainValueZat": 0
    }
  ],
  "softforks": [
    {
      "id": "bip34",
      "version": 2,
      "enforce": {
        "status": false,
        "found": 399,
        "required": 750,
        "window": 1000
      },
      "reject": {
        "status": false,
        "found": 399,
        "required": 950,
        "window": 1000
      }
    }
  ],
  "upgrades": {},
  "consensus": {
    "chaintip": "00000000",
    "nextblock": "00000000"
  }
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockchaininfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "chain": "regtest",
    "blocks": 398,
    "headers": 398,
    "bestblockhash": "0dd66ee1f151c38f73843378c08715ee3f4d3cf2888783e2846b81c057987084",
    "difficulty": 1.000023305960651,
    "verificationprogress": 1,
    "chainwork": "0000000000000000000000000000000000000000000000000000000000001a7f",
    "pruned": false,
    "size_on_disk": 5058467629,
    "commitments": 0,
    "valuePools": [
      {
        "id": "sprout",
        "monitored": true,
        "chainValue": 0,
        "chainValueZat": 0
      }
    ],
    "softforks": [
      {
        "id": "bip34",
        "version": 2,
        "enforce": {
          "status": false,
          "found": 399,
          "required": 750,
          "window": 1000
        },
        "reject": {
          "status": false,
          "found": 399,
          "required": 950,
          "window": 1000
        }
      }
    ],
    "upgrades": {},
    "consensus": {
      "chaintip": "00000000",
      "nextblock": "00000000"
    }
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getblockcount

**getblockcount**

The `getblockcount` method returns the number of blocks in the best valid block chain.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| --------- | --------- | ----------------------- |
| data      | (numeric) | the current block count |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getblockcount
```


<collapse-text hidden title="Response">


```bash
398
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockcount", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": 398,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getblockhash

**getblockhash index**

The `getblockhash` method returns the hash of the indicated block index, according to the best blockchain at the time provided.

### Arguments

| Name | Type | Description | 
| --------- | ------------------- | --------------- |
| index     | (numeric, required) | the block index |

### Response

| Name | Type | Description | 
| --------- | -------- | -------------- |
| "hash"    | (string) | the block hash |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getblockhash 100
```


<collapse-text hidden title="Response">


```bash
08674c7a6ab6c40000d45e2094f2cafc6575bfcfdd1ce90fa0060fa573803024
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockhash", "params": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "08674c7a6ab6c40000d45e2094f2cafc6575bfcfdd1ce90fa0060fa573803024",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getblockhashes

**getblockhashes high low '{"noOrphans": bool, "logicalTimes": bool}'**

The `getblockhashes` method returns an array of hashes of blocks within the timestamp range provided.

The method requires [timestampindex](../installations/common-runtime-parameters.html#timestampindex) to be enabled.

### Arguments

| Name | Type | Description | 
| -------------- | ------------------- | ------------------------------------------------------------------------------------------ |
| high           | (numeric, required) | the newer block timestamp                                                                  |
| low            | (numeric, required) | the older block timestamp                                                                  |
| options        | (string, required)  | a json object                                                                              |
| "noOrphans"    | (boolean)           | a value of `true` implies that the method will only include blocks on the main chain       |
| "logicalTimes" | (boolean)           | a value of `true` implies that the method will only include logical timestamps with hashes |

### Response

| Name | Type | Description | 
| ----------- | --------- | --------------------- |
| "hash"      | (string)  | the block hash        |
| "blockhash" | (string)  | the block hash        |
| "logicalts" | (numeric) | the logical timestamp |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getblockhashes 1531614698 1531614498
```


<collapse-text hidden title="Response">


```bash
[
  "01c555caa581783c94af1ec4fdd1237a37829fc8ccf9fd956f3df462495a8629",
  "0debf03ff8fe2c09ccb7e8b3770121d71ef8c7fce267a04f9301cc50f594f9ac",
  "01c92378d9fa66eb83d0bfcf601678792e0351f9b51483db1084347dabd78432"
]

```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockhashes", "params": [1531614698, 1531614498] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    "01c555caa581783c94af1ec4fdd1237a37829fc8ccf9fd956f3df462495a8629",
    "0debf03ff8fe2c09ccb7e8b3770121d71ef8c7fce267a04f9301cc50f594f9ac",
    "01c92378d9fa66eb83d0bfcf601678792e0351f9b51483db1084347dabd78432"
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


Command:

```bash
./komodo-cli getblockhashes 1531614698 1531614498 '{"noOrphans":false, "logicalTimes":true}'
```


<collapse-text hidden title="Response">


```json
[
  {
    "blockhash": "01c555caa581783c94af1ec4fdd1237a37829fc8ccf9fd956f3df462495a8629",
    "logicalts": 1531614555
  },
  {
    "blockhash": "0debf03ff8fe2c09ccb7e8b3770121d71ef8c7fce267a04f9301cc50f594f9ac",
    "logicalts": 1531614615
  },
  {
    "blockhash": "01c92378d9fa66eb83d0bfcf601678792e0351f9b51483db1084347dabd78432",
    "logicalts": 1531614692
  }
]
```

</collapse-text>


## getblockheader

**getblockheader "hash" ( verbose )**

The `getblockheader` method returns information about the indicated block.

The verbose input is optional. If verbose is false, the method returns a string that is serialized, hex-encoded data for the indicated blockheader. If verbose is true, the method returns a json object with information about the indicated blockheader.

### Arguments

| Name | Type | Description | 
| --------- | --------------------------------- | ---------------------------------------------------------- |
| "hash"    | (string, required)                | the block hash                                             |
| verbose   | (boolean, optional, default=true) | true returns a json object, false returns hex-encoded data |

### Response (verbose = `true`)

| Name | Type | Description | 
| ------------------- | --------- | --------------------------------------------------------------------------------------------------------------------------------- |
| "hash"              | (string)  | the block hash (same as provided)                                                                                                 |
| "confirmations"     | (numeric) | a confirmation number that is dPoW aware; see this [article](https://docs.komodoplatform.com/komodo/dPOW-conf.html) for more info |
| "rawconfirmations"  | (numeric) | the raw confirmations (number of blocks on top of this block); if the block is not on the main chain, a value of `-1` is returned |
| "height"            | (numeric) | the block height or index                                                                                                         |
| "version"           | (numeric) | the block version                                                                                                                 |
| "merkleroot"        | (string)  | the merkle root                                                                                                                   |
| "time"              | (numeric) | the block time in seconds since epoch (Jan 1 1970 GMT)                                                                            |
| "nonce"             | (numeric) | the nonce                                                                                                                         |
| "bits"              | (string)  | the bits                                                                                                                          |
| "difficulty"        | (numeric) | the difficulty                                                                                                                    |
| "previousblockhash" | (string)  | the hash of the previous block                                                                                                    |
| "nextblockhash"     | (string)  | the hash of the next block                                                                                                        |

### Response (verbose = `false`)

| Name | Type | Description | 
| --------- | -------- | -------------------------------------------------------------------- |
| "data"    | (string) | a string that is serialized hex-encoded data for the indicated block |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getblockheader "0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320"
```


<collapse-text hidden title="Response">


```json
{
  "hash": "0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320",
  "confirmations": 1,
  "rawconfirmations": 5,
  "height": 1268723,
  "version": 4,
  "merkleroot": "9cdd912d6aa82a5f55db4a79bb2181a74485df386c80e3936ce46d6e35f64d78",
  "finalsaplingroot": "1ccce5445c492209c1d6e3e0bf21711e6f4012fddb724073dca473eb34a7d8a2",
  "time": 1552582977,
  "nonce": "000054c888f9f2c08f1b0112d10ab6b739fc7f0f324dd15277efc3eaa634000a",
  "solution": "00bfd611d3c531f8a3e962cd46d62109685518a2ed078c0ea1ed4b555db2ed5108603aaedd3ee98ac463084a50d2080a9384a1bb718053a08a55507fce56b83694930194e91bab7260b79bfffd520e5d973c2c9e01221b74d7544383712ca1033ea2caaa499efdf59e06c3f423689c7a7b7a2f5345cbcae6f26afdb7d8300462848ffb1ae69f2f11f13d3f52ebac8aca51f6721a056d8ac5525517ca4079442fdac19ac0b5f7b66004b8448286090b4b29f390b58272157eaa733d011d14cfcaa19813b692e5057556a35dc86e0da613f46605ba7f4ec88ddec30ead8b4b5df032bef638da39092a7d39661723d0b7ea07a5d6fd422fcf423efdd1a90ad094c444481ae950dc41e02d20044555623cec5b2679873fa44ef75acf1c592ca96765f28f3b5f853219b1b140e2467aef56e5b71aca6a4a86d9c918504b2758fbcc8812b9332f7fe52309e95d455f9a7e49c300f17511590fd33befc370e5a5619602732299dad7227e21e4271f6767873a43132dc08c4d488a310c7105b2a45d4536bff1b7cb70f0d68f5e996050cc55da23bf86fb3ad10e3b9028a48a8ef2376a2c2039210409d5b85a922dbe3d7ddbd399e632435957a776c9bc0a77ad8a62d623f0f15df49e543d869d51790cadee496b36bf6368ebb568ed69cf3578913aa097f99eb86b2e2701691bba85fc7d383aede90317877cdcaa4803610fea9d42729635cc623cb7397279c426fb5cee0cab13f3a217a456cd61a34dbc5990cde5de55b0ac12e8429a2e586298f3e8313febe6e6b1f590f885432433aac18d6e7b7b99f3425720d35b30d8b234475c04f09951df512cfc947fb4237cd0279ad276f86de910c30b79da45b7e76531f4bce2e8d03dfbbf11ee5712c9c92c69a96d69b05cb18e418f4e98b3c067e5cb19de2375865b51450a79e80a4fc5a5c716b0bee64b0256542f0a6f9871c02656d90846dca9fb381519682397514f522b3045ce88744f2b5af53d51b4bac3d409139a6b588309e90bbc836ea079e4e4eed7eae7ab0f1871bd6aee35cd7637d3525153ca2d77c1eebc010a5a905e8ed9b97bb18427592c60bd52c13e7e7fa5191323a5f6b03b4dbf2074edf97087b6340ab3dcc11a56bb04c89a22e2f6f8c27123561800e55e1afae61abd2c2809ddf3fbad93e372e2d1febf6f2e9f7e7a0489069e7a927e37025b32661b9c0fc576ac2dd3db4fe79331e4a48ff54c848a45a7679fdee69899af2320a5cd338b8f15f732d353a95ecf16ed82290d073f22381bc7d81743b7ea8343ac20c25fda4f179f142f10a2a2f6f556cc12de3c728a1ae005ed954752558c1a81ff709ea10f49b80774eca5bcf681a7dc2e5101151c95f94fc80df2ecd9c334ed75195a81bc7a0bfe1af5c3f7703de3dff447f338d819d789a725dcac6c028f0a9a43cc8fd140abb0d40a630a84fbdd751c2a08c28f7fd1d376f98c0fc418f4f0929de03f3038640388abc0ee44a14d7094130e0b503a61a6229f10891ab90dc9c9cc76469c0ab30f7fca9386760676194e04a8db6d2506ecaba8e800bccbe2ddc53d46b9771307445efbf15454e35f5a30bb4cf9aedd129bacd19d05c63645c9589e73829ba5abd87e0bee0fccbb06e4214acbee7c240d1586e05a9a50f0661712e4dc9e71050b36dbc7133bfd32df2cc8ddf9356fd4701f37f32635d3a7be0a50b6d6b85597d95a948df1f91a58a70a221cdc1e880ce1a54644ec91eabd7625497f02e02b291381978ccbdd4761e3ca0128efa146a0ea4e9a13003bc1558db863c2a183460455a0560bc75c7f061449714ddc5431458483630fc3ff769e78c71901ea1e516e5fe04cd0a553f5f2403afaef2e33c31eb55d326c030d76e188676099b5b9f43f100afe25994feb",
  "bits": "1d01e71c",
  "difficulty": 132777470.6040096,
  "chainwork": "000000000000000000000000000000000000000000000000000241daab323e77",
  "segid": -1,
  "previousblockhash": "0474f6be4f1efb132cfedc252559ef3aee166e6bb58e99160edcf029d13f8017",
  "nextblockhash": "000000003331516a9b135e3273ebad53a60921e5d3132fe7d596f5903337f504"
}
```

</collapse-text>


Command:

```bash
./komodo-cli getblockheader "0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320" false
```


<collapse-text hidden title="Response">


```bash
0400000017803fd129f0dc0e16998eb56b6e16ee3aef592525dcfe2c13fb1e4fbef67404784df6356e6de46c93e3806c38df8544a78121bb794adb555f2aa86a2d91dd9ca2d8a734eb73a4dc734072dbfd12406f1e7121bfe0e3d6c10922495c44e5cc1c41898a5c1ce7011d0a0034a6eac3ef7752d14d320f7ffc39b7b60ad112011b8fc0f2f988c8540000fd400500bfd611d3c531f8a3e962cd46d62109685518a2ed078c0ea1ed4b555db2ed5108603aaedd3ee98ac463084a50d2080a9384a1bb718053a08a55507fce56b83694930194e91bab7260b79bfffd520e5d973c2c9e01221b74d7544383712ca1033ea2caaa499efdf59e06c3f423689c7a7b7a2f5345cbcae6f26afdb7d8300462848ffb1ae69f2f11f13d3f52ebac8aca51f6721a056d8ac5525517ca4079442fdac19ac0b5f7b66004b8448286090b4b29f390b58272157eaa733d011d14cfcaa19813b692e5057556a35dc86e0da613f46605ba7f4ec88ddec30ead8b4b5df032bef638da39092a7d39661723d0b7ea07a5d6fd422fcf423efdd1a90ad094c444481ae950dc41e02d20044555623cec5b2679873fa44ef75acf1c592ca96765f28f3b5f853219b1b140e2467aef56e5b71aca6a4a86d9c918504b2758fbcc8812b9332f7fe52309e95d455f9a7e49c300f17511590fd33befc370e5a5619602732299dad7227e21e4271f6767873a43132dc08c4d488a310c7105b2a45d4536bff1b7cb70f0d68f5e996050cc55da23bf86fb3ad10e3b9028a48a8ef2376a2c2039210409d5b85a922dbe3d7ddbd399e632435957a776c9bc0a77ad8a62d623f0f15df49e543d869d51790cadee496b36bf6368ebb568ed69cf3578913aa097f99eb86b2e2701691bba85fc7d383aede90317877cdcaa4803610fea9d42729635cc623cb7397279c426fb5cee0cab13f3a217a456cd61a34dbc5990cde5de55b0ac12e8429a2e586298f3e8313febe6e6b1f590f885432433aac18d6e7b7b99f3425720d35b30d8b234475c04f09951df512cfc947fb4237cd0279ad276f86de910c30b79da45b7e76531f4bce2e8d03dfbbf11ee5712c9c92c69a96d69b05cb18e418f4e98b3c067e5cb19de2375865b51450a79e80a4fc5a5c716b0bee64b0256542f0a6f9871c02656d90846dca9fb381519682397514f522b3045ce88744f2b5af53d51b4bac3d409139a6b588309e90bbc836ea079e4e4eed7eae7ab0f1871bd6aee35cd7637d3525153ca2d77c1eebc010a5a905e8ed9b97bb18427592c60bd52c13e7e7fa5191323a5f6b03b4dbf2074edf97087b6340ab3dcc11a56bb04c89a22e2f6f8c27123561800e55e1afae61abd2c2809ddf3fbad93e372e2d1febf6f2e9f7e7a0489069e7a927e37025b32661b9c0fc576ac2dd3db4fe79331e4a48ff54c848a45a7679fdee69899af2320a5cd338b8f15f732d353a95ecf16ed82290d073f22381bc7d81743b7ea8343ac20c25fda4f179f142f10a2a2f6f556cc12de3c728a1ae005ed954752558c1a81ff709ea10f49b80774eca5bcf681a7dc2e5101151c95f94fc80df2ecd9c334ed75195a81bc7a0bfe1af5c3f7703de3dff447f338d819d789a725dcac6c028f0a9a43cc8fd140abb0d40a630a84fbdd751c2a08c28f7fd1d376f98c0fc418f4f0929de03f3038640388abc0ee44a14d7094130e0b503a61a6229f10891ab90dc9c9cc76469c0ab30f7fca9386760676194e04a8db6d2506ecaba8e800bccbe2ddc53d46b9771307445efbf15454e35f5a30bb4cf9aedd129bacd19d05c63645c9589e73829ba5abd87e0bee0fccbb06e4214acbee7c240d1586e05a9a50f0661712e4dc9e71050b36dbc7133bfd32df2cc8ddf9356fd4701f37f32635d3a7be0a50b6d6b85597d95a948df1f91a58a70a221cdc1e880ce1a54644ec91eabd7625497f02e02b291381978ccbdd4761e3ca0128efa146a0ea4e9a13003bc1558db863c2a183460455a0560bc75c7f061449714ddc5431458483630fc3ff769e78c71901ea1e516e5fe04cd0a553f5f2403afaef2e33c31eb55d326c030d76e188676099b5b9f43f100afe25994feb
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockheader", "params": ["0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "hash": "0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320",
    "confirmations": 1,
    "rawconfirmations": 12,
    "height": 1268723,
    "version": 4,
    "merkleroot": "9cdd912d6aa82a5f55db4a79bb2181a74485df386c80e3936ce46d6e35f64d78",
    "finalsaplingroot": "1ccce5445c492209c1d6e3e0bf21711e6f4012fddb724073dca473eb34a7d8a2",
    "time": 1552582977,
    "nonce": "000054c888f9f2c08f1b0112d10ab6b739fc7f0f324dd15277efc3eaa634000a",
    "solution": "00bfd611d3c531f8a3e962cd46d62109685518a2ed078c0ea1ed4b555db2ed5108603aaedd3ee98ac463084a50d2080a9384a1bb718053a08a55507fce56b83694930194e91bab7260b79bfffd520e5d973c2c9e01221b74d7544383712ca1033ea2caaa499efdf59e06c3f423689c7a7b7a2f5345cbcae6f26afdb7d8300462848ffb1ae69f2f11f13d3f52ebac8aca51f6721a056d8ac5525517ca4079442fdac19ac0b5f7b66004b8448286090b4b29f390b58272157eaa733d011d14cfcaa19813b692e5057556a35dc86e0da613f46605ba7f4ec88ddec30ead8b4b5df032bef638da39092a7d39661723d0b7ea07a5d6fd422fcf423efdd1a90ad094c444481ae950dc41e02d20044555623cec5b2679873fa44ef75acf1c592ca96765f28f3b5f853219b1b140e2467aef56e5b71aca6a4a86d9c918504b2758fbcc8812b9332f7fe52309e95d455f9a7e49c300f17511590fd33befc370e5a5619602732299dad7227e21e4271f6767873a43132dc08c4d488a310c7105b2a45d4536bff1b7cb70f0d68f5e996050cc55da23bf86fb3ad10e3b9028a48a8ef2376a2c2039210409d5b85a922dbe3d7ddbd399e632435957a776c9bc0a77ad8a62d623f0f15df49e543d869d51790cadee496b36bf6368ebb568ed69cf3578913aa097f99eb86b2e2701691bba85fc7d383aede90317877cdcaa4803610fea9d42729635cc623cb7397279c426fb5cee0cab13f3a217a456cd61a34dbc5990cde5de55b0ac12e8429a2e586298f3e8313febe6e6b1f590f885432433aac18d6e7b7b99f3425720d35b30d8b234475c04f09951df512cfc947fb4237cd0279ad276f86de910c30b79da45b7e76531f4bce2e8d03dfbbf11ee5712c9c92c69a96d69b05cb18e418f4e98b3c067e5cb19de2375865b51450a79e80a4fc5a5c716b0bee64b0256542f0a6f9871c02656d90846dca9fb381519682397514f522b3045ce88744f2b5af53d51b4bac3d409139a6b588309e90bbc836ea079e4e4eed7eae7ab0f1871bd6aee35cd7637d3525153ca2d77c1eebc010a5a905e8ed9b97bb18427592c60bd52c13e7e7fa5191323a5f6b03b4dbf2074edf97087b6340ab3dcc11a56bb04c89a22e2f6f8c27123561800e55e1afae61abd2c2809ddf3fbad93e372e2d1febf6f2e9f7e7a0489069e7a927e37025b32661b9c0fc576ac2dd3db4fe79331e4a48ff54c848a45a7679fdee69899af2320a5cd338b8f15f732d353a95ecf16ed82290d073f22381bc7d81743b7ea8343ac20c25fda4f179f142f10a2a2f6f556cc12de3c728a1ae005ed954752558c1a81ff709ea10f49b80774eca5bcf681a7dc2e5101151c95f94fc80df2ecd9c334ed75195a81bc7a0bfe1af5c3f7703de3dff447f338d819d789a725dcac6c028f0a9a43cc8fd140abb0d40a630a84fbdd751c2a08c28f7fd1d376f98c0fc418f4f0929de03f3038640388abc0ee44a14d7094130e0b503a61a6229f10891ab90dc9c9cc76469c0ab30f7fca9386760676194e04a8db6d2506ecaba8e800bccbe2ddc53d46b9771307445efbf15454e35f5a30bb4cf9aedd129bacd19d05c63645c9589e73829ba5abd87e0bee0fccbb06e4214acbee7c240d1586e05a9a50f0661712e4dc9e71050b36dbc7133bfd32df2cc8ddf9356fd4701f37f32635d3a7be0a50b6d6b85597d95a948df1f91a58a70a221cdc1e880ce1a54644ec91eabd7625497f02e02b291381978ccbdd4761e3ca0128efa146a0ea4e9a13003bc1558db863c2a183460455a0560bc75c7f061449714ddc5431458483630fc3ff769e78c71901ea1e516e5fe04cd0a553f5f2403afaef2e33c31eb55d326c030d76e188676099b5b9f43f100afe25994feb",
    "bits": "1d01e71c",
    "difficulty": 132777470.6040096,
    "chainwork": "000000000000000000000000000000000000000000000000000241daab323e77",
    "segid": -1,
    "previousblockhash": "0474f6be4f1efb132cfedc252559ef3aee166e6bb58e99160edcf029d13f8017",
    "nextblockhash": "000000003331516a9b135e3273ebad53a60921e5d3132fe7d596f5903337f504"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getchaintips

**getchaintips**

The `getchaintips` method returns information about all known tips in the block tree, including the main chain and any orphaned branches.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| ----------- | --------- | ------------------------------------------------------------- |
| "height"    | (numeric) | the height of the chain tip                                   |
| "hash"      | (string)  | the block hash of the tip                                     |
| "branchlen" | (numeric) | `0` for main chain                                            |
| "status"    | (string)  | `"active"` for the main chain                                 |
| "height"    | (numeric) | the height of the branch tip                                  |
| "hash"      | (string)  | the blockhash of the branch tip                               |
| "branchlen" | (numeric) | the length of the branch connecting the tip to the main chain |
| "status"    | (string)  | the status of the chain                                       |

### Possible values for the returned status property

| Status          | Description                                                                   |
| --------------- | ----------------------------------------------------------------------------- |
| "invalid"       | this branch contains at least one invalid block                               |
| "headers-only"  | not all blocks for this branch are available, but the headers are valid       |
| "valid-headers" | all blocks are available for this branch, but they were never fully validated |
| "valid-fork"    | this branch is not part of the active chain, but is fully validated           |
| "active"        | this is the tip of the active main chain, which is certainly valid            |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getchaintips
```


<collapse-text hidden title="Response">


```json
[
  {
    "height": 398,
    "hash": "0dd66ee1f151c38f73843378c08715ee3f4d3cf2888783e2846b81c057987084",
    "branchlen": 0,
    "status": "active"
  }
]
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getchaintips", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    {
      "height": 398,
      "hash": "0dd66ee1f151c38f73843378c08715ee3f4d3cf2888783e2846b81c057987084",
      "branchlen": 0,
      "status": "active"
    }
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getchaintxstats

**getchaintxstats nblocks blockhash**

The method `getchaintxstats` returns statistics about the total number and rate of transactions in the chain.

### Arguments

| Name | Type | Description | 
| --------- | ------------------- | --------------------------------------------- |
| nblocks   | (numeric, optional) | the number of blocks in the averaging window. |
| blockhash | (string, optional)  | the hash of the block which ends the window   |

### Response

| Name | Type | Description | 
| ------------------------- | --------- | ------------------------------------------------------------------------------------------------------------------- |
| "time"                    | (numeric) | the timestamp for the final block in the window in UNIX format                                                      |
| "txcount"                 | (numeric) | the total number of transactions in the chain up to this point                                                      |
| "window_final_block_hash" | (string)  | the hash of the final block in the window                                                                           |
| "window_block_count"      | (numeric) | the size of the window in the number of blocks                                                                      |
| "window_tx_count"         | (numeric) | the number of transactions in the window; this value is only returned if `window_block_count` is > 0.               |
| "window_interval"         | (numeric) | the elapsed time in the window in seconds; this value is only returned if `window_block_count` is > 0.              |
| "txrate"                  | (numeric) | the average rate of transactions per second in the window; this value is only returned if `window_interval` is > 0. |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getchaintxstats
```


<collapse-text hidden title="Response">


```json
{
  "time": 1552568020,
  "txcount": 4576830,
  "window_final_block_hash": "037c7fb68fcdd27cb12bb16b6c4b3a88a4bd652b2c979c771836db97611a62f2",
  "window_block_count": 43200,
  "window_tx_count": 286787,
  "window_interval": 2604632,
  "txrate": 0.1101065332837806
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getchaintxstats", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "time": 1552568020,
    "txcount": 4576830,
    "window_final_block_hash": "037c7fb68fcdd27cb12bb16b6c4b3a88a4bd652b2c979c771836db97611a62f2",
    "window_block_count": 43200,
    "window_tx_count": 286787,
    "window_interval": 2604632,
    "txrate": 0.1101065332837806
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getdifficulty

**getdifficulty**

The `getdifficulty` method returns the proof-of-work difficulty as a multiple of the minimum difficulty.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| --------- | --------- | -------------------------------------------------------------------- |
| number    | (numeric) | the proof-of-work difficulty as a multiple of the minimum difficulty |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getdifficulty
```


<collapse-text hidden title="Response">


```bash
1.000023305960651
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getdifficulty", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": 1.000023305960651,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getlastsegidstakes

**getlastsegidstakes depth**

The `getlastsegidstakes` method returns an object containing the number of blocks staked by each segid in the last `X` number of blocks, where the value of `X` is equal to the indicated `depth`.

::: tip Note
Only applies to `-ac_staked` asset chains
:::

### Arguments

| Name | Type | Description | 
| --------- | ------------------- | ------------------------------------------------------------------------------------ |
| depth     | (numeric, required) | the number of blocks to scan, starting from the current height and working backwards |

### Response

| Name | Type | Description | 
| --------- | ------------- | ---------------------------------------------------------------------------------------------------------- |
| "NotSet"  | (numeric)     | the number of blocks that have no `SegId` set                                                              |
| "PoW"     | (numeric)     | the number of blocks created through `PoW`                                                                 |
| "PoSPerc" | (numeric)     | the percentage of blocks created through `PoS`                                                             |
| "SegIds"  | (json object) | the json containing the data of number of blocks in each `SegId`                                           |
| "n"       | (numeric)     | the number of blocks staked from `SegId n` in the last X blocks, where X is equal to the indicated `depth` |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getlastsegidstakes 1000
```


<collapse-text hidden title="Response">


```json
{
    "NotSet": 0,
    "PoW": 12,
    "PoSPerc": 98,
    "SegIds": {
        "0": 20,
        "1": 16,
        "2": 16,
        "3": 18,
        "4": 19,

  ( .... omitted for brevity ... )

        "60": 11,
        "61": 16,
        "62": 18,
        "63": 17
    }
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```json
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getlastsegidstakes", "params": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
    "result": {
        "NotSet": 0,
        "PoW": 11,
        "PoSPerc": 98,
        "SegIds": {
            "0": 20,
            "1": 16,
            "2": 16,
            "3": 17,

    ( .... omitted for brevity ... )

            "60": 11,
            "61": 16,
            "62": 18,
            "63": 17
        }
    },
    "error": null,
    "id": "curltest"
}
```

</collapse-text>


## getmempoolinfo

**getmempoolinfo**

The `getmempoolinfo` method returns details on the active state of the transaction memory pool.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |             |

### Response

| Name | Type | Description | 
| --------- | --------- | -------------------------------------- |
| "size"    | (numeric) | the current transaction count          |
| "bytes"   | (numeric) | the sum of all transaction sizes       |
| "usage"   | (numeric) | the total memory usage for the mempool |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getmempoolinfo
```


<collapse-text hidden title="Response">


```json
{
  "size": 1,
  "bytes": 226,
  "usage": 896
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getmempoolinfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "size": 1,
    "bytes": 226,
    "usage": 896
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getrawmempool

**getrawmempool ( verbose )**

The `getrawmempool` method returns all transaction ids in the memory pool as a json array of transaction ids.

The verbose input is optional and is false by default. When it is true, the method instead returns a json object with various related data.

### Arguments

| Name | Type | Description | 
| --------- | ---------------------------------- | ----------------------------------------------------------------- |
| verbose   | (boolean, optional, default=false) | true for a json object, false for a json array of transaction ids |

### Response (verbose = `false`)

| Name | Type | Description | 
| ---------------- | -------- | ------------------ |
| "transaction_id" | (string) | the transaction id |

### Response (verbose = `true`)

| Name | Type | Description | 
| -------------------------- | ------------- | ----------------------------------------------------------------------- |
| "transaction_id": { .... } | (json object) |
| "size"                     | (numeric)     | the transaction size in bytes                                           |
| "fee"                      | (numeric)     | the transaction fee                                                     |
| "time"                     | (numeric)     | the local time transaction entered pool in seconds since 1 Jan 1970 GMT |
| "height"                   | (numeric)     | the block height wherein the transaction entered the mempool            |
| "startingpriority"         | (numeric)     | the priority when the transaction entered the mempool                   |
| "currentpriority"          | (numeric)     | the transaction priority at the current height                          |
| "depends": { ... }         | (array)       | unconfirmed transactions used as inputs for this transaction            |
| "transaction_id"           | (string)      | the parent transaction id                                               |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getrawmempool true
```


<collapse-text hidden title="Response">


```json
{
  "44760f145303cae081819c6e54665d6716c98e97691603b4edf133b8180e6048": {
    "size": 488,
    "fee": 0.00011462,
    "time": 1536618366,
    "height": 448,
    "startingpriority": 20910198.65384615,
    "currentpriority": 20910198.65384615,
    "depends": []
  }
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getrawmempool", "params": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "44760f145303cae081819c6e54665d6716c98e97691603b4edf133b8180e6048": {
      "size": 488,
      "fee": 0.00011462,
      "time": 1536618366,
      "height": 448,
      "startingpriority": 20910198.65384615,
      "currentpriority": 20910198.65384615,
      "depends": []
    }
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getspentinfo

**getspentinfo '{"txid": "txid_string", "index"}'**

The `getspentinfo` method returns the transaction id and index where the given output is spent.

The method requires [spentindex](../installations/common-runtime-parameters.html#spentindex) to be enabled.

### Arguments

| Name | Type | Description | 
| --------- | -------- | ------------------------------------ |
| "txid"    | (string) | the hex string of the transaction id |
| "index"   | (number) | the output's index                   |

### Response

| Name | Type | Description | 
| --------- | -------- | ------------------------ |
| "txid"    | (string) | the transaction id       |
| "index"   | (number) | the spending input index |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getspentinfo '{"txid": "4479f2c05ba22adf2333db724f247a09effcc9edea8c079da0da05d3a0451064", "index": 0}'
```


<collapse-text hidden title="Response">


```json
{
  "txid": "d2a7b19178ff6b4b1d54befc300879239969716322e4bcd2742162d86ef113c8",
  "index": 228,
  "height": 994953
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getspentinfo", "params": [{"txid": "4479f2c05ba22adf2333db724f247a09effcc9edea8c079da0da05d3a0451064", "index": 0}] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "txid": "d2a7b19178ff6b4b1d54befc300879239969716322e4bcd2742162d86ef113c8",
    "index": 228,
    "height": 994953
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## gettxout

**gettxout "txid_string" vout_number ( includemempool_bool )**

The `gettxout` method returns details about an unspent transaction output.

### Arguments

| Name | Type | Description | 
| -------------- | ------------------- | ------------------------------ |
| "txid"         | (string, required)  | the transaction id             |
| vout           | (numeric, required) | the vout value                 |
| includemempool | (boolean, optional) | whether to include the mempool |

### Response

| Name | Type | Description | 
| ------------------ | ------------------ | --------------------------------------------------------------------------------------------------------------------------------- |
| "bestblock"        | (string)           | the block hash                                                                                                                    |
| "confirmations"    | (numeric)          | a confirmation number that is dPoW aware; see this [article](https://docs.komodoplatform.com/komodo/dPOW-conf.html) for more info |
| "rawconfirmations" | (numeric)          | the raw confirmations (number of blocks on top of this block with this transaction)                                               |
| "value"            | (numeric)          | the transaction value                                                                                                             |
| "scriptPubKey":    | (json object)      |                                                                                                                                   |
| "asm"              | (string)           | `scriptPubKey` in assembly format                                                                                                 |
| "hex"              | (string)           | `scriptPubKey` in hex format                                                                                                      |
| "reqSigs"          | (numeric)          | the number of required signatures                                                                                                 |
| "type"             | (string)           | the type, e.g. pubkeyhash                                                                                                         |
| "addresses"        | (array of strings) | an array of Komodo addresses                                                                                                      |
| "address"          | (string)           | the blockchain address                                                                                                            |
| "version"          | (numeric)          | the version                                                                                                                       |
| "coinbase"         | (boolean)          | whether this is a coinbase transaction                                                                                            |

#### :pushpin: Examples

Command:

```bash
./komodo-cli gettxout "d7f9b34ad3e86f48fce55dbec1f2925b8dcbd15199977fd75d224254db9ae80d" 1
```


<collapse-text hidden title="Response">


```json
{
  "bestblock": "061d724764a60009e782aa7a52c7543b6b3ca7b552bffcd3e3b5010caeaeb19e",
  "confirmations": 1,
  "rawconfirmations": 14,
  "value": 13541.42222075,
  "scriptPubKey": {
    "asm": "OP_DUP OP_HASH160 4518e50fdb31bb5951cd570342325bde15408fa3 OP_EQUALVERIFY OP_CHECKSIG",
    "hex": "76a9144518e50fdb31bb5951cd570342325bde15408fa388ac",
    "reqSigs": 1,
    "type": "pubkeyhash",
    "addresses": ["RFaYXUJUE7CziS73EE6gvaqFduVo9KWjXT"]
  },
  "version": 4,
  "coinbase": false
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "gettxout", "params": ["d7f9b34ad3e86f48fce55dbec1f2925b8dcbd15199977fd75d224254db9ae80d", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "bestblock": "000000020cce6743086cbcb97e90c0ad2735118615dd22b393e10f67cb6f13c7",
    "confirmations": 1,
    "rawconfirmations": 15,
    "value": 13541.42222075,
    "scriptPubKey": {
      "asm": "OP_DUP OP_HASH160 4518e50fdb31bb5951cd570342325bde15408fa3 OP_EQUALVERIFY OP_CHECKSIG",
      "hex": "76a9144518e50fdb31bb5951cd570342325bde15408fa388ac",
      "reqSigs": 1,
      "type": "pubkeyhash",
      "addresses": ["RFaYXUJUE7CziS73EE6gvaqFduVo9KWjXT"]
    },
    "version": 4,
    "coinbase": false
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## gettxoutproof

**gettxoutproof '["transaction_id", ... ]' ( "blockhash_string" )**

The `gettxoutproof` method returns a hex-encoded proof showing that the indicated transaction was included in a block.

::: tip
The <b>gettxoutproof</b> method relies on the <b>txindex</b> runtime parameter. This parameter is enabled by default on all KMD-based blockchains, and should never be disabled.
:::

### Arguments

| Name | Type | Description | 
| ----------- | ------------------ | --------------------------------------------------------------------------------- |
| "txid"      | (string)           | a transaction hash                                                                |
| "blockhash" | (string, optional) | if specified, the method looks for the relevant transaction id in this block hash |

### Response

| Name | Type | Description | 
| --------- | -------- | ------------------------------------------------------------- |
| "data"    | (string) | a string that is a serialized, hex-encoded data for the proof |

#### :pushpin: Examples

Command:

```bash
./komodo-cli gettxoutproof '["c71f4a2ebf87bdd588e3aa168917933ee4be1661245ebf52d5708a8339cf9d7a"]' "0a28e2fb630b282138bf23bb79f597b11acff6f57c8d9c1c10fa54770035c813"
```


<collapse-text hidden title="Response">


```json
040000004cd8bd98c66020496d0b34a5f5412400146ba10d6c7ab4286f84f7008d8d390e9ca9575183f60906e293e9766997396bec59f1c0b966085de3d17f8ac3c9d5280000000000000000000000000000000000000000000000000000000000000000da05975bf50e0f202d004b81fcc388cfd411d8c7c59a548e070b5affe938ce8ce830f10b298b00002402939a9a31df1305b40d26d9748283b102c708258717248d0d63f01d2957d8e3dcf56f6e03000000022e4babc29707fbdd8da2e4277b7c8b8b09e837f409eb047c936904d75fc8e6267a9dcf39838a70d552bf5e246116bee43e93178916aae388d5bd87bf2e4a1fc7010d
```

</collapse-text>


## gettxoutsetinfo

**gettxoutsetinfo**

The `gettxoutsetinfo` method returns statistics about the unspent transaction output set.

::: tip
Note this call may take a long time to complete, depending on the state of your blockchain.
:::

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| ------------------ | --------- | --------------------------------- |
| "height"           | (numeric) | the current block height (index)  |
| "bestblock"        | (string)  | the best block hash hex           |
| "transactions"     | (numeric) | the number of transactions        |
| "txouts"           | (numeric) | the number of output transactions |
| "bytes_serialized" | (numeric) | the serialized size               |
| "hash_serialized"  | (string)  | the serialized hash               |
| "total_amount"     | (numeric) | the total amount                  |

#### :pushpin: Examples

Command:

```bash
./komodo-cli gettxoutsetinfo
```


<collapse-text hidden title="Response">


```json
{
  "height": 459,
  "bestblock": "0a28e2fb630b282138bf23bb79f597b11acff6f57c8d9c1c10fa54770035c813",
  "transactions": 258,
  "txouts": 261,
  "bytes_serialized": 18051,
  "hash_serialized": "fdd2039fa21400be0928b26dfe534f543dc5090989bcbd97fdc81b30ce7dca3a",
  "total_amount": 10.16456229
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "gettxoutsetinfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "height": 459,
    "bestblock": "0a28e2fb630b282138bf23bb79f597b11acff6f57c8d9c1c10fa54770035c813",
    "transactions": 258,
    "txouts": 261,
    "bytes_serialized": 18051,
    "hash_serialized": "fdd2039fa21400be0928b26dfe534f543dc5090989bcbd97fdc81b30ce7dca3a",
    "total_amount": 10.16456229
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## kvsearch

**kvsearch "key_string"**

The `kvsearch` method searches for a key stored via the [kvupdate](../komodo-api/blockchain.html#kvupdate) command.

::: tip
This feature is only available for asset chains.
:::

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | ------------------------------------------------------ |
| key       | (string, required) | the key for which the user desires to search the chain |

### Response

| Name | Type | Description | 
| --------------- | --------- | --------------------------------------------------------- |
| "coin"          | (string)  | the chain on which the key is stored                      |
| "currentheight" | (numeric) | the current height of the chain                           |
| "key"           | (string)  | the key                                                   |
| "keylen"        | (string)  | the length of the key                                     |
| "owner"         | (string)  | a hex string representing the owner of the key            |
| "height"        | (numeric) | the height at which the key was stored                    |
| "expiration"    | (numeric) | the height at which the key will expire                   |
| "flags"         | (numeric) | `1` if the key was created with a password; `0` otherwise |
| "value"         | (string)  | the stored value                                          |
| "valuesize"     | (string)  | the amount of characters stored                           |

#### :pushpin: Examples

Command:

```bash
./komodo-cli kvsearch examplekey
```


<collapse-text hidden title="Response">


```json
{
  "coin": "MYCOIN",
  "currentheight": 566,
  "key": "examplekey",
  "keylen": 10,
  "owner": "1ff91604c6adb6ec550e7575fe9f1ca591704572e125f55bed03a21c242c31b7",
  "height": 561,
  "expiration": 2001,
  "flags": 0,
  "value": "examplevalue",
  "valuesize": 12
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "kvsearch", "params": ["examplekey"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "coin": "MYCOIN",
    "currentheight": 566,
    "key": "examplekey",
    "keylen": 10,
    "owner": "1ff91604c6adb6ec550e7575fe9f1ca591704572e125f55bed03a21c242c31b7",
    "height": 561,
    "expiration": 2001,
    "flags": 0,
    "value": "examplevalue",
    "valuesize": 12
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## kvupdate

**kvupdate "key_string" "value_string" days "passphrase_string"**

The `kvupdate` method stores a key/value pair via OP_RETURN.

::: tip
This feature is available only for asset chains. The maximum value memory size is 8kB.
:::

### Arguments

| Name | Type | Description | 
| ------------ | ------------------- | ---------------------------------------------------------------------- |
| "key"        | (string, required)  | key (should be unique)                                                 |
| "value"      | (string, required)  | value                                                                  |
| "days"       | (numeric, required) | amount of days before the key expires (1440 blocks/day); minimum 1 day |
| "passphrase" | (string, optional)  | passphrase required to update this key                                 |

### Response

| Name | Type | Description | 
| ------------ | --------- | ----------------------------------------- |
| "coin"       | (string)  | the chain on which the key is stored      |
| "height"     | (numeric) | the height at which the key was stored    |
| "expiration" | (numeric) | the height at which the key will expire   |
| "flags"      | (string)  | the amount of days the key will be stored |
| "key"        | (numeric) | the stored key                            |
| "keylen"     | (numeric) | the length of the key                     |
| "value"      | (numeric) | the stored value                          |
| "valuesize"  | (string)  | the length of the stored value            |
| "fee"        | (string)  | the transaction fee paid to store the key |
| "txid"       | (string)  | the transaction id                        |

#### :pushpin: Examples

Command:

```bash
./komodo-cli kvupdate "examplekey" "examplevalue" 2 "examplepassphrase"
```


<collapse-text hidden title="Response">


```json
{
  "coin": "MYCOIN",
  "owner": "1ff91604c6adb6ec550e7575fe9f1ca591704572e125f55bed03a21c242c31b7",
  "height": 566,
  "expiration": 2006,
  "flags": 3,
  "key": "examplekey",
  "keylen": 10,
  "value": "examplevalue",
  "valuesize": 12,
  "fee": 0.001,
  "txid": "2dc76f39188bb006931a2c924fdf66bc3baf149bf880fffad778cabd6ace5749"
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "kvupdate", "params": ["examplekey", "examplevalue", "2", "examplepassphrase"] }' -H 'content-type: text/plain;' http://127.0.0.1:9801
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "coin": "MYCOIN",
    "owner": "1ff91604c6adb6ec550e7575fe9f1ca591704572e125f55bed03a21c242c31b7",
    "height": 566,
    "expiration": 2006,
    "flags": 3,
    "key": "examplekey",
    "keylen": 10,
    "value": "examplevalue",
    "valuesize": 12,
    "fee": 0.001,
    "txid": "9f44dc664882198b14e9a8c466d466efcdd070ccb6f57be8e2884aa11e7b2a30"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## minerids

**minerids height**

The `minerids` method returns information about the notary nodes and external miners at a specific block height. The response will calculate results according to the 2000 blocks proceeding the indicated "height" block.

### Arguments

| Name | Type | Description | 
| --------- | -------- | ------------------------------ |
| heights   | (number) | the block height for the query |

### Response

| Name | Type | Description | 
| ------------ | -------- | ----------------------------------------- |
| "mined":     |          |
| "notaryid"   | (number) | the id of the specific notary node        |
| "kmdaddress" | (string) | the KMD address of the notary node        |
| "pubkey"     | (string) | the public signing key of the notary node |
| "blocks"     | (number) |                                           |

#### :pushpin: Examples

Command:

```bash
./komodo-cli minerids 1000000
```


<collapse-text hidden title="Response">


```json
{
  "mined": [
    {
      "notaryid": 0,
      "KMDaddress": "RNJmgYaFF5DbnrNUX6pMYz9rcnDKC2tuAc",
      "pubkey": "03b7621b44118017a16043f19b30cc8a4cfe068ac4e42417bae16ba460c80f3828",
      "blocks": 22
    }
      ...    (63 responses omitted for brevity)
    ,
    {
      "pubkey": "external miners",
      "blocks": 541
    }
  ],
  "numnotaries": 64
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "minerids", "params": ["1000000"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "mined": [
      {
        "notaryid": 0,
        "KMDaddress": "RNJmgYaFF5DbnrNUX6pMYz9rcnDKC2tuAc",
        "pubkey": "03b7621b44118017a16043f19b30cc8a4cfe068ac4e42417bae16ba460c80f3828",
        "blocks": 22
      }
        ...    (63 responses omitted for brevity)
      ,
      {
        "pubkey": "external miners",
        "blocks": 541
      }
    ],
    "numnotaries": 64
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## notaries

**notaries height timestamp**

**notaries height**

**notaries timestamp**

The `notaries` method returns the public key, BTC address, and KMD address for each Komodo notary node.

Either or both of the height and timestamp parameters will suffice.

### Arguments

| Name | Type | Description | 
| --------- | -------- | ------------------------------------------------ |
| height    | (number) | the block height desired for the query           |
| timestamp | (number) | the timestamp of the block desired for the query |

### Response

| Name | Type | Description | 
| ------------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------- |
| "notaries": [ ... ] | (array)  |
| "pubkey"            | (string) | the public signing key of the indicated notary node, used on the KMD network to create notary-node authorized transactions            |
| "BTCaddress"        | (string) | the public BTC address the notary node uses on the BTC blockchain to create notarizations                                             |
| "KMDaddress"        | (string) | the public KMD address the notary node uses on the KMD blockchain to create notarizations                                             |
| "numnotaries"       | (number) | the number of notary nodes; typically this value is 64, but the value may vary on rare circumstances, such as during election seasons |
| "height"            | (number) | the block height number at which the notary-node information applies                                                                  |
| "timestamp"         | (number) | the timestamp at which the notary-node information applies                                                                            |

#### :pushpin: Examples

Command:

```bash
./komodo-cli notaries 1536365515
```


<collapse-text hidden title="Response">


```json
{
  "notaries": [
    {
      "pubkey": "03b7621b44118017a16043f19b30cc8a4cfe068ac4e42417bae16ba460c80f3828",
      "BTCaddress": "1E2ac2gxeFR2ir1H3vqETTperWkiXkwy99",
      "KMDaddress": "RNJmgYaFF5DbnrNUX6pMYz9rcnDKC2tuAc"
    },
      ...  (63 responses omitted from the documentation for brevity)
  ],
  "numnotaries": 64,
  "height": 1536365515,
  "timestamp": 1536792974
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "notaries", "params": ["1000000"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
"result": {
  "notaries": [
    {
      "pubkey": "03b7621b44118017a16043f19b30cc8a4cfe068ac4e42417bae16ba460c80f3828",
      "BTCaddress": "1E2ac2gxeFR2ir1H3vqETTperWkiXkwy99",
      "KMDaddress": "RNJmgYaFF5DbnrNUX6pMYz9rcnDKC2tuAc"
    },
      ...      (63 responses omitted from documentation for brevity)
  ],
  "numnotaries": 64,
  "height": 1000000,
  "timestamp": 1536365515
},
"error": null,
"id": "curltest"
}
```

</collapse-text>


## verifychain

**verifychain ( checklevel numblocks )**

The `verifychain` method verifies the coin daemon's blockchain database.

::: tip
Depending on the state of your blockchain database and daemon, this call can take a prolonged period of time to complete.
:::

### Arguments

| Name | Type | Description | 
| ---------- | --------------------------------------- | ------------------------------------------------ |
| checklevel | (numeric, optional, 0-4, default=3)     | indicates the thoroughness of block verification |
| numblocks  | (numeric, optional, default=288, 0=all) | indicates the number of blocks to verify         |

### Response

| Name | Type | Description | 
| ---------- | --------- | --------------------------------------- |
| true/false | (boolean) | whether the verification was successful |

#### :pushpin: Examples

Command:

```bash
./komodo-cli verifychain
```


<collapse-text hidden title="Response">


```bash
true
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "verifychain", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": true,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## verifytxoutproof

**verifytxoutproof "proof_string"**

The `verifytxoutproof` method verifies that a proof points to a transaction in a block. It returns the transaction to which the proof is committed, or it will throw an RPC error if the block is not in the current best chain.

### Arguments

| Name | Type | Description | 
| -------------- | ------------------ | ------------------------------------------------ |
| "proof_string" | (string, required) | the hex-encoded proof generated by gettxoutproof |

### Response

| Name | Type | Description | 
| --------- | -------- | ------------------------------------------------------------------------------------------ |
| "txid"    | (string) | the transaction ids to which the proof commits; the array is empty if the proof is invalid |

#### :pushpin: Examples

Command:

```bash
./komodo-cli verifytxoutproof "040000004cd8bd98c66020496d0b34a5f5412400146ba10d6c7ab4286f84f7008d8d390e9ca9575183f60906e293e9766997396bec59f1c0b966085de3d17f8ac3c9d5280000000000000000000000000000000000000000000000000000000000000000da05975bf50e0f202d004b81fcc388cfd411d8c7c59a548e070b5affe938ce8ce830f10b298b00002402939a9a31df1305b40d26d9748283b102c708258717248d0d63f01d2957d8e3dcf56f6e03000000022e4babc29707fbdd8da2e4277b7c8b8b09e837f409eb047c936904d75fc8e6267a9dcf39838a70d552bf5e246116bee43e93178916aae388d5bd87bf2e4a1fc7010d"
```


<collapse-text hidden title="Response">


```json
["c71f4a2ebf87bdd588e3aa168917933ee4be1661245ebf52d5708a8339cf9d7a"]
```

</collapse-text>


Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "verifytxoutproof", "params": ["040000004cd8bd98c66020496d0b34a5f5412400146ba10d6c7ab4286f84f7008d8d390e9ca9575183f60906e293e9766997396bec59f1c0b966085de3d17f8ac3c9d5280000000000000000000000000000000000000000000000000000000000000000da05975bf50e0f202d004b81fcc388cfd411d8c7c59a548e070b5affe938ce8ce830f10b298b00002402939a9a31df1305b40d26d9748283b102c708258717248d0d63f01d2957d8e3dcf56f6e03000000022e4babc29707fbdd8da2e4277b7c8b8b09e837f409eb047c936904d75fc8e6267a9dcf39838a70d552bf5e246116bee43e93178916aae388d5bd87bf2e4a1fc7010d"] }' -H 'content-type: text/plain;' http://127.0.0.1:9801
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    "c71f4a2ebf87bdd588e3aa168917933ee4be1661245ebf52d5708a8339cf9d7a"
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>

# CC Lib

The following methods interact with Custom Consensus modules that make use of the `-ac_cclib` parameter.

## cclib

**cclib insert_method insert_evalcode \\"[%22json_string%22, json_integer, ... ]\\"**

The `cclib` method allows the user to interact with the dynamic Custom Consensus module associated with `evalcode`.

Each `evalcode` module has unique methods and json parameters associated, as well as unique responses.

#### cclib formatting

Arguments for `cclib` methods are supplied as arrays. When executed in the terminal, the values for the array can be added in a normal fashion. However, when `cclib` methods are executed as a part of a script, the shell cannot parse the arrays without additional formatting.

##### Array Formatting for Terminal

In the terminal, the array is bound by `''` single-quotation characters and strings are bound by `""` double-quotation characters.

Terminal format:

```bash
./komodo-cli -ac_name=MUSIG  cclib send 18 '["03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a",1]'
```

##### Array Formatting for Bash Scripts

In a bash-script, the array is bound by `\"\"` escaped double-quotation characters and strings within the array are bound by `%22 %22` characters. (`0x22` is the ASCII encoding for `"`.)

This format can be used in a terminal directly or in shell scripts, and therefore some developers may default to it, although the format is not always necessary.

Script format:

```bash
./komodo-cli -ac_name=MUSIG  cclib send 18 \"[%2203d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a%22,1]\"
```

::: tip
The [cclibinfo](../komodo-api/cclib.html#cclibinfo) method returns a complete list of available methods and their parameters for each unique `evalcode`.
:::

### Arguments

| Name        | Type             | Description                                                       |
| ----------- | ---------------- | ----------------------------------------------------------------- |
| method      | (string)         | the unique name of the method                                     |
| evalcode    | (decimal number) | the `EVALCODE` of the module of interest                          |
| json_params | (array)          | the parameters to be supplied to the method, provided as an array |

### Response

| Name                        | Type | Description |
| --------------------------- | ---- | ----------- |
| (each `EVALCODE` is unique) |      |             |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib combine 18 \"[%220225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270a%22,%2202d3431950c2f0f9654217b6ce3d44468d3a9ca7255741767fdeee7c5ec6b47567%22]\"
```


<collapse-text hidden title="Response">


```json
{
  "pkhash": "8897e150bfb07d3f967ffadb4b0f3c84ea73a94c0d715c4b7e6d9c816c5113a9",
  "combined_pk": "03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a",
  "result": "success"
}
```

</collapse-text>


## cclibaddress

**cclibaddress evalcode pubkey**

The `cclibaddress` method returns information about the addresses related to the specified `pubkey`, and according to the Custom Consensus module associated with the specified `evalcode`. If no `pubkey` is provided, the `pubkey` used to the launch the daemon is the default.

### Arguments

| Name     | Type               | Description                                                 |
| -------- | ------------------ | ----------------------------------------------------------- |
| evalcode | (decimal number)   | the `EVALCODE` of the module of interest                    |
| pubkey   | (string, optional) | the public key related to the requested address information |

### Response

| Name                   | Type     | Description                                                                                                                         |
| ---------------------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------- |
| result                 | (string) | whether the command executed successfully                                                                                           |
| CClibCCAddress         | (string) | taking the parameter `evalcode` as a modifier, this is the public address that corresponds to the Custom Consensus module's privkey |
| CCbalance              | (number) | the amount of coins in the `CClibCCAddress`                                                                                         |
| CClibNormalAddress     | (string) | the unmodified public address generated from the Custom Consensus module's privkey                                                  |
| CClibCCTokensAddress   | (string) | this property is used for development purposes only and can otherwise be ignored                                                    |
| myAddress              | (string) | the normal address generated from the `pubkey`                                                                                      |
| myCCAddress(CClib)     | (string) | taking the parameter `evalcode` as a modifier, this is the public address that corresponds to the `pubkey`                          |
| PubkeyCCaddress(CClib) | (string) | taking the parameter `evalcode` as a modifier, this is the public address that corresponds to the `pubkey`                          |
| myCCaddress            | (string) | taking the parameter `evalcode` as a modifier, this is the public address that corresponds to the `pubkey`                          |
| myCCbalance            | (number) | the amount of coins in `myCCaddress`                                                                                                |
| mybalance              | (number) | the amount of coins in `myAddress`                                                                                                  |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=MUSIG cclibaddress 18 0225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270a
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "CClibCCAddress": "RKWS7jxyjPX9iaJttk8iMKf1AumanKypez",
  "CCbalance": 2.0977,
  "CClibNormalAddress": "RQHYfxb21ow4Xppt2H9x7k5XMhk7PMbKCc",
  "CClibCCTokensAddress": "RVjvG3or8b8asoYBJua9p97pf3RSpaEhRG",
  "myAddress": "RUfCUd3UryKJ49baQvSuAs42wakNunvvfT",
  "myCCAddress(CClib)": "RPYCYEtS7GAt1W9LvJWXHsndozaA8yy4H9",
  "PubkeyCCaddress(CClib)": "RPYCYEtS7GAt1W9LvJWXHsndozaA8yy4H9",
  "myCCaddress": "RPYCYEtS7GAt1W9LvJWXHsndozaA8yy4H9",
  "myCCbalance": 0.0,
  "myaddress": "RUfCUd3UryKJ49baQvSuAs42wakNunvvfT",
  "mybalance": 94.60081561
}
```

</collapse-text>


## cclibinfo

**cclibinfo**

The `cclibinfo` method displays all the methods of all the modules that are available in the current library.

The library is loaded at runtime using the [-ac_cclib](../installations/asset-chain-parameters.html#ac-cclib) parameter.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name            | Type                    | Description                                                                                                                                                                                       |
| --------------- | ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| result          | (string)                | whether the command executed successfully                                                                                                                                                         |
| CClib           | (string)                | the name of the given CClibrary                                                                                                                                                                   |
| methods         | (array of json objects) | an array containing json objects, each of which describe a method of a module                                                                                                                     |
| evalcode        | (decimal number)        | the `EVALCODE` of the given Custom Consensus module                                                                                                                                               |
| funcid          | (character)             | this value is a mnemonic in the `OP_RETURN` for all generated transactions; if the provided method does not generate a transaction, this value is a single character that has no relevant meaning |
| name            | (string)                | the name of the Custom Consensus module                                                                                                                                                           |
| method          | (string)                | the name of the method                                                                                                                                                                            |
| help            | (string)                | help for the method, including a description of the method's arguments                                                                                                                            |
| params_required | (decimal number)        | the number of parameters that are required for the method to succeed                                                                                                                              |
| params_max      | (decimal number)        | the maximum number of parameters the method can accept                                                                                                                                            |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=MUSIG cclibinfo
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "CClib": "sudoku",
  "methods": [
    {
      "evalcode": 16,
      "funcid": "F",
      "name": "faucet2",
      "method": "fund",
      "help": "amount",
      "params_required": 1,
      "params_max": 1
    },
    {
      "evalcode": 16,
      "funcid": "G",
      "name": "faucet2",
      "method": "get",
      "help": "<no args>",
      "params_required": 0,
      "params_max": 0
    },
    {
      "evalcode": 17,
      "funcid": "G",
      "name": "sudoku",
      "method": "gen",
      "help": "<no args>",
      "params_required": 0,
      "params_max": 0
    },
.....
}
```

</collapse-text>

# Control

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

<!-- These work for KMDLabs chains now, must revisit after they are modded to work for KMD
## getnotarysendmany

**getnotarysendmany**

The `getnotarysendmany` method returns a sendmany JSON array with Raddresses of the current notaries.



Examples:

> komodo-cli getnotarysendmany 10
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getnotarysendmany", "params": [10] }' -H 'content-type: text/plain;' http://127.0.0.1:7771/

## getiguanajson
-->

## getinfo

**getinfo**

The `getinfo` method returns an object containing various state info.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| ----------------- | ------------------ | -------------------------------------------------------------------------------------------------------------------------------------- |
| "version"         | (numeric)          | the server version                                                                                                                     |
| "protocolversion" | (numeric)          | the protocol version                                                                                                                   |
| "walletversion"   | (numeric)          | the wallet version                                                                                                                     |
| "balance"         | (numeric)          | the total balance of the wallet                                                                                                        |
| "blocks"          | (numeric)          | the current number of blocks processed in the server                                                                                   |
| "timeoffset"      | (numeric)          | the time offset                                                                                                                        |
| "connections"     | (numeric)          | the number of connections                                                                                                              |
| "proxy"           | (string, optional) | the proxy used by the server                                                                                                           |
| "difficulty"      | (numeric)          | the current difficulty                                                                                                                 |
| "testnet"         | (boolean)          | if the server is using testnet or not                                                                                                  |
| "keypoololdest"   | (numeric)          | the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool                                                |
| "keypoolsize"     | (numeric)          | how many new keys are pre-generated                                                                                                    |
| "unlocked_until"  | (numeric)          | the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked |
| "paytxfee"        | (numeric)          | the transaction fee set in COIN/kB                                                                                                     |
| "relayfee"        | (numeric)          | minimum relay fee for non-free transactions in COIN/kB                                                                                 |
| "errors"          | (string)           | any error messages                                                                                                                     |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getinfo
```


<collapse-text hidden title="Response">


```json
{
  "version": 1001550,
  "protocolversion": 170003,
  "KMDversion": "0.2.0",
  "notarized": 0,
  "prevMoMheight": 0,
  "notarizedhash": "0000000000000000000000000000000000000000000000000000000000000000",
  "notarizedtxid": "0000000000000000000000000000000000000000000000000000000000000000",
  "notarizedtxid_height": "mempool",
  "KMDnotarized_height": 0,
  "notarized_confirms": 0,
  "walletversion": 60000,
  "balance": 10.16429765,
  "blocks": 459,
  "longestchain": 0,
  "timeoffset": 0,
  "tiptime": 1536624090,
  "connections": 0,
  "proxy": "",
  "difficulty": 1.000026345948652,
  "testnet": false,
  "keypoololdest": 1536262464,
  "keypoolsize": 101,
  "paytxfee": 0.0,
  "relayfee": 0.000001,
  "errors": "",
  "name": "SIDD",
  "p2pport": 9800,
  "rpcport": 9801,
  "magic": -759875707,
  "premine": 10
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getinfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "version": 1001550,
    "protocolversion": 170003,
    "KMDversion": "0.2.0",
    "notarized": 0,
    "prevMoMheight": 0,
    "notarizedhash": "0000000000000000000000000000000000000000000000000000000000000000",
    "notarizedtxid": "0000000000000000000000000000000000000000000000000000000000000000",
    "notarizedtxid_height": "mempool",
    "KMDnotarized_height": 0,
    "notarized_confirms": 0,
    "walletversion": 60000,
    "balance": 10.16429765,
    "blocks": 459,
    "longestchain": 0,
    "timeoffset": 0,
    "tiptime": 1536624090,
    "connections": 0,
    "proxy": "",
    "difficulty": 1.000026345948652,
    "testnet": false,
    "keypoololdest": 1536262464,
    "keypoolsize": 101,
    "relayfee": 1e-6,
    "paytxfee": 0,
    "errors": "",
    "name": "SIDD",
    "p2pport": 9800,
    "rpcport": 9801,
    "magic": -759875707,
    "premine": 10
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## help

**help ( "command" )**

The `help` method lists all commands, or all information for a specified command.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | -------------------------------- |
| "command" | (string, optional) | the command requiring assistance |


### Response


| Name | Type | Description | 
| --------- | ------------------ | -------------------------------- |
| "command" | (string, optional) | the command requiring assistance |

#### :pushpin: Examples

Command:

```bash
./komodo-cli help
```

<collapse-text hidden title="Response">


```bash
== Addressindex ==
getaddressbalance
getaddressdeltas
getaddressmempool
getaddresstxids
getaddressutxos
getsnapshot

== Auction ==
auctionaddress [pubkey]

== Blockchain ==
coinsupply <height>
getbestblockhash
getblock "hash|height" ( verbose )
getblockchaininfo
getblockcount

getblockhash index
getblockhashes timestamp
getblockheader "hash" ( verbose )
getchaintips
getdifficulty

........ (other responses omitted for brevity)
```

</collapse-text>

Command:

```bash
./komodo-cli help getaddressbalance
```


<collapse-text hidden title="Response">


```bash
Returns the balance for an address(es) (requires addressindex to be enabled).

Arguments:
{
  "addresses"
    [
      "address"  (string) The base58check encoded address
      ,...
    ]
}

Result:
{
  "balance"  (string) The current balance in satoshis
  "received"  (string) The total number of satoshis received (including change)
}

Examples:
> komodo-cli getaddressbalance '{"addresses": ["RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87"]}'
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressbalance", "params": [{"addresses": ["RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:7771/
```

</collapse-text>

## stop

**stop**

The `stop` method instructs the coin daemon to shut down.

The amount of time it takes to shut down the chain will vary depending on the chain's current state.

::: warning
Forcefully stopping the chain should be avoided, as it may cause a corruption in the local database. In the event of a corrupted database, the user will need to <b>resync</b>.
:::

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| ----------------------------- | ---- | ----------- |
| Komodo server stopping        |      |
| [COIN] Komodo server stopping |      |

#### :pushpin: Examples

Command:

```bash
./komodo-cli stop
```


<collapse-text hidden title="Response">


```bash
"Komodo server stopping"
```

</collapse-text>

---
sidebarDepth: 3
---

# Crosschain API

## Introduction

The Crosschain API allows a user to transfer (or "migrate") assets from one chain to another. Compatible forms of assets include coins and tokens.

The fundamental principle of migration is that a specific amount of assets are burned in the source chain and then the same specific amount of assets are created on the destination chain.

#### Different methods of migration using the Komodo Platform

- MoMoM notarized migration
  - "MoMoM" stands for "Merkle root of Merkle roots of Merkle roots"
- An alternative migration method with notarization of the given burn transaction by notary operators (this is a backup solution to the above MoMoM method)
- Self-managed import

#### Crosschain API Flow

- Make an <b>export</b> or <b>burn</b> transaction in the source chain.
- Create an "import" transaction for the burned value.
  - This is created on the source chain, but the transaction is sent on the destination chain
- Komodo's validation code checks that for the import transaction there exists a corresponding burn transaction, and that this transaction is not spent more than once.

#### Requirement

The source and destination chains should have the same `CCid` parameter ([ac_cc](../installations/asset-chain-parameters.html#ac-cc)). The value of this parameter should be greater than 100; this indicates to the Komodo software that the coins on both chains are fungible with each other.

:::tip Note

- In the examples, we use two chains. The source chain is <b>CFEKHOUND</b> and the destination chain is <b>CFEKDRAGON</b>.

:::

## MoMoM Notarized Migration

The MoMoM notarized migration API allows the migration of coin or token value using Komodo's notary network. This facilitates the highly scalable multi-chain architecture of Smart Chains on the Komodo Platform.

Notary nodes store "fingerprints" of the blocks belonging to the blockchains of the various assets in the main Komodo chain (KMD). The "fingerprints" can also be referred to as <b>MoM</b>, or `merkle root of merkle roots`.

The fingerprints of fingerprints are delivered back into the blockchain of the assets as back notarizations. To learn more about the notarization process, [please visit this linked article](https://komodoplatform.com/komodo-platforms-new-scalability-tech/).

### Workflow of the MoMoM value migration

- On the source chain, the user calls the method [migrate_createburntransaction](./crosschain.html#migrate-createburntransaction) and broadcasts the hex of the returned burn transaction (`BurnTxHex`) using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method. The user also receives the `payouts object` from this method
- On the source chain, the user runs [migrate_createimporttransaction](./crosschain.html#migrate-createimporttransaction) with the hex value of the burn transaction and the `payouts object` in hex format as arguments
- On the main Komodo chain (KMD) the user calls [migrate_completeimporttransaction](./crosschain.html#migrate-completeimporttransaction) with the import transaction in hex format which was received from the previous call as an argument.
  - As a part of this process, the proof object for the burn transaction inside the import transaction is extended with MoMoM data. This allows verification of the burn transaction on the destination chain by using the standard Komodo notarization process without the need to create additional proof objects

### migrate_createburntransaction

**migrate_createburntransaction destChain destAddress amount [tokenid]**

The `migrate_createburntransaction` method creates a transaction burning a specific amount of coins or tokens. This method also creates a `payouts object` which is later used to create an import transaction for the value corresponding to the burned amount. This method should be called on the source chain.

The method creates a burn transaction and returns it. This should be broadcast to the source chain using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method. After the burn transaction is successfully mined, the user might have to wait for some amount of time for the back notarization to reach the source chain. The back notarization contains the `MoMoM` fingerprints of the mined block that contains the burn transaction.

The hex value of the burn transaction along with the other returned value `payouts` are used as arguments for the `migrate_createimporttransaction` method.

#### Arguments

| Name          | Type                | Description                                                                                                                                                                                                                                            |
| ------------- | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| "destChain"   | (string, required)  | the name of the destination chain                                                                                                                                                                                                                      |
| "destAddress" | (string, required)  | the address on the destination chain where coins are to be sent; the pubkey if tokens are to be sent                                                                                                                                                   |
| "amount"      | (numeric, required) | the amount in coins or tokens that should be burned on the source chain and created on the destination chain; if the indicated assets are tokens, the amount can be set only to 1, as only migration of non-fungible tokens are supported at this time |
| "tokenid"     | (string, optional)  | token id in hex; if set, the software assumes that the user is migrating tokens                                                                                                                                                                        |

#### Response

| Name        | Type     | Description                                                                                               |
| ----------- | -------- | --------------------------------------------------------------------------------------------------------- |
| "payouts"   | (string) | a hex string of the created payouts; this value is passed into the migrate_createimporttransaction method |
| "BurnTxHex" | (string) | a hex string of the returned burn transaction                                                             |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=CFEKHOUND migrate_createburntransaction CFEKDRAGON RBQ1XwmzduHvciRJbXbWY9YBSNtaqZvfC4 7.77
```

<collapse-text hidden title="Response">

```json
{
  "payouts": "014014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac",
  "BurnTxHex": "0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c00000000000000000000000000"
}
```

</collapse-text>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "migrate_createburntransaction", "params": ["CFEKDRAGON","RBQ1XwmzduHvciRJbXbWY9YBSNtaqZvfC4","7.77"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```

<collapse-text hidden title="Response">

```json
{
  "result": {
    "payouts": "014014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac",
    "BurnTxHex": "0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c00000000000000000000000000"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>

Broadcast the transaction:

```bash
./komodo-cli -ac_name=CFEKHOUND sendrawtransaction 0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c00000000000000000000000000
```

<collapse-text hidden title="Response">

```bash
d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610
```

</collapse-text>

### migrate_converttoexport

**migrate_converttoexport rawtx dest_symbol**

The `migrate_converttoexport` method allows the user to create a customized burn transaction (as opposed to a fully automated burn transaction). This method converts a given transaction to a burn transaction.

The method adds proof data to the transaction, extracts the transaction vouts, calculates their value, and burns the value by sending it to an opreturn vout. This vout is then added to the created transaction. (An opreturn vout cannot be spent at a later date, and therefore funds sent to an opreturn vout are permanently burnt.)

The other returned value, `payouts`, is used in the `migrate_createimporttransaction` method.

The caller of the method bears the responsibility to fund and sign the returned burn transaction using the methods [fundrawtransaction](../komodo-api/rawtransactions.html#fundrawtransaction) and [signrawtransaction](../komodo-api/rawtransactions.html#signrawtransaction).

The signed burn transaction must be broadcast to the <!-- FIXME destination chain ? --> source chain using the [sendrawtansaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

::: warning Limitations

- The <b>migrate_converttoexport</b> method supports only coins (tokens are not supported).
- The burn transaction must be stored in the import transaction's opreturn vout. Because an opreturn's data size is limited to 10,001 bytes, we recommend that the user limit the burn transaction's size to 30% of the opreturn object.

:::

#### Arguments

| Name        | Type               | Description                        |
| ----------- | ------------------ | ---------------------------------- |
| "burntx"    | (string, required) | the burn transaction in hex format |
| "destChain" | (string, required) | the name of the destination chain  |

#### Response

| Name       | Type     | Description                                                                                         |
| ---------- | -------- | --------------------------------------------------------------------------------------------------- |
| "payouts"  | (string) | a hex string of the created payouts; this is passed into the migrate_createimporttransaction method |
| "exportTx" | (string) | a hex string of the returned burn transaction                                                       |

#### :pushpin: Examples

Create a raw transaction:

```bash
./komodo-cli -ac_name=CFEKHOUND createrawtransaction '[{"txid":"ad930d24e0d1c060d7acf46170e31b6863cb429969449d81babd7a644745bfff","vout":6}]' '{"RBQ1XwmzduHvciRJbXbWY9YBSNtaqZvfC4":0.077}'
```

<collapse-text hidden title="Response">

```bash
0400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000000ffffffff01207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac00000000f36f00000000000000000000000000
```

</collapse-text>

Convert it to an export transaction:

```bash
./komodo-cli -ac_name=CFEKHOUND migrate_converttoexport 0400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000000ffffffff01207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac00000000f36f00000000000000000000000000 CFEKDRAGON
```

<collapse-text hidden title="Response">

```json
{
  "payouts": "01207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac",
  "exportTx": "0400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000000ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f00000000000000000000000000"
}
```

</collapse-text>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "migrate_converttoexport", "params": ["0400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000000ffffffff01207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac00000000f36f00000000000000000000000000","CFEKDRAGON"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```

<collapse-text hidden title="Response">

```json
{
  "result": {
    "payouts": "01207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac",
    "exportTx": "0400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000000ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f00000000000000000000000000"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>

Sign the export transaction:

```bash
./komodo-cli -ac_name=CFEKHOUND signrawtransaction 0400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000000ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f00000000000000000000000000
```

<collapse-text hidden title="Response">

```json
{
  "hex": "0400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000049483045022100f609176d691bade4060799424d7d3813ea3337ad8aabc79bb6fd51797b6ec9c80220073d1ba3a74da7e33bcccf5851c2152d66fcd7aa0d2c1521ec8b2ab444d656f801ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f00000000000000000000000000",
  "complete": true
}
```

</collapse-text>

Broadcast the export transaction (using the method [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction), with the option `allowhighfees` set to `true`)

```bash
./komodo-cli -ac_name=CFEKHOUND sendrawtransaction 0400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000049483045022100f609176d691bade4060799424d7d3813ea3337ad8aabc79bb6fd51797b6ec9c80220073d1ba3a74da7e33bcccf5851c2152d66fcd7aa0d2c1521ec8b2ab444d656f801ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f00000000000000000000000000 true
```

<collapse-text hidden title="Response">

```bash
ade1c02370f47004ad7c323fa1e456171fb3e508d7dff473a5b7fa1214480adb
```

</collapse-text>

To see the rest of the process when `migrate_converttoexport` is used, click the following button:

<collapse-text hidden title="rest of the Steps">

Create the import transaction using the signed export transaction that has been created:

```bash
./komodo-cli -ac_name=CFEKHOUND migrate_createimporttransaction 0400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000049483045022100f609176d691bade4060799424d7d3813ea3337ad8aabc79bb6fd51797b6ec9c80220073d1ba3a74da7e33bcccf5851c2152d66fcd7aa0d2c1521ec8b2ab444d656f801ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f00000000000000000000000000 01207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac
```

Response:

```json
{
  "ImportTxHex": "0400008085202f8901db0a481412fab7a573f4dfd708e5b31f1756e4a13f327cad0470f47023c0e1ad00ca9a3b0201e2ffffffff02207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fd9b016a4d9701e211faf6efe321866a1f23d337190f69d97700ba3ec5e62bd325eb10de76d4edb073030597d5b415e109dbadb1ec193255d6a22478d1a73ddbb49dd26d9419e8929a7608b7a9d42bf456c04852b93e1d50bee26870c13f90e12471b8b2c08ce9ae51c50d6fb355134e33e4c702181ad87a0f0bfec1861732f5c8b04eb9e64d2aaecf0274ef693f365305e5be0a98cc7c892b4d4c0fa75c952e0955fcb1fb0c2c4d3ad346813d801c8749e5a2b3834cbb874f11d8619523553fd21c9b07395f5679d1ad340400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000049483045022100f609176d691bade4060799424d7d3813ea3337ad8aabc79bb6fd51797b6ec9c80220073d1ba3a74da7e33bcccf5851c2152d66fcd7aa0d2c1521ec8b2ab444d656f801ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f0000000000000000000000000000000000000000000000000000000000000000"
}
```

Complete the import transaction by executing the `migrate_completeimporttransaction` method on the KMD chain:

```bash
./komodo-cli migrate_completeimporttransaction 0400008085202f8901db0a481412fab7a573f4dfd708e5b31f1756e4a13f327cad0470f47023c0e1ad00ca9a3b0201e2ffffffff02207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fd9b016a4d9701e211faf6efe321866a1f23d337190f69d97700ba3ec5e62bd325eb10de76d4edb073030597d5b415e109dbadb1ec193255d6a22478d1a73ddbb49dd26d9419e8929a7608b7a9d42bf456c04852b93e1d50bee26870c13f90e12471b8b2c08ce9ae51c50d6fb355134e33e4c702181ad87a0f0bfec1861732f5c8b04eb9e64d2aaecf0274ef693f365305e5be0a98cc7c892b4d4c0fa75c952e0955fcb1fb0c2c4d3ad346813d801c8749e5a2b3834cbb874f11d8619523553fd21c9b07395f5679d1ad340400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000049483045022100f609176d691bade4060799424d7d3813ea3337ad8aabc79bb6fd51797b6ec9c80220073d1ba3a74da7e33bcccf5851c2152d66fcd7aa0d2c1521ec8b2ab444d656f801ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f0000000000000000000000000000000000000000000000000000000000000000
```

Response:

```json
{
  "ImportTxHex": "0400008085202f8901db0a481412fab7a573f4dfd708e5b31f1756e4a13f327cad0470f47023c0e1ad00ca9a3b0201e2ffffffff02207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fd1b026a4d1702e211e48af72fc33ac62659441e7ab56499ea8afd5a258299bed66982c45fc5d9683a230997d5b415e109dbadb1ec193255d6a22478d1a73ddbb49dd26d9419e8929a7608b7a9d42bf456c04852b93e1d50bee26870c13f90e12471b8b2c08ce9ae51c50d6fb355134e33e4c702181ad87a0f0bfec1861732f5c8b04eb9e64d2aaecf0274ef693f365305e5be0a98cc7c892b4d4c0fa75c952e0955fcb1fb0c2c4d3ad346813d801c8749e5a2b3834cbb874f11d8619523553fd21c9b07395f5679d1ad34063e78002b6855b2a948d95d576fffcd9933550d8b91a35f16c39313347e78906bdca88c092c043f25170cf027411f918e234623a395de76ebe854e57c06c6f3e12befa6a56885f7fe3da8523e184cb93b394510246de78a750858c37cb5342bf12de3742ebc2905c5ce4df63ebdb2a9d937933e0d13be142c2faa8055f0f7d90400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000049483045022100f609176d691bade4060799424d7d3813ea3337ad8aabc79bb6fd51797b6ec9c80220073d1ba3a74da7e33bcccf5851c2152d66fcd7aa0d2c1521ec8b2ab444d656f801ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f0000000000000000000000000000000000000000000000000000000000000000"
}
```

Broadcast this transaction on the destination chain:

```bash
./komodo-cli -ac_name=CFEKDRAGON sendrawtransaction 0400008085202f8901db0a481412fab7a573f4dfd708e5b31f1756e4a13f327cad0470f47023c0e1ad00ca9a3b0201e2ffffffff02207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fd1b026a4d1702e211e48af72fc33ac62659441e7ab56499ea8afd5a258299bed66982c45fc5d9683a230997d5b415e109dbadb1ec193255d6a22478d1a73ddbb49dd26d9419e8929a7608b7a9d42bf456c04852b93e1d50bee26870c13f90e12471b8b2c08ce9ae51c50d6fb355134e33e4c702181ad87a0f0bfec1861732f5c8b04eb9e64d2aaecf0274ef693f365305e5be0a98cc7c892b4d4c0fa75c952e0955fcb1fb0c2c4d3ad346813d801c8749e5a2b3834cbb874f11d8619523553fd21c9b07395f5679d1ad34063e78002b6855b2a948d95d576fffcd9933550d8b91a35f16c39313347e78906bdca88c092c043f25170cf027411f918e234623a395de76ebe854e57c06c6f3e12befa6a56885f7fe3da8523e184cb93b394510246de78a750858c37cb5342bf12de3742ebc2905c5ce4df63ebdb2a9d937933e0d13be142c2faa8055f0f7d90400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000049483045022100f609176d691bade4060799424d7d3813ea3337ad8aabc79bb6fd51797b6ec9c80220073d1ba3a74da7e33bcccf5851c2152d66fcd7aa0d2c1521ec8b2ab444d656f801ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f0000000000000000000000000000000000000000000000000000000000000000
```

Response:

```bash
f8285da90da40f929598652cd90e6dd9968d91b1f69bdba79c46890bfd210d63
```

</collapse-text>

### migrate_createimporttransaction

**migrate_createimporttransaction burntx payouts [notaryTxid1]...[notaryTxidN]**

- The `migrate_createimporttransaction` method performs the initial step in creating an import transaction. This method should be called on the source chain.
- This method returns a created import transaction in hex format. This string should be passed to the `migrate_completeimporttransaction` method on the main KMD chain to be extended with the `MoMoM` proof object.
- When using the MoMoM backup solution (described later), the created import transaction is not passed to the `migrate_completeimporttransaction` method.
- The user may need to wait for some time before the back notarizations objects are stored in the destination chain.

#### Arguments

| Name          | Type               | Description                                                                                                    |
| ------------- | ------------------ | -------------------------------------------------------------------------------------------------------------- |
| "burntx"      | (string, required) | the burn transaction in hex format returned from the previous method                                           |
| "payouts"     | (string, required) | the payouts object in hex format returned from the previous method and used for creating an import transaction |
| "notaryTxid1" | (string, optional) | the notary approval transaction id 1, to be passed if the `MoMoM` backup solution is used for notarization     |
| "notaryTxidN" | (string, optional) | the notary approval transaction id N, to be passed if the `MoMoM` backup solution is used for notarization     |

#### Response

| Name          | Type     | Description                                  |
| ------------- | -------- | -------------------------------------------- |
| "ImportTxHex" | (string) | the created import transaction in hex format |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=CFEKHOUND migrate_createimporttransaction 0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c00000000000000000000000000 014014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac
```

<collapse-text hidden title="Response">

```json
{
  "ImportTxHex": "0400008085202f89011016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd100ca9a3b0201e2ffffffff024014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fdc9016a4dc501e211da14c5a904dcf9dcc5c4471bae0f3e90274bc782fcaf7a828c23190dbbd3392205042cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b6f7fb8e5644af270917b10fa879a0c5636de719d308efd245ff5613450b934a5f32fd21b84a67d7b6be78b5d625af836cf7efddab3c6e8fea54345bab9ea7732cf073ef25f0b8a0764d928c8a420d45beb793fa8ea93432a908c808e4f47daadf0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c0000000000000000000000000000000000000000000000000000000000000000"
}
```

</collapse-text>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "migrate_createimporttransaction", "params": ["0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c00000000000000000000000000","014014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```

<collapse-text hidden title="Response">

```json
{
  "result": {
    "ImportTxHex": "0400008085202f89011016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd100ca9a3b0201e2ffffffff024014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fdc9016a4dc501e211da14c5a904dcf9dcc5c4471bae0f3e90274bc782fcaf7a828c23190dbbd3392205042cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b6f7fb8e5644af270917b10fa879a0c5636de719d308efd245ff5613450b934a5f32fd21b84a67d7b6be78b5d625af836cf7efddab3c6e8fea54345bab9ea7732cf073ef25f0b8a0764d928c8a420d45beb793fa8ea93432a908c808e4f47daadf0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c0000000000000000000000000000000000000000000000000000000000000000"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>

### migrate_completeimporttransaction

**migrate_completeimporttransaction importtx**

The `migrate_completeimporttransaction` method performs the finalizing step in creating an import transaction. This method should be called on the KMD (Komodo) chain.

This method returns the import transaction in hex format, updated with the `MoMoM` proof object. This object provides confirmation that the burn transaction exists in the source chain.

The finalized import transaction should be broadcast on the destination chain through the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

Komodo recommends that the user wait until the notarization objects are stored in the destination chain before broadcasting the import transaction. Otherwise an error message is returned.

In the event that an error is returned, simply wait until the notarization objects are stored in the KMD chain and try again.

#### Arguments

| Name       | Type               | Description                                                                                                    |
| ---------- | ------------------ | -------------------------------------------------------------------------------------------------------------- |
| "importtx" | (string, required) | the import transaction in hex format created using the previous method                                         |
| "offset"   | (string, optional) | the number of blocks below the current KMD(Komodo) blockchain height in which a `MoMoM` proof must be searched |

#### Response

| Name          | Type     | Description                                                                 |
| ------------- | -------- | --------------------------------------------------------------------------- |
| "ImportTxHex" | (string) | import transaction in hex extended with the MoMoM proof of burn transaction |

#### :pushpin: Examples

Command:

```bash
./komodo-cli migrate_completeimporttransaction 0400008085202f89011016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd100ca9a3b0201e2ffffffff024014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fdc9016a4dc501e211da14c5a904dcf9dcc5c4471bae0f3e90274bc782fcaf7a828c23190dbbd3392205042cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b6f7fb8e5644af270917b10fa879a0c5636de719d308efd245ff5613450b934a5f32fd21b84a67d7b6be78b5d625af836cf7efddab3c6e8fea54345bab9ea7732cf073ef25f0b8a0764d928c8a420d45beb793fa8ea93432a908c808e4f47daadf0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c0000000000000000000000000000000000000000000000000000000000000000
```

<collapse-text hidden title="Response">

```json
{
  "ImportTxHex": "0400008085202f89011016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd100ca9a3b0201e2ffffffff024014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fd49026a4d4502e211a2f7550475bf21bac89b760b8c1e6a114d77c22de1584f3d65a09b98fe73360945082cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b6f7fb8e5644af270917b10fa879a0c5636de719d308efd245ff5613450b934a5f32fd21b84a67d7b6be78b5d625af836cf7efddab3c6e8fea54345bab9ea7732cf073ef25f0b8a0764d928c8a420d45beb793fa8ea93432a908c808e4f47daadfdfaa753cfdd54be8cc63b15bc2544964c03c43e0645a1ea9302522a1c9daf4c19dd9ff959973a556e4761ae171363572f782f5660a89acde315cd811a1b42140fa6d1de2ced3e371e4f8e4bca493a23d6121a608ccc0d66eb45b3ccce9518612bef75468f0fe5310972c8059e9aabf86b59a824bf5e2ac6f6b6eeb7dc171ebcb0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c0000000000000000000000000000000000000000000000000000000000000000"
}
```

</collapse-text>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "migrate_completeimporttransaction", "params": ["0400008085202f89011016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd100ca9a3b0201e2ffffffff024014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fd49026a4d4502e211a2f7550475bf21bac89b760b8c1e6a114d77c22de1584f3d65a09b98fe73360945082cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b6f7fb8e5644af270917b10fa879a0c5636de719d308efd245ff5613450b934a5f32fd21b84a67d7b6be78b5d625af836cf7efddab3c6e8fea54345bab9ea7732cf073ef25f0b8a0764d928c8a420d45beb793fa8ea93432a908c808e4f47daadfdfaa753cfdd54be8cc63b15bc2544964c03c43e0645a1ea9302522a1c9daf4c19dd9ff959973a556e4761ae171363572f782f5660a89acde315cd811a1b42140fa6d1de2ced3e371e4f8e4bca493a23d6121a608ccc0d66eb45b3ccce9518612bef75468f0fe5310972c8059e9aabf86b59a824bf5e2ac6f6b6eeb7dc171ebcb0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c0000000000000000000000000000000000000000000000000000000000000000"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```

<collapse-text hidden title="Response">

```json
{
  "result": {
    "ImportTxHex": "0400008085202f89011016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd100ca9a3b0201e2ffffffff024014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fd49026a4d4502e211a2f7550475bf21bac89b760b8c1e6a114d77c22de1584f3d65a09b98fe73360945082cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b6f7fb8e5644af270917b10fa879a0c5636de719d308efd245ff5613450b934a5f32fd21b84a67d7b6be78b5d625af836cf7efddab3c6e8fea54345bab9ea7732cf073ef25f0b8a0764d928c8a420d45beb793fa8ea93432a908c808e4f47daadfdfaa753cfdd54be8cc63b15bc2544964c03c43e0645a1ea9302522a1c9daf4c19dd9ff959973a556e4761ae171363572f782f5660a89acde315cd811a1b42140fa6d1de2ced3e371e4f8e4bca493a23d6121a608ccc0d66eb45b3ccce9518612bef75468f0fe5310972c8059e9aabf86b59a824bf5e2ac6f6b6eeb7dc171ebcb0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c0000000000000000000000000000000000000000000000000000000000000000"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>

Broadcast the transaction:

```bash
./komodo-cli CFEKDRAGON sendrawtransaction 0400008085202f89011016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd100ca9a3b0201e2ffffffff024014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fd49026a4d4502e211a2f7550475bf21bac89b760b8c1e6a114d77c22de1584f3d65a09b98fe73360945082cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b6f7fb8e5644af270917b10fa879a0c5636de719d308efd245ff5613450b934a5f32fd21b84a67d7b6be78b5d625af836cf7efddab3c6e8fea54345bab9ea7732cf073ef25f0b8a0764d928c8a420d45beb793fa8ea93432a908c808e4f47daadfdfaa753cfdd54be8cc63b15bc2544964c03c43e0645a1ea9302522a1c9daf4c19dd9ff959973a556e4761ae171363572f782f5660a89acde315cd811a1b42140fa6d1de2ced3e371e4f8e4bca493a23d6121a608ccc0d66eb45b3ccce9518612bef75468f0fe5310972c8059e9aabf86b59a824bf5e2ac6f6b6eeb7dc171ebcb0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c0000000000000000000000000000000000000000000000000000000000000000
```

<collapse-text hidden title="Response">

```bash
b2ed563617771d4a919fb13906e93c8ec485bed145a3f380583796663e285e0d
```

</collapse-text>

## Notarization Backup Solution

There is an alternative solution to notarize burn transactions. This method is useful when the automated MoMoM notarization method fails or is slow.

In this method, the user sends burn transactions to a special publishing resource that is monitored by the notary operators. The notary operators check this publishing resource, pick a burn transaction, validate and check the existence of the burn transaction in its source chain. The notary operators then create an approval transaction in the destination chain and return the transaction ids to the publishing resource.

### Alternative Transfer Method Flow

- A user creates a burn transaction using the [migrate_createburntransaction](./crosschain.html#migrate-createburntransaction) method and publishes the transaction in hex format to a publishing resource
  - The publishing resource is monitored by the notary operators (currently the discord channel: [#cc-momom](https://discord.gg/JE9tkmN))
- The notary operators must collect the burn transaction, and check its validity and existence in the source chain
  - To check the transaction, the notary operators use the `migrate_checkburntransactionsource` method
  - If the burn transaction is successfully validated, the notary operators must create approval transactions using the method [migrate_createnotaryapprovaltransaction](#migrate_createnotaryapprovaltransaction) in the destination chain and publish their transaction ids back into the publishing resource
- The user collects the transaction ids and calls the [migrate_createimporttransaction](./crosschain.html#migrate-createimporttransaction) method, passing the collected notary approval transaction ids as arguments in the destination chain
  - Currently, the user must have at least 5 successful notary-approval transactions for an import transaction to be considered as valid in the destination chain

### migrate_checkburntransactionsource

**migrate_checkburntransactionsource burntxid**

The `migrate_checkburntransactionsource` method allows a notary operator to check the burn transaction's structure and verify its presence in the source chain.

#### Arguments

| Name       | Type               | Description               |
| ---------- | ------------------ | ------------------------- |
| "burntxid" | (string, required) | the burn transaction's id |

#### Response

| Name           | Type               | Description                                                       |
| -------------- | ------------------ | ----------------------------------------------------------------- |
| "sourceSymbol" | (string)           | the source chain's name                                           |
| "targetSymbol" | (string)           | the target chain's name                                           |
| "targetCCid"   | (number)           | the target chain's `CCid`                                         |
| "tokenid"      | (string, optional) | the token id if a token is to be migrated                         |
| "TxOutProof"   | (string)           | the proof of the burn transaction's existence in the source chain |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=CFEKHOUND migrate_checkburntransactionsource d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610
```

<collapse-text hidden title="Response">

```json
{
  "SourceSymbol": "CFEKHOUND",
  "TargetSymbol": "CFEKDRAGON",
  "TargetCCid": "533",
  "TxOutProof": "040000009c6c2e1c0607ea57d44d6d0518cebc341a76e8f294ad6d2844d84f09983b35013bfacfeb3d1a412c1261f59f122fae6ae3d657d3a1871902282519a0b0d08045fbc2f4300c01f0b7820d00e3347c8da4ee614674376cbc45359daa54f9b5493ec64bd45c8fab0220360057fb64b4378bb1a33d9dcf9acf6e5b7c42f6a08db8eb87bfaad001910000143427efb28257954cb4e6596f4e06bdcad43cb9a402000000022cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b61016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd10105",
  "result": "success"
}
```

</collapse-text>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "migrate_checkburntransactionsource", "params": ["d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```

<collapse-text hidden title="Response">

```json
{
  "result": {
    "SourceSymbol": "CFEKHOUND",
    "TargetSymbol": "CFEKDRAGON",
    "TargetCCid": "533",
    "TxOutProof": "040000009c6c2e1c0607ea57d44d6d0518cebc341a76e8f294ad6d2844d84f09983b35013bfacfeb3d1a412c1261f59f122fae6ae3d657d3a1871902282519a0b0d08045fbc2f4300c01f0b7820d00e3347c8da4ee614674376cbc45359daa54f9b5493ec64bd45c8fab0220360057fb64b4378bb1a33d9dcf9acf6e5b7c42f6a08db8eb87bfaad001910000143427efb28257954cb4e6596f4e06bdcad43cb9a402000000022cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b61016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd10105",
    "result": "success"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>

### migrate_createnotaryapprovaltransaction

**migrate_createnotaryapprovaltransaction burntxid txoutproof**

A notary operator uses the `migrate_createnotaryapprovaltransaction` method to create an approval transaction in the destination chain with the proof of the burn transaction's existence in the source chain.

The returned notary approval transaction should be broadcast to the destination chain using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method.

#### Arguments

| Name         | Type               | Description                                   |
| ------------ | ------------------ | --------------------------------------------- |
| "burntxid"   | (string, required) | the burn transaction's id                     |
| "txoutproof" | (string, required) | the proof of the burn transaction's existence |

#### Response

| Name          | Type     | Description                               |
| ------------- | -------- | ----------------------------------------- |
| "NotaryTxHex" | (string) | notary approval transaction in hex format |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=CFEKHOUND migrate_createnotaryapprovaltransaction d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610 040000009c6c2e1c0607ea57d44d6d0518cebc341a76e8f294ad6d2844d84f09983b35013bfacfeb3d1a412c1261f59f122fae6ae3d657d3a1871902282519a0b0d08045fbc2f4300c01f0b7820d00e3347c8da4ee614674376cbc45359daa54f9b5493ec64bd45c8fab0220360057fb64b4378bb1a33d9dcf9acf6e5b7c42f6a08db8eb87bfaad001910000143427efb28257954cb4e6596f4e06bdcad43cb9a402000000022cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b61016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd10105
```

<collapse-text hidden title="Response">

```json
{
  "NotaryTxHex": "0400008085202f890101627137f51e780237504126737cc1b3af7ccb4069ce10436fc541cfd527ff56060000004847304402202014638b902dab110afe48ee72890ab08ba7c9818b54e7ff521a5079dccccfad022061b6f790ba0508b57d5d189cea8fba90ed601cfcfbb0fed6b7e4b21c37ec851601ffffffff031027000000000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac0a02fe0000000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac0000000000000000ec6a4ce9e8040000009c6c2e1c0607ea57d44d6d0518cebc341a76e8f294ad6d2844d84f09983b35013bfacfeb3d1a412c1261f59f122fae6ae3d657d3a1871902282519a0b0d08045fbc2f4300c01f0b7820d00e3347c8da4ee614674376cbc45359daa54f9b5493ec64bd45c8fab0220360057fb64b4378bb1a33d9dcf9acf6e5b7c42f6a08db8eb87bfaad001910000143427efb28257954cb4e6596f4e06bdcad43cb9a402000000022cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b61016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd1010500000000d26f00000000000000000000000000"
}
```

</collapse-text>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "migrate_createnotaryapprovaltransaction", "params": ["d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610","040000009c6c2e1c0607ea57d44d6d0518cebc341a76e8f294ad6d2844d84f09983b35013bfacfeb3d1a412c1261f59f122fae6ae3d657d3a1871902282519a0b0d08045fbc2f4300c01f0b7820d00e3347c8da4ee614674376cbc45359daa54f9b5493ec64bd45c8fab0220360057fb64b4378bb1a33d9dcf9acf6e5b7c42f6a08db8eb87bfaad001910000143427efb28257954cb4e6596f4e06bdcad43cb9a402000000022cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b61016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd10105"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```

<collapse-text hidden title="Response">

```json
{
  "result": {
    "NotaryTxHex": "0400008085202f890101627137f51e780237504126737cc1b3af7ccb4069ce10436fc541cfd527ff560600000048473044022072aa2c271ec12a82df9f9667161b117da0814400f08f26950bae4ac762ea712302205350ac5faf430398e01dff7d6cb608e6b5eee580a2a85d70566096897fb052b601ffffffff031027000000000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac0a02fe0000000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac0000000000000000ec6a4ce9e8040000009c6c2e1c0607ea57d44d6d0518cebc341a76e8f294ad6d2844d84f09983b35013bfacfeb3d1a412c1261f59f122fae6ae3d657d3a1871902282519a0b0d08045fbc2f4300c01f0b7820d00e3347c8da4ee614674376cbc45359daa54f9b5493ec64bd45c8fab0220360057fb64b4378bb1a33d9dcf9acf6e5b7c42f6a08db8eb87bfaad001910000143427efb28257954cb4e6596f4e06bdcad43cb9a402000000022cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b61016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd1010500000000d56f00000000000000000000000000"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>

## Self Import API

The Self Import API is a special API available only in chains that need a pubkey to create new coins arbitrarily.

### selfimport

**selfimport destAddress amount**

The Self Import API allows a trusted pubkey to create more coins on the same chain.

#### Requirements

The chain must have the custom parameters `-ac_import=PUBKEY` and `-ac_pubkey` set to a pubkey which is allowed to create coins.

#### Self Import Flow

- For creating more coins in the chain with `-ac_import=PUBKEY` enabled, use the <b>selfimport</b> method
- The method returns a source transaction that contains a parameter with the amount of coins to create
  - The returned value is a proof of the trusted pubkey owner's intention to create new coins in the chain
- The returned source transaction should be broadcast to the chain using the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method. The source transaction spends a `txfee=10000 satoshis` from the `-ac_pubkey` owner's uxtos
- After the source transaction is mined, the import transaction should also be broadcasted to the chain with the [sendrawtransaction](../komodo-api/rawtransactions.html#sendrawtransaction) method. After this transaction is mined, its vout contains the amount of created coins in the chosen destination address

#### Arguments

| Name          | Type               | Description                                        |
| ------------- | ------------------ | -------------------------------------------------- |
| "destAddress" | (string, required) | the address where the created coins should be sent |
| "amount"      | (number, required) | the amount in coins to create                      |

#### Response

| Name          | Type     | Description                          |
| ------------- | -------- | ------------------------------------ |
| "SourceTxHex" | (string) | the source transaction in hex format |
| "ImportTxHex" | (string) | the import transaction in hex format |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=IMPORTTEST selfimport RM9n6rts1CBKX4oXziLp1WBBgEUjKKWHb3 100000
```

<collapse-text hidden title="Response">

```json
{
  "SourceTxHex": "0400008085202f8901011063706ccf8ccb228566bf94ff2c34e544a3d856b7f061d7d881789dd89d130000000049483045022100efc45823b3e190cd6fab3192d2f1c7ce2945396868f786c0c1f3fca6d4d54378022011d19799fb30e089cc16c38557da301aeb707e289ca911e1c99e6fcc603ba01e01ffffffff0310270000000000001976a914823a9534f765ff5f56d1d5bddc029087972f321c88ace092f5050000000023210257e1074b542c47cd6f603e3d78400045df0781875f698138e92cb03055286634ac00000000000000000c6a0ae24100a0724e18090000000000008f0100000000000000000000000000",
  "ImportTxHex": "0400008085202f89012764621f3e61d2b47b9f0595639db26b0455d5ac17f73676115e8967640a422400ca9a3b0201e2ffffffff0200a0724e180900001976a914823a9534f765ff5f56d1d5bddc029087972f321c88ac0000000000000000f16a4ceee211d51ab2be8a8c1439438b64a048ae4df3282234787d9c11574971f9429372dde089af17000400008085202f8901011063706ccf8ccb228566bf94ff2c34e544a3d856b7f061d7d881789dd89d130000000049483045022100efc45823b3e190cd6fab3192d2f1c7ce2945396868f786c0c1f3fca6d4d54378022011d19799fb30e089cc16c38557da301aeb707e289ca911e1c99e6fcc603ba01e01ffffffff0100a0724e18090000306a2ee28efefefe7f065055424b4559dded40d8b8826ad32af955a9ce0c2ebc0cd60d9978a1936d425b8f7bdc1c756700000000008f010000000000000000000000000000000000000000000000000000000000000000"
}
```

</collapse-text>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "selfimport", "params": ["RM9n6rts1CBKX4oXziLp1WBBgEUjKKWHb3","100000"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```

<collapse-text hidden title="Response">

```json
{
  "result": {
    "SourceTxHex": "0400008085202f8901011063706ccf8ccb228566bf94ff2c34e544a3d856b7f061d7d881789dd89d130000000049483045022100efc45823b3e190cd6fab3192d2f1c7ce2945396868f786c0c1f3fca6d4d54378022011d19799fb30e089cc16c38557da301aeb707e289ca911e1c99e6fcc603ba01e01ffffffff0310270000000000001976a914823a9534f765ff5f56d1d5bddc029087972f321c88ace092f5050000000023210257e1074b542c47cd6f603e3d78400045df0781875f698138e92cb03055286634ac00000000000000000c6a0ae24100a0724e18090000000000008f0100000000000000000000000000",
    "ImportTxHex": "0400008085202f89012764621f3e61d2b47b9f0595639db26b0455d5ac17f73676115e8967640a422400ca9a3b0201e2ffffffff0200a0724e180900001976a914823a9534f765ff5f56d1d5bddc029087972f321c88ac0000000000000000f16a4ceee211d51ab2be8a8c1439438b64a048ae4df3282234787d9c11574971f9429372dde089af17000400008085202f8901011063706ccf8ccb228566bf94ff2c34e544a3d856b7f061d7d881789dd89d130000000049483045022100efc45823b3e190cd6fab3192d2f1c7ce2945396868f786c0c1f3fca6d4d54378022011d19799fb30e089cc16c38557da301aeb707e289ca911e1c99e6fcc603ba01e01ffffffff0100a0724e18090000306a2ee28efefefe7f065055424b4559dded40d8b8826ad32af955a9ce0c2ebc0cd60d9978a1936d425b8f7bdc1c756700000000008f010000000000000000000000000000000000000000000000000000000000000000"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>

To see the rest of the process of the `migrate_converttoexport` method, click the following button.

<collapse-text hidden title="the Whole Process">

##### Node1

Start a chain with the parameters `-ac_import=PUBKEY` and `-ac_pubkey=<pubkey>` (`<pubkey>` is the pubkey that can create coins at will ).

```bash
./komodod -ac_name=IMPORTTEST -ac_import=PUBKEY -ac_pubkey=0257e1074b542c47cd6f603e3d78400045df0781875f698138e92cb03055286634 -ac_supply=777777 -ac_reward=100000000 -pubkey=0257e1074b542c47cd6f603e3d78400045df0781875f698138e92cb03055286634
```

Import the privkey corresponding to the pubkey used when starting the chain.

```bash
./komodo-cli -ac_name=IMPORTTEST importprivkey xxxxx
```

##### Node2

Connect to the chain created in Node1.

```bash
./komodod -ac_name=IMPORTTEST -ac_import=PUBKEY -ac_pubkey=0257e1074b542c47cd6f603e3d78400045df0781875f698138e92cb03055286634 -ac_supply=777777 -ac_reward=100000000 -addnode=<ip address of Node1>
```

Notice that there is only `-ac_pubkey` in the above command but not `pubkey`. That's because, `-ac_pubkey` is part of the chain parameters and `-pubkey` is just [indicating the pubkey](../customconsensus/custom-consensus-instructions.html#creating-and-launching-with-a-pubkey) to the particular daemon for various features.

Verify that `connections:1` from the [getinfo](../komodo-api/control.html#getinfo) method.

##### Node1

Start mining in Node1.

```bash
./komodo-cli -ac_name=IMPORTTEST setgenerate true 1
```

Verify that the balance increased by at least the amount specified in `-ac_supply` through the [getbalance](../komodo-api/control.html#getbalances) method.

Use the method `selfimport` to receive the `SourceTxHex` and the `ImportTxHex`.

```bash
./komodo-cli -ac_name=IMPORTTEST selfimport RM9n6rts1CBKX4oXziLp1WBBgEUjKKWHb3 100000
```

```json
{
  "SourceTxHex": "0400008085202f8901011063706ccf8ccb228566bf94ff2c34e544a3d856b7f061d7d881789dd89d130000000049483045022100efc45823b3e190cd6fab3192d2f1c7ce2945396868f786c0c1f3fca6d4d54378022011d19799fb30e089cc16c38557da301aeb707e289ca911e1c99e6fcc603ba01e01ffffffff0310270000000000001976a914823a9534f765ff5f56d1d5bddc029087972f321c88ace092f5050000000023210257e1074b542c47cd6f603e3d78400045df0781875f698138e92cb03055286634ac00000000000000000c6a0ae24100a0724e18090000000000008f0100000000000000000000000000",
  "ImportTxHex": "0400008085202f89012764621f3e61d2b47b9f0595639db26b0455d5ac17f73676115e8967640a422400ca9a3b0201e2ffffffff0200a0724e180900001976a914823a9534f765ff5f56d1d5bddc029087972f321c88ac0000000000000000f16a4ceee211d51ab2be8a8c1439438b64a048ae4df3282234787d9c11574971f9429372dde089af17000400008085202f8901011063706ccf8ccb228566bf94ff2c34e544a3d856b7f061d7d881789dd89d130000000049483045022100efc45823b3e190cd6fab3192d2f1c7ce2945396868f786c0c1f3fca6d4d54378022011d19799fb30e089cc16c38557da301aeb707e289ca911e1c99e6fcc603ba01e01ffffffff0100a0724e18090000306a2ee28efefefe7f065055424b4559dded40d8b8826ad32af955a9ce0c2ebc0cd60d9978a1936d425b8f7bdc1c756700000000008f010000000000000000000000000000000000000000000000000000000000000000"
}
```

Broadcast the `SourceTxHex`.

```bash
./komodo-cli -ac_name=IMPORTTEST sendrawtransaction 0400008085202f8901011063706ccf8ccb228566bf94ff2c34e544a3d856b7f061d7d881789dd89d130000000049483045022100efc45823b3e190cd6fab3192d2f1c7ce2945396868f786c0c1f3fca6d4d54378022011d19799fb30e089cc16c38557da301aeb707e289ca911e1c99e6fcc603ba01e01ffffffff0310270000000000001976a914823a9534f765ff5f56d1d5bddc029087972f321c88ace092f5050000000023210257e1074b542c47cd6f603e3d78400045df0781875f698138e92cb03055286634ac00000000000000000c6a0ae24100a0724e18090000000000008f0100000000000000000000000000
```

Response.

```bash
e0dd729342f9714957119c7d78342228f34dae48a0648b4339148c8abeb21ad5
```

After the above transaction is confirmed, Broadcast the `ImportTxHex`.

```bash
./komodo-cli -ac_name=IMPORTTEST sendrawtransaction 0400008085202f89012764621f3e61d2b47b9f0595639db26b0455d5ac17f73676115e8967640a422400ca9a3b0201e2ffffffff0200a0724e180900001976a914823a9534f765ff5f56d1d5bddc029087972f321c88ac0000000000000000f16a4ceee211d51ab2be8a8c1439438b64a048ae4df3282234787d9c11574971f9429372dde089af17000400008085202f8901011063706ccf8ccb228566bf94ff2c34e544a3d856b7f061d7d881789dd89d130000000049483045022100efc45823b3e190cd6fab3192d2f1c7ce2945396868f786c0c1f3fca6d4d54378022011d19799fb30e089cc16c38557da301aeb707e289ca911e1c99e6fcc603ba01e01ffffffff0100a0724e18090000306a2ee28efefefe7f065055424b4559dded40d8b8826ad32af955a9ce0c2ebc0cd60d9978a1936d425b8f7bdc1c756700000000008f010000000000000000000000000000000000000000000000000000000000000000
```

Response.

```bash
e78096bb4139430276fd5176ff8ac97182be17606558eefb0c21c332192bd189
```

Confirm that the address given to the `selfimport` command received the newly created funds.

</collapse-text>

## Notary API

The following methods are available to the notary nodes for retrieving the blockchain "fingerprints" and notarization data.

### calc_MoM

**calc_MoM height MoMdepth**

The `calc_MoM` method calculates the value of the merkle root of the blocks' merkle roots (MoM), starting from the block of the indicated height for the chosen depth.

:::tip Note
This method should be run on an asset chain.
:::

#### Arguments

| Name       | Type               | Description                                                  |
| ---------- | ------------------ | ------------------------------------------------------------ |
| "height"   | (number, required) | the block height from which the `MoM` calculation must begin |
| "MoMdepth" | (number, required) | the number of blocks to include in the MoM calculation       |

#### Response

| Name       | Type     | Description                                            |
| ---------- | -------- | ------------------------------------------------------ |
| "coin"     | (string) | the chain's name                                       |
| "height"   | (string) | the starting block height                              |
| "MoMdepth" | (number) | the number of blocks included in the `MoM` calculation |
| "MoM"      | (string) | the `MoM` value                                        |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=CFEKHOUND calc_MoM 1000 100
```

<collapse-text hidden title="Response">

```json
{
  "coin": "CFEKHOUND",
  "height": 1000,
  "MoMdepth": 100,
  "MoM": "318e9e5636cb9ef99ca7343da72a3544fbcccb7889fa386083e69a8527557a4d"
}
```

</collapse-text>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "calc_MoM", "params": ["1000","100"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```

<collapse-text hidden title="Response">

```json
{
  "result": {
    "coin": "CFEKHOUND",
    "height": 1000,
    "MoMdepth": 100,
    "MoM": "318e9e5636cb9ef99ca7343da72a3544fbcccb7889fa386083e69a8527557a4d"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>

### MoMoMdata

**MoMoMdata symbol kmdheight ccid**

The `MoMoMdata` method calculates the value of the merkle root of merkle roots of the blocks' merkle roots (MoMoM), starting from the block of the indicated height for the data of the indicated chain.

:::tip Note

Execute this method on the KMD chain.

:::

#### Arguments

| Name        | Type               | Description                                                     |
| ----------- | ------------------ | --------------------------------------------------------------- |
| "symbol"    | (string, required) | the chain's name whose data's `MoMoM` value is to be calculated |
| "kmdheight" | (number, required) | the number of blocks to include in the `MoM` calculation        |
| "ccid"      | (number, required) | the chain's CCid                                                |

#### Response

| Name               | Type     | Description                                               |
| ------------------ | -------- | --------------------------------------------------------- |
| "coin"             | (string) | the chain's name                                          |
| "kmdheight"        | (string) | the starting block's height                               |
| "ccid"             | (number) | the chain's `CCid`                                        |
| "MoMs"             | (string) | the array of `MoM` values                                 |
| "notarizationHash" | (string) | the first found notarization transaction id for the chain |
| "MoMoM"            | (string) | the MoMoM value                                           |

#### :pushpin: Examples

Command:

```bash
./komodo-cli MoMoMdata CFEKHOUND 1350074 533
```

<collapse-text hidden title="Response">

```json
{
  "coin": "CFEKHOUND",
  "kmdheight": 1350069,
  "ccid": 533,
  "MoMs": [
    "e02b0479aad97b3edf57eaffe951f9cd536c37ae2b4aa05c080798eac484e30b",
    "24866dd7b381c2418e44aae5030b513160bd8d706f5f7bf1fa75db297052bf0d",
    "4d5613567bbd3f169b96f51765487493129c0f9357a62318013e3b22b488d711",
    "fc8f1911a109f506095bae52f9b4152a1469a42037b2aa22aa6f4d4d3b04101b",
    "a0d872460a4a8a44261ec9201567636e62fcda5580164a00051e7dcb8f64511e",
    "fbad42139d7d35947b9ae4f20f1a1e88cd83ac6732e246165eecc2d99b05ee36",
    "323c3c9fd87c555f6795ecbbec607ce32007fe90b8e435512cd417a2fc6e2637",
    "9677f063342198a462ea89c0542a79424219287bc8e025b8f976ef5841ce927b",
    "154b989f4e9900da37710bfd5c00130a4c7d796382843706594ab6443e09297e",
    "0e1b82ea82b5c97486e2620423ab5fe81085f32cc38bfd19f8aac9416b4c5b84",
    "35ec0d4946bbcba8aae8fa1f939d020c13750ecc100eaa33035e620aed702d86",
    "80bc23baef9c7b5555fb2a83323ae77b01f7747ead37a9f4f24bcd4b9485b28b"
  ],
  "notarization_hash": "3b202647603e18aeea6d07bb39cda4f1df12117ce1c9439772f066d6cbda72c5",
  "MoMoM": "f944a1951bafc7548644c53745ed20a671f7fc574388e5e73ab5ae0929b46bba",
  "data": "ba6bb42909aeb53ae7e5884357fcf771a620ed4537c5448654c7af1b95a144f900000000"
}
```

</collapse-text>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "MoMoMdata", "params": ["CFEKHOUND","1350074","533"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```

<collapse-text hidden title="Response">

```json
{
  "result": {
    "coin": "CFEKHOUND",
    "kmdheight": 1350069,
    "ccid": 533,
    "MoMs": [
      "e02b0479aad97b3edf57eaffe951f9cd536c37ae2b4aa05c080798eac484e30b",
      "24866dd7b381c2418e44aae5030b513160bd8d706f5f7bf1fa75db297052bf0d",
      "4d5613567bbd3f169b96f51765487493129c0f9357a62318013e3b22b488d711",
      "fc8f1911a109f506095bae52f9b4152a1469a42037b2aa22aa6f4d4d3b04101b",
      "a0d872460a4a8a44261ec9201567636e62fcda5580164a00051e7dcb8f64511e",
      "fbad42139d7d35947b9ae4f20f1a1e88cd83ac6732e246165eecc2d99b05ee36",
      "323c3c9fd87c555f6795ecbbec607ce32007fe90b8e435512cd417a2fc6e2637",
      "9677f063342198a462ea89c0542a79424219287bc8e025b8f976ef5841ce927b",
      "154b989f4e9900da37710bfd5c00130a4c7d796382843706594ab6443e09297e",
      "0e1b82ea82b5c97486e2620423ab5fe81085f32cc38bfd19f8aac9416b4c5b84",
      "35ec0d4946bbcba8aae8fa1f939d020c13750ecc100eaa33035e620aed702d86",
      "80bc23baef9c7b5555fb2a83323ae77b01f7747ead37a9f4f24bcd4b9485b28b"
    ],
    "notarization_hash": "3b202647603e18aeea6d07bb39cda4f1df12117ce1c9439772f066d6cbda72c5",
    "MoMoM": "f944a1951bafc7548644c53745ed20a671f7fc574388e5e73ab5ae0929b46bba",
    "data": "ba6bb42909aeb53ae7e5884357fcf771a620ed4537c5448654c7af1b95a144f900000000"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>

### assetchainproof

**assetchainproof txid**

The `assetchainproof` method scans the chain for the back `MoM` notarization for a transaction corresponding to the given transaction id and returns a proof object with MoM branch. Scanning is performed from the height up to the chain tip, with a limit of `1440` blocks.

#### Arguments

| Name   | Type               | Description                                                  |
| ------ | ------------------ | ------------------------------------------------------------ |
| "txid" | (string, required) | the transaction id for which a proof object must be returned |

#### Response

| Name           | Type     | Description                                             |
| -------------- | -------- | ------------------------------------------------------- |
| "proof object" | (string) | the returned proof object with MoM branch in hex format |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=CFEKHOUND assetchainproof d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610
```

<collapse-text hidden title="Response">

```bash
da14c5a904dcf9dcc5c4471bae0f3e90274bc782fcaf7a828c23190dbbd3392205042cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b6f7fb8e5644af270917b10fa879a0c5636de719d308efd245ff5613450b934a5f32fd21b84a67d7b6be78b5d625af836cf7efddab3c6e8fea54345bab9ea7732cf073ef25f0b8a0764d928c8a420d45beb793fa8ea93432a908c808e4f47daadf
```

</collapse-text>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "assetchainproof", "params": ["d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```

<collapse-text hidden title="Response">

```json
{
  "result": "da14c5a904dcf9dcc5c4471bae0f3e90274bc782fcaf7a828c23190dbbd3392205042cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b6f7fb8e5644af270917b10fa879a0c5636de719d308efd245ff5613450b934a5f32fd21b84a67d7b6be78b5d625af836cf7efddab3c6e8fea54345bab9ea7732cf073ef25f0b8a0764d928c8a420d45beb793fa8ea93432a908c808e4f47daadf",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>

### getNotarisationsForBlock

**getNotarisationsForBlock height**

The `getNotarisationsForBlock` method returns the notarization transactions within the block of the given block hash.

#### Arguments

| Name     | Type               | Description                                  |
| -------- | ------------------ | -------------------------------------------- |
| "height" | (number, required) | the block number of the block to be searched |

#### Response

| Name             | Type     | Description                                                                                                                |
| ---------------- | -------- | -------------------------------------------------------------------------------------------------------------------------- |
| "Notary Cluster" | (string) | refers to the notary group which performed the notarizations; KMD for the main Komodo notaries, LABS for the LABS notaries |
| "txid"           | (string) | the notarization transaction's id                                                                                          |
| "chain"          | (string) | the chain that has been notarized                                                                                          |
| "height"         | (number) | the notarization transaction's block height                                                                                |
| "blockhash"      | (string) | the hash of the notarization transaction's block                                                                           |
| "notaries"       | (array)  | the [ids](https://github.com/jl777/komodo/blob/master/src/komodo_notary.h) of the notaries who performed the notarization  |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getNotarisationsForBlock 1350074
```

<collapse-text hidden title="Response">

```json
{
  "KMD": [
    {
      "txid": "18c067eef7b264d3536e89e319e451d036f8c6a2256c60eb1132b9362f6d7dac",
      "chain": "KMD",
      "height": 1350060,
      "blockhash": "027d124806ce2938e166450ae50c06f11c2b254c2603b3c2d1024d48431b04ff",
      "notaries": [14, 17, 18, 19, 21, 25, 27, 28, 36, 43, 53, 55, 60]
    },
    {
      "txid": "17e77666028aa94f7793b7c916e82085d2cd555a75c21b55ba60989a7c49fff9",
      "chain": "HODL",
      "height": 447018,
      "blockhash": "0c321de920e0e3c342be96a8ffbe15c8dd738babfe7d7c5718ff2017f6f3247f",
      "notaries": [4, 18, 23, 29, 32, 39, 40, 44, 47, 48, 55, 57, 58]
    },
    {
      "txid": "2325ec9eebca3304b2b7587c5594659f40e0800d3add30c7209787af4393ded8",
      "chain": "BOTS",
      "height": 616740,
      "blockhash": "0923bbf209a22644ebe5d59555b770658e8e788579a4da1a49bf3f9e45324aa0",
      "notaries": [14, 15, 16, 25, 26, 30, 32, 43, 45, 46, 55, 57, 58]
    },
    {
      "txid": "2282d6adaeb1daa3c112395df2efc4a37bbd91f40905aecc294f908cae9cf0a1",
      "chain": "REVS",
      "height": 655866,
      "blockhash": "003dfc89999d585a92760ad335e4d3786b7860f1d1638ae0f4273cdc9dfa07e3",
      "notaries": [4, 14, 15, 16, 24, 25, 27, 32, 46, 47, 53, 55, 57]
    },
    {
      "txid": "5892ac6929f1e163ae8bad9219b52cd7d551bc295a461da9cae40accfd48ee8b",
      "chain": "MSHARK",
      "height": 631714,
      "blockhash": "07d02c0676f3a862a02190424a904d066cb1614b3866a4b7f8e11771ad5f3dde",
      "notaries": [4, 17, 23, 24, 27, 28, 30, 34, 36, 51, 56, 58, 60]
    }
  ],
  "LABS": [
    {
      "txid": "aae98ab897cedcf93600cea0b44ee4186514b2d43ac3ef07404ff4d862ef6e65",
      "chain": "LABSRCTEST",
      "height": 11655,
      "blockhash": "000e12b4d153f8e355d7ab76251c553c15116013cc678bcada5055342c1f7d7e",
      "notaries": [0, 4, 10, 13, 14, 17]
    },
    {
      "txid": "8c4ece82cc1aa467f61e9575718a06c5962934d573c13d60a715a349d5fe5694",
      "chain": "CFEKDRAGON",
      "height": 28990,
      "blockhash": "00e5a29c351f2c92e2435f8ed8d27335f6dc255bf3b658e1753ba7d3bec38efd",
      "notaries": [7, 10, 12, 13, 15, 17]
    }
  ]
}
```

</collapse-text>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getNotarisationsForBlock", "params": ["1350074"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```

<collapse-text hidden title="Response">

```json
{
  "result": {
    "KMD": [
      {
        "txid": "18c067eef7b264d3536e89e319e451d036f8c6a2256c60eb1132b9362f6d7dac",
        "chain": "KMD",
        "height": 1350060,
        "blockhash": "027d124806ce2938e166450ae50c06f11c2b254c2603b3c2d1024d48431b04ff",
        "notaries": [14, 17, 18, 19, 21, 25, 27, 28, 36, 43, 53, 55, 60]
      },
      {
        "txid": "17e77666028aa94f7793b7c916e82085d2cd555a75c21b55ba60989a7c49fff9",
        "chain": "HODL",
        "height": 447018,
        "blockhash": "0c321de920e0e3c342be96a8ffbe15c8dd738babfe7d7c5718ff2017f6f3247f",
        "notaries": [4, 18, 23, 29, 32, 39, 40, 44, 47, 48, 55, 57, 58]
      },
      {
        "txid": "2325ec9eebca3304b2b7587c5594659f40e0800d3add30c7209787af4393ded8",
        "chain": "BOTS",
        "height": 616740,
        "blockhash": "0923bbf209a22644ebe5d59555b770658e8e788579a4da1a49bf3f9e45324aa0",
        "notaries": [14, 15, 16, 25, 26, 30, 32, 43, 45, 46, 55, 57, 58]
      },
      {
        "txid": "2282d6adaeb1daa3c112395df2efc4a37bbd91f40905aecc294f908cae9cf0a1",
        "chain": "REVS",
        "height": 655866,
        "blockhash": "003dfc89999d585a92760ad335e4d3786b7860f1d1638ae0f4273cdc9dfa07e3",
        "notaries": [4, 14, 15, 16, 24, 25, 27, 32, 46, 47, 53, 55, 57]
      },
      {
        "txid": "5892ac6929f1e163ae8bad9219b52cd7d551bc295a461da9cae40accfd48ee8b",
        "chain": "MSHARK",
        "height": 631714,
        "blockhash": "07d02c0676f3a862a02190424a904d066cb1614b3866a4b7f8e11771ad5f3dde",
        "notaries": [4, 17, 23, 24, 27, 28, 30, 34, 36, 51, 56, 58, 60]
      }
    ],
    "LABS": [
      {
        "txid": "aae98ab897cedcf93600cea0b44ee4186514b2d43ac3ef07404ff4d862ef6e65",
        "chain": "LABSRCTEST",
        "height": 11655,
        "blockhash": "000e12b4d153f8e355d7ab76251c553c15116013cc678bcada5055342c1f7d7e",
        "notaries": [0, 4, 10, 13, 14, 17]
      },
      {
        "txid": "8c4ece82cc1aa467f61e9575718a06c5962934d573c13d60a715a349d5fe5694",
        "chain": "CFEKDRAGON",
        "height": 28990,
        "blockhash": "00e5a29c351f2c92e2435f8ed8d27335f6dc255bf3b658e1753ba7d3bec38efd",
        "notaries": [7, 10, 12, 13, 15, 17]
      }
    ]
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>

### scanNotarisationsDB

**scanNotarisationsDB blockHeight symbol [blocksLimit=1440]**

The `scanNotarisationsDB` method scans the notarization database backwards from the given block height for a notarization of the chain with the given name (symbol).

#### Arguments

| Name          | Type               | Description                                                           |
| ------------- | ------------------ | --------------------------------------------------------------------- |
| "blockHeight" | (number, required) | the starting block height from which notarizations are to be searched |
| "symbol"      | (string, required) | the chain's name whose notarizations are to be searched               |
| "blocksLimit" | (number, optional) | an optional block depth to search for notarizations                   |

#### Response

| Name       | Type     | Description                                                             |
| ---------- | -------- | ----------------------------------------------------------------------- |
| "height"   | (number) | the block height of the notarization transaction id that has been found |
| "hash"     | (string) | the hash of the notarization transaction id that has been found         |
| "opreturn" | (string) | the notarization data in hex format                                     |

#### :pushpin: Examples

Command:

```bash
./komodo-cli scanNotarisationsDB 1350074 EMC2
```

<collapse-text hidden title="Response">

```json
{
  "height": 1350067,
  "hash": "1b86cd4512d02561359ecfc841ea49692a4c9da112393a17bd4479443fbd47a4",
  "opreturn": "45dd5cbd1972b23bfd272279f3f0bd3878ad5e020aa18f31072a096e25c261dfb4f02300454d433200000000000000000000000000000000000000000000000000000000000000000000000000"
}
```

</collapse-text>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "scanNotarisationsDB", "params": ["1350074","EMC2"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```

<collapse-text hidden title="Response">

```json
{
  "result": {
    "height": 1350067,
    "hash": "1b86cd4512d02561359ecfc841ea49692a4c9da112393a17bd4479443fbd47a4",
    "opreturn": "45dd5cbd1972b23bfd272279f3f0bd3878ad5e020aa18f31072a096e25c261dfb4f02300454d433200000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>

## User API

The following are utility methods available to user. These methods assist in retrieving information about burn and import transactions.

### getimports

**getimports hash|height**

The `getimports` method lists import transactions in the indicated block of the chain.

#### Arguments

| Name             | Type                         | Description                               |
| ---------------- | ---------------------------- | ----------------------------------------- |
| "hash or height" | (string or number, required) | the block's hash or height to be searched |

#### Response

| Name            | Type              | Description                                         |
| --------------- | ----------------- | --------------------------------------------------- |
| "imports"       | (array)           |                                                     |
| "txid"          | (string)          | the import transaction id                           |
| "amount"        | (number)          | the import transaction's value in coins             |
| "export"        | (json)            | the export or burn transaction's infomation         |
| "txid"          | (string)          | the export transaction's id                         |
| "amount"        | (number)          | the export transaction's value                      |
| "txid"          | (string)          | the export transaction's id                         |
| "source"        | (string)          | the source chain's name                             |
| "tokenid"       | (string,optional) | the source chain's token id, if tokens are imported |
| "TotalImported" | (number)          | the total imported amount in coins                  |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=CFEKDRAGON getimports 027366fc75eb2adda37f54092f29130d3feafd5bf453b4005fbdc68a27391a8f
```

:::tip Note

If the transaction id of an import is known, use the [gettransaction](../komodo-api/wallet.html#gettransaction) method to retrieve its block hash.

:::

<collapse-text hidden title="Response">

```json
{
  "imports": [
    {
      "txid": "b2ed563617771d4a919fb13906e93c8ec485bed145a3f380583796663e285e0d",
      "amount": 0.0,
      "export": {
        "txid": "d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610",
        "amount": 7.7701,
        "source": "CFEKHOUND"
      }
    }
  ],
  "TotalImported": 7.77,
  "time": 1557421253
}
```

</collapse-text>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getimports", "params": ["027366fc75eb2adda37f54092f29130d3feafd5bf453b4005fbdc68a27391a8f"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```

<collapse-text hidden title="Response">

```json
{
  "result": {
    "imports": [
      {
        "txid": "b2ed563617771d4a919fb13906e93c8ec485bed145a3f380583796663e285e0d",
        "amount": 0.0,
        "export": {
          "txid": "d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610",
          "amount": 7.7701,
          "source": "CFEKHOUND"
        }
      }
    ],
    "TotalImported": 7.77,
    "time": 1557421253
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>

### getwalletburntransactions

**getwalletburntransactions "count"**

The `getwalletburntransactions` method lists all the burn transactions in the current wallet.

#### Arguments

| Name    | Type               | Description                                                                                  |
| ------- | ------------------ | -------------------------------------------------------------------------------------------- |
| "count" | (number, optional) | the number of burn transactions to be returned; if omitted, defaults to 10 burn transactions |

#### Response

| Name           | Type               | Description                        |
| -------------- | ------------------ | ---------------------------------- |
| "txid"         | (string)           | the burn transaction's id          |
| "burnedAmount" | (number)           | the burned value in coins          |
| "tokenid"      | (string, optional) | the token id, if tokens are burned |
| "targetSymbol" | (string)           | the target chain's name            |
| "targetCCid"   | (number)           | the target chain's `CCid`          |

#### :pushpin: Examples

Command:

```bash
./komodo-cli -ac_name=CFEKHOUND getwalletburntransactions
```

<collapse-text hidden title="Response">

```json
[
  {
    "txid": "d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610",
    "burnedAmount": 7.7701,
    "targetSymbol": "CFEKDRAGON",
    "targetCCid": "533"
  },
  {
    "txid": "060f48ac5cf0f79370623320015dc243f49ef2c23fb1b60592f77bc77d6609df",
    "burnedAmount": 0.7701,
    "targetSymbol": "CFEKDRAGON",
    "targetCCid": "533"
  },
  {
    "txid": "ade1c02370f47004ad7c323fa1e456171fb3e508d7dff473a5b7fa1214480adb",
    "burnedAmount": 0.0771,
    "targetSymbol": "CFEKDRAGON",
    "targetCCid": "533"
  }
]
```

</collapse-text>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getwalletburntransactions", "params": [""] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```

<collapse-text hidden title="Response">

```json
{
  "result": [
    {
      "txid": "d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610",
      "burnedAmount": 7.7701,
      "targetSymbol": "CFEKDRAGON",
      "targetCCid": "533"
    },
    {
      "txid": "060f48ac5cf0f79370623320015dc243f49ef2c23fb1b60592f77bc77d6609df",
      "burnedAmount": 0.7701,
      "targetSymbol": "CFEKDRAGON",
      "targetCCid": "533"
    },
    {
      "txid": "ade1c02370f47004ad7c323fa1e456171fb3e508d7dff473a5b7fa1214480adb",
      "burnedAmount": 0.0771,
      "targetSymbol": "CFEKDRAGON",
      "targetCCid": "533"
    }
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>
# Disclosure

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## z_getpaymentdisclosure

::: warning
EXPERIMENTAL FEATURE: Payment disclosure is currently DISABLED. This call always fails.
:::

**z_getpaymentdisclosure transaction js_index output_index ("message")**

The `z_getpaymentdisclosure` method generates a payment disclosure for a given joinsplit output.

### Arguments

| Name | Type | Description | 
| -------------- | ------------------ | ----------- |
| "txid"         | (string, required) |<!--need to fill in this table-->|
| "js_index"     | (string, required) ||
| "output_index" | (string, required) ||
| "message"      | (string, optional) ||

### Response

| Name | Type | Description | 
| ------------------- | -------- | ----------------------------------- |
| "paymentdisclosure" | (string) | a hex data string, with a "zpd:" prefix |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_getpaymentdisclosure 96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2 0 0 "refund"
```


<collapse-text hidden title="Response">


```bash
(currently disabled)
```

</collapse-text>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in your coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_getpaymentdisclosure", "params": ["96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2", 0, 0, "refund"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```

<collapse-text hidden title="Response">


```bash
(currently disabled)
```

</collapse-text>

## z_validatepaymentdisclosure

**z_validatepaymentdisclosure "paymentdisclosure"**

The `z_validatepaymentdisclosure` method validates a payment disclosure.

::: warning
EXPERIMENTAL FEATURE: Payment disclosure is currently DISABLED. This call always fails.
:::

### Arguments

| Name | Type | Description | 
| ------------------- | ------------------ | ----------------------------------- |
| "paymentdisclosure" | (string, required) | hex data string, with "zpd:" prefix |

### Response

| Name | Type | Description | 
| -------------------- | ---- | ----------- |
| (currently disabled) |      |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_validatepaymentdisclosure "zpd:706462ff004c561a0447ba2ec51184e6c204..."
```


<collapse-text hidden title="Response">


```bash
(currently disabled)
```

</collapse-text>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_validatepaymentdisclosure", "params": ["zpd:706462ff004c561a0447ba2ec51184e6c204..."] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```bash
(currently disabled)
```

</collapse-text>

# Generating

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## generate

**generate numblocks**

::: tip
This function can only be used in the <b>regtest</b> mode (for testing purposes).
:::

The `generate` method instructs the coin daemon to immediately mine the indicated number of blocks.

### Arguments

| Name | Type | Description | 
| --------- | --------- | ---------------------------------------- |
| numblocks | (numeric) | the desired number of blocks to generate |

### Response

| Name | Type | Description | 
| ----------- | ------- | -------------------------- |
| blockhashes | (array) | hashes of blocks generated |

#### :pushpin: Examples

Command:

```bash
./komodo-cli generate 2
```


<collapse-text hidden title="Response">


```bash
[
  "0475316d63fe48bb9d58373595cb334fc2553f65496edfb2fb17b9ed06f4c480",
  "00d29a2b7dec52baa9ab8e4264363f32b4989eef7dbb0a9932fbc11274195b5a"
]
```

</collapse-text>


## getgenerate

**getgenerate**

The `getgenerate` method returns a boolean value indicating the server's mining status.

The default value is false.

::: tip
See also <b>gen</b>.
:::

### Arguments

| Name | Type | Description | 
| --------- | ------ | ----------- |
| (none)    | (none) |

### Response

| Name | Type | Description | 
| ---------- | --------- | ----------------------------------------------------- |
| true/false | (boolean) | indicates whether the server is set to generate coins |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getgenerate
```


<collapse-text hidden title="Response">


```bash
false
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getgenerate", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": false,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## setgenerate

**setgenerate generate ( genproclimit )**

The `setgenerate` method allows the user to set the `generate` property in the coin daemon to `true` or `false`, thus turning generation (mining/staking) on or off.

Generation is limited to [genproclimit](../installations/common-runtime-parameters.html#genproclimit) processors. Set `genproclimit` to `-1` to use maximum available processors.

::: tip
See also the [getgenerate](../komodo-api/generate.html#getgenerate) method to query the current setting, and [genproclimit](../installations/common-runtime-parameters.html#genproclimit) for setting the default number of processors the daemon uses through the `.conf` file.
:::

### Arguments

| Name | Type | Description | 
| ------------ | ------------------- | ------------------------------------------------------------------------------- |
| generate     | (boolean, required) | set to true to turn on generation; set to off to turn off generation            |
| genproclimit | (numeric, optional) | set the processor limit for when generation is on; use value "-1" for unlimited |

### Response

| Name | Type | Description | 
| --------- | ------ | ----------- |
| (none)    | (none) |

#### :pushpin: Examples

##### Activate mining with maximum available processors

Command:

```bash
./komodo-cli setgenerate true -1
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


##### Activate staking

Command:

```bash
./komodo-cli setgenerate true 0
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


##### Activate mining with 4 threads

Command:

```bash
./komodo-cli setgenerate true 4
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


##### Check the setting

Command:

```bash
./komodo-cli getgenerate
```


<collapse-text hidden title="Response">


```bash
true
```

</collapse-text>


##### Turn off generation

Command:

```bash
./komodo-cli setgenerate false
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


##### Turning the setting on via json RPC

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "setgenerate", "params": [true, 1] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": null,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>

# Jumblr

::: tip Note 

At this time, all z-transaction functionality on the main KMD chain is disabled. Other Smart Chains in the Komodo ecosystem offer zk-SNARK functionality. Please check with the developers of your desired Smart Chain to learn about z-transaction and Jumblr availability.

:::

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## Basic Instructions

- Install Komodo following the [installation guides](../installations/basic-instructions.html#installing-basic-komodo-software) and change into the `komodod` subdirectory using:

```bash
cd ~/komodo/src
```

- Start the daemon:

```bash
./komodod &
```

- Designate a KMD address with at least 10.024 KMD funds:

```bash
./komodo-cli jumblr_deposit KMD_address
```

::: tip
The jumblr process continues until there are less than ~ 10.024 KMD in the deposit address.
:::

- Designate a destination address for your funds. This should be a transparent address that you are keeping secret:

```bash
komodo-cli jumblr_secret destination_KMD_address
```

- Leave your node running until the balance in your first address reaches below 10.024 KMD and the destination address receives the correct amount.

::: warning
Jumblr is created to be resistant against time-based analysis. Because of this, Jumblr is purposefully designed not to be fast. You will need to leave your node running for several hours for the process to finish.
:::

For a more detailed description of Jumblr, please read Section IV of our [whitepaper](https://komodoplatform.com/whitepaper).

#### :pushpin: Examples

Designate your deposit address.

```bash
./komodo-cli jumblr_deposit RT4mSUjG35QeuGcedsfpHtP5MhDeEGTAqb
```

Designate your secret destination address.

```bash
./komodo-cli jumblr_secret RS46GZ5iTkt2exdauQG3JJ8fdnZNJUvAc1
```

## jumblr_deposit

**jumblr_deposit "depositaddress"**

The `jubmlr_deposit` method indicates the address from which Jumblr should withdraw funds. There should be at least 10.024 KMD in this address. Jumblr will withdraw funds in increments of 10, 100, or 7770 KMD.

::: tip
While shielded z_address technology is available on all KMD-based asset chains, the Jumblr engine and methods are only available on the KMD mainnet.
:::

### Arguments

| Name | Type | Description | 
| ---------------- | ------------------ | ------------------------------------------------- |
| "depositaddress" | (string, required) | the address from which Jumblr will withdraw funds |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |             |

#### :pushpin: Examples

Command:

```bash
./komodo-cli jumblr_deposit RT4mSUjG35QeuGcedsfpHtP5MhDeEGTAqb
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


## jumblr_pause

**jumblr_pause**

The `jumblr_pause` method instructs Jumblr to temporarily pause the privacy-shielding process.

::: tip
See also <b>jumblr_resume</b>.
:::

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |             |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |             |

#### :pushpin: Examples

Command:

```bash
./komodo-cli jumblr_pause
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


## jumblr_resume

**jumblr_resume**

The `jumblr_resume` method instructs Jumblr to resume the privacy-shielding process.

::: tip
See also <b>jumblr_pause</b>.
:::

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |             |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |             |

#### :pushpin: Examples

Command:

```bash
./komodo-cli jumblr_resume
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


## jumblr_secret

**jumblr_secret "secretaddress"**

The `jumblr_secret` method indicates to Jumblr the final t destination address. This should be a separate t address that has no connection to the `wallet.dat` file of your `jumblr_deposit` address. Ideally, you should only access the final `jumblr_secret` address via a separate node, and with other layers of privacy (VPN, Tor, etc.).

### Arguments

| Name | Type | Description | 
| --------------- | ------------------ | ----------------------------------- |
| "secretaddress" | (string, required) | the destination transparent address |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |             |

#### :pushpin: Examples

Command:

```bash
./komodo-cli jumbr_secret "RCpMUZwxc3pWsgip5aj3Sy1cKkh86P3Tns"
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>

# Mining

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## getblocksubsidy

**getblocksubsidy height_number**

The `getblocksubsidy` method returns the block-subsidy reward. The resulting calculation takes into account the mining slow start. This method can be used in conjunction with custom mining rewards designed by the developers of a KMD-based asset chain.

### Arguments

| Name | Type | Description | 
| --------- | ------------------- | ------------------------------------------------------------------------------------------------------------- |
| height    | (numeric, optional) | the block height; if the block height is not provided, the method defaults to the current height of the chain |

### Response

| Name | Type | Description | 
| --------- | --------- | ------------------------ |
| "miner"   | (numeric) | the mining reward amount |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getblocksubsidy 100
```


<collapse-text hidden title="Response">


```json
{
  "miner": 3.0
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblocksubsidy", "params": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "miner": 3.0
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getblocktemplate

**getblocktemplate ( "jsonrequestobject" )**

::: tip
See <a href="https://en.bitcoin.it/wiki/BIP_0022">the Bitcoin wiki</a> for the full specification.
:::

The `getblocktemplate` method returns data that is necessary to construct a block.

If the request parameters include a `mode` key, it is used to explicitly select between the default 'template' request, a 'proposal' or 'disablecb'.

#### A Note on Unique Mining Circumstances

There are many features in the Komodo Ecosystem that can make an asset chain's daemon produce non-standard coinbase transactions. Examples include an asset chain parameter that creates new coins for a specific pubkey in every block or a CC module that adds outputs to the coinbase transaction.

This can be dealt using a mode called `disablecb`

Usage:

```bash
./komodo-cli getblocktemplate '{"mode":"disablecb"}'
```

The block template produced using this mode doesn't have the `"coinbasetxn": { ... }` json object but adds the coinbase transaction to the `"transactions":[ ... ]` array, just like a regular transaction.

Now the pool software can use the `"transactions":[ ... ]` array to create a block and take fees in the payment processor. The `knomp` [fork](https://github.com/blackjok3rtt/knomp) by [@blackjok3rtt](https://github.com/blackjok3rtt) uses this mode.

### Arguments

| Name | Type | Description | 
| ----------------------------- | ------------------ | -------------------------------------------------------------------------------------------------------------- |
| "jsonrequestobject" : { ... } | (string, optional) | a json object in the following spec                                                                            |
| "mode"                        | (string, optional) | this must be set to "template" or omitted                                                                      |
| "capabilities": [ ... ]       | (array, optional)  | a list of strings                                                                                              |
| "support"                     | (string)           | client side supported features: "longpoll", "coinbasetxn", "coinbasevalue", "proposal", "serverlist", "workid" |

### Response

| Name | Type | Description | 
| ---------------------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| "version"              | (numeric)          | the block version                                                                                                                                                                                                                                                                                |
| "previousblockhash"    | (string)           | the hash of current highest block                                                                                                                                                                                                                                                                |
| "finalsaplingroothash" | (string)           | the hash of the final sapling root                                                                                                                                                                                                                                                               |
| "transactions":[ ... ] | (array)            | the contents of non-coinbase transactions that should be included in the next block                                                                                                                                                                                                              |
| "data"                 | (string)           | transaction data encoded in hexadecimal (byte-for-byte)                                                                                                                                                                                                                                          |
| "hash"                 | (string)           | the hash/id encoded in little-endian hexadecimal                                                                                                                                                                                                                                                 |
| "depends" : [ ... ]    | (array)            | an array of numbers                                                                                                                                                                                                                                                                              |
| number                 | (numeric)          | the indexes of transactions that must be present in the final block if this transaction is present in the final block; the index of the array of transactions starts with "1"                                                                                                                    |
| "fee"                  | (numeric)          | the difference in value between transaction inputs and outputs in satoshis; for coinbase transactions, this is the negative number of the total collected block fees, not including the block subsidy; if a key is not present, the fee is unknown and clients MUST NOT assume it is not present |
| "sigops"               | (numeric)          | the total number of sigops, as counted for the purposes of block limits; if a key is not present, the sigop count is unknown and clients MUST NOT assume they are not present.                                                                                                                   |
| "required"             | (boolean)          | if provided and true, this transaction must be in the final block                                                                                                                                                                                                                                |
| "coinbasetxn": { ... } | (json object)      | information for the coinbase transaction                                                                                                                                                                                                                                                         |
| "longpollid"           | (string)           | the last seen longpollid when this response was sent by the server                                                                                                                                                                                                                                |
| "data"                 | (string)           | transaction data encoded in hexadecimal (byte-for-byte)                                                                                                                                                                                                                                          |
| "hash"                 | (string)           | the hash/id encoded in little-endian hexadecimal                                                                                                                                                                                                                                                 |
| "depends" : [ ... ]    | (array)            | an array of numbers                                                                                                                                                                                                                                                                              |
| "fee"                  | (numeric)          | the difference in value between transaction inputs and outputs in satoshis; for coinbase transactions, this is the negative number of the total collected block fees, not including the block subsidy; if a key is not present, the fee is unknown and clients MUST NOT assume it is not present |
| "sigops"               | (numeric)          | the total number of sigops, as counted for the purposes of block limits; if a key is not present, the sigop count is unknown and clients MUST NOT assume they are not present.                                                                                                                   |
| "foundersreward"       | (numeric)          | the founder's reward that should be paid out in this block; this key is present only in the blocks that payout the founder's reward; present only in chains with [ac_founders](../installations/asset-chain-parameters.html#ac_founders) enabled                                                 |
| "coinbasevalue"        | (numeric)          | the value of the coinbase transaction (in satoshis)                                                                                                                                                                                                                                              |
| "required"             | (boolean)          | if provided and true, this transaction must be in the final block                                                                                                                                                                                                                                |
| "target"               | (string)           | the hash target                                                                                                                                                                                                                                                                                  |
| "mintime"              | (numeric)          | the minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)                                                                                                                                                                                                    |
| "mutable": [ ... ]     | (array of strings) | a list of ways the block template may be changed                                                                                                                                                                                                                                                 |
| "value"                | (string)           | a way the block template may be changed, e.g. "time", "transactions", "prevblock"                                                                                                                                                                                                                |
| "noncerange"           | (string)           | a range of valid nonces                                                                                                                                                                                                                                                                          |
| "sigoplimit"           | (numeric)          | the limit of sigops in blocks                                                                                                                                                                                                                                                                    |
| "sizelimit"            | (numeric)          | the limit of block size                                                                                                                                                                                                                                                                          |
| "curtime"              | (numeric)          | current timestamp in seconds since epoch (Jan 1 1970 GMT)                                                                                                                                                                                                                                        |
| "bits"                 | (string)           | the compressed target of the next block                                                                                                                                                                                                                                                          |
| "height"               | (numeric)          | the height of the next block                                                                                                                                                                                                                                                                     |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getblocktemplate '{"mode":"template","capabilities":["workid"]}'
```


<collapse-text hidden title="Response">


```json
{
  "capabilities": ["proposal"],
  "version": 4,
  "previousblockhash": "01499bd2021bb8f74e65712fdeb2a689b12b183eb9e64584d9ea9ebd6e38754e",
  "finalsaplingroothash": "3e49b5f954aa9d3545bc6c37744661eea48d7c34e3000d82b7f0010c30f4c2fb",
  "transactions": [],
  "coinbasetxn": {
    "data": "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff025600ffffffff0200e1f505000000002321039d6cc8a91d6551258a68e9d4bf8e8cfe3defd4be1f9e1c3f341f7a8592772fc8ac80c3c9010000000023210225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270aacb0918c5c",
    "hash": "ac7f63d0df14a996d77a2883e6341615245811b5a8e36a48b7ca8011eb6a149f",
    "depends": [],
    "fee": 0,
    "sigops": 2,
    "foundersreward": 30000000,
    "coinbasevalue": 100000000,
    "required": true
  },
  "longpollid": "01499bd2021bb8f74e65712fdeb2a689b12b183eb9e64584d9ea9ebd6e38754e7",
  "target": "0f0f0f0000000000000000000000000000000000000000000000000000000000",
  "mintime": 1552716187,
  "mutable": ["time", "transactions", "prevblock"],
  "noncerange": "00000000ffffffff",
  "sigoplimit": 60000,
  "sizelimit": 2000000,
  "curtime": 1552716208,
  "bits": "200f0f0f",
  "height": 6
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblocktemplate", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "capabilities": ["proposal"],
    "version": 4,
    "previousblockhash": "0c77fb62dcabffd39c0b4ad79da9a51ecc4265158b01ae09d7fd70f93ab7d499",
    "transactions": [
      {
        "data": "010000000d0bf48c25bbb9e5c9cf2959c39ea62266784932a17a8fe1ad190197c398e341870200000048473044022071db2fad2d5bab5f6cf8e2d415fe9cfbc146fc561ce55c379044d5eab7206e1b0220296970cf0265e28a49ac525faef6114386d2ed5c8ea2ced9ccfcd37ca4563bf401ffffffff50aca334345c7b4e7285d883d58efeb74c43e58d4fa61bac21f922a014f292aa1700000048473044022038f17fe42006a3f30ff658f0c8b1495567ffd0dbbe4ba36229df4bcabce201740220516ed6fca4a453f3305b47315d5efd2b230b3a575cb506cb04c89a730a62eade01ffffffff73e2bd82aa10c0bf751d7eabff50209e46827294c2b77932a096f89f7a4aa631210000004847304402200d7f4c2b8a537c98e19f0044d97c0d5ee6afb598d9b4523d586ec39b5be68ed0022071c5587f347bf56b0d1a340e6326c1ec612ee6a77abf5a24e93a446eeaee31af01ffffffffc335b0a285d04766b560bec88c191ed4494bb7e6e964eba1f5ccde3a89ad2e5a0100000049483045022100dce3c8e92b1487bb39681e58634f6414df14bf848b4a0de3ce11e2ddd4b5836202201e8ce810a67fb84350c62e3c5ed28bc1350d754f3a61a3c1a85e824c946fb30801ffffffff2ed2a51a1f8fe7feb456fa21c4ae172733d921c933e0ddc1368cfd9e09a746e5030000004847304402204f2c0eee23e34937b624e8ec4f0221ad3a43787fdbaa5b936ac39d2a3d30d7fe02200fd6e39b0eac4cbd80601f9625b40152e3bad6115f4d1e158b8709aa215778fb01ffffffff31b2c613750303538593437354af923637ee972932d1997fc93bf8d9199ebe905c000000494830450221008c760aef6b34d79e7076b6c249506c91070931f641039f44243e6abf798c731d02203c9a44d0adb04e64956720b4a97b49944825fa704679c21b18679a63c98e99ec01ffffffff0a81b4834feaa5f1044540928290e6d19667ede024923836d94bac13c7c9237914000000494830450221009d8ceb46e48dc0e86e13b0a549efbedc95ca199e1068f8e5e1f31cf4460dee3f022005079476092ac474c42ffae9fcf49fba82f68c94637ea97add61a5b1a147badb01ffffffffd81465cb221c3374a0a69bffc9f2bc225249328c50badd8683c351b2c30fdb171700000048473044022039da2916a77777c77b1a97840d1a888f2b12f0994ad134c8075a0b659884211a022006cbb6c807d1814b88f280e0036306e6d73cc79c0b6ff60966f47161feaccb3e01ffffffff59128ea85b2240d8b781a00b1ad0ebcdd8502d8d3f5722878f963b7f601e1d69020000004847304402203374d06656f35edf5d1b0d16455da2d6f22520a00c948a9c1d6bf51dba7a70ef0220529ec3146e080a637118b891a6b739f58e6f57d2aa3a24759a39eb6696af36ac01ffffffffc7d79714f379e9de8d752861f27d7e4685137dc6db5ad2cd50ec7b36429826d7050000004847304402207a426bb189ac657a9e8b699c67091de8df28306ce67b14653aea561800dfcb1502207e00216a6ff84e3f5b6d82c0683d8ea72a9fd6f636f9b3102b657e09a5f7481501ffffffffd872945ebfef211230ad8147f994892ab45c6cb4710ac29950e40354e1861d78e300000049483045022100af153b219376ffcbef42bd900e678d2504a6acd7c2bf945dcae895a9f07da79702201615016f196ad9452755d9c303fa151c242ed963b5373d148db733482487e8af01ffffffff671edc29af69a848081dd3790afb3fb113377d995e34ea9f219331d5c18c6885ad000000484730440220572ad6110ca5bafd749cfb77740f1aaac35e18c4a814cfb771c5286dd8b1249802207f4a27b90ff91663ee8ec6fc14dae64d16274fd2e35069ac6891de0385740a9801ffffffffba4dc1b3ef20747310640e4e0337c8db570ec63fa62eeffc492098502eaa9a2e5700000049483045022100f3ac3b80a66b6f1e6f96faf15a6535b104fbba987b357732e5b45830841a0a0a02202fee1f97494b2232a32517272d49992612729f4d9f762ede8d9b06ddf294293001ffffffff02f0810100000000002321020e46e79a2a8d12b9b5d12c7a91adb4e454edfae43c0a0cb805427d2ac7613fd9ac0000000000000000506a4c4da83be8f6e61cb9837708c1a847bdd80b8b8c1e1b9067b338433ca6c663869d004c6e01004345414c00e76cb540d63746c82676637b51e4f9f894c444822844224dd840975c7652dd760e00000000000000",
        "hash": "14473b8754bf69cc365784633e1a80787d4f9f950c95c48af0c6a28983c31098",
        "depends": [],
        "fee": 31200,
        "sigops": 1
      }
    ],
    "coinbasetxn": {
      "data": "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0503e6590f00ffffffff01a010e311000000002321029400ae04d9c0e3e49b114fc5e0a7e250ece5f5b5b8f1614075ddfd62c67319aeac57a4985b",
      "hash": "334b02c0c2fa087862f845fefbd8f6ac4b72e4aed6d024f22b7fa0aa84759006",
      "depends": [],
      "fee": -93600,
      "sigops": 1,
      "coinbasevalue": 300000000,
      "required": true
    },
    "longpollid": "0c77fb62dcabffd39c0b4ad79da9a51ecc4265158b01ae09d7fd70f93ab7d499147",
    "target": "0000000670be0000000000000000000000000000000000000000000000000000",
    "mintime": 1536729888,
    "mutable": ["time", "transactions", "prevblock"],
    "noncerange": "00000000ffffffff",
    "sigoplimit": 20000,
    "sizelimit": 2000000,
    "curtime": 1536730200,
    "bits": "1d0670be",
    "height": 1006054
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getlocalsolps

**getlocalsolps**

The `getlocalsolps` method returns the average local solutions per second since this node was started.

::: tip
This is the same information shown on the metrics screen (if enabled).
:::

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| --------- | --------- | -------------------------------- |
| "data"    | (numeric) | the solutions-per-second average |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getlocalsolps
```


<collapse-text hidden title="Response">


```bash
0.4141607577247555
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getlocalsolps", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": 0.4141607577247555,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getmininginfo

**getmininginfo**

The `getmininginfo` method returns a json object containing mining-related information.

### Arguments

| Name | Type | Description | 
| --------- | ------ | ----------- |
| (none)    | (none) |

### Response

| Name | Type | Description | 
| ------------------ | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| "blocks"           | (numeric) | the current block                                                                                                                                                                      |
| "currentblocksize" | (numeric) | the last block size                                                                                                                                                                    |
| "currentblocktx"   | (numeric) | the last block transaction                                                                                                                                                             |
| "difficulty"       | (numeric) | the current difficulty                                                                                                                                                                 |
| "errors":          |           |
| "generate"         | (boolean) | if the generation is on or off (see [getgenerate](../komodo-api/generate.html#getgenerate) or [setgenerate](../komodo-api/generate.html#setgenerate) calls)                            |
| "genproclimit"     | (numeric) | the processor limit for generation; `-1` if no generation (see [getgenerate](../komodo-api/generate.html#getgenerate) or [setgenerate](../komodo-api/generate.html#setgenerate) calls) |
| "localsolps"       | (numeric) | the average local solution rate (solutions per second) since this node was started                                                                                                     |
| "networksolps"     | (numeric) | the estimated network solution rate (solutions per second)                                                                                                                             |
| "pooledtx":        |           |
| "testnet"          | (boolean) | if using testnet or not                                                                                                                                                                |
| "chain"            | (string)  | the current network name as defined in BIP70 (main, test, regtest)                                                                                                                     |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getmininginfo
```


<collapse-text hidden title="Response">


```json
{
  "blocks": 1007341,
  "currentblocksize": 0,
  "currentblocktx": 0,
  "difficulty": 42918151.0730477,
  "errors": "",
  "genproclimit": -1,
  "localsolps": 0,
  "networksolps": 11414148,
  "networkhashps": 11414148,
  "pooledtx": 5,
  "testnet": false,
  "chain": "main",
  "generate": false,
  "numthreads": -1
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getmininginfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "blocks": 1007341,
    "currentblocksize": 0,
    "currentblocktx": 0,
    "difficulty": 42918151.0730477,
    "errors": "",
    "genproclimit": -1,
    "localsolps": 0,
    "networksolps": 11414148,
    "networkhashps": 11414148,
    "pooledtx": 11,
    "testnet": false,
    "chain": "main",
    "generate": false,
    "numthreads": -1
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getnetworkhashps

**getnetworkhashps ( blocks height )**

::: warning
DEPRECATED: Use <b>getnetworksolps</b> instead.
:::

The `getnetworkhashps` method returns the estimated network solutions per second based on the last `n` blocks.

Pass in `blocks` value to override the default number of blocks. Passing in `-1` will return a value based on the average `hashps` of the relevant difficulty window.

Pass in `height` to estimate the network speed at the time when a certain block was found.

### Arguments

| Name | Type | Description | 
| --------- | -------------------------------- | ------------------------------------------------------------------------------------------ |
| blocks    | (numeric, optional, default=120) | the number of blocks (use `-1` to calculate over the relevant difficulty averaging window) |
| height    | (numeric, optional, default=-1)  | the block height that corresponds to the requested data                                                |

### Response

| Name | Type | Description | 
| --------- | --------- | --------------------------------- |
| data      | (numeric) | the solutions-per-second estimate |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getnetworkhashps
```


<collapse-text hidden title="Response">


```bash
10724120
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getnetworkhashps", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": 10724120,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getnetworksolps

**getnetworksolps ( blocks height )**

The `getnetworksolps` method returns the estimated network solutions per second based on the last `n` blocks.

Pass in `blocks` to override the default number of blocks. Use -1 to calculate according to the relevant difficulty averaging window.
Pass in `height` to estimate the network speed at the time when a certain block was found.

### Arguments

| Name | Type | Description | 
| --------- | -------------------------------- | ------------------------------------------------------------------------------------------------- |
| blocks    | (numeric, optional, default=120) | the number of blocks; use `-1` to calculate according to the relevant difficulty averaging window |
| height    | (numeric, optional, default=-1)  | the block height that corresponds to the requested data                                                |

### Response

| Name | Type | Description | 
| --------- | --------- | ------------------------------- |
| data      | (numeric) | solutions per second, estimated |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getnetworksolps
```


<collapse-text hidden title="Response">


```bash
17547717
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getnetworksolps", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": 17547717,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## prioritisetransaction

**prioritisetransaction "transaction_id" priority_delta fee_delta**

The `prioritisetransaction` method instructs the daemon to accept the indicated transaction into mined blocks at a higher (or lower) priority. The transaction selection algorithm considers the transaction as it would have a higher priority.

::: tip
This method is inherited from the original Bitcoin protocol, of which KMD is a fork (via Zcash). For more examples regarding this method, please see <a href="https://bitcoincore.org/en/doc/0.16.1/rpc/mining/prioritisetransaction/">the linked documentation</a>.
:::

### Arguments

| Name | Type | Description | 
| ---------------- | ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| "transaction_id" | (string, required)  | the transaction id                                                                                                                                                                                                    |
| priority_delta   | (numeric, required) | the priority to add or subtract (if negative). The transaction selection algorithm assigns the tx a higher or lower priority. The transaction priority calculation: `coinage * value_in_satoshis / txsize`            |
| fee_delta        | (numeric, required) | the fee value in satoshis to add or subtract (if negative); the fee is not actually paid, only the algorithm for selecting transactions into a block considers the transaction as if it paid a higher (or lower) fee. |

### Response

| Name | Type | Description | 
| --------- | --------- | ------------ |
| true      | (boolean) | returns true |

#### :pushpin: Examples

Command:

```bash
./komodo-cli prioritisetransaction "7dc902b280da27cf2dabe41ed6f4d04c828714f289435db193a49341005607eb" 0.0 10000
```


<collapse-text hidden title="Response">


```bash
true
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "prioritisetransaction", "params": ["txid", 0.0, 10000] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": true,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## submitblock

**submitblock "hexdata" ( "jsonparametersobject" )**

The `submitblock` method instructs the daemon to propose a new block to the network.

::: tip
The <b>jsonparametersobject</b> parameter is currently ignored. See <a href="https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki">the linked documentation</a> for full specification details.
:::

::: tip
Note: for more information on <b>submitblock</b> parameters and results, see <a href="https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki#block-submission">the linked documentation</a>.
:::

### Arguments

| Name | Type | Description | 
| -------------------------------- | ---------------------------- | --------------------------------------------------------------------- |
| "hexdata"                        | (string, required)           | the hex-encoded block data to submit                                  |
| "jsonparametersobject" : { ... } | (string, optional)           | object of optional parameters                                         |
| "workid"                         | (string, sometimes optional) | if the server provides a workid, it MUST be included with submissions |

### Response

| Name | Type | Description | 
| ------------------------ | ---- | ------------------------------------------------------------------------------------ |
| "duplicate"              |      | the node already has a valid copy of the block                                       |
| "duplicate-invalid"      |      | the node already has the block, but it is invalid                                    |
| "duplicate-inconclusive" |      | the node already has the block but has not validated it                              |
| "inconclusive"           |      | the node has not validated the block, it may not be on the node's current best chain |
| "rejected"               |      | the block was rejected as invalid                                                    |

#### :pushpin: Examples

Command:

```bash
./komodo-cli submitblock "0400000029865a4962f43d6f95fdf9ccc89f82377a23d1fdc41eaf943c7881a5ca55c5018973d81f5ce7ab99f027b15c86ca88ec5e4b6f35ad4018bfc2058568bbe7f526000000000000000000000000000000000000000000000000000000000000000097954a5b9e830c1d1600ac305580abea34bda62eb503b02fc4b7872428cfa60bf5824a9b78fc0000fd400500c80d4a8c84cec781a5740d8d3fb18587a850b6380f073cd861c4ce7c4290460c533e0d4dd3b89fe0f0052ccdf9d450a1dfcd7263a39422000378da3eeb621078af689447a5ed0a7265a857463a36d72cdd35910d14de9816a25d631aeb0249ede829aca77f9cce1a2e4a84b75e4bd515845043d52f718638fb41e92d8b18bfe1f49e1c0d23223a285b2850e8469dfbb9782b20c8bebf2a61d7b7d8eea310c7c8d5bfa612bf94fd05562ec8876eacafa0c334a651ef70c941459161b60c20511087d63223878052d4fd1a92298789d7c57609fe3a247489674592e8e34a1728b28e2c2b3165f01d5fefa22e6384f7fe4e566de1741e264f057a0feb1b35d51694647ba52afd71c3bd375b924da95e2b413dbea256a2de9ccddcab88bd2e69cc3acc8a778b4d1db78b41df9fea6d69b071f570f628ad47537d081740a4f2c4fa6666dbb862a6d02ff07b5ae0a9fa24b003fa0355dbde0425d6c14452f0d357f2cfd97960c343ba73789a2d7ba580ea8834ef656a9e79c49fc0f61aa9452a644c8bc06afe31dce2a7ca5d6995adc8ce1f77165a075399e1d006e2bb57c09ffd6e21fcff440645faef599264a3b8c005cf60683371ba1af8847d1992c64e512f13d9d2d364969759233a27c65e1f2f1113cdb665e3e8f7baa2c398c4a2ee85a6ad1bdb095962fafaa01c3d85bc820653544b89b6e75a584d8d04bc77e5284a9ebbcd46c1a6732b841e46c876976805d932a90ac215bcc37801900d49cfb87fe5c809b30ebd8ece38669153c1f1a2438253a56a6507d556cc16b2990f0bd290fea59462d25eebdbfcb78eb403c8080e0c68e8e2ef8f67145121bce83b94dc8f9d0a742752323c5a4b42409ffcc37053c58596deff7981a20e3f412c07c839a341fdc177d5e28f7909696f90c90efff14048f440e7ea3181378f66d35b0697dc02c60154778f438cdd3dba5dc4c2763319498bbb3b8fae17508b073d07d83f5f1dc71bf2dc205f06245872620dfa341dbcdf9c574598c121120e91dd687dfd08451369ab29a11dc73f69d0722992a1c70cf1498ec9b9143fcb0abfd7b1e39189125e8567cb2cc3d71fcdb541a0776a5a665161f98385633153fc9702f079269a1dac0d2c708f5d94e346159858cfd50624ff5a0505358739b5f41adbe739bf75852eebb06eeccd79e030019a5227cd9a19e77b6821ba0794fe09cb074f40ce0b92c081c31cda2d4711d53889fc6f0579839fa74309768ef0a796fa1fa660e150d3ea5c0a369e1297d11177fc284524d6d5e40eb7ee4b400f6dfd6a10402904394e1694de300ddd565622e7ca7ed62970ff5add0b36a513b5d90d2194cf414ecc97e5dcc88698e06405dea09f49503c81cc61518f8aee882da6eeae09b4127a7fcc0c0829fca8fda3502ebf13ece0a90a8dfd05d8e514452247f79472c20683e2b1fde5ec14a2453bf00f9f1cd5a088d229a7fdfdfdc24f176fb9a8a409af70d894998957394d30a46668d71cd16907aa800ee9d96c2b9fc7fb5a7944a9b8d4f76609fc186e3c0a4d80fb9c8c236f76eb00bc24dd9abddef7d653740ece7141ac6175f7e9cab1cb0216e85adde43907b60c0581336b50ccd7682f28f00f7efd663df4d31701141657da989d236d16052c4b59fc46fb41657a26d7074fbc9dee602f7d03b86179e4c12bc0df253f815319dff12353a478d95febd5f902e363734e6e5ef4bf1865eb70750b9238be3382a51ded182569d112f37870d43465615ca9174d41f7f3b9eb780a28c7dba674075bbe04538ad669eef7716d1b7b252d49da3b00993f0c829860a1efafdcdc865d46f2f8aec9893b5bc607db33272e5b9f7cf134595e1ad5e8f34b1b7f93ca181c513afc4d8a531c36929e95cfbb4d268a9d94f80201000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0603860f0e0101ffffffff0188b6e1110000000023210383d0b37f59f4ee5e3e98a47e461c861d49d0d90c80e9e16f7e63686a2dc071f3ac67954a5b01000000010b1561554a46ec535c4972a3a16652b270ee4af847ec3bbfcf6ba663ebcfefcb1a00000049483045022100b9cd7c1c56d69d9b05d695f9ac86c1233427ec26860774a0eb4e6052fe11ca8502207eca5a4eda1ccf92ccdb501ab7d61cf084d0f4431f059e27ee13ce11f9aa159b01ffffffff0188130000000000002321020e46e79a2a8d12b9b5d12c7a91adb4e454edfae43c0a0cb805427d2ac7613fd9ac00000000"
```


<collapse-text hidden title="Response">


```bash
duplicate
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "submitblock", "params": ["0400000029865a4962f43d6f95fdf9ccc89f82377a23d1fdc41eaf943c7881a5ca55c5018973d81f5ce7ab99f027b15c86ca88ec5e4b6f35ad4018bfc2058568bbe7f526000000000000000000000000000000000000000000000000000000000000000097954a5b9e830c1d1600ac305580abea34bda62eb503b02fc4b7872428cfa60bf5824a9b78fc0000fd400500c80d4a8c84cec781a5740d8d3fb18587a850b6380f073cd861c4ce7c4290460c533e0d4dd3b89fe0f0052ccdf9d450a1dfcd7263a39422000378da3eeb621078af689447a5ed0a7265a857463a36d72cdd35910d14de9816a25d631aeb0249ede829aca77f9cce1a2e4a84b75e4bd515845043d52f718638fb41e92d8b18bfe1f49e1c0d23223a285b2850e8469dfbb9782b20c8bebf2a61d7b7d8eea310c7c8d5bfa612bf94fd05562ec8876eacafa0c334a651ef70c941459161b60c20511087d63223878052d4fd1a92298789d7c57609fe3a247489674592e8e34a1728b28e2c2b3165f01d5fefa22e6384f7fe4e566de1741e264f057a0feb1b35d51694647ba52afd71c3bd375b924da95e2b413dbea256a2de9ccddcab88bd2e69cc3acc8a778b4d1db78b41df9fea6d69b071f570f628ad47537d081740a4f2c4fa6666dbb862a6d02ff07b5ae0a9fa24b003fa0355dbde0425d6c14452f0d357f2cfd97960c343ba73789a2d7ba580ea8834ef656a9e79c49fc0f61aa9452a644c8bc06afe31dce2a7ca5d6995adc8ce1f77165a075399e1d006e2bb57c09ffd6e21fcff440645faef599264a3b8c005cf60683371ba1af8847d1992c64e512f13d9d2d364969759233a27c65e1f2f1113cdb665e3e8f7baa2c398c4a2ee85a6ad1bdb095962fafaa01c3d85bc820653544b89b6e75a584d8d04bc77e5284a9ebbcd46c1a6732b841e46c876976805d932a90ac215bcc37801900d49cfb87fe5c809b30ebd8ece38669153c1f1a2438253a56a6507d556cc16b2990f0bd290fea59462d25eebdbfcb78eb403c8080e0c68e8e2ef8f67145121bce83b94dc8f9d0a742752323c5a4b42409ffcc37053c58596deff7981a20e3f412c07c839a341fdc177d5e28f7909696f90c90efff14048f440e7ea3181378f66d35b0697dc02c60154778f438cdd3dba5dc4c2763319498bbb3b8fae17508b073d07d83f5f1dc71bf2dc205f06245872620dfa341dbcdf9c574598c121120e91dd687dfd08451369ab29a11dc73f69d0722992a1c70cf1498ec9b9143fcb0abfd7b1e39189125e8567cb2cc3d71fcdb541a0776a5a665161f98385633153fc9702f079269a1dac0d2c708f5d94e346159858cfd50624ff5a0505358739b5f41adbe739bf75852eebb06eeccd79e030019a5227cd9a19e77b6821ba0794fe09cb074f40ce0b92c081c31cda2d4711d53889fc6f0579839fa74309768ef0a796fa1fa660e150d3ea5c0a369e1297d11177fc284524d6d5e40eb7ee4b400f6dfd6a10402904394e1694de300ddd565622e7ca7ed62970ff5add0b36a513b5d90d2194cf414ecc97e5dcc88698e06405dea09f49503c81cc61518f8aee882da6eeae09b4127a7fcc0c0829fca8fda3502ebf13ece0a90a8dfd05d8e514452247f79472c20683e2b1fde5ec14a2453bf00f9f1cd5a088d229a7fdfdfdc24f176fb9a8a409af70d894998957394d30a46668d71cd16907aa800ee9d96c2b9fc7fb5a7944a9b8d4f76609fc186e3c0a4d80fb9c8c236f76eb00bc24dd9abddef7d653740ece7141ac6175f7e9cab1cb0216e85adde43907b60c0581336b50ccd7682f28f00f7efd663df4d31701141657da989d236d16052c4b59fc46fb41657a26d7074fbc9dee602f7d03b86179e4c12bc0df253f815319dff12353a478d95febd5f902e363734e6e5ef4bf1865eb70750b9238be3382a51ded182569d112f37870d43465615ca9174d41f7f3b9eb780a28c7dba674075bbe04538ad669eef7716d1b7b252d49da3b00993f0c829860a1efafdcdc865d46f2f8aec9893b5bc607db33272e5b9f7cf134595e1ad5e8f34b1b7f93ca181c513afc4d8a531c36929e95cfbb4d268a9d94f80201000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0603860f0e0101ffffffff0188b6e1110000000023210383d0b37f59f4ee5e3e98a47e461c861d49d0d90c80e9e16f7e63686a2dc071f3ac67954a5b01000000010b1561554a46ec535c4972a3a16652b270ee4af847ec3bbfcf6ba663ebcfefcb1a00000049483045022100b9cd7c1c56d69d9b05d695f9ac86c1233427ec26860774a0eb4e6052fe11ca8502207eca5a4eda1ccf92ccdb501ab7d61cf084d0f4431f059e27ee13ce11f9aa159b01ffffffff0188130000000000002321020e46e79a2a8d12b9b5d12c7a91adb4e454edfae43c0a0cb805427d2ac7613fd9ac00000000"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "duplicate",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>

# Network

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## addnode

**addnode "node" "add|remove|onetry"**

The `addnode` method attempts to add or remove a node from the addnode list, or to make a single attempt to connect to a node.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | ----------------------------------------------------------------------------------------------------------------------- |
| "node"    | (string, required) | the node (see [getpeerinfo](../komodo-api/network.html#getpeerinfo) for nodes)                                          |
| "command" | (string, required) | 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

#### :pushpin: Examples

Command:

```bash
./komodo-cli addnode "192.168.0.6:8233" "onetry"
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "addnode", "params": ["192.168.0.6:8233", "onetry"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


## clearbanned

**clearbanned**

The `clearbanned` method clears all banned IPs.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

#### :pushpin: Examples

Command:

```bash
./komodo-cli clearbanned
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "clearbanned", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


## disconnectnode

**disconnectnode "node"**

The `disconnectnode` method instructs the daemon to immediately disconnect from the specified node.

Use `getpeerinfo` to determine the result.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | ---------------------------------------------------------------------------------------- |
| "node"    | (string, required) | the node's address (see [getpeerinfo](../komodo-api/network.html#getpeerinfo) for nodes) |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

#### :pushpin: Examples

Command:

```bash
./komodo-cli disconnectnode "192.168.0.6:8233"
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "disconnectnode", "params": ["192.168.0.6:8233"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


## getaddednodeinfo

**getaddednodeinfo dns ( "node" )**

The `getaddednodeinfo` method returns information about the given added node, or all added nodes.

If `dns` is set to `false`, only a list of added nodes is returned. Otherwise, connection information is also provided.

::: tip
Nodes added via <b>onetry</b> are not listed here.
:::

### Arguments

| Name | Type | Description | 
| --------- | ------------------- | --------------------------------------------------------------------------------------------------------- |
| dns       | (boolean, required) | if false, only a list of added nodes will be provided; otherwise, connection information is also provided |
| "node"    | (string, optional)  | if provided, the method returns information about this specific node; otherwise, all nodes are returned   |

### Response

| Name | Type | Description | 
| --------------------- | ---------------- | ---------------------------------------------------------------- |
| "addednode"           | (string)         | the node ip address                                              |
| "connected"           | (boolean)        | if connected                                                     |
| "addresses" : [ ... ] | (array of jsons) |
| "address"             | (string)         | the server host and port                                         |
| "connected"           | (string)         | "connected" accepts two possible values: "inbound" or "outbound" |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getaddednodeinfo true
```


<collapse-text hidden title="Response">


```json
[
  {
    "addednode": "78.47.196.146",
    "connected": true,
    "addresses": [
      {
        "address": "78.47.196.146:7770",
        "connected": "outbound"
      }
    ]
  }
]
```

</collapse-text>


Command:

```bash
./komodo-cli getaddednodeinfo true "78.47.205.239"
```


<collapse-text hidden title="Response">


```json
[
  {
    "addednode": "78.47.205.239",
    "connected": true,
    "addresses": [
      {
        "address": "78.47.205.239:7770",
        "connected": "outbound"
      }
    ]
  }
]
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddednodeinfo", "params": [true, "78.47.205.239"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    {
      "addednode": "78.47.205.239",
      "connected": true,
      "addresses": [
        {
          "address": "78.47.205.239:7770",
          "connected": "outbound"
        }
      ]
    }
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getconnectioncount

**getconnectioncount**

The `getconnectioncount` method returns the number of connections to other nodes.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| --------- | --------- | -------------------- |
| n         | (numeric) | the connection count |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getconnectioncount
```


<collapse-text hidden title="Response">


```bash
10
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getconnectioncount", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": 10,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getdeprecationinfo

**getdeprecationinfo**

The `getdeprecationinfo` method returns an object containing current version and deprecation block height.

::: tip
This method is applicable only to the KMD main net.
:::

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| ------------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |
| "version"           | (numeric) | the server version                                                                                                                               |
| "subversion"        | (string)  | the server sub-version string (i.e. "/MagicBean:x.y.z[-v]/")                                                                                     |
| "deprecationheight" | (numeric) | the block height at which this version will deprecate and shut down (unless [disabledeprecation](https://z.cash/blog/new-release-1-1-2/) is set) |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getdeprecationinfo
```


<collapse-text hidden title="Response">


```json
{
  "version": 1001550,
  "subversion": "/MagicBean:1.0.15/",
  "deprecationheight": 1400000
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getdeprecationinfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "version": 1001550,
    "subversion": "/MagicBean:1.0.15/",
    "deprecationheight": 1400000
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getnettotals

**getnettotals**

The `getnettotals` method returns information about network traffic, including bytes in, bytes out, and current time.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| ---------------- | --------- | -------------------- |
| "totalbytesrecv" | (numeric) | total bytes received |
| "totalbytessent" | (numeric) | total bytes sent     |
| "timemillis"     | (numeric) | total cpu time       |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getnettotals
```


<collapse-text hidden title="Response">


```json
{
  "totalbytesrecv": 29853501,
  "totalbytessent": 15589555,
  "timemillis": 1536821874559
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getnettotals", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "totalbytesrecv": 29872297,
    "totalbytessent": 15650741,
    "timemillis": 1536821938902
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getnetworkinfo

**getnetworkinfo**

The `getnetworkinfo` method returns an object containing various state info regarding p2p networking.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| ------------------------- | ---------------- | ------------------------------------------------------------------------------------ |
| "version"                 | (numeric)        | the server version                                                                   |
| "subversion"              | (string)         | the server subversion string (i.e. "/MagicBean:x.y.z[-v]/")                          |
| "protocolversion"         | (numeric)        | the protocol version                                                                 |
| "localservices"           | (string)         | the services we offer to the network                                                 |
| "timeoffset"              | (numeric)        | the time offset                                                                      |
| "connections"             | (numeric)        | the number of connections                                                            |
| "networks": [ ... ]       | (array of jsons) | information per network                                                              |
| "name"                    | (string)         | network (ipv4, ipv6 or onion)                                                        |
| "limited"                 | (boolean)        | whether the network is limited using -onlynet                                        |
| "reachable"               | (boolean)        | whether the network is reachable                                                     |
| "proxy"                   | (string)         | (submitted as "host:port") the proxy that is used for this network, or empty if none |
| "relayfee"                | (numeric)        | minimum relay fee for non-free transactions in COIN/kB                               |
| "localaddresses": [ ... ] | (array of jsons) | list of local addresses                                                              |
| "address"                 | (string)         | network address                                                                      |
| "port"                    | (numeric)        | network port                                                                         |
| "score"                   | (numeric)        | relative score                                                                       |
| "warnings"                | (string)         | any network warnings (such as alert messages)                                        |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getnetworkinfo
```


<collapse-text hidden title="Response">


```json
{
  "version": 1001550,
  "subversion": "/MagicBean:1.0.15/",
  "protocolversion": 170003,
  "localservices": "0000000000000001",
  "timeoffset": -1,
  "connections": 10,
  "networks": [
    {
      "name": "ipv4",
      "limited": false,
      "reachable": true,
      "proxy": "",
      "proxy_randomize_credentials": false
    },
    {
      "name": "ipv6",
      "limited": false,
      "reachable": true,
      "proxy": "",
      "proxy_randomize_credentials": false
    },
    {
      "name": "onion",
      "limited": true,
      "reachable": false,
      "proxy": "",
      "proxy_randomize_credentials": false
    }
  ],
  "relayfee": 0.000001,
  "localaddresses": [],
  "warnings": ""
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getnetworkinfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "version": 1001550,
    "subversion": "/MagicBean:1.0.15/",
    "protocolversion": 170003,
    "localservices": "0000000000000001",
    "timeoffset": -1,
    "connections": 10,
    "networks": [
      {
        "name": "ipv4",
        "limited": false,
        "reachable": true,
        "proxy": "",
        "proxy_randomize_credentials": false
      },
      {
        "name": "ipv6",
        "limited": false,
        "reachable": true,
        "proxy": "",
        "proxy_randomize_credentials": false
      },
      {
        "name": "onion",
        "limited": true,
        "reachable": false,
        "proxy": "",
        "proxy_randomize_credentials": false
      }
    ],
    "relayfee": 1e-6,
    "localaddresses": [],
    "warnings": ""
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getpeerinfo

**getpeerinfo**

The `getpeerinfo` method returns data about each connected network node as a json array of objects.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| ------------------- | --------- | -------------------------------------------------------------------- |
| "id"                | (numeric) | peer index                                                           |
| "addr":,            | (string)  | the ip address and port of the peer ("host:port")                    |
| "addrlocal"         | (string)  | local address ("ip:port")                                            |
| "services"          | (string)  | the services offered                                                 |
| "lastsend"          | (numeric) | the time in seconds since epoch (Jan 1 1970 GMT) of the last send    |
| "lastrecv"          | (numeric) | the time in seconds since epoch (Jan 1 1970 GMT) of the last receive |
| "bytessent"         | (numeric) | the total bytes sent                                                 |
| "bytesrecv"         | (numeric) | the total bytes received                                             |
| "conntime"          | (numeric) | the connection time in seconds since epoch (Jan 1 1970 GMT)          |
| "timeoffset"        | (numeric) | the time offset in seconds                                           |
| "pingtime"          | (numeric) | ping time                                                            |
| "pingwait"          | (numeric) | ping wait                                                            |
| "version"           | (numeric) | the peer version, such as 170002                                     |
| "subver"            | (string)  | the string version (i.e. "/MagicBean:x.y.z[-v]/")                    |
| "inbound"           | (boolean) | inbound (true) or outbound (false)                                   |
| "startingheight"    | (numeric) | the starting height (block) of the peer                              |
| "banscore"          | (numeric) | the ban score                                                        |
| "synced_headers"    | (numeric) | the last header we have in common with this peer                     |
| "synced_blocks"     | (numeric) | the last block we have in common with this peer                      |
| "inflight": [ ... ] | (array)   |
| number              | (numeric) | the block height requested from this peer                            |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getpeerinfo
```


<collapse-text hidden title="Response">


```json
[
  {
    "id": 1,
    "addr": "78.47.196.146:7770",
    "addrlocal": "69.178.104.172:49724",
    "services": "0000000000000001",
    "lastsend": 1536827621,
    "lastrecv": 1536827617,
    "bytessent": 5181633,
    "bytesrecv": 6245958,
    "conntime": 1536792412,
    "timeoffset": -2,
    "pingtime": 0.234065,
    "version": 170003,
    "subver": "/MagicBean:1.0.15/",
    "inbound": false,
    "startingheight": 1007074,
    "banscore": 45,
    "synced_headers": 1007671,
    "synced_blocks": 1007671,
    "inflight": [],
    "whitelisted": false
  }
]
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getpeerinfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    {
      "id": 1,
      "addr": "78.47.196.146:7770",
      "addrlocal": "69.178.104.172:49724",
      "services": "0000000000000001",
      "lastsend": 1536827702,
      "lastrecv": 1536827698,
      "bytessent": 5195639,
      "bytesrecv": 6247781,
      "conntime": 1536792412,
      "timeoffset": -2,
      "pingtime": 0.234605,
      "version": 170003,
      "subver": "/MagicBean:1.0.15/",
      "inbound": false,
      "startingheight": 1007074,
      "banscore": 45,
      "synced_headers": 1007672,
      "synced_blocks": 1007672,
      "inflight": [],
      "whitelisted": false
    }
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## listbanned

**listbanned**

The `listbanned` method lists all banned IP addresses and subnets.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| -------------- | --------- | ----------------------------------------------------- |
| "address"      | (string)  | the address/subnet that is banned                     |
| "banned_until" | (numeric) | the timestamp, at which point the ban will be removed |

#### :pushpin: Examples

Command:

```bash
./komodo-cli listbanned
```


<collapse-text hidden title="Response">


```json
[
  {
    "address": "78.47.205.239/255.255.255.255",
    "banned_until": 1536945306
  }
]
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listbanned", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    {
      "address": "78.47.205.239/255.255.255.255",
      "banned_until": 1536945306
    }
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## ping

**ping**

The `ping` method requests that a ping be sent to all other nodes, to measure ping time.

Results provided in `getpeerinfo`, `pingtime` and `pingwait` fields are decimal seconds.

The `ping` command is handled in queue with all other commands, so it measures processing backlog, not just network ping.

::: tip
Use <b>getpeerinfo</b> to see <b>ping</b> results.
:::

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

#### :pushpin: Examples

Command:

```bash
./komodo-cli ping
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "ping", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": null,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## setban

**setban "ip(/netmask)" "add|remove" (bantime) (absolute)**

The `setban` method attempts to add or remove an IP address (and subnet, if indicated) from the banned list.

### Arguments

| Name | Type | Description | 
| -------------- | --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| "ip(/netmask)" | (string, ip required) | the IP/subnet (see `getpeerinfo` for nodes ip) with an optional netmask (default is /32 = single ip)                                                                                                                   |
| "command"      | (string, required)    | use "add" to add an IP/subnet to the list, or "remove" to remove an IP/subnet from the list                                                                                                                            |
| bantime        | (numeric, optional)   | indicates how long (in seconds) the ip is banned (or until when, if [absolute] is set). 0 or empty means the ban is using the default time of 24h, which can also be overwritten using the -bantime runtime parameter. |
| absolute       | (boolean, optional)   | if set to true, the bantime must be an absolute timestamp (in seconds) since epoch (Jan 1 1970 GMT)                                                                                                                    |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

::: tip
Use <b>listbanned</b> to view results.
:::

#### :pushpin: Examples

Command:

```bash
./komodo-cli setban "192.168.0.6" "add" 86400
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


Command:

```bash
./komodo-cli setban "192.168.0.0/24" "add"
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "setban", "params": ["78.47.205.239", "add", 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>

# Rawtransactions

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## createrawtransaction

**createrawtransaction '[{ "txid": "id_string", "vout": number }, ... ]' '{ "address": amount, ... }'**

The `createrawtransaction` method creates a transaction, spending the given inputs and sending to the given addresses. The method returns a hex-encoded raw transaction.

::: tip
This is a raw transaction, and therefore the inputs are not signed and the transaction is not stored in the wallet nor transmitted to the network.
:::

### Arguments

| Name | Type | Description | 
| -------------- | ------------------- | ---------------------------------------------------------- |
| "transactions" | (string, required)  | a json array of json objects                               |
| "txid"         | (string, required)  | the transaction id                                         |
| "vout"         | (numeric, required) | the output number                                          |
| "addresses"    | (string, required)  | a json object with addresses as keys and amounts as values |
| "address"      | (numeric, required) | the key is the address, the value is the COIN amount       |

### Response

| Name | Type | Description | 
| ------------- | -------- | ------------------------------- |
| "transaction" | (string) | a hex string of the transaction |

#### :pushpin: Examples

Command:

```bash
./komodo-cli createrawtransaction '[{"txid":"9f44dc664882198b14e9a8c466d466efcdd070ccb6f57be8e2884aa11e7b2a30","vout":0}]' '{"RHCXHfXCZQpbUbihNHh5gTwfr7NXmJXmHi":0.01}'
```


<collapse-text hidden title="Response">


```bash
0100000001302a7b1ea14a88e2e87bf5b6cc70d0cdef66d466c4a8e9148b19824866dc449f0000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "createrawtransaction", "params": [[{"txid":"9f44dc664882198b14e9a8c466d466efcdd070ccb6f57be8e2884aa11e7b2a30","vout":0}], {"RHCXHfXCZQpbUbihNHh5gTwfr7NXmJXmHi":0.01} ]}' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "0100000001302a7b1ea14a88e2e87bf5b6cc70d0cdef66d466c4a8e9148b19824866dc449f0000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## decoderawtransaction

**decoderawtransaction "hexstring"**

The `decoderawtransaction` method returns a json object representing the serialized, hex-encoded transaction.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | -------------------------- |
| "hex"     | (string, required) | the transaction hex string |

### Response

| Name | Type | Description | 
| ----------------------- | ---------------------------------------------- | ----------------------------------------------------------------- |
| "txid"                  | (string)                                       | the transaction id                                                |
| "overwintered"          | (boolean)                                      | the overwintered flag                                             |
| "version"               | (numeric)                                      | the version                                                       |
| "versiongroupid"        | (string, optional)                             | the version group id (overwintered txs)                           |
| "locktime"              | (numeric)                                      | the lock time                                                     |
| "expiryheight"          | (numeric, optional)                            | last valid block height for mining transaction (overwintered txs) |
| "vin" : [ ... ]         | (array of json objects)                        |
| "txid"                  | (string)                                       | the transaction id                                                |
| "vout" : [ ... ]        | (numeric)                                      | the output number                                                 |
| "scriptSig"             | (json object)                                  | the script                                                        |
| "asm"                   | (string)                                       | asm                                                               |
| "hex"                   | (string)                                       | hex                                                               |
| "sequence"              | (numeric)                                      | the script sequence number                                        |
| "vout"                  | (array of json objects)                        |
| "value"                 | (numeric)                                      | the value                                                         |
| "number"                | (numeric)                                      | index                                                             |
| "scriptPubKey"          | (json object)                                  |
| "asm"                   | (string)                                       | the asm                                                           |
| "hex"                   | (string)                                       | the hex                                                           |
| "reqSigs"               | (numeric)                                      | the required sigs                                                 |
| "type"                  | (string)                                       | the type, eg 'pubkeyhash'                                         |
| "addresses"             |                                                |
| "address"               | (string)                                       | the address                                                       |
| "vjoinsplit" : [ ... ]  | (array of json objects, only for version >= 2) |
| "vpub_old"              | (numeric)                                      | public input value                                                |
| "vpub_new"              | (numeric)                                      | public output value                                               |
| "anchor"                | (string)                                       | the anchor                                                        |
| "nullifiers" : [ ... ]  | (array of strings)                             |
| "hex"                   | (string)                                       | input note nullifier                                              |
| "commitments" : [ ... ] | (array of strings)                             |
| "hex"                   | (string)                                       | output note commitment                                            |
| "onetimePubKey"         | (string)                                       | the onetime public key used to encrypt the ciphertexts            |
| "randomSeed"            | (string)                                       | the random seed                                                   |
| "macs" : [ ... ]        | (array of strings)                             |
| "hex"                   | (string)                                       | input note MAC                                                    |
| "proof"                 | (string)                                       | the zero-knowledge proof                                          |
| "ciphertexts" : [ ... ] | (array of strings)                             |
| "hex"                   | (string)                                       | output note ciphertext                                            |

#### :pushpin: Examples

Command:

```bash
./komodo-cli decoderawtransaction "0100000001302a7b1ea14a88e2e87bf5b6cc70d0cdef66d466c4a8e9148b19824866dc449f0000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000"
```


<collapse-text hidden title="Response">


```json
{
  "txid": "bdb537d0a0588eb63e696d5f6e5cdc7bda071fe39327c680f42e8c3af6719df1",
  "size": 85,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "9f44dc664882198b14e9a8c466d466efcdd070ccb6f57be8e2884aa11e7b2a30",
      "vout": 0,
      "scriptSig": {
        "asm": "",
        "hex": ""
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 0.01,
      "valueSat": 1000000,
      "n": 0,
      "scriptPubKey": {
        "asm": "OP_DUP OP_HASH160 56def632e67aa11c25ac16a0ee52893c2e5a2b6a OP_EQUALVERIFY OP_CHECKSIG",
        "hex": "76a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac",
        "reqSigs": 1,
        "type": "pubkeyhash",
        "addresses": ["RHCXHfXCZQpbUbihNHh5gTwfr7NXmJXmHi"]
      }
    }
  ],
  "vjoinsplit": []
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "decoderawtransaction", "params": ["0100000001302a7b1ea14a88e2e87bf5b6cc70d0cdef66d466c4a8e9148b19824866dc449f0000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "txid": "bdb537d0a0588eb63e696d5f6e5cdc7bda071fe39327c680f42e8c3af6719df1",
    "size": 85,
    "version": 1,
    "locktime": 0,
    "vin": [
      {
        "txid": "9f44dc664882198b14e9a8c466d466efcdd070ccb6f57be8e2884aa11e7b2a30",
        "vout": 0,
        "scriptSig": {
          "asm": "",
          "hex": ""
        },
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "value": 0.01,
        "valueSat": 1000000,
        "n": 0,
        "scriptPubKey": {
          "asm": "OP_DUP OP_HASH160 56def632e67aa11c25ac16a0ee52893c2e5a2b6a OP_EQUALVERIFY OP_CHECKSIG",
          "hex": "76a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac",
          "reqSigs": 1,
          "type": "pubkeyhash",
          "addresses": ["RHCXHfXCZQpbUbihNHh5gTwfr7NXmJXmHi"]
        }
      }
    ],
    "vjoinsplit": []
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## decodescript

**decodescript "hex"**

The `decodescript` method decodes a hex-encoded script.

### Arguments

| Name | Type | Description | 
| --------- | -------- | ---------------------- |
| "hex"     | (string) | the hex encoded script |

### Response

| Name | Type | Description | 
| -------------------- | ------------------ | ----------------------- |
| "asm"                | (string)           | the script public key       |
| "hex"                | (string)           | the hex-encoded public key  |
| "type"               | (string)           | the output type         |
| "reqSigs"            | (numeric)          | the required signatures |
| "addresses": [ ... ] | (array of strings) |
| "address"            | (string)           | the address             |
| "p2sh"               | (string)           | the script address          |

#### :pushpin: Examples

Command:

```bash
./komodo-cli decodescript "0100000001302a7b1ea14a88e2e87bf5b6cc70d0cdef66d466c4a8e9148b19824866dc449f0000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000"
```


<collapse-text hidden title="Response">


```json
{
  "asm": "0 0 0 48 7b1ea14a88e2e87bf5b6cc70d0cdef66d466c4a8e9148b19824866dc449f0000000000ffffffff014042 00000000001976a91456def632e67a OP_LESSTHANOREQUAL [error]",
  "type": "nonstandard",
  "p2sh": "bQXGP7b2uRaWbMGkLaJat9LisWr8ZMGLbs"
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "decodescript", "params": ["0100000001302a7b1ea14a88e2e87bf5b6cc70d0cdef66d466c4a8e9148b19824866dc449f0000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "asm": "0 0 0 48 7b1ea14a88e2e87bf5b6cc70d0cdef66d466c4a8e9148b19824866dc449f0000000000ffffffff014042 00000000001976a91456def632e67a OP_LESSTHANOREQUAL [error]",
    "type": "nonstandard",
    "p2sh": "bQXGP7b2uRaWbMGkLaJat9LisWr8ZMGLbs"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## fundrawtransaction

**fundrawtransaction "hexstring"**

The `fundrawtransaction` method adds inputs to a transaction until it has enough `in` value to meet its `out` value. This will not modify existing inputs, and will add one `change` output to the outputs.

::: tip
Inputs which were signed may need to be resigned after completion since in/outputs have been added. To sign the inputs added, use <b>signrawtransaction</b>.
:::

::: tip
This method comes from the BTC codebase, of which KMD is ultimately a fork (via Zcash). For full details, please see <a href="https://bitcoin.org/en/developer-reference#fundrawtransaction">the linked documentation</a>.
:::

### Arguments

| Name | Type | Description | 
| ----------- | ------------------ | ------------------------------------- |
| "hexstring" | (string, required) | the hex string of the raw transaction |

### Response

| Name | Type | Description | 
| ----------- | --------- | -------------------------------------------------- |
| "hex"       | (string)  | the resulting raw transaction (hex-encoded string) |
| "fee"       | (numeric) | the fee added to the transaction                   |
| "changepos" | (numeric) | the position of the added change output, or -1     |

#### :pushpin: Examples

Create a transaction with no inputs:

Command:

```bash
./komodo-cli createrawtransaction "[]" '{"RHCXHfXCZQpbUbihNHh5gTwfr7NXmJXmHi":0.01}'
```


<collapse-text hidden title="Response">


```bash
01000000000140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000
```

</collapse-text>


Add sufficient unsigned inputs to meet the output value:

Command:

```bash
./komodo-cli fundrawtransaction "rawtransactionhex"
```


<collapse-text hidden title="Response">


```json
{
  "hex": "",
  "changepos": 0,
  "fee": 0.0001174
}
```

</collapse-text>


Sign the transaction:

Command:

```bash
./komodo-cli signrawtransaction ""
```


<collapse-text hidden title="Response">


```json
{
  "hex": "",
  "complete": true
}
```

</collapse-text>


Send the transaction:

Command:

```bash
./komodo-cli sendrawtransaction ""
```


<collapse-text hidden title="Response">


```bash
a44feb2e788d0332e283d8ca69c6a20999944dccac93246cbf9b36d841b08c95
```

</collapse-text>


## getrawtransaction

**getrawtransaction "transaction_id" ( verbose )**

The `getrawtransaction` method returns the raw transaction data.

If `verbose=0`, the method returns a string that is serialized, hex-encoded data for `transaction_id`. If `verbose` is non-zero, the method returns an object with information about `transaction_id`.

::: tip
This method relies on the <b>txindex</b> runtime parameter, which is enabled by default on all KMD-based chains. Disabling <b>txindex</b> will cause this method to malfunction.
:::

### Arguments

| Name | Type | Description | 
| --------- | ------------------------------ | ----------------------------------------------------------------------------- |
| "txid"    | (string, required)             | the transaction id                                                            |
| verbose   | (numeric, optional, default=0) | if 0, the method returns a string in hex; otherwise, it returns a json object |

### Response (if `verbose` is not set, or set to `0`)

| Name | Type | Description | 
| --------- | -------- | ------------------------------------------- |
| "data"    | (string) | the serialized, hex-encoded data for 'txid' |

### Response (if `verbose` > `0`)

| Name | Type | Description | 
| ----------------------- | ---------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------- |
| "hex"                   | (string)                                       | the serialized, hex-encoded data for 'txid'                                                                                     |
| "txid"                  | (string)                                       | the transaction id (same as provided)                                                                                           |
| "version"               | (numeric)                                      | the version                                                                                                                     |
| "locktime"              | (numeric)                                      | the lock time                                                                                                                   |
| "expiryheight"          | (numeric, optional)                            | the block height after which the transaction expires                                                                            |
| "vin" : [ ... ]         | (array of json objects)                        |
| "txid"                  | (string)                                       | the transaction id                                                                                                              |
| "vout"                  | (numeric)                                      |
| "scriptSig": { ... }    | (array of json objects)                        | the script                                                                                                                      |
| "asm"                   | (string)                                       | asm                                                                                                                             |
| "hex"                   | (string)                                       | hex                                                                                                                             |
| "sequence"              | (numeric)                                      | the script sequence number                                                                                                      |
| "vout" : [ ... ]        | (array of json objects)                        |
| "value"                 | (numeric)                                      | the value                                                                                                                       |
| "number"                | (numeric)                                      | index                                                                                                                           |
| "scriptPubKey"          |                                                |
| "asm"                   | (string)                                       | the asm                                                                                                                         |
| "hex"                   | (string)                                       | the hex                                                                                                                         |
| "reqSigs"               | (numeric)                                      | the required sigs                                                                                                               |
| "type"                  | (string)                                       | the type, e.g. 'pubkeyhash'                                                                                                       |
| "addresses" : [ ... ]   | (array of strings)                             |
| "address"               | (string)                                       | the address                                                                                                                     |
| "vjoinsplit" : [ ... ]  | (array of json objects, only for version >= 2) |
| "vpub_old"              | (numeric)                                      | public input value                                                                                                              |
| "vpub_new"              | (numeric)                                      | public output value                                                                                                             |
| "anchor"                | (string)                                       | the anchor                                                                                                                      |
| "nullifiers"            |                                                |
| "hex"                   | (string)                                       | input note nullifier                                                                                                            |
| "commitments" : [ ... ] | (array of strings)                             |
| "hex"                   | (string)                                       | output note commitment                                                                                                          |
| "onetimePubKey"         | (string)                                       | the onetime public key used to encrypt the ciphertexts                                                                          |
| "randomSeed"            | (string)                                       | the random seed                                                                                                                 |
| "macs": [ ... ]         | (array of strings)                             |
| "hex"                   | (string)                                       | input note MAC                                                                                                                  |
| "proof"                 | (string)                                       | the zero-knowledge proof                                                                                                        |
| "ciphertexts": [ ... ]  | (array of strings)                             |
| "hex"                   | (string)                                       | output note ciphertext                                                                                                          |
| "blockhash"             | (string)                                       | the block hash                                                                                                                  |
| "height"                | (numeric)                                      | height of the block                                                                                                             |
| "confirmations"         | (numeric)                                      | a confirmation number that is dPoW aware; see this [article](https://docs.komodoplatform.com/komodo/dPOW-conf.html) for more info |
| "rawconfirmations"      | (numeric)                                      | the raw confirmations (number of blocks on top of this transaction's block)                                                     |
| "time"                  | (numeric)                                      | the transaction time in seconds since epoch (Jan 1 1970 GMT)                                                                    |
| "blocktime"             | (numeric)                                      | the block time in seconds since epoch (Jan 1 1970 GMT)                                                                          |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getrawtransaction "a44feb2e788d0332e283d8ca69c6a20999944dccac93246cbf9b36d841b08c95"
```


<collapse-text hidden title="Response">


```bash

```

</collapse-text>


Command:

```bash
./komodo-cli getrawtransaction "3ac97fdd33c713857c1aac8de58cee5d51c768619602b969db9c752e65b28d69" 1
```


<collapse-text hidden title="Response">


```json
{
  "hex": "0400008085202f890193b9bc75f8d057088c61a832cbbef4e4e6792eefce990bc77adc65056eb509eb010000006b483045022100bd390bb79971e15054cd203098d9109c0dac0ca20413ba5d9bfda66095b80ae902204d9afc50892fa13df30131a3f1fdbf7d1426307599c48cdf3069eb80de99660b012103ab19ae57aa6e013a660f82b5ffd1434d28c7a15f14c0b2eb40dae614e00b0374feffffff0220cbce3b280000001976a9140a11a6cd3eb3cc4005f6f8d1e8bfd47be9e99c6188ac402a41510d0000001976a914a90b2782f35e63d9d2a0f57ac37baa4d9869d7b488ac1b838a5cfa5b13000000000000000000000000",
  "txid": "3ac97fdd33c713857c1aac8de58cee5d51c768619602b969db9c752e65b28d69",
  "overwintered": true,
  "version": 4,
  "versiongroupid": "892f2085",
  "locktime": 1552581403,
  "expiryheight": 1268730,
  "vin": [
    {
      "txid": "eb09b56e0565dc7ac70b99ceef2e79e6e4f4becb32a8618c0857d0f875bcb993",
      "vout": 1,
      "address": "R9kXMEiPQrFrDgNtnc7nYAQsDmLRXF2F5n",
      "scriptSig": {
        "asm": "3045022100bd390bb79971e15054cd203098d9109c0dac0ca20413ba5d9bfda66095b80ae902204d9afc50892fa13df30131a3f1fdbf7d1426307599c48cdf3069eb80de99660b[ALL] 03ab19ae57aa6e013a660f82b5ffd1434d28c7a15f14c0b2eb40dae614e00b0374",
        "hex": "483045022100bd390bb79971e15054cd203098d9109c0dac0ca20413ba5d9bfda66095b80ae902204d9afc50892fa13df30131a3f1fdbf7d1426307599c48cdf3069eb80de99660b012103ab19ae57aa6e013a660f82b5ffd1434d28c7a15f14c0b2eb40dae614e00b0374"
      },
      "value": 2300.0,
      "valueSat": 230000000000,
      "address": "R9kXMEiPQrFrDgNtnc7nYAQsDmLRXF2F5n",
      "sequence": 4294967294
    }
  ],
  "vout": [
    {
      "value": 1728.021,
      "interest": 0.0,
      "valueSat": 172802100000,
      "n": 0,
      "scriptPubKey": {
        "asm": "OP_DUP OP_HASH160 0a11a6cd3eb3cc4005f6f8d1e8bfd47be9e99c61 OP_EQUALVERIFY OP_CHECKSIG",
        "hex": "76a9140a11a6cd3eb3cc4005f6f8d1e8bfd47be9e99c6188ac",
        "reqSigs": 1,
        "type": "pubkeyhash",
        "addresses": ["RACRytPnrER2Mae5tKhnXnW5FqJSxLX5FY"]
      }
    },
    {
      "value": 571.978,
      "interest": 0.0,
      "valueSat": 57197800000,
      "n": 1,
      "scriptPubKey": {
        "asm": "OP_DUP OP_HASH160 a90b2782f35e63d9d2a0f57ac37baa4d9869d7b4 OP_EQUALVERIFY OP_CHECKSIG",
        "hex": "76a914a90b2782f35e63d9d2a0f57ac37baa4d9869d7b488ac",
        "reqSigs": 1,
        "type": "pubkeyhash",
        "addresses": ["RQh1dxD25pU2NbhprGTMUsiwPzw1GJBeah"]
      }
    }
  ],
  "vjoinsplit": [],
  "valueBalance": 0.0,
  "vShieldedSpend": [],
  "vShieldedOutput": [],
  "blockhash": "0d1b5c0a59353f4290c52075cffadb32aeec6a1cdec9fa5625f9206ca6417a2f",
  "height": 1268711,
  "confirmations": 1,
  "rawconfirmations": 3,
  "time": 1552581666,
  "blocktime": 1552581666
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getrawtransaction", "params": ["3ac97fdd33c713857c1aac8de58cee5d51c768619602b969db9c752e65b28d69", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "hex": "0400008085202f890193b9bc75f8d057088c61a832cbbef4e4e6792eefce990bc77adc65056eb509eb010000006b483045022100bd390bb79971e15054cd203098d9109c0dac0ca20413ba5d9bfda66095b80ae902204d9afc50892fa13df30131a3f1fdbf7d1426307599c48cdf3069eb80de99660b012103ab19ae57aa6e013a660f82b5ffd1434d28c7a15f14c0b2eb40dae614e00b0374feffffff0220cbce3b280000001976a9140a11a6cd3eb3cc4005f6f8d1e8bfd47be9e99c6188ac402a41510d0000001976a914a90b2782f35e63d9d2a0f57ac37baa4d9869d7b488ac1b838a5cfa5b13000000000000000000000000",
    "txid": "3ac97fdd33c713857c1aac8de58cee5d51c768619602b969db9c752e65b28d69",
    "overwintered": true,
    "version": 4,
    "versiongroupid": "892f2085",
    "locktime": 1552581403,
    "expiryheight": 1268730,
    "vin": [
      {
        "txid": "eb09b56e0565dc7ac70b99ceef2e79e6e4f4becb32a8618c0857d0f875bcb993",
        "vout": 1,
        "address": "R9kXMEiPQrFrDgNtnc7nYAQsDmLRXF2F5n",
        "scriptSig": {
          "asm": "3045022100bd390bb79971e15054cd203098d9109c0dac0ca20413ba5d9bfda66095b80ae902204d9afc50892fa13df30131a3f1fdbf7d1426307599c48cdf3069eb80de99660b[ALL] 03ab19ae57aa6e013a660f82b5ffd1434d28c7a15f14c0b2eb40dae614e00b0374",
          "hex": "483045022100bd390bb79971e15054cd203098d9109c0dac0ca20413ba5d9bfda66095b80ae902204d9afc50892fa13df30131a3f1fdbf7d1426307599c48cdf3069eb80de99660b012103ab19ae57aa6e013a660f82b5ffd1434d28c7a15f14c0b2eb40dae614e00b0374"
        },
        "value": 2300.0,
        "valueSat": 230000000000,
        "address": "R9kXMEiPQrFrDgNtnc7nYAQsDmLRXF2F5n",
        "sequence": 4294967294
      }
    ],
    "vout": [
      {
        "value": 1728.021,
        "interest": 0.0,
        "valueSat": 172802100000,
        "n": 0,
        "scriptPubKey": {
          "asm": "OP_DUP OP_HASH160 0a11a6cd3eb3cc4005f6f8d1e8bfd47be9e99c61 OP_EQUALVERIFY OP_CHECKSIG",
          "hex": "76a9140a11a6cd3eb3cc4005f6f8d1e8bfd47be9e99c6188ac",
          "reqSigs": 1,
          "type": "pubkeyhash",
          "addresses": ["RACRytPnrER2Mae5tKhnXnW5FqJSxLX5FY"]
        }
      },
      {
        "value": 571.978,
        "interest": 0.0,
        "valueSat": 57197800000,
        "n": 1,
        "scriptPubKey": {
          "asm": "OP_DUP OP_HASH160 a90b2782f35e63d9d2a0f57ac37baa4d9869d7b4 OP_EQUALVERIFY OP_CHECKSIG",
          "hex": "76a914a90b2782f35e63d9d2a0f57ac37baa4d9869d7b488ac",
          "reqSigs": 1,
          "type": "pubkeyhash",
          "addresses": ["RQh1dxD25pU2NbhprGTMUsiwPzw1GJBeah"]
        }
      }
    ],
    "vjoinsplit": [],
    "valueBalance": 0.0,
    "vShieldedSpend": [],
    "vShieldedOutput": [],
    "blockhash": "0d1b5c0a59353f4290c52075cffadb32aeec6a1cdec9fa5625f9206ca6417a2f",
    "height": 1268711,
    "confirmations": 1,
    "rawconfirmations": 5,
    "time": 1552581666,
    "blocktime": 1552581666
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## sendrawtransaction

**sendrawtransaction "hexstring" ( allowhighfees )**

The `sendrawtransction` method submits raw transaction (serialized, hex-encoded) to local nodes and the network.

Also see [createrawtransaction](../komodo-api/rawtransactions.html#createrawtransaction) and [signrawtransaction](../komodo-api/rawtransactions.html#signrawtransaction) calls.

### Arguments

| Name | Type | Description | 
| ------------- | ---------------------------------- | ------------------------------------- |
| "hexstring"   | (string, required)                 | the hex string of the raw transaction |
| allowhighfees | (boolean, optional, default=false) | whether to allow high fees                       |

### Response

| Name | Type | Description | 
| --------- | -------- | --------------------------- |
| "hex"     | (string) | the transaction hash in hex |

#### :pushpin: Examples

Create a transaction:

Command:

```bash
./komodo-cli createrawtransaction '[{"txid" : "a44feb2e788d0332e283d8ca69c6a20999944dccac93246cbf9b36d841b08c95","vout":0}]' '{"RHCXHfXCZQpbUbihNHh5gTwfr7NXmJXmHi":0.01}'
```


<collapse-text hidden title="Response">


```bash
0100000001958cb041d8369bbf6c2493accc4d949909a2c669cad883e232038d782eeb4fa40000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000
```

</collapse-text>


Sign the transaction, and get back the hex:

Command:

```bash
./komodo-cli signrawtransaction "0100000001958cb041d8369bbf6c2493accc4d949909a2c669cad883e232038d782eeb4fa40000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000"
```


<collapse-text hidden title="Response">


```json
{
  "hex": "0100000001958cb041d8369bbf6c2493accc4d949909a2c669cad883e232038d782eeb4fa4000000006a4730440220242c38740261799f9b6ccbde8f941e2567e86c84108c508d108d062ab9677b6e02206fea089b28c6d66d1c8f2343e1de7960dadafa3cf268c00f7dbe391cd8b9365f01210384c0db4f1eaa142a2745742b942f989375dbec32c55310a793225bb5c43cdc98ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000",
  "complete": true
}
```

</collapse-text>


Send the transaction (signed hex):

Command:

```bash
./komodo-cli sendrawtransaction "0100000001958cb041d8369bbf6c2493accc4d949909a2c669cad883e232038d782eeb4fa4000000006a4730440220242c38740261799f9b6ccbde8f941e2567e86c84108c508d108d062ab9677b6e02206fea089b28c6d66d1c8f2343e1de7960dadafa3cf268c00f7dbe391cd8b9365f01210384c0db4f1eaa142a2745742b942f989375dbec32c55310a793225bb5c43cdc98ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000"
```


<collapse-text hidden title="Response">


```bash
f1e041b2e2f1dafd331535d8277193aa27c33309a801949e0739a6b31c3d8a56
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "sendrawtransaction", "params": ["0100000001958cb041d8369bbf6c2493accc4d949909a2c669cad883e232038d782eeb4fa4000000006a4730440220242c38740261799f9b6ccbde8f941e2567e86c84108c508d108d062ab9677b6e02206fea089b28c6d66d1c8f2343e1de7960dadafa3cf268c00f7dbe391cd8b9365f01210384c0db4f1eaa142a2745742b942f989375dbec32c55310a793225bb5c43cdc98ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "f1e041b2e2f1dafd331535d8277193aa27c33309a801949e0739a6b31c3d8a56",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## signrawtransaction

**signrawtransaction "hexstring" ( [{ "txid": "id", "vout": n, "scriptPubKey": "hex", "redeemScript": "hex" }, ... ][ "privatekey1", ... ] sighashtype )**

The `signrawtransaction` method signs inputs for a raw transaction (serialized, hex-encoded). The second optional argument (may be `null`) is an array of previous transaction outputs that this transaction depends on, but may not yet be in the block chain. The third optional argument (may be `null`) is an array of base58-encoded private keys that, if given, will be the only keys used to sign the transaction.

::: tip
For full details, please see <a href="https://bitcoin.org/en/developer-reference#signrawtransaction">the linked documentation</a>.
:::

### Arguments

| Name | Type | Description | 
| -------------- | ------------------------------- | ------------------------------------------------------------------- |
| "hexstring"    | (string, required)              | the transaction hex string                                          |
| "prevtxs"      | (string, optional)              | a json array of previous dependent transaction outputs             |
| "txid"         | (string, required)              | the transaction id                                                  |
| "vout"         | (numeric, required)             | the output number                                                   |
| "scriptPubKey" | (string, required)              | the script key                                                          |
| "redeemScript" | (string, required for P2SH)     | redeem script                                                       |
| "amount"       | (numeric, required)             | the amount spent                                                    |
| "privatekeys"  | (string, optional)              | a json array of base58-encoded private keys for signing             |
| "privatekey"   | (string)                        | the private key in base58-encoding                                      |
| "sighashtype"  | (string, optional, default=ALL) | the signature hash type; the following options are available: "ALL" | "NONE" | "SINGLE" | "ALL | ANYONECANPAY" | "NONE | ANYONECANPAY" | "SINGLE | ANYONECANPAY" |

### Response

| Name | Type | Description | 
| ----------- | --------- | -------------------------------------------------------- |
| "hex"       | (string)  | the hex-encoded raw transaction with signature(s)        |
| "complete"  | (boolean) | whether the transaction has a complete set of signatures |
| "errors"    |           |
| "txid"      | (string)  | the hash of the referenced, previous transaction         |
| "vout"      | (numeric) | the index of the output to spend and used as input       |
| "scriptSig" | (string)  | the hex-encoded signature script                         |
| "sequence"  | (numeric) | the script sequence number                                   |
| "error"     | (string)  | verification or signing error related to the input       |

#### :pushpin: Examples

Command:

```bash
./komodo-cli signrawtransaction "0100000001958cb041d8369bbf6c2493accc4d949909a2c669cad883e232038d782eeb4fa40000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000"
```


<collapse-text hidden title="Response">


```json
{
  "hex": "0100000001958cb041d8369bbf6c2493accc4d949909a2c669cad883e232038d782eeb4fa4000000006a4730440220242c38740261799f9b6ccbde8f941e2567e86c84108c508d108d062ab9677b6e02206fea089b28c6d66d1c8f2343e1de7960dadafa3cf268c00f7dbe391cd8b9365f01210384c0db4f1eaa142a2745742b942f989375dbec32c55310a793225bb5c43cdc98ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000",
  "complete": true
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "signrawtransaction", "params": ["0100000001958cb041d8369bbf6c2493accc4d949909a2c669cad883e232038d782eeb4fa40000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "hex": "0100000001958cb041d8369bbf6c2493accc4d949909a2c669cad883e232038d782eeb4fa4000000006a4730440220242c38740261799f9b6ccbde8f941e2567e86c84108c508d108d062ab9677b6e02206fea089b28c6d66d1c8f2343e1de7960dadafa3cf268c00f7dbe391cd8b9365f01210384c0db4f1eaa142a2745742b942f989375dbec32c55310a793225bb5c43cdc98ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000",
    "complete": true
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>

# Util

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## createmultisig

**createmultisig nrequired [ "key", ... ]**

The `createmultisig` method creates a multi-signature address with `n` signature(s) of `m` key(s) required. The method returns a json object with the address and redeemScript.

### Arguments

| Name | Type | Description | 
| --------------- | ------------------- | ---------------------------------------------------------------------- |
| number_required | (numeric, required) | the number of required signatures out of the `n` key(s) or address(es) |
| "keys"          | (string, required)  | a json array of keys which are addresses or hex-encoded public keys    |
| "key"           | (string)            | an address or hex-encoded public key                                   |

### Response

| Name | Type | Description | 
| -------------- | -------- | ----------------------------------------------------- |
| "address"      | (string) | the value of the new multisig address                 |
| "redeemScript" | (string) | the string value of the hex-encoded redemption script |

#### :pushpin: Examples

Command:

```bash
./komodo-cli createmultisig 2 "[\"RJnVEQgucK1iwiRjfTZmreXkF49KgTErDn\",\"RCVyjn9MQ8Tw6YRJnDcsx67kfsmfUgLdfw\"]"
```


<collapse-text hidden title="Response">


```json
{
  "address": "bZjsy6bt2ZdyHV5hfCNL2HsuA4eV63s5u6",
  "redeemScript": "52210384c0db4f1eaa142a2745742b942f989375dbec32c55310a793225bb5c43cdc9821021f527b7269ab18da85a50b7f45f572e8b017fce476de06cb80a2550ee7d4b11652ae"
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "createmultisig", "params": [2, ["RJnVEQgucK1iwiRjfTZmreXkF49KgTErDn","RCVyjn9MQ8Tw6YRJnDcsx67kfsmfUgLdfw"]] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "address": "bNnKtDC6UuSt5kGJewCQ5b2BhzFK3HTQUV",
    "redeemScript": "522103ae084021ff011b527c34914d2c40148080c09254dd3c7d1f31f32549b53ccd232103bee23783f726ba81b5977473b172497260d9c261b9ef9f5a9dd51c545c8db0ac52ae"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## decodeccopret

**decodeccopret scriptPubKey**

The `decodeccopret` method decodes the OP RETURN data from a CC transaction to output the `EVALCODE` and `function id` of the method that produced the transaction.

#### Finding the OP RETURN Data From a CC Transaction

The OP RETURN data from a CC transaction can be found by following these steps:

- Decode a transaction produced by a CC module using the method [getrawtransaction](./rawtransactions.html#getrawtransaction)'s verbose option.
- Look for the `vout` key; it is an array of jsons
- Find the json that contains the `scriptPubkey`, and which has the `type:nulldata` key pair
- Copy the `hex` value from that `scriptPubkey` json
- This is the hex-string that is expected as the argument for the above method.
- You can verify that the transaction was produced by a CC module by checking if one of the `vout` json's `scriptPubkey` json has the `type:cryptocondition` key pair

### Arguments

| Name | Type | Description | 
| ------------ | -------- | ---------------------------------------------------------------------------------------------------------------------- |
| scriptPubKey | (string) | the hex-string format `scriptPubKey` of the `type` : `nulldata` in the `vout` of a transaction produced by a CC module |

### Response

| Name | Type | Description | 
| --------- | -------------------- | ------------------------------------------------------------- |
| result    | (string)             | whether the call succeeded                                    |
| OpRets    | (json)               | a json containing the keys `EVALCODE` and `function id`       |
| eval_code | (hexadecimal number) | the `EVALCODE` of the method that produced the transaction    |
| function  | (string)             | the `function id` of the method that produced the transaction |

#### :pushpin: Examples

Command:

```bash
./komodo-cli decodeccopret 6a2412782103d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a
```


<collapse-text hidden title="Response">


```json
{
  "result": "success",
  "OpRets": [
    {
      "eval_code": "0x12",
      "function": "x"
    }
  ]
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "decodeccopret", "params": ["6a2412782103d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "result": "success",
    "OpRets": [
      {
        "eval_code": "0x12",
        "function": "x"
      }
    ]
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## estimatefee

**estimatefee nblocks**

The `estimatefee` method estimates the approximate fee per kilobyte. The method is needed for a transaction to begin confirmation within `nblocks` blocks.

The value `-1.0` is returned if not enough transactions and blocks have been observed to make an estimate.

### Arguments

| Name | Type | Description | 
| --------- | --------- | ---------------------------------------------------------- |
| nblocks   | (numeric) | the number of blocks within which the fee should be tested |

### Response

| Name | Type | Description | 
| --------- | --------- | ------------- |
| n         | (numeric) | the estimated fee |

#### :pushpin: Examples

Command:

```bash
./komodo-cli estimatefee 6
```


<collapse-text hidden title="Response">


```bash
0.00019376
```

</collapse-text>


## estimatepriority

**estimatepriority nblocks**

The `estimatepriority` method estimates the approximate priority of a zero-fee transaction, when it needs to begin confirmation within `nblocks` blocks.

The value `-1.0` is returned if not enough transactions and blocks have been observed to make an estimate.

### Arguments

| Name | Type | Description | 
| --------- | --------- | --------------------------------------------------------------------------------- |
| nblocks   | (numeric) | a statement indicating within how many blocks the transaction should be confirmed |

### Response

| Name | Type | Description | 
| --------- | --------- | ------------------ |
| n         | (numeric) | the estimated priority |

#### :pushpin: Examples

Command:

```bash
./komodo-cli estimatepriority 6
```


<collapse-text hidden title="Response">


```bash
-1
```

</collapse-text>


## invalidateblock

**invalidateblock "hash"**

The `invalidateblock` method permanently marks a block as invalid, as if it violated a consensus rule.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | ---------------------------------------- |
| hash      | (string, required) | the hash of the block to mark as invalid |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

#### :pushpin: Examples

Command:

```bash
./komodo-cli invalidateblock "02f51fb2793b0728050c5e983ffed669594e0a2dda01dcb7a68d129fd87436e0"
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "invalidateblock", "params": ["02f51fb2793b0728050c5e983ffed669594e0a2dda01dcb7a68d129fd87436e0"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": null,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## reconsiderblock

**reconsiderblock "hash"**

The `reconsiderblock` method removes invalidity status of a block and its descendants, reconsidering them for activation. This can be used to undo the effects of the `invalidateblock` method.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | ----------------------------------- |
| hash      | (string, required) | the hash of the block to reconsider |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

#### :pushpin: Examples

Command:

```bash
./komodo-cli reconsiderblock "02f51fb2793b0728050c5e983ffed669594e0a2dda01dcb7a68d129fd87436e0"
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


## txnotarizedconfirmed

**txnotarizedconfirmed txid**

The `txnotarizedconfirmed` method returns information about a transaction's state of confirmation. 

If the transaction is on a chain that has Komodo's dPoW security service, the method returns `true` if the transaction is notarized.

If the chain does not have dPoW, the method returned `true` if the confirmation number is greater than `60`.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | ------------------ |
| "txid"    | (string, required) | the transaction id |

### Response

| Name | Type | Description | 
| --------- | --------- | ----------------------------------------- |
| "result"  | (boolean) | whether the transaction is confirmed, for dPoW-based chains; for non-dPoW chains, the value indicates whether the transaction has `60` or more confirmations |

#### :pushpin: Examples

Command:

```bash
./komodo-cli txnotarizedconfirmed ce1e3df1fb24ab3301b4032c3a0af466ca03b9365f8c649511bdd72f5519fecb
```


<collapse-text hidden title="Response">


```json
{
  "result": true
}
```

</collapse-text>


## validateaddress

**validateaddress "komodoaddress"**

The `validateaddress` method returns information about the given address.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | ----------------------- |
| "address" | (string, required) | the address to validate |

### Response

| Name | Type | Description | 
| -------------- | --------- | ----------------------------------------------------------------------------------------- |
| "isvalid"      | (boolean) | indicates whether the address is valid. If it is not, this is the only property returned. |
| "address"      | (string)  | the address validated                                                                     |
| "scriptPubKey" | (string)  | the hex encoded scriptPubKey generated by the address                                     |
| "ismine"       | (boolean) | indicates whether the address is yours                                                    |
| "isscript"     | (boolean) | whether the key is a script                                                               |
| "pubkey"       | (string)  | the hex value of the raw public key                                                       |
| "iscompressed" | (boolean) | whether the address is compressed                                                         |
| "account"      | (string)  | DEPRECATED the account associated with the address; "" is the default account             |

#### :pushpin: Examples

Command:

```bash
./komodo-cli validateaddress "RDNC9mLrN48pVGDQ5jSoPb2nRsUPJ5t2R7"
```


<collapse-text hidden title="Response">


```json
{
  "isvalid": true,
  "address": "RDNC9mLrN48pVGDQ5jSoPb2nRsUPJ5t2R7",
  "scriptPubKey": "76a9142cd2a4e3d1c2738ee4fce61e73ea822dcaacb9b488ac",
  "segid": 9,
  "ismine": true,
  "iswatchonly": false,
  "isscript": false,
  "pubkey": "03c376b00b3a2ae43b8bf103a6c6962b241de684383301fe628a460b68a79ac1d8",
  "iscompressed": true,
  "account": ""
}
```

</collapse-text>


## verifymessage

**verifymessage "address" "signature" "message"**

The `verifymessage` method verifies a signed message.

::: tip
See also <b>signmessage</b>.
:::

### Arguments

| Name | Type | Description | 
| ----------- | ------------------ | -------------------------------------------------------- |
| "address"   | (string, required) | the address to use for the signature                     |
| "signature" | (string, required) | the signature provided by the signer in base 64 encoding |
| "message"   | (string, required) | the message that was signed                              |

### Response

| Name | Type | Description | 
| ---------- | --------- | ------------------------------------------- |
| true/false | (boolean) | indicates whether the signature is verified |

#### :pushpin: Examples

Create the signature:

Command:

```bash
./komodo-cli signmessage "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ" "my message"
```


<collapse-text hidden title="Response">


```bash
H1y0mn/wRv56r1bcfkbQtzjG6XeWSelAsyayBuCwEL9XGXs7ieU55dryt/cFWM9gnRFI7gS01AByuSqRs+o/AZs=
```

</collapse-text>


Verify the signature:

Command:

```bash
./komodo-cli verifymessage "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ" "H1y0mn/wRv56r1bcfkbQtzjG6XeWSelAsyayBuCwEL9XGXs7ieU55dryt/cFWM9gnRFI7gS01AByuSqRs+o/AZs=" "my message"
```


<collapse-text hidden title="Response">


```bash
true
```

</collapse-text>


## z_validateaddress

**z_validateaddress "zaddr"**

The `z_validateaddress` method returns information about the given z address.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | ------------------------- |
| "zaddr"   | (string, required) | the z address to validate |

### Response

| Name | Type | Description | 
| ----------------- | --------- | ---------------------------------------------------------------------------------- |
| "isvalid"         | (boolean) | indicates whether the address is valid; if not, this is the only property returned |
| "address"         | (string)  | the z address validated                                                            |
| "ismine"          | (boolean) | indicates if the address is yours or not                                           |
| "payingkey"       | (string)  | the hex value of the paying key, a_pk                                              |
| "transmissionkey" | (string)  | the hex value of the transmission key, pk_enc                                      |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_validateaddress "zcWsmqT4X2V4jgxbgiCzyrAfRT1vi1F4sn7M5Pkh66izzw8Uk7LBGAH3DtcSMJeUb2pi3W4SQF8LMKkU2cUuVP68yAGcomL"
```


<collapse-text hidden title="Response">


```json
{
  "isvalid": true,
  "address": "ztdChvxs2Z97X7qeBwsnRLbxva1ZVgWhFWZxZTA5bC8XLt9RHF8uXn16MWCU8DhKEt4gTtKqQwzsrk85f5tThWMNoYds2oX",
  "payingkey": "d9c09cb974fbe0bf7e36a2318b46396c5112511f90749531428936867d83bd92",
  "transmissionkey": "5ce3250912758cbb591e3d585ef110992f25ed7694b88f55315b060698b75404",
  "ismine": true
}
```

</collapse-text>

# Wallet

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## addmultisigaddress

**addmultisigaddress nrequired [ "key", ... ] \( "account" )**

The `addmultisigaddress` method adds a multi-signature address to the wallet, where `nrequired` indicates the number of keys (out of the total provided) required to execute a transaction.

The keys function as signatures, allowing multiple parties or entities to manage an account. Each key in the array can be an address or a hex-encoded public key.

::: tip
DEPRECATED: If <b>account</b> is specified, the method assigns the multi-signature address to that account.
:::

### Arguments

| Name | Type | Description | 
| ------------ | ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
| nrequired    | (numeric, required) | the number of required keys (out of the `n` submitted)                                                                                                   |
| "keysobject" | (string, required)  | a json array of addresses or hex-encoded public keys                                                                                                     |
| "address"    | (string)            | the address or hex-encoded public key                                                                                                                    |
| "account"    | (string, optional)  | DEPRECATED: if provided, "account" MUST be set to the empty string "" to represent the default account; passing any other string will result in an error |

### Response

| Name | Type | Description | 
| --------- | -------- | ----------------------------------- |
| "address" | (string) | an address associated with the keys |

#### :pushpin: Examples

Add a multisig address from 2 addresses:

Command:

```bash
./komodo-cli addmultisigaddress 2 '["RSWwtqsNr9mW21UXRm6Lz4AzQnj4pVzzkp","RW8d8EChHTooVbwF3reqHYgkzWCnJFLXgh"]'
```


<collapse-text hidden title="Response">


```bash
bLz2YZ7Mm8MgPc9mPNiFqhjFPbFZU4WUD5
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "addmultisigaddress", "params": [2, ["RL4CuA2MSAbBiqJKQEr2TKnKT2fSwK99mG","RBYVFCxpJdLgvUixhguxzuH1TJpoNLYCJ6"]] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "bNdB9fAt9HmQD8CmBjkY6QwmrNSBrbzsgA",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## backupwallet

**backupwallet "destination"**

The `backupwallet` method safely copies the `wallet.dat` file to the indicated destination. The `destination` input accepts only alphanumeric characters.

::: tip
This method requires that the coin daemon have the <b>exportdir</b> runtime parameter enabled.
:::

### Arguments

| Name | Type | Description | 
| ------------- | ------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------- |
| "destination" | (string, required) | the destination filename, saved in the directory set by the [exportdir](../installations/common-runtime-parameters.html#exportdir) runtime parameter |

### Response

| Name | Type | Description | 
| --------- | -------- | ------------------------------------- |
| "path"    | (string) | the full path of the destination file |

#### :pushpin: Examples

```bash
./komodo-cli backupwallet "mybackupdata"

/home/myusername/myexportdir/mybackupdata
```

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "backupwallet", "params": ["backupdata"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "/home/myusername/Desktop/backupdata",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## dumpprivkey

**dumpprivkey "address"**

The `dumpprivkey` method reveals the private key corresponding to the indicated `address`.

::: tip
See also <b>importprivkey</b>.
:::

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | ------------------------------- |
| "address" | (string, required) | the address for the private key |

### Response

| Name | Type | Description | 
| --------- | -------- | --------------- |
| "data"    | (string) | the private key |

#### :pushpin: Examples

Command:

```bash
./komodo-cli dumpprivkey "RTcwYaQPDVN7V9SdfFHARWnoB7vcpSfdvs"
```


<collapse-text hidden title="Response">


```bash
DONOTUSExxxxxxxxxxxxxxxxxxxx4KkCmRnnSg7iXvAUjoYivC8K
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "dumpprivkey", "params": ["RTcwYaQPDVN7V9SdfFHARWnoB7vcpSfdvs"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "DONOTUSExxxxxxxxxxxxxxxxxxxx4KkCmRnnSg7iXvAUjoYivC8K",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## dumpwallet

**dumpwallet "filename"**

The `dumpwallet` method dumps all transparent-address wallet keys into a file, using a human-readable format.

Overwriting an existing file is not permitted. The `destination` parameter accepts only alphanumeric characters.

::: tip
This method requires that the coin daemon have the [exportdir](../installations/common-runtime-parameters.html#exportdir) runtime parameter enabled.
:::

### Arguments

| Name | Type | Description | 
| ---------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------- |
| "filename" | (string, required) | the filename, saved in the folder set by the [exportdir](../installations/common-runtime-parameters.html#exportdir) runtime parameter |

### Response

| Name | Type | Description | 
| --------- | -------- | ------------------------------------- |
| "path"    | (string) | the full path of the destination file |

#### :pushpin: Examples

Command:

```bash
./komodo-cli dumpwallet "test"
```


<collapse-text hidden title="Response">


```bash
/home/myusername/myexportdir/test
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "dumpwallet", "params": ["test"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "/home/myusername/myexportdir/test",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## encryptwallet

**encryptwallet "passphrase"**

::: warning
Using the `encryptwallet` method will shutdown the Komodo daemon (`komodod`).
:::

:::tip
This feature is available only on chains where `-ac_public` is enabled. Chains that feature private transactions cannot use this feature.
:::

The `encryptwallet` method encrypts the wallet with the indicated `passphrase`.

For more information, please see these instructions: [Encrypt Komodo's wallet.dat File](https://docs.komodoplatform.com/komodo/encrypt-wallet.html)

This method is for first-time encryption only. After the first encryption, any calls that interact with private keys will require the passphrase via [walletpassphrase](../komodo-api/wallet.html#walletpassphrase) prior to calling the corresponding method. This includes methods that create a transaction, dump a private key for an address, sign a transaction, etc.

### Arguments

| Name | Type | Description | 
| ---------- | -------- | ----------------------------------------------------------------------------------------------------- |
| passphrase | (string) | the passphrase for wallet encryption; the passphrase must be at least 1 character, but should be many |

### Response

| Text Response                                                                                                                                |
| -------------------------------------------------------------------------------------------------------------------------------------------- |
| wallet encrypted; Komodo server stopping, restart to run with encrypted wallet. The keypool has been flushed, you need to make a new backup. |

#### :pushpin: Examples

##### Encrypt your wallet

Command:

```bash
./komodo-cli encryptwallet "mypassphrase"
```


<collapse-text hidden title="Response">


```bash
wallet encrypted; Komodo server stopping, restart to run with encrypted wallet. The keypool has been flushed, you need to make a new backup.
```

</collapse-text>


##### Unlock the wallet for 60 seconds

Command:

```bash
./komodo-cli walletpassphrase "mypassphrase" 60
```


<collapse-text hidden title="Response">


```bash
(disabled)
```

</collapse-text>


##### Lock the wallet again by removing the passphrase

Command:

```bash
./komodo-cli walletlock
```


<collapse-text hidden title="Response">


```bash
(No response)
```

</collapse-text>


As a json rpc call:

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "encryptwallet", "params": ["mypassphrase"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```bash
{
    "result":"wallet encrypted; Komodo server stopping, restart to run with encrypted wallet. The keypool has been flushed, you need to make a new backup.",
    "error":null,
    "id":"curltest"
}
```

</collapse-text>


## getaccount

**getaccount "address"**

The `getaccount` method returns the account associated with the given address.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | ----------- |
| "address" | (string, required) | the address |

### Response

| Name | Type | Description | 
| ------------- | -------- | ------------------- |
| "accountname" | (string) | the account address |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getaccount "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ"
```


<collapse-text hidden title="Response">


```bash
(deprecated)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaccount", "params": ["RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```bash
(deprecated)
```

</collapse-text>


## getaccountaddress

**getaccountaddress "account"**

::: tip
DEPRECATED
:::

The `getaccountaddress` method returns the current address for receiving payments to this account.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | --------------------------------------------------------------------------------------------------------------------- |
| "account" | (string, required) | MUST be set to the empty string "" to represent the default account; passing any other string will result in an error |

### Response

| Name | Type | Description | 
| --------- | -------- | ------------------- |
| "address" | (string) | the account address |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getaccountaddress
```


<collapse-text hidden title="Response">


```bash
(deprecated)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaccountaddress", "params": ["myaccount"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```bash
(deprecated)
```

</collapse-text>


## getaddressesbyaccount

**getaddressesbyaccount "account"**

::: tip
DEPRECATED
:::

The `getaddressesbyaccount` method returns the list of addresses for the given `account`.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | --------------------------------------------------------------------------------------------------------------------- |
| "account" | (string, required) | MUST be set to the empty string "" to represent the default account; passing any other string will result in an error |

### Response

| Name | Type | Description | 
| --------- | -------- | -------------------------------------------- |
| "address" | (string) | an address associated with the given account |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getaddressesbyaccount "tabby"
```


<collapse-text hidden title="Response">


```bash
(deprecated)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressesbyaccount", "params": ["tabby"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```bash
(deprecated)
```

</collapse-text>


## getbalance

**getbalance ( "account" minconf includeWatchonly )**

The `getbalance` method returns the server's total available balance.

::: tip
The <b>account</b> input is deprecated.
:::

### Arguments

| Name | Type | Description | 
| ---------------- | ------------------------------- | -------------------------------------------------------------------------------------- |
| "account"        | (string, optional)              | DEPRECATED if provided, it MUST be set to the empty string `""` or to the string `"*"` |
| minconf          | (numeric, optional, default=1)  | only include transactions confirmed at least this many times                           |
| includeWatchonly | (bool, optional, default=false) | also include balance in watchonly addresses (see `importaddress`)                      |

### Response

| Name | Type | Description | 
| --------- | --------- | ---------------- |
| amount    | (numeric) | the total amount |

#### :pushpin: Examples

The total amount in the wallet:

Command:

```bash
./komodo-cli getbalance

```


<collapse-text hidden title="Response">


```bash
10.05000000
```

</collapse-text>


The total amount in the wallet where at least five blocks are confirmed:

Command:

```bash
./komodo-cli getbalance "*" 5
```


<collapse-text hidden title="Response">


```bash
10.05000000
```

</collapse-text>


As a json rpc call:

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getbalance", "params": ["", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": 10.09234883,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getbalance64

**getbalance64**

::: tip
This method is part of the new <b>ac_staked</b> functionality.
:::

The `getbalance64` method is used only on asset chains that are utilizing the `ac_staked` functionality. On KMD-based Proof-of-Stake (PoS) asset chains, all staked coins are placed into one of 64 segments (`segid`'s'). The `getbalance64` method returns the balance of coins in each `segid`. For further information, please reach out to our support team.

## getnewaddress

**getnewaddress ( "account" )**

The `getnewaddress` method returns a new address for receiving payments.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| "account" | (string, optional) | DEPRECATED: If provided, the account MUST be set to the empty string `""` to represent the default account; passing any other string will result in an error |

### Response

| Name | Type | Description | 
| --------- | -------- | --------------- |
| "address" | (string) | the new address |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getnewaddress
```


<collapse-text hidden title="Response">


```bash
"RYDuQ2oQCCz1PQNxUQTDAaRinWKiCoT2E6"
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getnewaddress", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "R9iQRG6J9eY8SwaCcYZ65QJxg5UhgLC5Rx",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getrawchangeaddress

**getrawchangeaddress**

The `getrawchangeaddress` returns a new address that can be used to receive change.

::: tip
This is for use with raw transactions, NOT normal use.
:::

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| --------- | -------- | ----------- |
| "address" | (string) | the address |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getrawchangeaddress
```


<collapse-text hidden title="Response">


```bash
RS8oqzbjShKhftmuk2RpRmHH2hTAukp6yP
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getrawchangeaddress", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "RJSDZjp7kjBNhHsbECDE1jwYNK7af41pZN",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getreceivedbyaccount

**getreceivedbyaccount "account" ( minconf )**

::: tip
DEPRECATED
:::

The <b>getreceivedbyaccount</b> method returns the total amount received by <b>account</b> in transactions with at least <b>minconf</b> confirmations.

### Arguments

| Name | Type | Description | 
| --------- | ------------------------------ | --------------------------------------------------------------------------------------------------------------------- |
| "account" | (string, required)             | MUST be set to the empty string "" to represent the default account; passing any other string will result in an error |
| minconf   | (numeric, optional, default=1) | only include transactions confirmed at least this many times                                                          |

### Response

| Name | Type | Description | 
| --------- | --------- | ------------------------------------------ |
| amount    | (numeric) | the total amount received for this account |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getreceivedbyaccount ""
```


<collapse-text hidden title="Response">


```bash
(deprecated)
```

</collapse-text>


## getreceivedbyaddress

**getreceivedbyaddress "address" ( minconf )**

The `getreceivedbyaddress` method returns the total amount received by the given `address` in transactions with at least `minconf` confirmations.

### Arguments

| Name | Type | Description | 
| --------- | ------------------------------ | ------------------------------------------------------------ |
| "address" | (string, required)             | the address for transactions                                 |
| minconf   | (numeric, optional, default=1) | only include transactions confirmed at least this many times |

### Response

| Name | Type | Description | 
| --------- | --------- | -------------------------------------------------------------- |
| amount    | (numeric) | the total amount of the relevant coin received at this address |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getreceivedbyaddress "RJSDZjp7kjBNhHsbECDE1jwYNK7af41pZN"
```


<collapse-text hidden title="Response">


```bash
10.0500000
```

</collapse-text>


Command:

```bash
./komodo-cli getreceivedbyaddress "RJSDZjp7kjBNhHsbECDE1jwYNK7af41pZN" 0
```


<collapse-text hidden title="Response">


```bash
10.0500000
```

</collapse-text>


Command:

```bash
./komodo-cli getreceivedbyaddress "RJSDZjp7kjBNhHsbECDE1jwYNK7af41pZN" 6
```


<collapse-text hidden title="Response">


```bash
10.0500000
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getreceivedbyaddress", "params": ["RJSDZjp7kjBNhHsbECDE1jwYNK7af41pZN", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": 0,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## gettransaction

**gettransaction "txid" ( includeWatchonly )**

The `gettransaction` method queries detailed information about transaction `txid`. This command applies only to `txid`'s that are in the user's local wallet.

### Arguments

| Name | Type | Description | 
| ------------------ | ------------------------------- | ----------------------------------------------------------------------------------------------------------------- |
| "txid"             | (string, required)              | the transaction id                                                                                                |
| "includeWatchonly" | (bool, optional, default=false) | whether to include watchonly addresses in the returned balance calculation and in the `details[]` returned values |

### Response

| Name | Type | Description | 
| ----------------------- | ----------------------- | --------------------------------------------------------------------------------------------------------------------------------- |
| "amount"                | (numeric)               | the transaction amount                                                                                                            |
| "confirmations"         | (numeric)               | a confirmation number that is dPoW aware; see this [article](https://docs.komodoplatform.com/komodo/dPOW-conf.html) for more info |
| "rawconfirmations"      | (numeric)               | the raw confirmations (number of blocks on top of this transaction's block)                                                       |
| "blockhash"             | (string)                | the block hash                                                                                                                    |
| "blockindex"            | (numeric)               | the block index                                                                                                                   |
| "blocktime"             | (numeric)               | the time in seconds since epoch (1 Jan 1970 GMT)                                                                                  |
| "txid"                  | (string)                | the transaction id                                                                                                                |
| "time"                  | (numeric)               | the transaction time in seconds since epoch (1 Jan 1970 GMT)                                                                      |
| "timereceived"          | (numeric)               | the time received in seconds since epoch (1 Jan 1970 GMT)                                                                         |
| "details" : [ ... ]     | (array)                 |
| "account"               | (string)                | DEPRECATED the account name involved in the transaction; can be "" for the default account                                        |
| "address"               | (string)                | the address involved in the transaction                                                                                           |
| "category"              | (string)                | the category - either `send` or `receive`                                                                                         |
| "amount"                | (numeric)               | the amount                                                                                                                        |
| "vout"                  | (numeric)               | the vout value                                                                                                                    |
| "vjoinsplit" : [ ... ]  | (array of json objects) |
| "anchor"                | (string)                | merkle root of note commitment tree                                                                                               |
| "nullifiers" : [ ... ]  | (array of strings)      | <!--Need these? If not, let's leave a comment here saying why they're not needed, so that next time we don't forget. -->
| "hex"                   | (string)                |
| "commitments" : [ ... ] | (array of strings)      |
| "hex"                   | (string)                |
| "macs" : [ ... ]        | (array of strings)      |
| "hex"                   | (string)                |
| "vpub_old"              | (numeric)               | the amount removed from the transparent value pool                                                                                |
| "vpub_new"              | (numeric)               | the amount added to the transparent value pool                                                                                    |
| "hex"                   | (string)                | transaction data translated into hex                                                                                                          |

#### :pushpin: Examples

Command:

```bash
./komodo-cli gettransaction "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a"
```


<collapse-text hidden title="Response">


```json
{
  "amount": 0.000001,
  "rawconfirmations": 14,
  "confirmations": 1,
  "blockhash": "07eb80d845eae646a95351a47a1b54964610f3caf4d4ff53750d0de66fbfc525",
  "blockindex": 1,
  "blocktime": 1552585479,
  "expiryheight": 1268793,
  "txid": "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a",
  "walletconflicts": [],
  "time": 1552585444,
  "timereceived": 1552585444,
  "vjoinsplit": [],
  "details": [
    {
      "account": "",
      "address": "RGmfyV6GLkNXTSM5XaxtpwPrw4R7iiHEa2",
      "category": "receive",
      "amount": 0.000001,
      "vout": 1,
      "size": 254
    }
  ],
  "hex": "0400008085202f8901310bd18e1c5de58eed0482e13c855763e83fadb19c1abd330e62c07a13370edf1b0000006a47304402207a607ff3b479317dd41842f024380994ec7e4353c0cb33bff32bc795cfa8a7c202205ff036aeee1760f0677d22155be8210b78ffffb3b03f568304278a914fe6e0d1012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8feffffff0254738e1d00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac64000000000000001976a914522bd057d4304d6204187c99e6dece0c29bdbe9788acce928a5c395c13000000000000000000000000"
}
```

</collapse-text>


Command:

```bash
./komodo-cli gettransaction "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a" true
```


<collapse-text hidden title="Response">


```json
{
  "amount": 0.000001,
  "rawconfirmations": 14,
  "confirmations": 1,
  "blockhash": "07eb80d845eae646a95351a47a1b54964610f3caf4d4ff53750d0de66fbfc525",
  "blockindex": 1,
  "blocktime": 1552585479,
  "expiryheight": 1268793,
  "txid": "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a",
  "walletconflicts": [],
  "time": 1552585444,
  "timereceived": 1552585444,
  "vjoinsplit": [],
  "details": [
    {
      "account": "",
      "address": "RGmfyV6GLkNXTSM5XaxtpwPrw4R7iiHEa2",
      "category": "receive",
      "amount": 0.000001,
      "vout": 1,
      "size": 254
    }
  ],
  "hex": "0400008085202f8901310bd18e1c5de58eed0482e13c855763e83fadb19c1abd330e62c07a13370edf1b0000006a47304402207a607ff3b479317dd41842f024380994ec7e4353c0cb33bff32bc795cfa8a7c202205ff036aeee1760f0677d22155be8210b78ffffb3b03f568304278a914fe6e0d1012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8feffffff0254738e1d00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac64000000000000001976a914522bd057d4304d6204187c99e6dece0c29bdbe9788acce928a5c395c13000000000000000000000000"
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "gettransaction", "params": ["34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "amount": 0.000001,
    "rawconfirmations": 19,
    "confirmations": 1,
    "blockhash": "07eb80d845eae646a95351a47a1b54964610f3caf4d4ff53750d0de66fbfc525",
    "blockindex": 1,
    "blocktime": 1552585479,
    "expiryheight": 1268793,
    "txid": "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a",
    "walletconflicts": [],
    "time": 1552585444,
    "timereceived": 1552585444,
    "vjoinsplit": [],
    "details": [
      {
        "account": "",
        "address": "RGmfyV6GLkNXTSM5XaxtpwPrw4R7iiHEa2",
        "category": "receive",
        "amount": 0.000001,
        "vout": 1,
        "size": 254
      }
    ],
    "hex": "0400008085202f8901310bd18e1c5de58eed0482e13c855763e83fadb19c1abd330e62c07a13370edf1b0000006a47304402207a607ff3b479317dd41842f024380994ec7e4353c0cb33bff32bc795cfa8a7c202205ff036aeee1760f0677d22155be8210b78ffffb3b03f568304278a914fe6e0d1012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8feffffff0254738e1d00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac64000000000000001976a914522bd057d4304d6204187c99e6dece0c29bdbe9788acce928a5c395c13000000000000000000000000"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getunconfirmedbalance

**getunconfirmedbalance**

The `getunconfirmedbalance` method returns the server's total unconfirmed balance.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getunconfirmedbalance
```


<collapse-text hidden title="Response">


```bash
10.05000000
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getunconfirmedbalance", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": 10.05,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## getwalletinfo

**getwalletinfo**

The `getwalletinfo` method returns an object containing various information about the wallet state.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| --------------------- | --------- | -------------------------------------------------------------------------------------------------------------------------------------- |
| "walletversion"       | (numeric) | the wallet version                                                                                                                     |
| "balance"             | (numeric) | the total confirmed balance of the wallet                                                                                              |
| "unconfirmed_balance" | (numeric) | the total unconfirmed balance of the wallet                                                                                            |
| "immature_balance"    | (numeric) | the total immature balance of the wallet                                                                                               |
| "txcount"             | (numeric) | the total number of transactions in the wallet                                                                                         |
| "keypoololdest"       | (numeric) | the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool                                                |
| "keypoolsize"         | (numeric) | how many new keys are pre-generated                                                                                                    |
| "unlocked_until"      | (numeric) | the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked |
| "paytxfee"            | (numeric) | the transaction fee configuration, given as the relevant COIN per KB                                                               |

#### :pushpin: Examples

Command:

```bash
./komodo-cli getwalletinfo
```


<collapse-text hidden title="Response">


```json
{
  "walletversion": 60000,
  "balance": 10.01334496,
  "unconfirmed_balance": 0.0,
  "immature_balance": 0.0001,
  "txcount": 106,
  "keypoololdest": 1536889653,
  "keypoolsize": 101,
  "paytxfee": 0.0
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getwalletinfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "walletversion": 60000,
    "balance": 10.01334496,
    "unconfirmed_balance": 0,
    "immature_balance": 0.0001,
    "txcount": 106,
    "keypoololdest": 1536889653,
    "keypoolsize": 101,
    "paytxfee": 0
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## importaddress

**importaddress "address" ( "label" rescan )**

The `importaddress` method adds an address or script (in hex) that can be watched as if it were in your wallet, although it cannot be used to spend.

::: tip
This call can take an increased amount of time to complete if rescan is true.
:::

### Arguments

| Name | Type | Description | 
| --------- | --------------------------------- | ---------------------------------- |
| "address" | (string, required)                | the address to watch               |
| "label"   | (string, optional, default="")    | an optional label                  |
| rescan    | (boolean, optional, default=true) | rescan the wallet for transactions |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

#### :pushpin: Examples

Import an address with rescan:

Command:

```bash
./komodo-cli importaddress "RJSDZjp7kjBNhHsbECDE1jwYNK7af41pZN"
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


Command:

```bash
./komodo-cli importaddress "RJSDZjp7kjBNhHsbECDE1jwYNK7af41pZN" "testing" false
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "importaddress", "params": ["R9z796AehK5b6NCPeVkGUHSpJnawerf8oP", "testing", false] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": null,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## importprivkey

**importkey "komodoprivkey" ( "label" rescan )**

The `importprivkey` method adds a private key to your wallet.

::: tip
This call can take minutes to complete if <b>rescan</b> is true.
:::

::: tip
See also <b>dumpprivkey</b>.
:::

### Arguments

| Name | Type | Description | 
| --------- | --------------------------------- | -------------------------------------------------------------------------- |
| "privkey" | (string, required)                | the private key (see [dumpprivkey](../komodo-api/wallet.html#dumpprivkey)) |
| "label"   | (string, optional, default="")    | an optional label                                                          |
| rescan    | (boolean, optional, default=true) | rescan the wallet for transactions                                         |

### Response

| Name | Type | Description | 
| --------- | -------- | ------------------ |
| addresses | (string) | the public address |

#### :pushpin: Examples

Command:

```bash
./komodo-cli importprivkey "DONOTUSExxxxxxxxxxxxxxxxxxxxj4Xu9jjinhLpffhdtoKg5gar2"
```


<collapse-text hidden title="Response">


```bash
R9z796AehK5b6NCPeVkGUHSpJnawerf8oP
```

</collapse-text>


Command:

```bash
./komodo-cli importprivkey "DONOTUSExxxxxxxxxxxxxxxxxxxxj4Xu9jjinhLpffhdtoKg5gar2" "testing" false
```


<collapse-text hidden title="Response">


```bash
RFtA32tttJm89VWRWPCQtV8bkQ1FvE1MBG
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "importprivkey", "params": ["UwibHKsYfiM19BXQmcUwAfw331GzGQK8aoPqqYEbyoPrzc2965nE", "testing", false] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "RC5qhqgYRzf3dUXGAst9ah5LcuLjmMgT64",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## importwallet

**importwallet "filename"**

The `importwallet` method imports transparent-address keys from a wallet-dump file (see [dumpwallet](../komodo-api/wallet.html#dumpwallet)).

### Arguments

| Name | Type | Description | 
| ---------- | ------------------ | --------------- |
| "filename" | (string, required) | the wallet file |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

#### :pushpin: Examples

Command:

```bash
./komodo-cli importwallet "path/to/exportdir/nameofbackup"
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "importwallet", "params": ["path/to/exportdir/nameofbackup"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": null,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## keypoolrefill

**keypoolrefill ( newsize )**

The `keypoolrefill` method refills the keypool.

### Arguments

| Name | Type | Description | 
| --------- | -------------------------------- | -------------------- |
| newsize   | (numeric, optional, default=100) | the new keypool size |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

#### :pushpin: Examples

Command:

```bash
./komodo-cli keypoolrefill
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


Command:

```bash
./komodo-cli keypoolrefill 100
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "keypoolrefill", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": null,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## listaccounts

**listaccounts ( minconf includeWatchonly )**

::: tip
DEPRECATED
:::

The <b>listaccounts</b> method returns an object that has account names as keys and account balances as values.

### Arguments

| Name | Type | Description | 
| ---------------- | ------------------------------- | --------------------------------------------------------------- |
| minconf          | (numeric, optional, default=1)  | only include transactions with at least this many confirmations |
| includeWatchonly | (bool, optional, default=false) | include balances in watchonly addresses (see 'importaddress')   |

### Response

| Name | Type | Description | 
| ---------------- | --------- | ----------------------------------------------------------------------------------------- |
| "account_number" | (numeric) | the property name is the account name, and the value is the total balance for the account |

#### :pushpin: Examples

Command:

```bash
./komodo-cli listaccounts 6
```


<collapse-text hidden title="Response">


```bash
(deprecated)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listaccounts", "params": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```bash
(deprecated)
```

</collapse-text>


## listaddressgroupings

**listaddressgroupings**

The `listaddressgroupings` method lists groups of addresses which have had their common ownership made public by common use as inputs or as the resulting change in past transactions.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| ---------- | ------------------ | ------------------------ |
| "address", | (string)           | the address              |
| amount,    | (numeric)          | the amount               |
| "account"  | (string, optional) | (DEPRECATED) the account |

#### :pushpin: Examples

Command:

```bash
./komodo-cli listaddressgroupings
```


<collapse-text hidden title="Response">


(note how there are two separate, unique groupings of addresses)

```bash
[
  [
    [
      "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ",
      9.99304496
    ],
    [
      "RDNC9mLrN48pVGDQ5jSoPb2nRsUPJ5t2R7",
      0.00040000,
      ""
    ],
    [
      "RJSDZjp7kjBNhHsbECDE1jwYNK7af41pZN",
      0.01000000
    ]
  ],
  [
    [
      "RTcwYaQPDVN7V9SdfFHARWnoB7vcpSfdvs",
      0.00990000,
      ""
    ]
  ]
]
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listaddressgroupings", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    [
      ["RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ", 9.99304496],
      ["RDNC9mLrN48pVGDQ5jSoPb2nRsUPJ5t2R7", 0.0004, ""],
      ["RJSDZjp7kjBNhHsbECDE1jwYNK7af41pZN", 0.01]
    ],
    [["RTcwYaQPDVN7V9SdfFHARWnoB7vcpSfdvs", 0.0099, ""]]
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## listlockunspent

**listlockunspent**

The `listlockunspent` method returns a list of temporarily non-spendable outputs.

::: tip
See the <b>lockunspent</b> call to lock and unlock transactions for spending.
:::

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| --------- | --------- | ------------------------- |
| "txid"    | (string)  | the transaction id locked |
| "vout"    | (numeric) | the vout value            |

#### :pushpin: Examples

Command:

```bash
./komodo-cli listlockunspent
```


<collapse-text hidden title="Response">


```json
[
  {
    "txid": "d7ba45296c66e16eb61f27a4eef8848c7f5579fe801f277c1b0e074a4f47d6fd",
    "vout": 0
  }
]
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listlockunspent", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    {
      "txid": "d7ba45296c66e16eb61f27a4eef8848c7f5579fe801f277c1b0e074a4f47d6fd",
      "vout": 0
    }
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## listreceivedbyaccount

**listreceivedbyaccount ( minconf includeempty includeWatchonly )**

::: warning
DEPRECATED
:::

The `listreceivedbyaccount` method lists balances by account.

### Arguments

| Name | Type | Description | 
| ---------------- | ---------------------------------- | ---------------------------------------------------------------- |
| minconf          | (numeric, optional, default=1)     | the minimum number of confirmations before payments are included |
| includeempty     | (boolean, optional, default=false) | whether to include accounts that haven't received any payments   |
| includeWatchonly | (bool, optional, default=false)    | whether to include watchonly addresses (see 'importaddress')     |

### Response

| Name | Type | Description | 
| ------------------- | --------- | --------------------------------------------------------------------------------------------------------------------------------- |
| "involvesWatchonly" | (bool)    | only returned if the imported addresses were involved in the transaction                                                                  |
| "account"           | (string)  | the account name of the receiving account                                                                                         |
| "amount"            | (numeric) | the total amount received by addresses with this account                                                                          |
| "confirmations"     | (numeric) | a confirmation number that is dPoW aware; see this [article](https://docs.komodoplatform.com/komodo/dPOW-conf.html) for more info |
| "rawconfirmations"  | (numeric) | the raw confirmations of the most recent transaction included (number of blocks on top of this transaction's block)               |

#### :pushpin: Examples

Command:

```bash
./komodo-cli listreceivedbyaccount
```


<collapse-text hidden title="Response">


```json
[
  {
    "account": "",
    "amount": 0.000001,
    "rawconfirmations": 21,
    "confirmations": 21
  }
]
```

</collapse-text>


Command:

```bash
./komodo-cli listreceivedbyaccount 6 true
```


<collapse-text hidden title="Response">


```json
[
  {
    "account": "",
    "amount": 0.000001,
    "rawconfirmations": 23,
    "confirmations": 23
  }
]
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listreceivedbyaccount", "params": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    {
      "account": "",
      "amount": 0.000001,
      "rawconfirmations": 24,
      "confirmations": 24
    }
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## listreceivedbyaddress

**listreceivedbyaddress ( minconf includeempty includeWatchonly)**

The `listreceivedbyaddress` method lists balances by receiving address.

### Arguments

| Name | Type | Description | 
| ---------------- | ---------------------------------- | ---------------------------------------------------------------- |
| minconf          | (numeric, optional, default=1)     | the minimum number of confirmations before payments are included |
| includeempty     | (numeric, optional, default=false) | whether to include addresses that haven't received any payments  |
| includeWatchonly | (bool, optional, default=false)    | whether to include watchonly addresses (see 'importaddress')     |

### Response

| Name | Type | Description | 
| ------------------- | --------- | --------------------------------------------------------------------------------------------------------------------------------- |
| "involvesWatchonly" | (bool)    | only returned if imported addresses were involved in transaction                                                                  |
| "address"           | (string)  | the receiving address                                                                                                             |
| "account"           | (string)  | DEPRECATED the account of the receiving address; the default account is ""                                                        |
| "amount"            | (numeric) | the total amount received by the address                                                                                          |
| "confirmations"     | (numeric) | a confirmation number that is dPoW aware; see this [article](https://docs.komodoplatform.com/komodo/dPOW-conf.html) for more info |
| "rawconfirmations"  | (numeric) | the raw confirmations of the most recent transaction included (number of blocks on top of this transaction's block)               |

#### :pushpin: Examples

Command:

```bash
./komodo-cli listreceivedbyaddress
```


<collapse-text hidden title="Response">


```json
[
  {
    "address": "RGmfyV6GLkNXTSM5XaxtpwPrw4R7iiHEa2",
    "account": "",
    "amount": 0.000001,
    "rawconfirmations": 40,
    "confirmations": 40,
    "txids": [
      "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a"
    ]
  }
]
```

</collapse-text>


Command:

```bash
./komodo-cli listreceivedbyaddress 6 true
```


<collapse-text hidden title="Response">


```json
[
  {
    "address": "RGmfyV6GLkNXTSM5XaxtpwPrw4R7iiHEa2",
    "account": "",
    "amount": 0.000001,
    "rawconfirmations": 41,
    "confirmations": 41,
    "txids": [
      "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a"
    ]
  },
  {
    "address": "RSMmyzk2cZ7xJdDx62wAZbvM5dzxH8CPqv",
    "account": "",
    "amount": 0.0,
    "rawconfirmations": 0,
    "confirmations": 0,
    "txids": []
  },
  {
    "address": "RVErfGzpdNSLrg19FVAuet6nXGDaWnqiVc",
    "account": "",
    "amount": 0.0,
    "rawconfirmations": 0,
    "confirmations": 0,
    "txids": []
  }
]
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listreceivedbyaddress", "params": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    {
      "address": "RGmfyV6GLkNXTSM5XaxtpwPrw4R7iiHEa2",
      "account": "",
      "amount": 0.000001,
      "rawconfirmations": 41,
      "confirmations": 41,
      "txids": [
        "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a"
      ]
    },
    {
      "address": "RSMmyzk2cZ7xJdDx62wAZbvM5dzxH8CPqv",
      "account": "",
      "amount": 0.0,
      "rawconfirmations": 0,
      "confirmations": 0,
      "txids": []
    },
    {
      "address": "RVErfGzpdNSLrg19FVAuet6nXGDaWnqiVc",
      "account": "",
      "amount": 0.0,
      "rawconfirmations": 0,
      "confirmations": 0,
      "txids": []
    }
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## listsinceblock

**listsinceblock ( "blockhash" target-confirmations includeWatchonly )**

The `listsinceblock` method queries all transactions in blocks since block `blockhash`, or all transactions if `blockhash` is omitted.

### Arguments

| Name | Type | Description | 
| -------------------- | ------------------------------- | ---------------------------------------------------------------------- |
| "blockhash"          | (string, optional)              | the block hash from which to list transactions                         |
| target-confirmations | (numeric, optional)             | the confirmations required (must be 1 or more)                         |
| includeWatchonly     | (bool, optional, default=false) | include transactions to watchonly addresses (see also 'importaddress') |

### Response

| Name | Type | Description | 
| ------------------ | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| "transactions":    |           |
| "account"          | (string)  | DEPRECATED the account name associated with the transaction; will be "" for the default account                                                                                                                    |
| "address"          | (string)  | the address of the transaction (not present for move transactions -- category = move)                                                                                                                              |
| "category"         | (string)  | the transaction category; `send` has negative amounts, `receive` has positive amounts                                                                                                                              |
| "amount"           | (numeric) | the amount of the relevant currency -- negative for the `send` category, and for the `move` category for moves outbound. It is positive for the `receive` category, and for the `move` category for inbound funds. |
| "vout"             | (numeric) | the vout value                                                                                                                                                                                                     |
| "fee"              | (numeric) | the amount of the fee; this value is negative and only available for the `send` category of transactions                                                                                                           |
| "confirmations"    | (numeric) | a confirmation number that is dPoW aware; see this [article](https://docs.komodoplatform.com/komodo/dPOW-conf.html) for more info                                                                                  |
| "rawconfirmations" | (numeric) | the raw confirmations of the transaction; available for `send` and `receive` category of transactions (number of blocks on top of this transaction's block)                                                        |
| "blockhash"        | (string)  | the block hash containing the transaction; available for the `send` and `receive` categories of transactions                                                                                                       |
| "blockindex"       | (numeric) | the block index containing the transaction; available for the `send` and `receive` categories of transactions                                                                                                      |
| "blocktime"        | (numeric) | the block time in seconds since epoch (1 Jan 1970 GMT)                                                                                                                                                             |
| "txid"             | (string)  | the transaction id; available for `send` and `receive` categories of transactions                                                                                                                                  |
| "time"             | (numeric) | the transaction time in seconds since epoch (Jan 1 1970 GMT)                                                                                                                                                       |
| "timereceived"     | (numeric) | the time received in seconds since epoch (Jan 1 1970 GMT); available for `send` and `receive` category of transactions                                                                                             |
| "comment"          | (string)  | whether a comment is associated with the transaction                                                                                                                                                               |
| "to"               | (string)  | whether a 'to' comment is associated with the transaction                                                                                                                                                          |
| "lastblock"        | (string)  | the hash of the last block                                                                                                                                                                                         |

#### :pushpin: Examples

Command:

```bash
./komodo-cli listsinceblock
```


<collapse-text hidden title="Response">


```json
{
  "transactions": [
    {
      "account": "",
      "address": "RGmfyV6GLkNXTSM5XaxtpwPrw4R7iiHEa2",
      "category": "receive",
      "amount": 0.000001,
      "vout": 1,
      "rawconfirmations": 44,
      "confirmations": 44,
      "blockhash": "07eb80d845eae646a95351a47a1b54964610f3caf4d4ff53750d0de66fbfc525",
      "blockindex": 1,
      "blocktime": 1552585479,
      "expiryheight": 1268793,
      "txid": "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a",
      "walletconflicts": [],
      "time": 1552585444,
      "timereceived": 1552585444,
      "vjoinsplit": [],
      "size": 254
    }
  ],
  "lastblock": "05686392a3011a180988246b3b0343bc4eec992c101d2e651c6ee786af1b2fb5"
}
```

</collapse-text>


Command:

```bash
./komodo-cli listsinceblock "029f11d80ef9765602235e1bc9727e3eb6ba20839319f761fee920d63401e327" 6
```


<collapse-text hidden title="Response">


```json
{
  "transactions": [
    {
      "account": "",
      "address": "RGmfyV6GLkNXTSM5XaxtpwPrw4R7iiHEa2",
      "category": "receive",
      "amount": 0.000001,
      "vout": 1,
      "rawconfirmations": 45,
      "confirmations": 45,
      "blockhash": "07eb80d845eae646a95351a47a1b54964610f3caf4d4ff53750d0de66fbfc525",
      "blockindex": 1,
      "blocktime": 1552585479,
      "expiryheight": 1268793,
      "txid": "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a",
      "walletconflicts": [],
      "time": 1552585444,
      "timereceived": 1552585444,
      "vjoinsplit": [],
      "size": 254
    }
  ],
  "lastblock": "08db1a09b32ebb55f026c41d5555281ebeae4c9eb8b36e88db62b6f1d7fd12d1"
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listsinceblock", "params": ["029f11d80ef9765602235e1bc9727e3eb6ba20839319f761fee920d63401e327", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "transactions": [
      {
        "account": "",
        "address": "RGmfyV6GLkNXTSM5XaxtpwPrw4R7iiHEa2",
        "category": "receive",
        "amount": 0.000001,
        "vout": 1,
        "rawconfirmations": 46,
        "confirmations": 46,
        "blockhash": "07eb80d845eae646a95351a47a1b54964610f3caf4d4ff53750d0de66fbfc525",
        "blockindex": 1,
        "blocktime": 1552585479,
        "expiryheight": 1268793,
        "txid": "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a",
        "walletconflicts": [],
        "time": 1552585444,
        "timereceived": 1552585444,
        "vjoinsplit": [],
        "size": 254
      }
    ],
    "lastblock": "01b4ce6c4659138de1a7a67e8dac354b5acc3a998145effedbfec7ef41a2cec6"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## listtransactions

**listtransactions ( "account" count from includeWatchonly )**

The `listtransactions` method returns up to `count` most recent transactions skipping the first `from` transactions for `account`.

### Arguments

| Name | Type | Description | 
| ---------------- | ------------------------------- | ----------------------------------------------------------------- |
| "account"        | (string, optional)              | DEPRECATED the account name; should be `"*"`                      |
| count            | (numeric, optional, default=10) | the number of transactions to return                              |
| from             | (numeric, optional, default=0)  | the number of transactions to skip                                |
| includeWatchonly | (bool, optional, default=false) | include transactions to watchonly addresses (see `importaddress`) |

### Response

| Name | Type | Description | 
| ------------------ | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| "account"          | (string)  | DEPRECATED the account name associated with the transaction; it will be "" for the default account                                                                                                   |
| "address"          | (string)  | the address of the transaction; not present for move transactions (category = move)                                                                                                                  |
| "category"         | (string)  | The transaction category. This property can be `send`                                                                                                                                                | `receive` | `move`. `move` is a local (off blockchain) transaction between accounts -- not associated with an address, transaction id, or block. `send` and `receive` transactions are associated with an address, transaction id, and block details. |
| "amount"           | (numeric) | The amount. This value is negative for the `send` category, and for the `move` category for moves outbound. It is positive for the `receive` category and for the `move` category for inbound funds. |
| "vout"             | (numeric) | the vout value                                                                                                                                                                                       |
| "fee"              | (numeric) | the amount of the fee; this is negative and only available for the `send` category of transactions                                                                                                   |
| "confirmations"    | (numeric) | a confirmation number that is dPoW aware; see this [article](https://docs.komodoplatform.com/komodo/dPOW-conf.html) for more info                                                                    |
| "rawconfirmations" | (numeric) | the raw confirmations of the transaction; available for `send` and `receive` category of transactions (number of blocks on top of this transaction's block)                                          |
| "blockhash"        | (string)  | the block hash containing the transaction; available for the `send` and `receive` categories of transactions                                                                                         |
| "blockindex"       | (numeric) | the block index containing the transaction; available for the `send` and `receive` categories of transactions                                                                                        |
| "txid"             | (string)  | the transaction id; available for the `send` and `receive` categories of transactions                                                                                                                |
| "time"             | (numeric) | the transaction time in seconds since epoch (midnight Jan 1 1970 GMT)                                                                                                                                |
| "timereceived"     | (numeric) | the time received in seconds since epoch (midnight Jan 1 1970 GMT); available for the `send` and `receive` categories of transactions                                                                |
| "comment"          | (string)  | whether a comment is associated with the transaction                                                                                                                                                 |
| "otheraccount"     | (string)  | for the `move` category of transactions; indicates the account which sent the funds (for receiving funds, positive amounts), or went to (for sending funds, negative amounts)                        |
| "size"             | (numeric) | transaction size in bytes                                                                                                                                                                            |

#### :pushpin: Examples

Command:

```bash
./komodo-cli listtransactions
```


<collapse-text hidden title="Response">


```json
[
  {
    "account": "",
    "address": "RTcwYaQPDVN7V9SdfFHARWnoB7vcpSfdvs",
    "category": "generate",
    "amount": 0.00010000,
    "vout": 0,
    "rawconfirmations": 99,
    "confirmations": 99,
    "generated": true,
    "blockhash": "0eb4edeb5141a7670ef8be413873e1bef4f6f321867a2b8d67a616cdc7df1e77",
    "blockindex": 0,
    "blocktime": 1536976212,
    "expiryheight": 0,
    "txid": "3041aa7374e530d4d28e14620dd2bb9d2ff0bf71dd1106f08bc9f02fce44598e",
    "walletconflicts": [
    ],
    "time": 1536976211,
    "timereceived": 1536976211,
    "vjoinsplit": [
    ],
    "size": 99
  }
  , ... (9 responses ommitted from documentation for brevity)
]
```

</collapse-text>


Command:

```bash
./komodo-cli listtransactions "*" 20 100
```


<collapse-text hidden title="Response">


```json
[
  {
    "account": "",
    "address": "RTcwYaQPDVN7V9SdfFHARWnoB7vcpSfdvs",
    "category": "generate",
    "amount": 0.00010000,
    "vout": 0,
    "rawconfirmations": 99,
    "confirmations": 99,
    "generated": true,
    "blockhash": "0eb4edeb5141a7670ef8be413873e1bef4f6f321867a2b8d67a616cdc7df1e77",
    "blockindex": 0,
    "blocktime": 1536976212,
    "expiryheight": 0,
    "txid": "3041aa7374e530d4d28e14620dd2bb9d2ff0bf71dd1106f08bc9f02fce44598e",
    "walletconflicts": [
    ],
    "time": 1536976211,
    "timereceived": 1536976211,
    "vjoinsplit": [
    ],
    "size": 99
  }
  , ... (9 responses ommitted from documentation for brevity)
]
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listtransactions", "params": ["*", 20, 100] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  [
    {
      "account": "",
      "address": "RTcwYaQPDVN7V9SdfFHARWnoB7vcpSfdvs",
      "category": "generate",
      "amount": 0.0001,
      "vout": 0,
      "rawconfirmations": 99,
      "confirmations": 99,
      "generated": true,
      "blockhash": "0eb4edeb5141a7670ef8be413873e1bef4f6f321867a2b8d67a616cdc7df1e77",
      "blockindex": 0,
      "blocktime": 1536976212,
      "expiryheight": 0,
      "txid": "3041aa7374e530d4d28e14620dd2bb9d2ff0bf71dd1106f08bc9f02fce44598e",
      "walletconflicts": [],
      "time": 1536976211,
      "timereceived": 1536976211,
      "vjoinsplit": [],
      "size": 99
    }
    , ... (9 responses ommitted from documentation for brevity)
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## listunspent

**listunspent ( minconf maxconf ["address", ... ] )**

The `listunspent` method returns an array of unspent transaction outputs, with a range between `minconf` and `maxconf` (inclusive) confirmations. The method can, optionally, filter to only include `txouts` paid to specified addresses.

### Arguments

| Name | Type | Description | 
| --------- | ------------------------------------ | ----------------------------------- |
| minconf   | (numeric, optional, default=1)       | the minimum confirmations to filter |
| maxconf   | (numeric, optional, default=9999999) | the maximum confirmations to filter |
| "address" | (string)                             | a series of addresses               |

### Response

| Name | Type | Description | 
| ------------------ | --------- | --------------------------------------------------------------------------------------------------------------------------------- |
| "txid"             | (string)  | the transaction id                                                                                                                |
| "vout"             | (numeric) | the vout value                                                                                                                    |
| "generated"        | (boolean) | true if txout is a coinbase transaction output                                                                                    |
| "address"          | (string)  | the address                                                                                                                       |
| "account"          | (string)  | DEPRECATED the associated account, or "" for the default account                                                                  |
| "scriptPubKey"     | (string)  | the script key                                                                                                                    |
| "amount"           | (numeric) | the transaction amount                                                                                                            |
| "confirmations"    | (numeric) | a confirmation number that is dPoW aware; see this [article](https://docs.komodoplatform.com/komodo/dPOW-conf.html) for more info |
| "rawconfirmations" | (numeric) | the raw confirmations (number of blocks on top of this transaction's block)                                                       |

#### :pushpin: Examples

Command:

```bash
./komodo-cli listunspent
```


<collapse-text hidden title="Response">


```json
[
  {
    "txid": "269b658b9a52e9142c96f3a49c0ad917e5d0c08126baa96713827267137d150f",
    "vout": 0,
    "generated": true,
    "address": "RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu",
    "scriptPubKey": "21037e631c6a03d028e48aecfd93b2d2737d5d7e2852a426b940ff301f78aa31690cac",
    "amount": 0.00010000,
    "interest": 0.00000000,
    "rawconfirmations": 6,
    "confirmations": 1,
    "spendable": true
  },
    ...
]
```

</collapse-text>


Command:

```bash
./komodo-cli listunspent 6 9999999 '["RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu","RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ"]'
```


<collapse-text hidden title="Response">


```json
[
  {
    "txid": "0ca752c996c4074ca62071cdbf848ccd33864894151f982024006b3d69d021ac",
    "vout": 0,
    "generated": true,
    "address": "RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu",
    "scriptPubKey": "21037e631c6a03d028e48aecfd93b2d2737d5d7e2852a426b940ff301f78aa31690cac",
    "amount": 0.0001,
    "interest": 0.0,
    "rawconfirmations": 7,
    "confirmations": 1,
    "spendable": true
  },
  {
    "txid": "7281407d85619901ee10d52c96869f7879393434b782331df6f67a0e0e9d1ffa",
    "vout": 0,
    "generated": false,
    "address": "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ",
    "scriptPubKey": "76a9141c973dbbed002e189caf31664d9ca7e8b1e92d8788ac",
    "amount": 9.99304496,
    "interest": 0.0,
    "rawconfirmations": 21,
    "confirmations": 21,
    "spendable": true
  }
]
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listunspent", "params": [6, 9999999, ["RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu","RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ"]] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    {
      "txid": "0ca752c996c4074ca62071cdbf848ccd33864894151f982024006b3d69d021ac",
      "vout": 0,
      "generated": true,
      "address": "RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu",
      "scriptPubKey": "21037e631c6a03d028e48aecfd93b2d2737d5d7e2852a426b940ff301f78aa31690cac",
      "amount": 0.0001,
      "interest": 0.0,
      "rawconfirmations": 7,
      "confirmations": 7,
      "spendable": true
    },
    {
      "txid": "7281407d85619901ee10d52c96869f7879393434b782331df6f67a0e0e9d1ffa",
      "vout": 0,
      "generated": false,
      "address": "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ",
      "scriptPubKey": "76a9141c973dbbed002e189caf31664d9ca7e8b1e92d8788ac",
      "amount": 9.99304496,
      "interest": 0.0,
      "rawconfirmations": 21,
      "confirmations": 21,
      "spendable": true
    }
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## lockunspent

**lockunspent unlock [{ "txid": "txid", "vout": n }, ... ]**

The `lockunspent` method locks (unlock = `false`) or unlocks (unlock = `true`) specified transaction outputs. A locked transaction output will not be chosen by automatic coin selection, when spending the relevant coin. The locks are stored in memory only; at runtime a node always starts with zero locked outputs, and the locked output list is always cleared when a node stops or fails.

::: tip
See the <b>listunspent</b> and <b>listlockunspent</b> calls to determine local transaction state and info.
:::

### Arguments

| Name | Type | Description | 
| --------- | ------------------- | ------------------------------------------------------------------- |
| unlock    | (boolean, required) | whether to unlock (true) or lock (false) the specified transactions |
| "txid"    | (string)            | the transaction id                                                  |
| "vout"    | (numeric)           | the output number                                                   |

### Response

| Name | Type | Description | 
| ---------- | --------- | ---------------------------------- |
| true/false | (boolean) | whether the command was successful |

#### :pushpin: Examples

Command:

```bash
./komodo-cli lockunspent false '[{"txid":"d7ba45296c66e16eb61f27a4eef8848c7f5579fe801f277c1b0e074a4f47d6fd","vout":0}]'
```


<collapse-text hidden title="Response">


```bash
true
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "lockunspent", "params": [false, [{"txid":"d7ba45296c66e16eb61f27a4eef8848c7f5579fe801f277c1b0e074a4f47d6fd","vout":0}]] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": true,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## move

**move "fromaccount" "toaccount" amount ( minconf "comment" )**

::: tip
DEPRECATED
:::

The `move` method moves a specified amount from one account in your wallet to another.

### Arguments

| Name | Type | Description | 
| ------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------------------- |
| "fromaccount" | (string, required)             | MUST be set to the empty string "" to represent the default account; passing any other string will result in an error |
| "toaccount"   | (string, required)             | MUST be set to the empty string "" to represent the default account; passing any other string will result in an error |
| amount        | (numeric)                      | the quantity to move between accounts                                                                                 |
| minconf       | (numeric, optional, default=1) | only use funds with at least this many confirmations                                                                  |
| "comment"     | (string, optional)             | an optional comment, stored in the wallet only                                                                        |

### Response

| Name | Type | Description | 
| ---------- | --------- | ------------------ |
| true/false | (boolean) | true if successful |

#### :pushpin: Examples

Command:

```bash
./komodo-cli move "" "tabby" 0.01
```


<collapse-text hidden title="Response">


```bash
(deprecated)
```

</collapse-text>


Command:

```bash
./komodo-cli move "timotei" "akiko" 0.01 6 "happy birthday!"
```


<collapse-text hidden title="Response">


```bash
(deprecated)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "move", "params": ["timotei", "akiko", 0.01, 6, "happy birthday!"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```bash
(deprecated)
```

</collapse-text>


## resendwallettransactions

**resendwallettransactions**

The `resendwallettransactions` method immediately re-broadcasts unconfirmed wallet transactions to all peers. This method is intended only for testing; the wallet code periodically re-broadcasts automatically.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| ---------------- | -------- | ---------------------------------------------- |
| "transaction_id" | (string) | an array of the rebroadcasted transaction id's |

#### :pushpin: Examples

Command:

```bash
./komodo-cli resendwallettransactions
```


<collapse-text hidden title="Response">


```bash
[
  "4e847051279ead30fb2d8d53cc0d4649f62c85a44b23f90152d2ef4ed6af2006"
]
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "resendwallettransactions", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    "4e847051279ead30fb2d8d53cc0d4649f62c85a44b23f90152d2ef4ed6af2006"
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## sendfrom

**sendfrom "account" "address" amount ( minconf "comment" "comment-to" )**

::: tip
DEPRECATED: Use <b>sendtoaddress</b> instead.
:::

The `sendfrom` method sends an amount from `account` to `address`.

### Arguments

| Name | Type | Description | 
| ------------ | ------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| "account"    | (string, required)             | MUST be set to the empty string "" to represent the default account; passing any other string will result in an error                                                            |
| "address"    | (string, required)             | the address to receive funds                                                                                                                                                     |
| amount       | (numeric, required)            | the amount (transaction fee not included)                                                                                                                                        |
| minconf      | (numeric, optional, default=1) | only use funds with at least this many confirmations                                                                                                                             |
| "comment"    | (string, optional)             | a comment used to store what the transaction is for; this is not part of the transaction, just kept in your wallet                                                               |
| "comment-to" | (string, optional)             | an optional comment to store the name of the person or organization to which you're sending the transaction; this is not part of the transaction, it is only kept in your wallet |

### Response

| Name | Type | Description | 
| ---------------- | -------- | ------------------ |
| "transaction_id" | (string) | the transaction id |

#### :pushpin: Examples

Command:

```bash
./komodo-cli sendfrom "" "RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu" 0.01
```


<collapse-text hidden title="Response">


```bash
(deprecated)
```

</collapse-text>


Command:

```bash
./komodo-cli sendfrom "tabby" "RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu" 0.01 6 "donation" "seans outpost"
```


<collapse-text hidden title="Response">


```bash
(deprecated)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "sendfrom", "params": ["tabby", "RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu", 0.01, 6, "donation", "seans outpost"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```bash
(deprecated)
```

</collapse-text>


## sendmany

**sendmany "account" { "address": amount, ... } ( minconf "comment" [ "address", ... ] )**

The `sendmany` method can send multiple transactions at once. Amounts are double-precision floating point numbers.

### Arguments

| Name | Type | Description | 
| ----------------------------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| "account"                           | (string, required)             | MUST be set to the empty string "" to represent the default account; passing any other string will result in an error                                                                                                                                     |
| "amounts" { "address":amount, ... } | ("string":numeric)             | the address (string) and the value (double-precision floating numeric)                                                                                                                                                                                    |
| minconf                             | (numeric, optional, default=1) | only use the balance confirmed at least this many times                                                                                                                                                                                                   |
| "comment"                           | (string, optional)             | a comment                                                                                                                                                                                                                                                 |
| subtractfeefromamount               | (string, optional)             | a json array with addresses. The fee will be equally deducted from the amount of each selected address; the recipients will receive less than you enter in their corresponding amount field. If no addresses are specified here, the sender pays the fee. |
| "address"                           | (string)                       | subtract fee from this address                                                                                                                                                                                                                            |

### Response

| Name | Type | Description | 
| ---------------- | -------- | ---------------------------------------------------------------------------------------------------- |
| "transaction_id" | (string) | the transaction id for the send; only 1 transaction is created regardless of the number of addresses |

#### :pushpin: Examples

Command:

```bash
./komodo-cli sendmany "" '{"RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ":0.01,"RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu":0.02}'
```


<collapse-text hidden title="Response">


```bash
e39b046f0e30bd2a80c64ec78d902107858c8f0d55097d7f2293df1c9a4496ae
```

</collapse-text>


Command:

```bash
./komodo-cli sendmany "" '{"RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ":0.01,"RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu":0.02}' 6 "testing"
```


<collapse-text hidden title="Response">


```bash
3829164d8a68d9b7c2c89efe419eca77e37883318b7187b7e000e80e8138a370
```

</collapse-text>


Command:

```bash
./komodo-cli sendmany "" '{"RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ":0.01,"RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu":0.02}' 1 "" '["RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ","RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu"]'
```


<collapse-text hidden title="Response">


```bash
1813a39247913abf73af10ed51537234fe4e58eb5cfc4f49ac4fbcdecb42b4b4
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "sendmany", "params": ["", {"RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ":0.01,"RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu":0.02}, 6, "testing"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "fe7db27ed66b9d999c21d3cc9c8c687bd68721d711da6573a0a0ccf75c1cace5",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## sendtoaddress

**sendtoaddress "address" amount ( "comment" "comment-to" subtractfeefromamount )**

The `sendtoaddress` method sends an amount to a given address. The amount is real and is rounded to the nearest 0.00000001.

### Arguments

| Name | Type | Description | 
| --------------------- | ---------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |
| "komodoaddress"       | (string, required)                 | the receiving address                                                                                                                            |
| "amount"              | (numeric, required)                | the amount to send (json requires all decimals values less than 1 begin with the characters '0.')                                                |
| "comment"             | (string, optional)                 | a comment used to store what the transaction is for; this is not part of the transaction, just kept in your wallet                               |
| "comment-to"          | (string, optional)                 | a comment to store the name of the person or organization to which you're sending the transaction; this is stored in your local wallet file only |
| subtractfeefromamount | (boolean, optional, default=false) | when `true`, the fee will be deducted from the amount being sent                                                                                 |

### Response

| Name | Type | Description | 
| ---------------- | -------- | ------------------ |
| "transaction_id" | (string) | the transaction id |

#### :pushpin: Examples

Command:

```bash
./komodo-cli sendtoaddress "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ" 0.1
```


<collapse-text hidden title="Response">


```bash
cc23924c007adc98b8ea5b9b8b47638e080aa469eb9738b976def487a44f467b
```

</collapse-text>


Command:

```bash
./komodo-cli sendtoaddress "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ" 0.1 "donation" "seans outpost"
```


<collapse-text hidden title="Response">


```bash
86948c27dc63be415b235c5b3ed807c1e07d9a2cac252f58734add700c55fe18
```

</collapse-text>


Command:

```bash
./komodo-cli sendtoaddress "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ" 0.1 "" "" true
```


<collapse-text hidden title="Response">


```bash
c5727cafd7d6dfc888d4a0596dc58bfafb24859e29f827e1bf1443037d8461fc
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "sendtoaddress", "params": ["RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ", 0.1, "donation", "seans outpost"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "6e411f3534af8847d705d87934f6061046e2034abad96b7a1fb1d3996129cb1e",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## setaccount

**setaccount "address" "account"**

::: tip Notice
DEPRECATED
:::

The `setaccount` method sets the account associated with the given address.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | --------------------------------------------------------------------------------------------------------------------- |
| "address" | (string, required) | the address to be associated with an account                                                                          |
| "account" | (string, required) | MUST be set to the empty string "" to represent the default account; passing any other string will result in an error |

#### :pushpin: Examples

Command:

```bash
./komodo-cli setaccount "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ" "tabby"
```


<collapse-text hidden title="Response">


```bash
(deprecated)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "setaccount", "params": ["RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ", "tabby"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```bash
(deprecated)
```

</collapse-text>


## setpubkey

**setpubkey pubkey**

The `setpubkey` method sets the indicated `pubkey`. This method can be used in place of the [pubkey](../installations/common-runtime-parameters.html#pubkey) launch parameter, when necessary.

Visit the section [pubkey](../installations/common-runtime-parameters.html#pubkey) to understand when it is essential to set a pubkey and the consequences of setting it.

::: warning
This method works only once per daemon start. It can't be used to change the pubkey that has already been set.
:::

### Arguments

| Name | Type | Description | 
| --------- | -------- | ------------------ |
| pubkey    | (string) | the desired pubkey |

### Response

| Name | Type | Description | 
| --------- | --------- | ------------------------------------------------- |
| pubkey    | (string)  | the pubkey                                        |
| ismine    | (boolean) | indicates whether the address belongs to the user |
| R-address | (string)  | the public address associated with the pubkey     |

#### :pushpin: Examples

Command:

```bash
./komodo-cli setpubkey 0260801166cebdc9be1e3460ba9e4959fb29feee7725f565ffc296fa4636aa706f
```


<collapse-text hidden title="Response">


```bash
{
  "address": "RK47DQhSHJEMGFSiRtgki67xG3u1Qsq1Gw",
  "ismine": true,
  "pubkey": "0260801166cebdc9be1e3460ba9e4959fb29feee7725f565ffc296fa4636aa706f"
}
```

</collapse-text>


You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "setpubkey", "params": ["02f7597468703c1c5c8465dd6d43acaae697df9df30bed21494d193412a1ea193e"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```bash
{
  "result": {
    "address": "RK47DQhSHJEMGFSiRtgki67xG3u1Qsq1Gw",
    "ismine": true,
    "pubkey": "0260801166cebdc9be1e3460ba9e4959fb29feee7725f565ffc296fa4636aa706f"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## settxfee

**settxfee amount**

The `settxfee` method sets the transaction fee per kB.

### Arguments

| Name | Type | Description | 
| --------- | ------------------- | ---------------------------------------------------------------- |
| amount    | (numeric, required) | the transaction fee in COIN/kB rounded to the nearest 0.00000001 |

### Response

| Name | Type | Description | 
| ---------- | --------- | -------------------------- |
| true/false | (boolean) | returns true if successful |

#### :pushpin: Examples

Command:

```bash
./komodo-cli settxfee 0.00001
```


<collapse-text hidden title="Response">


```bash
true
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "settxfee", "params": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": true,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## signmessage

**signmessage "address" "message"**

The `signmessage` method signs a message via the private key of an address.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | -------------------------------------- |
| "address" | (string, required) | the address to use for the private key |
| "message" | (string, required) | the message                            |

### Response

| Name | Type | Description | 
| ----------- | -------- | ----------------------------------------------- |
| "signature" | (string) | the signature of the message encoded in base 64 |

#### :pushpin: Examples

Create the signature:

Command:

```bash
./komodo-cli signmessage "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ" "my message"
```


<collapse-text hidden title="Response">


```bash
H1y0mn/wRv56r1bcfkbQtzjG6XeWSelAsyayBuCwEL9XGXs7ieU55dryt/cFWM9gnRFI7gS01AByuSqRs+o/AZs=
```

</collapse-text>


Verify the signature:

Command:

```bash
./komodo-cli verifymessage "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ" "H1y0mn/wRv56r1bcfkbQtzjG6XeWSelAsyayBuCwEL9XGXs7ieU55dryt/cFWM9gnRFI7gS01AByuSqRs+o/AZs=" "my message"
```


<collapse-text hidden title="Response">


```bash
true
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "signmessage", "params": ["RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ", "my message"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "H1y0mn/wRv56r1bcfkbQtzjG6XeWSelAsyayBuCwEL9XGXs7ieU55dryt/cFWM9gnRFI7gS01AByuSqRs+o/AZs=",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## walletlock

**walletlock**

::: tip
The `walletlock` method is neither active nor visible in the `help` method until the [encryptwallet](../komodo-api/wallet.html#encryptwallet) passphrase is set.
:::

:::tip
This feature is available only on chains where `-ac_public` is enabled. Chains that feature private transactions cannot use this feature.
:::

The `walletlock` method re-locks a wallet that has a passphrase enabled via [encryptwallet](../komodo-api/wallet.html#encryptwallet).

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

#### :pushpin: Examples

Command:

```bash
./komodo-cli walletlock
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


## walletpassphrase

**walletpassphrase "passphrase" (timeout)**

::: tip
The `walletpassphrase` method is neither active nor visible in the `help` method until the [encryptwallet](../komodo-api/wallet.html#encryptwallet) passphrase is set.
:::

:::tip
This feature is available only on chains where `-ac_public` is enabled. Chains that feature private transactions cannot use this feature.
:::

The `walletpassphrase` method unlocks the wallet using the passphrase that was set by the [encryptwallet](../komodo-api/wallet.html#encryptwallet) method.

The `timeout` argument can be included to limit the length of time (in seconds) the wallet will remain unlocked.

### Arguments

| Name | Type | Description | 
| ------------ | ----------------------------- | ---------------------------------------------------------------------- |
| "passphrase" | (string)                      | the passphrase that was set by the `encryptwallet` method              |
| timeout      | (number in seconds, optional) | the amount of time for which the wallet should remember the passphrase |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

#### :pushpin: Examples

Command:

```bash
./komodo-cli walletpassphrase
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


## walletpassphrasechange

**walletpassphrasechange "oldpassphrase" "newpassphrase"**

::: tip
The `walletpassphrasechange` method is neither active nor visible in the `help` method until the [encryptwallet](../komodo-api/wallet.html#encryptwallet) passphrase is set.
:::

:::tip
This feature is available only on chains where `-ac_public` is enabled. Chains that feature private transactions cannot use this feature.
:::

The `walletpassphrasechange` method changes `"oldpassphrase"` to `"newpassphrase"`.

### Arguments

| Name | Type | Description | 
| --------------- | -------- | ------------------ |
| "oldpassphrase" | (string) | the old passphrase |
| "newpassphrase" | (string) | the new passphrase |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

#### :pushpin: Examples

Command:

```bash
./komodo-cli walletpassphrasechange "oldpassphrase" "newpassphrase"
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


## z_exportkey

**z_exportkey "z_address"**

The `z_exportkey` method reveals the private z_key corresponding to `z_address`.

::: tip
See also <b>z_importkey</b>.
:::

### Arguments

| Name | Type | Description | 
| ----------- | ------------------ | --------------------------------- |
| "z_address" | (string, required) | the z_address for the private key |

### Response

| Name | Type | Description | 
| --------- | -------- | --------------- |
| "key"     | (string) | the private key |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_exportkey "ztffWAUUY9PnLiBVXY2pnX67kfm71SevtPC5d9LLM3xZqehy4XxV1FeyxPWcHGTiCd7GtQ17gk5jDTQxhHB13K1A7HT6hZH"
```


<collapse-text hidden title="Response">


```bash
DONOTUSExxxxxxxxxxxxxxxxV6EyPpaZFVDsqeNB6k8eoLFERdag
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_exportkey", "params": ["ztffWAUUY9PnLiBVXY2pnX67kfm71SevtPC5d9LLM3xZqehy4XxV1FeyxPWcHGTiCd7GtQ17gk5jDTQxhHB13K1A7HT6hZH"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "DONOTUSExxxxxxxxxxxxxxxxV6EyPpaZFVDsqeNB6k8eoLFERdag",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## z_exportviewingkey

**z_exportviewingkey "z_address"**

The `z_exportviewingkey` method reveals the viewing key corresponding to `z_address`.

::: tip
See also <b>z_importviewingkey</b>.
:::

### Arguments

| Name | Type | Description | 
| ----------- | ------------------ | --------------------------------- |
| "z_address" | (string, required) | the z_address for the viewing key |

### Response

| Name | Type | Description | 
| --------- | -------- | --------------- |
| "vkey"    | (string) | the viewing key |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_exportviewingkey "ztffWAUUY9PnLiBVXY2pnX67kfm71SevtPC5d9LLM3xZqehy4XxV1FeyxPWcHGTiCd7GtQ17gk5jDTQxhHB13K1A7HT6hZH"
```


<collapse-text hidden title="Response">


```bash
ZiVtf1yjjR9DeDNNgd4kvRgS1oovQwfK6xt2csfhTwpbUVjnC9RrEeuVkAfJrxN1jDR3d7vR6XmLne4vC9SCYR5F9XMzW19VJ
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_exportviewingkey", "params": ["ztffWAUUY9PnLiBVXY2pnX67kfm71SevtPC5d9LLM3xZqehy4XxV1FeyxPWcHGTiCd7GtQ17gk5jDTQxhHB13K1A7HT6hZH"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "ZiVtf1yjjR9DeDNNgd4kvRgS1oovQwfK6xt2csfhTwpbUVjnC9RrEeuVkAfJrxN1jDR3d7vR6XmLne4vC9SCYR5F9XMzW19VJ",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## z_exportwallet

**z_exportwallet "filename"**

The `z_exportwallet` method exports all wallet keys, including both t address and z address types, in a human-readable format. Overwriting an existing file is not permitted.

### Arguments

| Name | Type | Description | 
| ---------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| "filename" | (string, required) | the filename, saved to the directory indicated by the [exportdir](../installations/common-runtime-parameters.html#exportdir) parameter at daemon runtime (required) |

### Response

| Name | Type | Description | 
| --------- | -------- | ------------------------------------- |
| "path"    | (string) | the full path of the destination file |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_exportwallet "test"
```


<collapse-text hidden title="Response">


```bash
/home/myusername/mydirectory/test
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_exportwallet", "params": ["test"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "/home/myusername/mydirectory/test",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## z_getbalance

**z_getbalance "address" ( minconf )**

The `z_getbalance` method returns the balance of a t address or z address belonging to the node’s wallet.

::: warning
CAUTION: If <b>address</b> is a watch-only z address, the returned balance may be larger than the actual balance,
as spends cannot be detected with incoming viewing keys.
:::

### Arguments

| Name | Type | Description | 
| --------- | ------------------------------ | ------------------------------------------------------------ |
| "address" | (string)                       | the selected z or t address                                  |
| minconf   | (numeric, optional, default=1) | only include transactions confirmed at least this many times |

### Response

| Name | Type | Description | 
| --------- | --------- | ---------------------------------------------------------------------- |
| amount    | (numeric) | the total amount received at this address (in the relevant COIN value) |

#### :pushpin: Examples

The total amount received by address "myaddress" at least 5 blocks confirmed

Command:

```bash
./komodo-cli z_getbalance "ztfF6SFBfq2qha73dAgsXnL86F8air32CXKxJg8aYtEPJFdLcw4y3zWzBasocnx1V9GLnnFeKnkPvkScjNkQBfWn2kBDmkn"
```


<collapse-text hidden title="Response">


```bash
0.01980000
```

</collapse-text>


Command:

```bash
./komodo-cli z_getbalance "ztfF6SFBfq2qha73dAgsXnL86F8air32CXKxJg8aYtEPJFdLcw4y3zWzBasocnx1V9GLnnFeKnkPvkScjNkQBfWn2kBDmkn" 5
```


<collapse-text hidden title="Response">


```bash
0.01980000
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_getbalance", "params": ["ztfF6SFBfq2qha73dAgsXnL86F8air32CXKxJg8aYtEPJFdLcw4y3zWzBasocnx1V9GLnnFeKnkPvkScjNkQBfWn2kBDmkn", 5] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": 0.0198,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## z_getnewaddress

**z_getnewaddress**

The `z_getnewaddress` method returns a new z_address for receiving payments.

### Arguments

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

### Response

| Name | Type | Description | 
| ----------- | -------- | ----------------- |
| "z_address" | (string) | the new z_address |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_getnewaddress
```


<collapse-text hidden title="Response">


```bash
ztbUD83kXgHt3A1M282wFvT9Ms6SiBCd6GSbQbPa2C7UtPojVZjPENytFqu7JxgnsgL9EN42xWnyhhzniHYSRJDnEPTgo3Y
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_getnewaddress", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": "ztci8RzNSo2pdiDpAeHpz9Rp91hq12Mn7zcFfBR8Jjs2ydZUCTw8rLZzkVP888M4vGezpZVfsTR8orgxYK3N8gdgbBzakx3",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## z_getoperationresult

**z_getoperationresult ([ "operationid", ... ])**

The `z_getoperationresult` method retrieves the result and status of an operation which has finished, and then removes the operation from memory.

::: tip
See also <b>z_getoperationstatus</b>.
:::

### Arguments

| Name | Type | Description | 
| ------------- | ------------------ | ------------------------------------------------------------------------------------------------------- |
| "operationid" | (string, optional) | a list of operation ids to query; if not provided, the method examines all operations known to the node |

### Response

| Name | Type | Description | 
| ------------------ | ----------------------- | ---------------------------------------------------------- |
| "id"               | (string)                | the operation id                                           |
| "status"           | (string)                | the result of the operation; can be `success`              | `failed` | `executing` |
| "creation_time"    | (numeric)               | the creation time, in seconds since epoch (Jan 1 1970 GMT) |
| "result": { ... }  | (array of json objects) |
| "txid":            | (string)                | the transaction id                                         |
| "execution_secs"   | (numeric)               | the length of time to calculate the transaction            |
| "method"           | (string)                | the name of the method used in the operation               |
| "params": { ... }  | (json)                  |
| "fromaddress"      | (string)                | the address from which funds are drawn                     |
| "amounts": [ ... ] | (array of json objects) |
| "address"          | (string)                | the receiving address                                      |
| "amount"           | (numeric)               | the amount to receive                                      |
| "minconf"          | (numeric)               | the minimum number of confirmations required               |
| "fee"              | (numeric)               | the transaction fee                                        |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_getoperationresult '["opid-6e581ee5-4e90-4e70-8961-f95d8d28748c"]'
```


<collapse-text hidden title="Response">


```json
[
  {
    "id": "opid-6e581ee5-4e90-4e70-8961-f95d8d28748c",
    "status": "success",
    "creation_time": 1537287690,
    "result": {
      "txid": "65e01c8485f6a85fbf7093d8233864eed0f31e6e2eff22a7e468e92c37dc864c"
    },
    "execution_secs": 44.606282288,
    "method": "z_sendmany",
    "params": {
      "fromaddress": "RWUwHqRUYgxfYNNSHWkQuY5sh93VGiiPoX",
      "amounts": [
        {
          "address": "ztci8RzNSo2pdiDpAeHpz9Rp91hq12Mn7zcFfBR8Jjs2ydZUCTw8rLZzkVP888M4vGezpZVfsTR8orgxYK3N8gdgbBzakx3",
          "amount": 0.01
        }
      ],
      "minconf": 1,
      "fee": 0.0001
    }
  }
]
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_getoperationresult", "params": [["opid-6a9da0dd-a950-4d95-848c-d3c18e44be03"]] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    {
      "id": "opid-6a9da0dd-a950-4d95-848c-d3c18e44be03",
      "status": "success",
      "creation_time": 1537288235,
      "result": {
        "txid": "f0309f8dc2e33e108dec39285bc8755058375cf6e51bdb452fb45f3d14909fef"
      },
      "execution_secs": 44.978749064,
      "method": "z_sendmany",
      "params": {
        "fromaddress": "RWUwHqRUYgxfYNNSHWkQuY5sh93VGiiPoX",
        "amounts": [
          {
            "address": "ztci8RzNSo2pdiDpAeHpz9Rp91hq12Mn7zcFfBR8Jjs2ydZUCTw8rLZzkVP888M4vGezpZVfsTR8orgxYK3N8gdgbBzakx3",
            "amount": 0.01
          }
        ],
        "minconf": 1,
        "fee": 0.0001
      }
    }
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## z_getoperationstatus

**z_getoperationstatus ([ "operationid", ... ])**

The `z_getoperationstatus` message queries the operation status and any associated result or error data of any `operationid` stored in local memory. The operation will remain in memory (unlike `z_getoperationresult`, which removes the data from the local memory).

### Arguments

| Name | Type | Description | 
| ------------- | ----------------- | ------------------------------------------------------------------------------------------------------------------------------- |
| "operationid" | (array, optional) | a list of operation ids we are interested in; if an array is not provided, the method examines all operations known to the node |

### Response

| Name | Type | Description | 
| ------------------ | ----------------------- | ----------------------------------------------------------------------------- |
| "id"               | (string)                | the operation id                                                              |
| "status"           | (string)                | the status of the operation; can be `success`                                 | `executing` | `failed` |
| "creation_time"    | (numeric)               | the creation time, in seconds since epoch (Jan 1 1970 GMT)                    |
| "error" : { ... }  | (array of json objects) |
| "code"             | (numeric)               | the associated error code                                                     |
| "message"          | (string)                | a message to indicate the nature of the error, if such a message is available |
| "method"           | (string)                | the name of the method used in the operation                                  |
| "params" : { ... } | (array of json objects) |
| "fromaddress"      | (string)                | the address from which funds are drawn                                        |
| "amounts": [ ... ] | (array of json objects) |
| "address"          | (string)                | the receiving address                                                         |
| "amount"           | (numeric)               | the amount to receive                                                         |
| "minconf"          | (numeric)               | indicates the required number of mining confirmations                         |
| "fee"              | (numeric)               | the fee                                                                       |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_getoperationstatus
```


<collapse-text hidden title="Response">


```json
[
  {
    "id": "opid-b650b582-c2f5-43e0-9a65-9fe23f65c1a5",
    "status": "failed",
    "creation_time": 1537288268,
    "error": {
      "code": -6,
      "message": "Insufficient funds, no UTXOs found for taddr from address."
    },
    "method": "z_sendmany",
    "params": {
      "fromaddress": "RWUwHqRUYgxfYNNSHWkQuY5sh93VGiiPoX",
      "amounts": [
        {
          "address": "ztci8RzNSo2pdiDpAeHpz9Rp91hq12Mn7zcFfBR8Jjs2ydZUCTw8rLZzkVP888M4vGezpZVfsTR8orgxYK3N8gdgbBzakx3",
          "amount": 0.01
        }
      ],
      "minconf": 1,
      "fee": 0.0001
    }
  }
]
```

</collapse-text>


Command:

```bash
./komodo-cli z_getoperationstatus '["opid-47e12224-8477-4cd4-852d-d8c3ddbc6375"]'
```


<collapse-text hidden title="Response">


```json
[
  {
    "id": "opid-47e12224-8477-4cd4-852d-d8c3ddbc6375",
    "status": "executing",
    "creation_time": 1537289777,
    "method": "z_sendmany",
    "params": {
      "fromaddress": "RWUwHqRUYgxfYNNSHWkQuY5sh93VGiiPoX",
      "amounts": [
        {
          "address": "ztci8RzNSo2pdiDpAeHpz9Rp91hq12Mn7zcFfBR8Jjs2ydZUCTw8rLZzkVP888M4vGezpZVfsTR8orgxYK3N8gdgbBzakx3",
          "amount": 0.01
        }
      ],
      "minconf": 1,
      "fee": 0.0001
    }
  }
]
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_getoperationstatus", "params": [["opid-47e12224-8477-4cd4-852d-d8c3ddbc6375"]] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    {
      "id": "opid-47e12224-8477-4cd4-852d-d8c3ddbc6375",
      "status": "success",
      "creation_time": 1537289777,
      "result": {
        "txid": "2b988a708db2b8d99a92bbff65a57d0d73fdb22c30fc3f3e4f81ab15cfeafc45"
      },
      "execution_secs": 45.200043917,
      "method": "z_sendmany",
      "params": {
        "fromaddress": "RWUwHqRUYgxfYNNSHWkQuY5sh93VGiiPoX",
        "amounts": [
          {
            "address": "ztci8RzNSo2pdiDpAeHpz9Rp91hq12Mn7zcFfBR8Jjs2ydZUCTw8rLZzkVP888M4vGezpZVfsTR8orgxYK3N8gdgbBzakx3",
            "amount": 0.01
          }
        ],
        "minconf": 1,
        "fee": 0.0001
      }
    }
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## z_gettotalbalance

**z_gettotalbalance ( minconf includeWatchonly )**

The `z_gettotalbalance` method returns the total value of funds, including both transparent and private, stored in the node’s wallet.

::: warning
CAUTION: If the wallet contains watch-only z addresses the returned private balance may be larger than the actual balance, as spends cannot be detected with incoming viewing keys.
:::

::: tip
While the <b>interest</b> property is returned for all KMD-based coin daemons, only the main KMD chain utilizes the interest feature. KMD-based asset chains will always return a <b>0.00</b> interest value.
:::

### Arguments

| Name | Type | Description | 
| ---------------- | ------------------------------- | ------------------------------------------------------------------------------------------ |
| minconf          | (numeric, optional, default=1)  | only include private and transparent transactions confirmed at least this many times       |
| includeWatchonly | (bool, optional, default=false) | also include balance in watchonly addresses (see 'importaddress' and 'z_importviewingkey') |

### Response

| Name | Type | Description | 
| ------------- | --------- | ------------------------------------------------------- |
| "transparent" | (numeric) | the total balance of transparent funds                  |
| "interest"    | (numeric) | the total balance of unclaimed interest earned          |
| "private"     | (numeric) | the total balance of private funds                      |
| "total"       | (numeric) | the total balance of both transparent and private funds |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_gettotalbalance
```


<collapse-text hidden title="Response">


```json
{
  "transparent": "9.98794883",
  "interest": "0.00",
  "private": "0.08205",
  "total": "10.06999883"
}
```

</collapse-text>


Command:

```bash
./komodo-cli z_gettotalbalance 5
```


<collapse-text hidden title="Response">


```json
{
  "transparent": "9.98794883",
  "interest": "0.00",
  "private": "0.08205",
  "total": "10.06999883"
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_gettotalbalance", "params": [5] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "transparent": "0.00615",
    "interest": "0.00",
    "private": "0.06205",
    "total": "0.0682"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## z_importkey

**z_importkey "z_privatekey" ( rescan startHeight )**

The `z_importkey` method imports `z_privatekey` to your wallet.

::: tip
This call can take minutes to complete if <b>rescan</b> is true.
:::

::: tip
The optional parameters are currently not functional with KMD-based blockchains.
:::

::: tip
See also <b>z_exportkey</b>.
:::

### Arguments

| Name | Type | Description | 
| -------------- | -------------------------------------------- | --------------------------------------------------------------------------- |
| "z_privatekey" | (string, required)                           | the z_privatekey (see [z_exportkey](../komodo-api/wallet.html#z-exportkey)) |
| rescan         | (string, optional, default=`"whenkeyisnew"`) | rescan the wallet for transactions; can be `yes`                            | `no` | `whenkeyisnew` |
| startHeight    | (numeric, optional, default=0)               | the block height at which to begin the rescan                               |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_importkey DONOTUSExxxxxxxxxxxxxxxxBP6ipkmBxmEQbugcCQ16vUaWGFK
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


Command:

```bash
./komodo-cli z_importkey DONOTUSExxxxxxxxxxxxxxxxBP6ipkmBxmEQbugcCQ16vUaWGFK whenkeyisnew 30000
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


Command:

```bash
./komodo-cli z_importkey DONOTUSExxxxxxxxxxxxxxxxBP6ipkmBxmEQbugcCQ16vUaWGFK yes 20000
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_importkey", "params": ["DONOTUSExxxxxxxxxxxxxxxxBP6ipkmBxmEQbugcCQ16vUaWGFK", "no"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": null,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## z_importviewingkey

**z_importviewingkey "viewing_key" ( rescan startHeight )**

The `z_importviewingkey` adds a viewing key to your wallet. This method allows you to view the balance in a z address that otherwise does not belong to your wallet.

::: tip
See also <b>z_exportviewingkey</b>.
:::

::: tip
This call can take minutes to complete if <b>rescan</b> is true.
:::

::: tip
The optional parameters are currently not functional for KMD-based blockchains.
:::

### Arguments

| Name | Type | Description | 
| ------------- | ------------------------------------------ | ------------------------------------------------------------- |
| "viewing_key" | (string, required)                         | the viewing key                                               |
| rescan        | (string, optional, default="whenkeyisnew") | whether to rescan the wallet for transactions; can be `"yes"` | `"no"` | `"whenkeyisnew"` |
| startHeight   | (numeric, optional, default=0)             | block height to start rescan                                  |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_importviewingkey "ZiVtfYkeyRY3y8Wykm5zjLcnssEkVrkej6j3kQ5B1AE2qp2F3VsKzpoXTzD82hrvMjWB9WxCHbXXrXax2ceyHLWrnQDaMrMja"
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


Command:

```bash
./komodo-cli z_importviewingkey "ZiVtfYkeyRY3y8Wykm5zjLcnssEkVrkej6j3kQ5B1AE2qp2F3VsKzpoXTzD82hrvMjWB9WxCHbXXrXax2ceyHLWrnQDaMrMja" no
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


Command:

```bash
./komodo-cli z_importviewingkey "ZiVtfYkeyRY3y8Wykm5zjLcnssEkVrkej6j3kQ5B1AE2qp2F3VsKzpoXTzD82hrvMjWB9WxCHbXXrXax2ceyHLWrnQDaMrMja" whenkeyisnew 30000
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


Command:

```bash
./komodo-cli z_importviewingkey "ZiVtfYkeyRY3y8Wykm5zjLcnssEkVrkej6j3kQ5B1AE2qp2F3VsKzpoXTzD82hrvMjWB9WxCHbXXrXax2ceyHLWrnQDaMrMja" yes 20000
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_importviewingkey", "params": ["ZiVtfYkeyRY3y8Wykm5zjLcnssEkVrkej6j3kQ5B1AE2qp2F3VsKzpoXTzD82hrvMjWB9WxCHbXXrXax2ceyHLWrnQDaMrMja", "no"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


## z_importwallet

**z_importwallet "filename"**

The `z_importwallet` method imports t address and z address keys from a wallet export file.

::: tip
See also <b>z_exportwallet</b>.
:::

### Arguments

| Name | Type | Description | 
| ---------- | ------------------ | --------------- |
| "filename" | (string, required) | the wallet file |

### Response

| Name | Type | Description | 
| --------- | ---- | ----------- |
| (none)    |      |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_importwallet "/mydirectory/nameofbackup"
```


<collapse-text hidden title="Response">


```bash
(none)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_importwallet", "params": ["/mydirectory/nameofbackup"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": null,
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## z_listaddresses

**z_listaddresses ( includeWatchonly )**

The `z_listaddresses` method returns the list of z addresses belonging to the wallet.

::: tip
See also <b>z_importviewingkey</b>.
:::

### Arguments

| Name | Type | Description | 
| ---------------- | ------------------------------- | -------------------------------- |
| includeWatchonly | (bool, optional, default=false) | also include watchonly addresses |

### Response

| Name | Type | Description | 
| ----------- | -------- | ----------------------------------- |
| "z_address" | (string) | a z address belonging to the wallet |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_listaddresses
```


<collapse-text hidden title="Response">


```json
[
  "ztYMDvwUqi5FZLQy4so71ZGHXk2fDtEYU9HNns9DNYjXJr9PEzSL8Dq8NcdiRijsgCm4r3nNWA6dUrqW9suGd2F7uuj2BhP",
  "ztbUD83kXgHt3A1M282wFvT9Ms6SiBCd6GSbQbPa2C7UtPojVZjPENytFqu7JxgnsgL9EN42xWnyhhzniHYSRJDnEPTgo3Y"
]
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_listaddresses", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    "ztYMDvwUqi5FZLQy4so71ZGHXk2fDtEYU9HNns9DNYjXJr9PEzSL8Dq8NcdiRijsgCm4r3nNWA6dUrqW9suGd2F7uuj2BhP",
    "ztbUD83kXgHt3A1M282wFvT9Ms6SiBCd6GSbQbPa2C7UtPojVZjPENytFqu7JxgnsgL9EN42xWnyhhzniHYSRJDnEPTgo3Y"
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## z_listoperationids

**z_listoperationids**

The `z_listoperationids` method returns the list of operation ids currently known to the wallet.

### Arguments

| Name | Type | Description | 
| --------- | ------------------ | ----------------------------------------------------- |
| "status"  | (string, optional) | filter result by the operation's state e.g. "success" |

### Response

| Name | Type | Description | 
| ------------- | -------- | --------------------------------------- |
| "operationid" | (string) | an operation id belonging to the wallet |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_listoperationids
```


<collapse-text hidden title="Response">


```bash
[
  "opid-47e12224-8477-4cd4-852d-d8c3ddbc6375",
  "opid-b650b582-c2f5-43e0-9a65-9fe23f65c1a5"
]
```

</collapse-text>


Command:

```bash
./komodo-cli z_listoperationids "success"
```


<collapse-text hidden title="Response">


```bash
[
  "opid-47e12224-8477-4cd4-852d-d8c3ddbc6375"
]
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_listoperationids", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": [
    "opid-47e12224-8477-4cd4-852d-d8c3ddbc6375",
    "opid-b650b582-c2f5-43e0-9a65-9fe23f65c1a5"
  ],
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## z_listreceivedbyaddress

**z_listreceivedbyaddress "address" ( minconf )**

The `z_listreceivedbyaddress` method returns a list of amounts received by a z address belonging to the node’s wallet.

### Arguments

| Name | Type | Description | 
| --------- | ------------------------------ | ------------------------------------------------------------ |
| address   | (string)                       | the private address.                                         |
| minconf   | (numeric, optional, default=1) | only include transactions confirmed at least this many times |

### Result

An array of json objects, each having the properties below.

| Name | Type | Description | 
| ------------------ | -------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |
| txid               | (string)                                     | the transaction id                                                                                                                |
| amount             | (numeric)                                    | the amount of value in the note                                                                                                   |
| memo               | (string)                                     | hexadecimal string representation of memo field                                                                                   |
| "confirmations"    | (numeric)                                    | a confirmation number that is dPoW aware; see this [article](https://docs.komodoplatform.com/komodo/dPOW-conf.html) for more info |
| "rawconfirmations" | (numeric)                                    | the raw confirmations (number of blocks on top of this transaction's block)                                                       |
| jsindex            | (sprout)                                     | (numeric, received only by sprout addresses) the joinsplit index                                                                  |
| jsoutindex         | (numeric, received only by sprout addresses) | the output index of the joinsplit                                                                                                 |
| outindex           | (numeric, sapling)                           | the output index                                                                                                                  |
| change             | (boolean)                                    | true if the address that received the note is also one of the sending addresses                                                   |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_listreceivedbyaddress "zs1wqykmk74mv2ezjscpxsgzrn4fasqwh50tgk0ym64m45c5yw5fjtpkps64gle963veqzuj04872z"
```


<collapse-text hidden title="Response">


```bash
[
  {
    "txid": "b9a98f3cbfec7a8a93c240e19e8eea5ab3ee8de3e6372105ffb72308b72ea05f",
    "amount": 77.00000000,
    "memo": "f
    "outindex": 0,
    "rawconfirmations": 9,
    "confirmations": 9,
    "change": false
  }
]
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user rpcuser:rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_listreceivedbyaddress", "params": ["zs1umhaattx6lna933m9zwfqlmkm2qj49hpa9lnymtj5h5c7cwtd3evfpu29hppprax9cs45fzeyqg"] }' -H 'content-type: text/plain;' http://127.0.0.1:rpcport/
```


<collapse-text hidden title="Response">

```bash
blockHash 0a4f15fe5425ef8bc6eb84e7bc3625c1ceccb3e49132b696a1841ab17a75a705 height 55200
{"result":[{"txid":"23d33c0c12ba2224b2c9c252e304f491bf76ca05670c8f00d48300776c10850f","amount":100.00000000,"memo":"foutindex":0,"rawconfirmations":1,"confirmations":1,"change":false}],"error":null,"id":"curltest"}
```

</collapse-text>

## z_listunspent

**z_listunspent ( minconf maxconf includeWatchonly ["zaddr", ...] )**

The `z_listunspent` method returns an array of unspent shielded notes.

The method can also filter to only include results that have between `minconf` and `maxconf` (inclusive) confirmations, and also for specified z_addresses (`["zaddr", ...])`.

When `minconf` is `0` unspent notes with zero confirmations are returned, even though they are not immediately spendable.

Results are an array of Objects, each of which has:
{txid, jsindex, jsoutindex, confirmations, address, amount, memo} (Sprout)
{txid, outindex, confirmations, address, amount, memo} (Sapling)

### Arguments

| Name | Type | Description | 
| ---------------- | ------------------------------------ | -------------------------------------------------------------------------------------------------------------------- |
| minconf          | (numeric, optional, default=1)       | the minimum confirmations to filter                                                                                  |
| maxconf          | (numeric, optional, default=9999999) | the maximum confirmations to filter                                                                                  |
| includeWatchonly | (bool, optional, default=false)      | whether to also include watchonly addresses (see [z_importviewingkey](../komodo-api/wallet.html#z-importviewingkey)) |
| addresses        | (array)                              | a json array of z addresses (both Sprout and Sapling) to act as a filter; duplicate addresses are not allowed        |
| address          | (string)                             | a z address                                                                                                          |

### Results

An array of json objects, each having the properties below.

| Name | Type | Description | 
| ------------------ | --------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |
| txid               | (string)                                      | the transaction id                                                                                                                |
| jsindex            | (numeric)                                     | the joinsplit index                                                                                                               |
| jsoutindex         | (numeric, only returned on sprout addresses)  | the output index of the joinsplit                                                                                                 |
| outindex           | (numeric, only returned on sapling addresses) | the output index                                                                                                                  |
| "confirmations"    | (numeric)                                     | a confirmation number that is dPoW aware; see this [article](https://docs.komodoplatform.com/komodo/dPOW-conf.html) for more info |
| "rawconfirmations" | (numeric)                                     | the raw confirmations (number of blocks on top of this transaction's block)                                                       |  |
| spendable          | (boolean)                                     | true if note can be spent by wallet, false if note has zero confirmations, false if address is watchonly                          |
| address            | (string)                                      | the shielded address                                                                                                              |
| amount             | (numeric)                                     | the amount of value in the note                                                                                                   |
| memo               | (string)                                      | hexadecimal string representation of memo field                                                                                   |
| change             | (boolean)                                     | true if the address that received the note is also one of the sending addresses                                                   |

#### :pushpin: Examples

Command:

```
./komodo-cli z_listunspent
```


<collapse-text hidden title="Response">


```bash
[
  {
    "txid": "b9a98f3cbfec7a8a93c240e19e8eea5ab3ee8de3e6372105ffb72308b72ea05f",
    "outindex": 0,
    "confirmations": 1,
    "rawconfirmations": 1,
    "spendable": true,
    "address": "zs1wqykmk74mv2ezjscpxsgzrn4fasqwh50tgk0ym64m45c5yw5fjtpkps64gle963veqzuj04872z",
    "amount": 77.00000000,
    "memo": "f
    "change": false
  }
]
```

</collapse-text>


Command:

```bash
./komodo-cli -ac_name=BEER z_listunspent 1 100 false "[\"zs1wqykmk74mv2ezjscpxsgzrn4fasqwh50tgk0ym64m45c5yw5fjtpkps64gle963veqzuj04872z\"]"
```


<collapse-text hidden title="Response">


```bash
[
  {
    "txid": "b9a98f3cbfec7a8a93c240e19e8eea5ab3ee8de3e6372105ffb72308b72ea05f",
    "outindex": 0,
    "confirmations": 2,
    "rawconfirmations": 2,
    "spendable": true,
    "address": "zs1wqykmk74mv2ezjscpxsgzrn4fasqwh50tgk0ym64m45c5yw5fjtpkps64gle963veqzuj04872z",
    "amount": 77.00000000,
    "memo": "f
    "change": false
  }
]
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user rpcuser:rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_listunspent", "params": [1, 9999999, false, ["zs1umhaattx6lna933m9zwfqlmkm2qj49hpa9lnymtj5h5c7cwtd3evfpu29hppprax9cs45fzeyqg"] ] }' -H 'content-type: text/plain;' http://127.0.0.1:rpcport/
```


<collapse-text hidden title="Response">


```bash
blockHash 0a4f15fe5425ef8bc6eb84e7bc3625c1ceccb3e49132b696a1841ab17a75a705 height 55200
{"result":[{"txid":"23d33c0c12ba2224b2c9c252e304f491bf76ca05670c8f00d48300776c10850f","outindex":0,"confirmations":1,"rawconfirmations":1,"spendable":true,"address":"zs1umhaattx6lna933m9zwfqlmkm2qj49hpa9lnymtj5h5c7cwtd3evfpu29hppprax9cs45fzeyqg","amount":100.00000000,"memo":"fchange":false}],"error":null,"id":"curltest"}
```

</collapse-text>


## z_mergetoaddress

**z_mergetoaddress [ "fromaddress", ... ] "toaddress" ( fee ) ( transparent_limit ) ( shielded_limit ) ( memo )**

::: warning
CAUTION: <b>z_mergetoaddress</b> is DISABLED but can be enabled as an experimental feature.
:::

The `z_mergetoaddress` method merges multiple utxos and notes into a single utxo or note. The method works for both t addresses and z addresses, both separately and in combination. Coinbase utxos are ignored; use `z_shieldcoinbase` to combine those into a single note.

This is an asynchronous operation, and utxos selected for merging will be locked. If there is an error, they are unlocked. The RPC call `listlockunspent` can be used to return a list of locked utxos.

The number of utxos and notes selected for merging can be limited by the caller. If the transparent limit parameter is set to `0`, the `mempooltxinputlimit` option will determine the number of utxos. Any limit is constrained by the consensus rule defining a maximum transaction size of 100000 bytes.

### The fromaddresses array

The following special strings are accepted inside the `fromaddresses` array:

- `"*"`: Merge both utxos and notes from all addresses belonging to the wallet

- `"ANY_TADDR"`: Merge utxos from all t addresses belonging to the wallet

- `"ANY_ZADDR"`: Merge notes from all z addresses belonging to the wallet

If a special string is given, any given addresses of that type will be ignored

### Arguments

| Name | Type | Description | 
| ----------------- | ----------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| fromaddresses     | (string, required)                  |
| "address"         | (string)                            | can be a t address or a z address                                                                                                                                                                        |
| "toaddress"       | (string, required)                  | the t address or z address to receive the combined utxo                                                                                                                                                  |
| fee               | (numeric, optional, default=0.0001) | the fee amount to attach to this transaction                                                                                                                                                             |
| transparent_limit | (numeric, optional, default=50)     | limit on the maximum number of transparent utxos to merge; you may set this value to 0 to use the node option [mempooltxinputlimit](../installations/common-runtime-parameters.html#mempooltxinputlimit) |
| shielded_limit    | (numeric, optional, default=10)     | limit on the maximum number of hidden notes to merge; you may set this value to 0 to merge as many as will fit in the transaction                                                                        |
| "memo"            | (string, optional)                  | encoded as hex; when `toaddress` is a z address, this value will be stored in the memo field of the new note                                                                                             |

### Response

| Name | Type | Description | 
| --------------------------- | --------- | ----------------------------------------------------------------------------------- |
| "remainingUTXOs"            | (numeric) | the number of utxos still available for merging                                     |
| "remainingTransparentValue" | (numeric) | the value of utxos still available for merging                                      |
| "remainingNotes"            | (numeric) | the number of notes still available for merging                                     |
| "remainingShieldedValue"    | (numeric) | the value of notes still available for merging                                      |
| "mergingUTXOs"              | (numeric) | the number of utxos being merged                                                    |
| "mergingTransparentValue"   | (numeric) | the value of utxos being merged                                                     |
| "mergingNotes"              | (numeric) | the number of notes being merged                                                    |
| "mergingShieldedValue"      | (numeric) | the value of notes being merged                                                     |
| "opid"                      | (string)  | an operationid to pass to `z_getoperationstatus` to get the result of the operation |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_mergetoaddress '["t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd"]' ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf
```


<collapse-text hidden title="Response">


```bash
(disabled)
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_mergetoaddress", "params": [["t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd"], "ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```bash
(disabled)
```

</collapse-text>


## z_sendmany

**z_sendmany "fromaddress" [ { "address": ..., "amount": ... }, ... ] \( minconf ) ( fee )**

The `z_sendmany` method sends one or more transactions at once, and allows for sending transactions of types `t --> t`, `t --> z`, `z --> z`, `z --> t`. It is the principle method for dealing with shielded `z` transactions in the Komodo ecosystem.

The `amount` values are double-precision floating point numbers. Change from a t address flows to a new t address address, while change from z address returns to itself. When sending coinbase utxos to a z address, change is not allowed. The entire value of the utxo(s) must be consumed. Currently, the maximum number of z address outputs is 54 due to transaction-size limits.

### Arguments

| Name | Type | Description | 
| ------------- | ----------------------------------- | ------------------------------------------------------------------------------------------------------ |
| "fromaddress" | (string, required)                  | the sending t address or z address                                                                     |
| "amounts"     | (array of json objects)             |
| "address"     | (string, required)                  | the receiving address; can be a t address or z address                                                 |
| "amount"      | (numeric, required)                 | the numeric amount                                                                                     |
| "memo"        | (string, optional)                  | if the address is a z address, this property accepts raw data represented in hexadecimal string format |
| minconf       | (numeric, optional, default=1)      | only use funds confirmed at least this many times                                                      |
| fee           | (numeric, optional, default=0.0001) | the fee amount to attach to this transaction                                                           |

### Response

| Name | Type | Description | 
| ------------- | -------- | --------------------------------------------------------------------------------- |
| "operationid" | (string) | an operationid to pass to z_getoperationstatus to get the result of the operation |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_sendmany "RUX5vGkxJCKBPGm8b97VUumt2aHkuCjp8e" '[{"address":"RVEsww91UBdUNGyCC1GjDVuvJShEei2kj4","amount":0.01}]'
```


<collapse-text hidden title="Response">


```bash
opid-ad947755-b348-4842-90ca-0f0c71d13d34
```

</collapse-text>


Command:

```bash
./komodo-cli z_sendmany "RCpMUZwxc3pWsgip5aj3Sy1cKkh86P3Tns" '[{"address":"ztci8RzNSo2pdiDpAeHpz9Rp91hq12Mn7zcFfBR8Jjs2ydZUCTw8rLZzkVP888M4vGezpZVfsTR8orgxYK3N8gdgbBzakx3","amount":0.01}]'
```


<collapse-text hidden title="Response">


```bash
opid-cdd6af37-88a2-44d7-9630-d54d21f8b1c4
```

</collapse-text>


Command:

```bash
./komodo-cli z_sendmany "ztci8RzNSo2pdiDpAeHpz9Rp91hq12Mn7zcFfBR8Jjs2ydZUCTw8rLZzkVP888M4vGezpZVfsTR8orgxYK3N8gdgbBzakx3" '[{"address":"ztYMDvwUqi5FZLQy4so71ZGHXk2fDtEYU9HNns9DNYjXJr9PEzSL8Dq8NcdiRijsgCm4r3nNWA6dUrqW9suGd2F7uuj2BhP","amount":0.0099}]'
```


<collapse-text hidden title="Response">


```bash
opid-3c3d6f25-f333-4898-8a50-06f4012cf975
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_sendmany", "params": ["RCpMUZwxc3pWsgip5aj3Sy1cKkh86P3Tns", [{"address": "ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf" ,"amount": 0.01}]] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```bash
{
  "result": "opid-73306924-3466-4944-a8f7-c45c14be0438",
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## z_shieldcoinbase

**z_shieldcoinbase "fromaddress" "tozaddress" ( fee ) ( limit )**

The `z_shieldcoinbase` method shields transparent coinbase funds by sending the funds to a shielded z address. This is an asynchronous operation and utxos selected for shielding will be locked. If there is an error, they are unlocked.

The RPC call `listlockunspent` can be used to return a list of locked utxos. The number of coinbase utxos selected for shielding can be limited by the caller. If the limit parameter is set to zero, the [mempooltxinputlimit](../installations/common-runtime-parameters.html#mempooltxinputlimit) option will determine the number of uxtos. Any limit is constrained by the consensus rule defining a maximum transaction size of 100000 bytes.

### Arguments

| Name | Type | Description | 
| ------------- | ----------------------------------- | --------------------------------------------------------------------------------------------------- |
| "fromaddress" | (string, required)                  | the address is a t address or `"*"` for all t address belonging to the wallet                       |
| "toaddress"   | (string, required)                  | the address is a z address                                                                          |
| fee           | (numeric, optional, default=0.0001) | the fee amount to attach to this transaction                                                        |
| limit         | (numeric, optional, default=50)     | limit on the maximum number of utxos to shield; set to `0` to use node option `mempooltxinputlimit` |

### Response

| Name | Type | Description | 
| ---------------- | --------- | --------------------------------------------------------------------------------- |
| "remainingUTXOs" | (numeric) | the number of coinbase utxos still available for shielding                        |
| "remainingValue" | (numeric) | the value of coinbase utxos still available for shielding                         |
| "shieldingUTXOs" | (numeric) | the number of coinbase utxos being shielded                                       |
| "shieldingValue" | (numeric) | the value of coinbase utxos being shielded                                        |
| "opid"           | (string)  | an operationid to pass to z_getoperationstatus to get the result of the operation |

#### :pushpin: Examples

Command:

```bash
./komodo-cli z_shieldcoinbase "RXN2rxidK4cwzRL44UTnWvQjjvLdoMmCpU" "ztYMDvwUqi5FZLQy4so71ZGHXk2fDtEYU9HNns9DNYjXJr9PEzSL8Dq8NcdiRijsgCm4r3nNWA6dUrqW9suGd2F7uuj2BhP"
```


<collapse-text hidden title="Response">


```json
{
  "remainingUTXOs": 0,
  "remainingValue": 0.0,
  "shieldingUTXOs": 2,
  "shieldingValue": 0.0003,
  "opid": "opid-c0a7875c-aaa0-4bdc-8f17-b34ab99e8bab"
}
```

</collapse-text>


Command:

```bash
./komodo-cli z_shieldcoinbase "REyaj53EB2nwUnsmVyn8JHCcquKf1zYkEP" "ztYMDvwUqi5FZLQy4so71ZGHXk2fDtEYU9HNns9DNYjXJr9PEzSL8Dq8NcdiRijsgCm4r3nNWA6dUrqW9suGd2F7uuj2BhP" 0.0001 50
```


<collapse-text hidden title="Response">


```json
{
  "remainingUTXOs": 0,
  "remainingValue": 0.0,
  "shieldingUTXOs": 14,
  "shieldingValue": 0.0016,
  "opid": "opid-08ce931d-876c-45d5-9aea-15cf4c695e72"
}
```

</collapse-text>


You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpcuser:myrpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_shieldcoinbase", "params": ["RWRSfEYcfLv3yy9mhAuKHQTMCs9fArpPiH", "ztYMDvwUqi5FZLQy4so71ZGHXk2fDtEYU9HNns9DNYjXJr9PEzSL8Dq8NcdiRijsgCm4r3nNWA6dUrqW9suGd2F7uuj2BhP"] }' -H 'content-type: text/plain;' http://127.0.0.1:myrpcport/
```


<collapse-text hidden title="Response">


```json
{
  "result": {
    "remainingUTXOs": 0,
    "remainingValue": 0,
    "shieldingUTXOs": 1,
    "shieldingValue": 0.00025,
    "opid": "opid-53018a85-cf68-4e7d-a065-0defea6bf061"
  },
  "error": null,
  "id": "curltest"
}
```

</collapse-text>


## zcbenchmark

**zcbenchmark benchmarktype samplecount**

The `zcbenchmark` method runs a benchmark of the selected `benchmarktype`. This benchmark is calculated `samplecount` times.

When finished, the method returns the running times of each sample.

### Arguments

| Name | Type | Description | 
| --------------- | ------------------ | ----------------------------- |
| "benchmarktype" | (string, required) | the type of the benchmark     |
| "samplecount"   | (numeric)          | the number of samples to take |

### Response

| Name | Type | Description | 
| ------------- | --------- | ---------------------------------------------------- |
| "runningtime" | (numeric) | the time it took to run the selected `benchmarktype` |

Output:

```json
[
  {
    "runningtime": runningtime
  },
  {
    "runningtime": runningtime
  }
  ...
]
```

## zcrawjoinsplit

**zcrawjoinsplit rawtx inputs outputs vpub_old vpub_new**

::: warning
DEPRECATED.
:::

- inputs: a JSON object mapping {note: zcsecretkey, ...}
- outputs: a JSON object mapping {zcaddr: value, ...}

Splices a joinsplit into a raw transaction. Inputs are unilaterally confidential.
Outputs are confidential between sender/receiver. The vpub_old and
vpub_new values are globally public and move transparent value into
or out of the confidential value store, respectively.

Note: The caller is responsible for delivering the output enc1 and
enc2 to the appropriate recipients, as well as signing rawtxout and
ensuring it is mined. (A future RPC call will deliver the confidential
payments in-band on the blockchain.)

Output:

```json
{
  "encryptednote1": enc1,
  "encryptednote2": enc2,
  "rawtxn": rawtxout
}
```

## zcrawkeygen

**zcrawkeygen**

::: warning
DEPRECATED.
:::

the `zcrawkeygen` method generates a zcaddr which can send and receive confidential values.

Output:

```json
{
  "zcaddress": zcaddr,
  "zcsecretkey": zcsecretkey,
  "zcviewingkey": zcviewingkey
}
```

## zcrawreceive zcsecretkey encryptednote

**zcrawreceive zcsecretkey encryptednote**

::: warning
DEPRECATED.
:::

Decrypts `encryptednote` and checks if the coin commitments
are in the blockchain as indicated by the "exists" result.

Output:

```json
{
  "amount": value,
  "note": noteplaintext,
  "exists": exists
}
```

## zcsamplejoinsplit

Perform a joinsplit and return the JSDescription.
# Common Runtime Parameters

## Introduction

The following is an abbreviated list of runtime parameters and settings that can be initiated in a [Smart Chain's .conf file.](../installations/common-runtime-parameters.html#accessing-the-coin-daemon-remotely)

These commands largely derive from the upstream Bitcoin software, `bitcoind`. 

Komodo is a fork of Zcash, and Zcash is a privacy-centric fork of Bitcoin. Therefore, essentially all runtime parameters and API commands available in both Bitcoin and Zcash are available in Komodo.

To see additional Bitcoin-based runtime parameters not included here, please visit [the relevant Bitcoin wiki page](https://en.bitcoin.it/wiki/Running_Bitcoin).

## addnode

`addnode` tells the daemon which nodes are trusted to act as seed nodes. After connecting to a node via `addnode`, the trusted node will send your node the list of all nodes that it is connected to, and your node will then connect to these additional nodes until [the max limit](../installations/common-runtime-parameters.html#maxconnections) is reached.

This contrasts from the [connect](../installations/common-runtime-parameters.html#connect) runtime parameter, as the latter does not attempt to connect your node to additional nodes.

If you are behind a firewall or are having issues connecting to the network, `addnode` is a stronger option.

On the other hand, if you want to connect only to designated and trusted nodes, `connect` is a stronger option.

If you run multiple nodes that are connected via a LAN, it is not necessary for each node to open multiple connections. Instead, use `connect` to connect all to one primary node, and then use `addnode` on the primary node to connect to the network.

The p2p port must not be blocked by a firewall. If the computers do not have public IP addresses, you will need to port-forward the p2p port on both computers and append the forwarded port to the IP.

#### :pushpin: Examples:

`./komodod -ac_name=EXAMPLECHAIN -ac_supply=1000000 -addnode=<IP of the second node>:8096`

Using addnode as a default value in the Smart Chain's `.conf` file:

```bash
addnode=69.164.218.197
```

## addressindex

`addressindex` instructs a Smart Chain to maintain an index of all addresses and balances.

We recommend that the user [manually delete the blockchain data](../../../basic-docs/smart-chains/smart-chain-setup/smart-chain-maintenance.html#manually-deleting-blockchain-data) before initiating this parameter.

`addressindex` is enabled by default on any Smart Chain that utilizes Fluidity.

::: tip
The <b>reindex</b> parameter is not a viable alternative method for re-syncing the Smart Chain in this circumstance.
:::

#### :pushpin: Examples:

Using `addressindex` as a runtime parameter:

```bash
komodod -addressindex=1
```

Using `addressindex` as a default value in the Smart Chain's `.conf` file:

```bash
addressindex=1
```

## bantime

`bantime` sets the default number of seconds for a ban initiated during the daemon's session. The default is 86400.

#### :pushpin: Examples:

Using bantime as a runtime parameter:

```bash
komodod -bantime=100000
```

Using bantime as a default value in the Smart Chain's `.conf` file:

```bash
bantime=100000
```

## bind

`bind` instructs the Smart Chain daemon to bind to a given address and always listen on it.

Use `[host]:port` notation for IPv6.

#### :pushpin: Examples:

Using bind as a runtime parameter:

```bash
komodod -bind=127.0.0.1:9050
```

Using bind as a default value in the Smart Chain's `.conf` file:

```bash
bind=127.0.0.1:9050
```

## connect

`connect` connects the `komodod` server to a trusted peer node, but not to request or add any additional nodes.

Please refer to the [addnode](../installations/common-runtime-parameters.html#addnode) parameter entry for more information.

#### :pushpin: Examples:

Using connect as a default value in the Smart Chain's `.conf` file:

```bash
connect=69.164.218.197
```

## donation

`donation` donates all user rewards to a specific address. This value must be set to a 33 byte pubkey.

#### :pushpin: Examples:

Using donation as a default value in the Smart Chain's `.conf` file:

```bash
donation=027dc7b5cfb5efca96674b45e9fda18df069d040b9fd9ff32c35df56005e330392
```

## exchange

`exchange` forfeits all user rewards to miners. Set this to explicitly not claim user rewards.

#### :pushpin: Examples:

Using exchange as a default value in the Smart Chain's `.conf` file:

```bash
exchange=1
```

## exportdir

`exportdir` tells the Smart Chain daemon where to store the wallet backup files created through the [backupwallet](../komodo-api/wallet.html#backupwallet) and [dumpwallet](../komodo-api/wallet.html#dumpwallet) calls.

#### :pushpin: Examples:

Using exportdir as a default value in the Smart Chain's `.conf` file:

```bash
exportdir=/home/myusername/mydirectory
```

## gen

`gen` instructs the daemon to attempt to generate new blocks, and thereby mine new coins.

See also [setgenerate](../komodo-api/generate.html#setgenerate).

::: warning
This parameter should be avoided. Instead, start the daemon without the `-gen` parameter. Once the Smart Chain is launched, wait until the blockchain is synced to the current block and then execute the [setgenerate](../komodo-api/generate.html#setgenerate) method. The sync status of the blockchain can be found by executing the [getinfo](../komodo-api/control.html#getinfo) method and comparing the `blocks` and `longestchain` properties.
:::

::: tip

- If the `genproclimit` property is not specified after the `gen` option, the daemon mines using 1 thread.
- To mine using all available threads, use: `-genproclimit=-1`
  :::

::: tip
`gen=0` in the .conf file on an Smart Chain where [<b>ac_staked</b>](../basic-docs/smart-chains/smart-chain-setup/smart-chain-customizations.html#ac-staked) is enabled sets the daemon to stake using all available coins
:::

#### :pushpin: Examples:

Using gen as a runtime parameter to mine using 4 threads:

```bash
./komodod -gen -genproclimit=4
```

## genproclimit

`genproclimit` sets the number of threads to be used for mining. To use all the available processors, use the value `-1`.

::: tip
Setting `genproclimit=0` instructs the daemon to stake (if possible) using all available coins.
:::

#### :pushpin: Examples:

Using genproclimit as a default value in the Smart Chain's `.conf` file, to mine using 2 threads:

```bash
genproclimit=2
```

## keypool

`keypool` instructs the daemon to pre-generate a certain number of public/private key pairs. This can facilitate `wallet.dat` backups being valid for both prior transactions and several dozen future transactions.

#### :pushpin: Examples:

Using keypool as a default value in the Smart Chain's `.conf` file:

```bash
keypool=100
```

## listen

`listen` instructs the daemon to listen for RPC calls on the network. It is enabled by default, except when `connect` is used.

#### :pushpin: Examples:

Using listen as a runtime parameter:

```bash
komodod -listen=1
```

Using listen as a default value in the Smart Chain's `.conf` file:

```bash
listen=1
```

## maxconnections

`maxconnections` sets the maximum number of inbound and outbound connections.

#### :pushpin: Examples:

Using maxconnections as a runtime parameter:

```bash
komodod -maxconnections=NUMBER
```

Using maxconnections as a default value in the Smart Chain's `.conf` file:

```bash
maxconnections=NUMBER
```

## mempooltxinputlimit

::: tip
DEPRECATED
:::

`mempooltxinputlimit` is a runtime parameter inherited from Zcash. The functionality it facilitates is now enabled by default, and therefore the parameter is deprecated. Please see [the Zcash documentation for more information](https://blog.z.cash/new-release-1-1-0/).

## proxy

`proxy` allows the user to connect via a `SOCKS5` proxy.

#### :pushpin: Examples:

Using proxy as a runtime parameter:

```bash
komodod -proxy=127.0.0.1:9050
```

Using proxy as a default value in the Smart Chain's `.conf` file:

```bash
proxy=127.0.0.1:9050
```

## pubkey

`pubkey` sets an address to use as a change address for all transactions. This value must be set to a 33 byte pubkey. All mined/staked coins will also be sent to this address. We recommend that the user ensure they own the corresponding `privkey` of their chosen `pubkey`, lest their funds be sent to a `pubkey` they do not own or control.

The `pubkey` parameter is required for all Fluidity-enabled chains. All Fluidity transactions will utilize the `pubkey` as an integral property.

#### :pushpin: Examples:

Using pubkey as a default value in the Smart Chain's `.conf` file:

```bash
pubkey=027dc7b5cfb5efca96674b45e9fda18df069d040b9fd9ff32c35df56005e330392
```

Using pubkey as a startup parameter:

```bash
-pubkey=027dc7b5cfb5efca96674b45e9fda18df069d040b9fd9ff32c35df56005e330392
```

## regtest

`regtest` instructs the Smart Chain daemon to run a regression test network. Typically, the user will create a disposable Smart Chain for these purposes. The [ac_supply](../basic-docs/smart-chains/smart-chain-setup/smart-chain-customizations.html#ac-supply) parameter is not required in this instance.

(A regression-test network is a useful tool for rapid trial and testing. [Please reach out to us](https://komodoplatform.com/discord) if you are curious to implement this tool in your workflow and are unfamiliar with the process.)

#### :pushpin: Examples:

Using regtest as a runtime parameter:

```bash
komodod -ac_name=TEST -regtest
```

Using regtest as a default value in the Smart Chain's `.conf` file:

```bash
regtest=0
```

## reindex

`reindex` instructs the daemon to re-index the currently synced blockchain data.

::: tip
Depending on the size and state of the chain you are re-indexing, this parameter may prolong the daemon launch time.
:::

#### :pushpin: Examples:

Using reindex as a runtime parameter:

```bash
komodod -reindex
```

## rewind

`rewind` rewinds the chain to a specific block height. This is useful for creating snapshots at a given block height.

#### :pushpin: Examples:

Using rewind as a runtime parameter:

```bash
komodod -rewind=777777
```

## rpcallowip

`rpcallowip` tells the daemon which ip addresses are acceptable for receiving rpc commands.

By default, only rpc connections from localhost are allowed.

Specify as many `rpcallowip=` settings as you like to allow connections from other hosts, either as a single IPv4/IPv6 or with a subnet specification.

::: warning

Opening up the RPC port to hosts outside your local trusted network is NOT RECOMMENDED. The rpcpassword is transmitted over the network unencrypted. Also note that anyone that can authenticate on the RPC port can steal your keys and take over the server. [For more information click here](https://github.com/zcash/zcash/issues/1497).

:::

#### :pushpin: Examples:

Using rpcallowip as a default value in the Smart Chain's `.conf` file:

```bash
  rpcallowip=10.1.1.34/255.255.255.0
  rpcallowip=1.2.3.4/24
  rpcallowip=2001:db8:85a3:0:0:8a2e:370:7334/96
```

## rpcbind

`rpcbind` instructs the daemon to listen for json-rpc connections.

Use `[host]:port` notation for IPv6.

This option can be specified multiple times.

The default setting is to bind to all interfaces.

#### :pushpin: Examples:

Using rpcbind as a runtime parameter:

```bash
komodod -rpcbind=127.0.0.1:9704
```

Using rpcbind as a default value in the Smart Chain's `.conf` file:

```bash
rpcbind=127.0.0.1:9704
```

## rpcclienttimeout

`rpcclienttimeout` indicates the number of seconds to wait for an rpc command to complete before killing the process.

#### :pushpin: Examples:

Using rpcclienttimeout as a runtime parameter:

```bash
komodod -rpcclienttimeout=SECONDS
```

Using rpcclienttimeout as a default value in the Smart Chain's `.conf` file:

```bash
rpcclientttimeout=SECONDS
```

## rpcconnect

`rpcconnect` allows the user to connect to `komodod` and send RPC commands from a host. By default, it is set to localhost.

::: warning
We DO NOT RECOMMEND that the average user set this value to anything other than the localhost, as it can grant access to a foreign party, who are then able to take control over komodod and all funds in your wallet.dat file.
:::

#### :pushpin: Examples:

Using rpcconnect as a default value in the Smart Chain's `.conf` file:

```bash
rpcconnect=127.0.0.1
```

## rpcport

`rpcport` tells the daemon to listen for RPC connections on the indicated TCP port.

#### :pushpin: Examples:

Using rpcport as a default value in the Smart Chain's `.conf` file:

```bash
rpcport=8232
```

## sendfreetransactions

`sendfreetransactions` instructs the daemon to send transactions as zero-fee transactions if possible. The default value is 0.

#### :pushpin: Examples:

Using sendfreetransactions as a default value in the Smart Chain's `.conf` file:

```bash
sendfreetransactions=0
```

## server

`server` instructs the daemon to accept json-rpc commands. It is enabled by default.

#### :pushpin: Examples:

Using server as a runtime parameter:

```bash
komodod -server=1
```

Using server as a default value in the Smart Chain's `.conf` file:

```bash
server=1
```

## spentindex

`spentindex` instructs a Smart Chain to maintain a full index of all spent transactions (txids).

We recommend that the user [manually delete the blockchain data](../../../basic-docs/smart-chains/smart-chain-setup/smart-chain-maintenance.html#manually-deleting-blockchain-data) before initiating this parameter.

`spentindex` is enabled by default on any Smart Chain that utilizes the Fluidity.

::: tip
The <b>reindex</b> parameter is not a viable alternative method for re-syncing the blockchain in this circumstance.
:::

#### :pushpin: Examples:

Using spentindex as a runtime parameter:

```bash
komodod -spentindex=1
```

Using spentindex as a default value in the Smart Chain's `.conf` file:

```bash
spentindex=1
```

## stopat

`stopat` stops the chain at a specific block height. This is useful for creating snapshots at a given block height.

#### :pushpin: Examples:

Using stopat as a runtime parameter:

```bash
komodod -stopat=1000000
```

## timestampindex

`timestampindex` instructs a Smart Chain to maintain a timestamp index for all block hashes.

We recommend that the user [manually delete the blockchain data](../../../basic-docs/smart-chains/smart-chain-setup/smart-chain-maintenance.html#manually-deleting-blockchain-data) before initiating this parameter.

::: tip
The <b>reindex</b> parameter is not a viable alternative method for re-syncing the Smart Chain in this circumstance.
:::

#### :pushpin: Examples:

Using timestampindex as a runtime parameter:

```bash
./komodod -timestampindex=1
```

Using timestampindex as a default value in the Smart Chain's `.conf` file:

```bash
timestampindex=1
```

## txindex

`txindex` instructs a Smart Chain to track every transaction made on the relevant blockchain.

`txindex` is enabled by default on all Smart Chains, and is utilized in delayed Proof of Work (dPoW), privacy modules, and Fluidity.

::: danger Warning!
Disabling `txindex` will cause the default Smart Chain daemon to malfunction.
:::

## whitebind

`whitelist` binds the daemon to a given address and whitelists peers connecting to it.

Use `[host]:port` notation for IPv6

#### :pushpin: Examples:

Using whitebind as a runtime parameter:

```bash
komodod -whitebind=127.0.0.1:9050
```

Using whitebind as a default value in the Smart Chain's `.conf` file:

```bash
whitebind=127.0.0.1:9050
```

# Ecosystem Launch Parameters

A list of launch parameters for all Smart Chains in the Komodo ecosystem can be found here.

[Link to list of all Smart Chain launch parameters](https://github.com/KomodoPlatform/komodo/blob/beta/src/assetchains.old)

# Installing Smart Chain Software From Source Code

The basic Komodo software package includes two applications.

##### komodod

The `komodod` software application is the Smart Chain daemon that powers all Komodo blockchains.

##### komodo-cli

The `komodo-cli` software application allows a developer to execute API calls to `komodod` via the command line.

##### Both are Installed Automatically

Both of these software applications are installed in the `~/komodo/src/` directory as a part of any of the following installation procedures.

### The Two Methods to Install Smart Chain Software

There are two methods available to install Smart Chain software.

##### Pre-compiled Binaries

You can download and unzip our pre-compiled binaries. This is the simplest method and requires no installation procedure.

For more information on this method, please see the link below.

[<b>Link to simple installations section for pre-compiled executables</b>](../basic-docs/start-here/about-komodo-platform/simple-installations.html)

##### Building Smart Chain Software From Source

You may also build Smart Chain software from source.

This is not required, but building from source is considered the best practice in a production environment, as this allows you to instantly update to the latest patches and upgrades.

- [<b>Linux</b>](../../../basic-docs/smart-chains/smart-chain-setup/installing-from-source.html#linux)
- [<b>MacOS</b>](../../../basic-docs/smart-chains/smart-chain-setup/installing-from-source.html#macos)
- [<b>Windows</b>](../../../basic-docs/smart-chains/smart-chain-setup/installing-from-source.html#windows)

## Linux

#### Requirements

- Linux (easiest with a Debian-based distribution, such as Ubuntu)

  - For Ubuntu, we recommend using only the 16.04 or 18.04 releases

- 64-bit Processor

- Minimum 4GB of free RAM (8GB+ recommended)

#### Get Started

Verify that your system is up to date.

```bash
sudo apt-get update
sudo apt-get upgrade -y
```

#### Install the dependency packages

```bash
sudo apt-get install build-essential pkg-config libc6-dev m4 g++-multilib autoconf libtool libncurses-dev unzip git python zlib1g-dev wget bsdmainutils automake libboost-all-dev libssl-dev libprotobuf-dev protobuf-compiler libqrencode-dev libdb++-dev ntp ntpdate nano software-properties-common curl libevent-dev libcurl4-gnutls-dev cmake clang libsodium-dev -y
```

This action takes some time, depending on your Internet connection. Let the process run in the background. 

Once completed, follow the steps below to install Komodo.

::: tip Note
At some point during the installation process, you will see a warning, "libgmp headers missing". This can safely be ignored.
:::

#### Clone the Komodo Repository

```bash
cd ~
git clone https://github.com/jl777/komodo
cd komodo
git checkout dev
```

#### Fetch the Zcash Parameters

```bash
./zcutil/fetch-params.sh
```

#### Build the Komodo Daemon

In the command below, the `-j$(nproc)` parameter instructs the script to utilize all available processors in your hardware. 

Alternatively, you may instruct the script to use only a set number of processors. For example, `-j8` instructs the script to use `8` processors, `-j4` instructs the script to use `4` processors, etc.

```bash
./zcutil/build.sh -j$(nproc)
```

This script can take some time.

#### Create the komodo.conf File

```bash
cd ~
mkdir .komodo
cd .komodo
nano komodo.conf
```

With the `komodo.conf` file open in the Nano text editor, add the following lines. 

(Create your own `rpcuser` username and `rpcpassword` password.)

```bash
rpcuser=usernameChangeItToSomethingSecure
rpcpassword=passwordChangeItToSomethingSecure
txindex=1
bind=127.0.0.1
rpcbind=127.0.0.1
addnode=78.47.196.146
addnode=5.9.102.210
addnode=178.63.69.164
addnode=88.198.65.74
addnode=5.9.122.241
addnode=144.76.94.38
```

Press `CTRL+O` to save the changes.

Press `CTRL+X` to exit the Nano editor.

Start the `komodod` daemon. It will automatically begin syncing with the network.

```bash
cd ~
cd komodo/src
./komodod &
```

The `&` parameter in the last instruction above instructs the terminal to continue allowing you to enter commands within this terminal shell. 

#### (Optional) Tail the komodod Daemon

Enter the following command to "tail" the `komodod` daemon. The `tail` command allows you to view the `debug.log` file updates in real time.

```bash
tail -f ~/.komodo/debug.log
```
#### Test Your Daemon with komodo-cli

Ensure that your current working directory is in the default `src` directory.

```bash
cd ~/komodo/src/
```

You may now use the `komodo-cli` software to send API (RPC) calls to the `komodod` daemon. 

For example:

```bash
./komodo-cli getinfo
```

This command returns the latest state information about the KMD blockchain and your `wallet.dat` file.

```json
{
  "version": 1000550,
  "protocolversion": 170002,
  "KMDversion": "0.1.0",
  "notarized": 186670,
  "notarizedhash": "000000308845da840ab9af6c1e09dc02f3118683df065b5ec00b05c9bd58cdae",
  "notarizedtxid": "6723a10ef4fceab230d4245305d1ed2a916e435abb83269c20daad9bbefd3f0e",
  "notarizedtxid_height": "mempool",
  "notarized_confirms": 0,
  "walletversion": 60000,
  "balance": 0,
  "interest": 0,
  "blocks": 186773,
  "longestchain": 308867,
  "timeoffset": 0,
  "tiptime": 1486411069,
  "connections": 8,
  "proxy": "",
  "difficulty": 1624278.6287953,
  "testnet": false,
  "keypoololdest": 1482746526,
  "keypoolsize": 101,
  "paytxfee": 0.0,
  "relayfee": 0.00001,
  "errors": ""
}
```

When the `blocks` and `longestchain` values are equal to each other, your machine is in sync with the network.

#### Backup your wallet

We can not stress enough the importance of backing up your `wallet.dat` file.

On Linux, the file is located here:  `~/.komodo/wallet.dat`

One method to backup this file is to archive a copy of the file.

```bash
# Copy the file
cp -av ~/.komodo/wallet.dat ~/wallet.dat

# Rename file
mv ~/wallet.dat ~/2019-05-17-wallet_backup.dat

# To make archive
tar -czvf ~/2019-05-17-wallet_backup.dat.tgz ~/2019-05-17-wallet_backup.dat

# Move the final file to a secure location
```

## MacOS

### Requirements

- OSX (version > 10.11)
- Minimum 4GB of free RAM (8GB+ recommended)

##### Ensure Command Line Tools are Installed. 

Issue the following command in a terminal.

```bash
xcode-select --install
```

##### Ensure brew is Installed 

We use the software `brew` to install dependencies. If you have the latest version of `brew` installed already, you may skip this step.

```bash
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
```

##### Use brew to Install Dependencies

Execute each command separately

```bash
brew update
brew upgrade
brew tap discoteq/discoteq; brew install flock
brew install autoconf autogen automake
brew install gcc@6
brew install binutils
brew install protobuf
brew install coreutils
brew install wget
```

#### Clone the Komodo repository

```bash
git clone https://github.com/jl777/komodo
```

#### Fetch the Zcash Parameters:

```bash
cd komodo
./zcutil/fetch-params.sh
```

#### Compile Komodo

```bash
git checkout dev
./zcutil/build-mac.sh -j8
```

This can take some time.

While this process proceeds, open a new terminal for the next step.

#### Create Configuration File

Create the configuration file in the following directory:

```bash
~/Library/Application\ Support/Komodo
```

If the directory does not yet exist, create the directory.

```bash
mkdir ~/Library/Application\ Support/Komodo
```

Create the configuration file by entering the following commands in the terminal. Execute each line separately.

```bash
echo "rpcuser=komodouser" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "rpcpassword=`head -c 32 /dev/urandom | base64`" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "txindex=1" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "bind=127.0.0.1" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "rpcbind=127.0.0.1" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "addnode=5.9.102.210" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "addnode=78.47.196.146" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "addnode=178.63.69.164" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "addnode=88.198.65.74" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "addnode=5.9.122.241" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "addnode=144.76.94.38" >> ~/Library/Application\ Support/Komodo/komodo.conf
```

#### Run Komodo

Once all processes are complete, run the `komodod` daemon.

```bash
cd ~/komodo/src
./komodod &
```

#### Track the Syncing Progress

##### Using the tail Command

```bash
tail -f ~/Library/Application\ Support/Komodo/debug.log
```

##### Using komodo-cli and getinfo

```bash
cd ~/komodo/src
./komodo-cli getinfo
```

When the returned properties of `blocks` and `longestchain` are equal to each other, the daemon is finished syncing with the network.

#### Backup Your Wallet

We can not stress enough the importance of backing up your `wallet.dat` file.

On MacOS, the file is located here:  `~/Library/Application\ Support/Komodo/wallet.dat`

One method to backup this file is to archive a copy of the file.

```bash
# Copy the file
cp -av ~/Library/Application\ Support/Komodo/wallet.dat ~/wallet.dat

# Rename file
mv ~/wallet.dat ~/2019-05-17-wallet_backup.dat

# To make archive
tar -czvf ~/2019-05-17-wallet_backup.dat.tgz ~/2019-05-17-wallet_backup.dat

# Move the final file to a secure location
```

## Windows

The Windows software for `komodod` and `komodo-cli` files are slightly different than their MacOS and Linux counterparts in two ways.

- The Windows software cannot be directly compiled on a Windows machine. Rather, the software must be compiled on a Linux machine (Ubuntu recommended), and then transferred to the Windows machine
  - You can use a Virtual Machine-based installation of Ubuntu Linux, running on a Windows machine, as a solution
- The names of the software are `komodod.exe` and `komodo-cli.exe`

Once you have access to an Ubuntu machine and have access to a terminal [with <b>sudo</b> privileges](https://help.ubuntu.com/community/RootSudo), you are prepared to continue the installation process.

#### Install dependencies

```bash
sudo apt-get install build-essential pkg-config libc6-dev m4 g++-multilib autoconf libtool ncurses-dev unzip git python python-zmq zlib1g-dev wget libcurl4-gnutls-dev bsdmainutils automake curl libsodium-dev cmake mingw-w64
```

#### Install Rust

```bash
curl https://sh.rustup.rs -sSf | sh
source $HOME/.cargo/env
rustup target add x86_64-pc-windows-gnu
```

#### Clone the Komodo Repository

```bash
git clone https://github.com/jl777/komodo
cd komodo
git checkout dev
```

#### Fetch the Zcash Parameters

```bash
./zcutil/fetch-params.sh
```

#### Build the Komodo Daemon

In the command below, you may instruct the script to use only a set number of processors. For example, `-j8` instructs the script to use `8` processors, `-j4` instructs the script to use `4` processors, etc.

```bash
./zcutil/build-win.sh -j8
```

This script can take some time. Once completed, you will find `komodod.exe` & `komodo-cli.exe` files inside the `src` directory.

Transfer these 2 executable files to your Windows computer and place the files in a new folder on the Desktop called kmd or any other location you prefer (remember the location and use that). For this guide we are using `kmd` directory on Desktop.

Open a command prompt for the following steps.

#### Create the Komodo Directory

```bash
mkdir "%HOMEPATH%\AppData\Roaming\komodo"
```

#### Create the Configuration File

```bash
notepad “%HOMEPATH%\AppData\Roaming\Komodo\komodo.conf”
```

When the software dialogue box opens, click `Yes` to create the `komodo.conf` file.

Copy the information below and paste it into Notepad.

```bash
rpcuser=usernameChangeItToSomethingSecure
rpcpassword=passwordChangeItToSomethingSecure
daemon=1
rpcallowip=127.0.0.1
rpcbind=127.0.0.1
server=1
txindex=1
addnode=5.9.102.210
addnode=78.47.196.146
addnode=178.63.69.164
addnode=88.198.65.74
addnode=5.9.122.241
addnode=144.76.94.38
```

After pasting, save and exit Notepad.

#### Create the Directory for the Zcash Parameters

```bash
mkdir “%HOMEPATH%\AppData\Roaming\ZcashParams”
```

Download following files and move them into the new directory.

- [sprout-proving.key](<[https://z.cash/downloads/sprout-proving.key](https://z.cash/downloads/sprout-proving.key)>)

- [sprout-verifying.key](<[https://z.cash/downloads/sprout-verifying.key](https://z.cash/downloads/sprout-verifying.key)>)

- [sapling-spend.params](<[https://z.cash/downloads/sapling-spend.params](https://z.cash/downloads/sapling-spend.params)>)

- [sapling-output.params](<[https://z.cash/downloads/sapling-output.params](https://z.cash/downloads/sapling-output.params)>)

- [sprout-groth16.params](<[https://z.cash/downloads/sprout-groth16.params](https://z.cash/downloads/sprout-groth16.params)>)

#### Run Smart Chain Software

```bash
"%HOMEPATH%\Desktop\kmd\komodod.exe"
```

#### Verify Syncing Progress

```bash
"%HOMEPATH%\Desktop\kmd\komodo-cli.exe" getinfo
```

#### Backup Your Wallet

We can not stress enough the importance of backing up your `wallet.dat` file.

On Windows, the file is located here:  `%HOMEPATH%\AppData\Roaming\Komodo\wallet.dat`

One method to backup this file is to create a copy and archive it.
# Interacting with Komodo Chains

## Using komodo-cli
Initiate the `komodod` daemon by calling it from the command line and including any desired runtime parameters.

When initiating any Smart Chain other than the main KMD chain, the user should always include all parameters that were used to create the Smart Chain.

::: tip
  Note to Windows Users: Replace ./komodod and ./komodo-cli with komodod.exe and komodo-cli.exe for each step.
:::

To launch the main KMD chain, execute the following command in the directory where `komodod` is installed.

```bash
./komodod &
```

After the daemon launches, you may interact with it using the `komodo-cli` software.

```bash
./komodo-cli API_COMMAND
```

To launch another Smart Chain, include the necessary parameters.

::: tip IMPORTANT
Always execute the launch command EXACTLY as indicated, and as the Smart Chain's developers instruct. If you make a mistake, you must [<b>delete the Smart Chain data</b>](../../../basic-docs/smart-chains/smart-chain-setup/smart-chain-maintenance.html#manually-deleting-blockchain-data) and re-launch to regain access to the Smart Chain's network.
:::

For example, to launch the DEX Smart Chain, execute:

```bash
./komodod -ac_name=DEX -ac_supply=999999 -addnode=78.47.196.146 &
```

To interact with the DEX daemon, use `komodo-cli` like so:

```bash
./komodo-cli -ac_name=DEX API_COMMAND
```

In the terminal you can call the Komodo documentation by executing:

```bash
./komodo-cli help
```

To learn more via the terminal about a specific API command, execute:

```bash
./komodo-cli help API_COMMAND
```
## Using curl

To access a coin daemon remotely -- for example, via a `curl` command in the shell -- the user will need to obtain the `rpcuser`, `rpcpassword`, and `rpcport` from the `.conf` file of the relevant coin daemon.

Assuming the default installation location, the `.conf` file can be found by exploring the following directories:

| Operating System | Directory |
| ---------------- | --------- |
| MacOS | `~/Library/Application Support/Komodo` |
| Windows | `C:\Users\myusername\AppData\Roaming\Komodo\` |
| GNU/Linux | `~/.komodo` |


Within this directory there are also subdirectories containing all KMD-compatible `.conf` files used on this node.

Contents of a KMD `.conf` file:

```bash
rpcuser=myusername
rpcpassword=myrpcpassword
server=1
rpcport=7771
addnode=78.47.196.146
addnode=5.9.102.210
addnode=178.63.69.164
addnode=88.198.65.74
addnode=5.9.122.241
addnode=144.76.94.3
```

# Smart Chain Maintenance

## Manually Deleting Blockchain Data

Sometimes it is necessary to manually delete all blockchain data. This should automatically trigger a full re-sync of the Smart Chain.

Users should exercise caution not to delete the `wallet.dat` file during this procedure. We recommend that the user make frequent backups of the `wallet.dat` file, especially before deleting files from the data directory.

To erase all synced blockchain data, the following files should be deleted from the `.komodo` folder:

#### Files to Delete

- `blocks`
- `chainstate`
- `notarisations`
- `komodostate` 
- `komodostate.ind`
- `peers.dat`

#### Default Location for Files

| Operating System | Directory |
| ---------------- | --------- |
| MacOS | `~/Library/Application Support/Komodo` |
| Windows | `C:\Users\myusername\AppData\Roaming\Komodo\` |
| GNU/Linux | `~/.komodo` |

# Updating Smart Chain Software From Source

## Linux

To update your compiled `komodod` daemon, follow the steps below carefully. For each step, do not proceed to the next step until the current step is fully complete.

You may leave the `komodod` daemon running, if necessary, and if your machine has sufficient resources. 

Alternatively, you may stop the daemon by executing `~/komodo/src/komodo-cli stop`.

#### Navigate to your komodo directory

```bash
cd ~/komodo
```

#### Reset Your Local Repository

```bash
git reset --hard
```

#### Clean the Source Directory

```bash
make clean
```

#### Update Your Local Source Code

```bash
git pull
```

#### Compile the Latest Komodo Binary

```bash
./zcutil/build.sh -j$(nproc)
```

#### Restart the komodod Daemon

Start your services as usual. 

(If you did not stop the daemon before compiling, stop the daemon using `~/komodo/src/komodo-cli stop` and start the daemon again.)

```bash
~/komodo/src/komodod &
```

#### Rapid Update Method

The steps below can often be used to update the daemon. 

These steps take a lesser amount of time, but they may occasionally produce an error during compilation. If the steps below do not succeed, the compiler will cease and return an error. When this happens, simply switch to the update steps listed above.

```bash
cd ~/komodo
git checkout dev
git pull
make -j$(nproc)
```

## MacOS

To update your compiled `komodod` daemon, follow the steps below carefully. For each step, do not proceed to the next step until the current step is fully complete.

You may leave the `komodod` daemon running, if necessary, and if your machine has sufficient resources. 

Alternatively, you may stop the daemon by executing `~/komodo/src/komodo-cli stop`.

#### Navigate to your komodo directory

```bash
cd ~/komodo
```

#### Reset Your Local Repository

```bash
git reset --hard
```

#### Clean the Source Directory

```bash
make clean
```

#### Update Your Local Source Code

```bash
git pull
```

#### Compile the Latest Komodo Binary

```bash
./zcutil/build.sh -j8
```

#### Restart the komodod Daemon

Start your services as usual. 

(If you did not stop the daemon before compiling, stop the daemon using `~/komodo/src/komodo-cli stop` and start the daemon again.)

```bash
~/komodo/src/komodod &
```

#### Rapid Update Method

The steps below can often be used to update the daemon. 

These steps take a lesser amount of time, but they may occasionally produce an error during compilation. If the steps below do not succeed, the compiler will cease and return an error. When this happens, simply switch to the update steps listed above.

```bash
cd ~/komodo
git checkout dev
git pull
make -j8
```

## Windows

To update the Windows software, you will again need access to your available installation of Linux where you originally compiled the software. 

#### Build the New Executables

Execute the following commands on your Linux machine to build the new executable files.

```bash
cd ~/komodo
git pull
./zcutil/build-win.sh -j8
```

This can take some time.

####  Move Executables to Windows OS

Once the process completes, find the `komodod.exe` and `komodo-cli.exe` files and move them to your Windows OS machine.

You may drop these executable files into the same `kmd` folder to overwrite the old executables files.

Once complete, run the `komodod.exe` and `komodo-cli` files to verify that they work properly.

# Basic Environment Setup for Linux VPS

## Introduction

This tutorial provides guidance in creating a simple environment for development in the Komodo ecosystem.

The content herein is not comprehensive. Rather, this content provides a starting point, from which an enthusiastic learner should be capable of customizing and developing their own approach.

## Rent a VPS

A common environment choice among developers is to use a Virtual Private Server (VPS). A VPS allows a developer to use the Internet to access high quality hardware with corporate-level high speed Internet access.

Popular VPS choices include [Amazon Web Services (AWS)](https://aws.amazon.com) and [DigitalOcean](https://digitalocean.com).

One reason a VPS is popular is that a developer can quickly create new instances of a virtual machine. This facilitates the developer in having a clean environment that is targeted for a specific purpose.

VPS's are also relatively cheap. Both AWS and DigitalOcean provide the basic necessities for $0 to $20/month, depending on your desired specifications.

::: tip

Alternatively, you can use your own personal computer, or a bare-metal server. However, troubleshooting on a personal setup can prove to be more time consuming than on a VPS.

:::

### Recommended Minimum Server Specifications:

- CPU with 4 cores
- 8 GB RAM
- ~100GB SSD
  - Note that using an HDD instead of a SSD will dramatically increase synchronization time, and thus slow down your workflow
- Ubuntu version 18.04 (for beginners)
  - Ubuntu is the most popular Linux distribution
  - The majority of Komodo's documentation is tested and written on Ubuntu
  - To learn more about Linux, [read this linked article](https://www.linux.com/what-is-linux)

## Connect to Your VPS

Once you have chosen your VPS provider, you will need to connect to your VPS.

New developers often find this process confusing.

Your VPS provider should have several tutorials available to help you through this process.

Look for tutorials on the following topics.

* How to launch a terminal shell on your laptop or desktop machine
* How to set up SSH keys for secure login access
* How to execute a `ssh` command on your local machine to connect to your VPS
* How to enter `sudo` commands on your VPS

For example, AWS has the following documentation to assist new developers in accessing VPS's that use the AWS EC2 service. Choose between MacOS & Linux, or Windows, both of which have different tutorial paths.

[Link to AWS tutorial starting point](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstances.html)

## Initial VPS Setup

Once you can access your VPS via the terminal, it is time to consider security in your environment. You are accessing a machine over the Internet, and there are myriad ways by which an attack can compromise your connection.

To ensure your own safety, consider the following security measures.

- Never log into your VPS as the root user
- Consider disabling the option to log in as root
- Use SSH keys to log in, instead of a password
- Enable a firewall to limit all unwanted traffic

The following tutorials provide many useful tips on creating a secure server.

- [Initial Server Setup with Ubuntu 18.04 | Digital Ocean](https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04)
- [Using SSH to connect to a remove server](https://www.digitalocean.com/community/tutorials/how-to-use-ssh-to-connect-to-a-remote-server-in-ubuntu)

For experience learning the Linux environment, consider the following tutorials.

- [How to use the Unix command line (interactive course)](https://www.codecademy.com/learn/learn-the-command-line)
- [An Introduction to Linux (Especially "A Culture of Learning")](https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-basics)
- [How To Download Software and Content onto your Linux VPS](https://www.digitalocean.com/community/tutorials/how-to-download-software-and-content-onto-your-linux-vps)
- [How To Use cd, pwd, and ls to Explore the File System on a Linux Server](https://www.digitalocean.com/community/tutorials/how-to-use-cd-pwd-and-ls-to-explore-the-file-system-on-a-linux-server)
- [How to Add and Delete Users on Ubuntu 16.04](https://www.digitalocean.com/community/tutorials/how-to-add-and-delete-users-on-ubuntu-16-04)
# Creating Komodo Smart Chains

## Creating A New Smart Chain

### Requirements for Creating a New Chain

- 2 nodes with the ability to open ports (a node can be either a computer or a VPS)
- At least 4GB RAM each
- At least 2 CPU cores each
- 64-bit Operating System (Ubuntu 18.04 recommended)
- Komodo Smart Chain software installed on each
  - (when the goal is only to build a new Smart Chain, there is no need to sync the KMD main chain)

::: tip
When you are building and testing a Komodo Smart Chain, please do not hesitate to reach out to us when you are stuck. We wish to make this as easy as possible. Our support agents are available in our <a href="https://komodoplatform.com/discord">#support channel in Discord</a> for many hours each day, and during off hours you can file a ticket on <a href="https://support.komodoplatform.com/support/home">our support page</a>.
:::

::: tip
The word "node" is used throughout this documentation, and it can be confusing for beginners. A node can be a unique desktop computer connected to the Internet. It can also be a virtual-private server (VPS) that is rented or purchased, and which the developer can access at will. Or, it can be another type of unique instance of a computational machine.
:::

### Basic Info for Connecting At Least Two Nodes

Basic knowledge about how to connect two nodes is recommended for the initial setup.

As per the original blockchain designs of Satoshi Nakamoto, a Komodo Smart Chain does not exist on a single node. Rather, it exists via a connection between two or more nodes. This is the nature of decentralization: it is on the network we rely, rather than a single authority. Therefore, the design of the technology encourages the developer to have two separate nodes which are able to connect over a network.

In the most ideal circumstance, the new Komodo developer will already have two virtual private servers (VPS's) available for testing. VPS's can be cheap and easy to manage. A typical VPS will either have a static external IP or can be assigned one.

If the new developer does not have two VPS's available, setting up a test Smart Chain on two local machines in a home or office-type setting is still achievable, but it may require more troubleshooting.

When using a home or office-type setup, the challenge lies in the way the network is created, and there are myriad network setups.

For example, if the developers are operating on a local router, where the two machines are connected via wifi, the local ip addresses of the machines are harder to find. This is because the router assigns new local ip addresses to the machines each time they re-connect to the router. It is not possible to see the ip addresses from the Internet. In this situation, the developer must log into the router's software interface and search for the currently assigned local ip addresses.

A home or office-type setup can suffice, if you're just looking to test an Smart Chain quickly and don't want to spend money on a VPS. However, don't be surprised if you need to ask for help. Please reach out to us, and we'll help the best we can.

To prepare for the next step, execute the following command in the terminal on both machines:

```bash
curl ifconfig.me
```

From the response, record the `ip address` value for additional use.

With the ip addresses available, we are now prepared to test the connection between the machines.

```bash
ping <insert the ip address of the other machine here>
```

This command will generate a response every second, indicating the `ping` speed with which your machines are able to connect.

```bash
$ ping 192.168.1.101

PING 192.168.1.101 (192.168.1.101) 56(84) bytes of data

64 bytes from 192.168.1.101: icmp_seq=1 ttl=64 time=131 ms

64 bytes from 192.168.1.101: icmp_seq=2 ttl=64 time=2.40 ms

```

If you do not see a similar response in the shell, your machines are not able to connect. Please reach out to our team and we will do our best to assist you.

## Part I: Creating a New Komodo Smart Chain

With your machines successfully able to `ping` each other, you are ready to create your first Smart Chain.

The following instructions use the simplest possible set of parameters in creating a new Smart Chain: a coin with the ticker symbol `HELLOWORLD`, `777777` pre-mined coins, and a block reward of `.0001`.

On your first node, change into the directory where Komodo's `komodod` and `komodo-cli` are installed and execute the following commands in the terminal:

#### Mac & GNU/Linux

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -addnode=<IP address of the second node> &
```

#### Windows

```bash
./komodod.exe -ac_name=HELLOWORLD -ac_supply=777777 -addnode=<IP address of the second node> &
```

### Verify the Response

After issuing this command in the terminal on both machines, you will find the p2p port in the terminal window.

```bash
>>>>>>>>>> HELLOWORLD: p2p.8096 rpc.8097 magic.c89a5b16 3365559062 777777 coins
```

In the above string, take note of the p2p and RPC ports, as well as the magic number. These values must match on both nodes for the chains to be identical. If they are not the same, verify that the launch command is the same on both the nodes.

In the example above, the p2p port is `8096`. Make sure that the p2p port is open to the internet or any other network from which the second node connects.

This completes the first half of the Smart Chain creation process. Scroll down to [Part II](../installations/creating-asset-chains.html#part-ii-connecting-the-second-node).

::: tip
Please refer to [Smart Chain Parameters](../installations/asset-chain-parameters.html) for a full list of parameters to customize the characteristics of your blockchain.
:::

::: tip
Please note the requirements for [ac_supply](../installations/asset-chain-parameters.html#ac-supply), and instructions for using [addnode](../installations/common-runtime-parameters.html#addnode) under various network conditions, including firewalls and LANs.
:::

## Part II: Connecting the Second Node

On the second node you issue the same command, but with a key difference. This time, use the first node's IP address.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -addnode=<IP address of the first node> &
```

Once the daemon loads, compare the string that starts with `>>>>>>>>>>` in the second node to the one from the first node to make sure they are identical.

Mining can be started on a node using the following command:

```bash
./komodo-cli -ac_name=HELLOWORLD setgenerate true $(nproc)
```

`$(nproc)` in the above command makes the daemon mine using all the available CPU threads, which might be necessary in a low end VPS.

On a Komodo-based blockchain, all of the pre-mined coins are mined in the first block. Therefore, whichever machine executes the mining command will receive the entirety of the blockchain's pre-mined coin supply, as set in the [ac_supply](../installations/asset-chain-parameters.html#ac-supply) parameter. Upon mining the first block, these coins are available in the default `wallet.dat` file.

To collect all the mining rewards from the node to a single address, execute the following commands before issuing the `setgenerate` command:

```bash
# Get a new address
newaddress=$(./komodo-cli -ac_name=HELLOWORLD getnewaddress)

# Get the corresponding pubkey
pubkey=$(./komodo-cli -ac_name=HELLOWORLD validateaddress $newaddress | jq -r '.pubkey' )

# Indicate the pubkey to the daemon
./komodo-cli -ac_name=HELLOWORLD setpubkey $pubkey
```

After issuing the mining command is issued, can check that the two nodes are connected by using the following command:

```bash
./komodo-cli -ac_name=HELLOWORLD getinfo | grep connections
```

If the nodes are properly connected, both nodes will respond with: `"connections": 1`

These are the coins you will later distribute to your community, using either our native DEX, [AtomicDEX](../installations/basic-instructions.html#komodo-s-native-dex-barterdex), or our decentralized-ICO software (coming soon), or on any other third-party exchange.

You can check the contents of the wallet by executing the following command in the terminal:

```bash
./komodo-cli -ac_name=HELLOWORLD getwalletinfo
```

To verify that everything is properly initiated, send a few coins from the second node to the first node:

<collapse-text hidden title="Commands">

### Node1

```bash
newaddress=$(./komodo-cli -ac_name=HELLOWORLD getnewaddress)
echo $newaddress
# Copy the returned address for use on the other node
```

### Node2

```bash
# Send ten coins to the address generated on the first node
./komodo-cli -ac_name=HELLOWORLD sendtoaddress Address_from_the_first_node 10
```

### Node1

```bash
./komodo-cli -ac_name=HELLOWORLD getreceivedbyaddress <insert address_from_the_first_node> 0
# The 0 argument in the above command instructs the daemon to include the unconfirmed coin balance in the response
```

</collapse-text>

More info can be found in the debug.log of the chain found at:

- **MacOS:** `~/.komodo/HELLOWORLD/debug.log`
- **Windows:** `%appdata%\komodo\HELLOWORLD\debug.log`
- **GNU/Linux:** `~/.komodo/HELLOWORLD/debug.log`

## Querying the Smart Chain

Using the `komodo-cli` software, which is included in any default installation of `komodod`, you can now execute many commands on your new Smart Chain. This enables you to perform transactions, create and execute smart contracts, store data in KV storage, etc.

Since the Komodo software began as a fork of Zcash and BTC, essentially all commands that are available on these two upstream blockchains are also available on your new Smart Chain.

Furthermore, a key purpose of the Komodo blockchain is to create features and functions that facilitate and enhance your development experience. Information regarding these enhancements is available throughout this documentation.

In addition, since you are building on a Komodo-based blockchain, you have easy access to our multi-coin wallet and atomic-swap powered decentralized exchange, [AtomicDEX](../installations/basic-instructions.html#komodo-s-native-dex-barterdex), the Antara development framework and modules, our decentralized-ICO software, and our future upgrades.

## Example commands

To see general information about your new Smart Chain, execute this command:

`./komodo-cli -ac_name=HELLOWORLD getinfo`

The following command returns information about all available RPC and API commands:

`./komodo-cli -ac_name=HELLOWORLD help`

## Secure this Smart Chain with Delayed Proof of Work

Your new Smart Chain can receive the same security of the Bitcoin hash rate through our security mechanism, called "delayed Proof of Work" (dPoW).

There are two aspects to the cost for dPoW services. The first comes from the cost of making records in your Smart Chain's database, and in the records of the KMD main chain. These records are called "notarizations."

Notarizations are performed as transactions on your blockchain and on the main KMD blockchain. The transactions have messages included inside that indicate the most recent and secure state of your Smart Chain. Your Komodo Smart Chain will know how to recognize and rely on notarizations automatically.

Every ten to twenty minutes, our notary nodes will hash the history of your Smart Chain and insert it as a record into the KMD main chain. This provides an initial layer of security, but it is not the final layer.

In another ten to twenty minutes, all of the information in the KMD chain (including your Smart Chain's hashed data) is hashed and inserted into the BTC blockchain. Once your information is pushed into BTC, your Smart Chain will consider all notarized information effectively settled and immutable; only the recent, un-notarized transactions are still relying on your Smart Chain's raw consensus mechanism. [Click here to learn more about the types of consensus mechanisms you can choose on a KMD Smart Chain](../installations/asset-chain-parameters.html#ac-staked).

Thus, your Smart Chain will have all the power of Bitcoin securing your blockchain's history, with the zero-knowledge privacy of the Zcash parameters pre-installed, and all of the interoperability, scalability, and more that Komodo adds to your development experience.

As the notarizations are transactions, they naturally have a cost, and this cost is covered by you, the Smart Chain developer. Over the course of a year, assuming consistent activity, the cost for performing these transactions is 365 KMD, and also 365 of your Smart Chain's coins.

There are extra costs involved that are aimed to compensate the Notary Nodes for the setup and maintainance of the dPOW service. You may reach out to our third-party service providers to receive a quote. They can provide various services related to Smart Chain creation, electrum-server (SPV) setup and maintenance, explorer setup, and other blockchain services.

[<b>Click Here for the List of Third-Party Service Providers</b>](../../../basic-docs/start-here/about-komodo-platform/orientation.html#production-smart-chains-typically-require-komodo-s-security-services)

Several teams have already signed up for our services and are developing on our platform. From our experience with them we can confidently say that our pricing is competitive compared to other blockchain services. Furthermore, when considering that a Komodo-based Smart Chain does not require KMD for gas and transaction fees, the cost to your end-users can be exponentially cheaper. All things considered, creating a fully independent blockchain on Komodo can cost but a small fraction of what it would cost to deploy a single smart contract on the platforms of some of our competitors.

### A Note About Low-Activity Blockchains

Blockchain technology relies on a network of users using the blockchain and sharing data to function. 

Smart Chains that are built for low-activity networks require extra steps from the developer to ensure proper syncing between nodes.

If you are building a Smart Chain and would like more information on maintaining constant syncing across nodes, our [<b>third-party service providers</b>](../../../basic-docs/start-here/about-komodo-platform/orientation.html#production-smart-chains-typically-require-komodo-s-security-services) can provide dedicated support for this topic. Please also reach out to our support team and community on [<b>Discord.</b>](https://komodoplatform.com/discord)
# Creating a Smart Chain on a Single Node

## Introduction

Under most circumstances, a developer should [use two separate nodes to set up and create a Smart Chain.](../../../basic-docs/smart-chains/smart-chain-tutorials/create-a-default-smart-chain.html)

However, occasionally a developer may need to create a Smart Chain on a single node.

In this situation, the developer may create a Smart Chain by running two daemons with slightly different configurations on the same node.

#### Tutorial Prerequisites

- Komodo Smart Chain software installed on a compatible machine
  - [Install instructions here](../../../basic-docs/smart-chains/smart-chain-setup/installing-from-source.html)

## Launch the First daemon

Select the desired Antara customization parameters.

[Link to Antara Customization Parameters](../../../basic-docs/antara/antara-setup/antara-customizations.html)

For this example, we use simple configurations.

##### Command

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777
```

##### Response (truncated)

Search for the part of the response that begins with this string: `>>>>>>>>>`

```bash
>>>>>>>>>> HELLOWORLD: p2p.14165 rpc.14166 magic.01362c2a 20327466 777777 coins
```

The default `p2p` and `rpc` ports of our chain are `14165` and `14166` respectively.

#### Test komodo-cli

To interact with this first daemon, use a `komodo-cli` command as follows.

```bash
./komodo-cli -ac_name=HELLOWORLD getinfo
```

## Create a Data Directory for the Second Daemon

Create a directory on your machine for the second daemon.

In this guide, we use a directory named `coinData` in the Home directory:

```bash
mkdir ~/coinData
```

Create the data directory for the second daemon.

```bash
mkdir ~/coinData/HELLOWORLD
```

Copy the `.conf` file created for the first daemon to this new data directory.

```bash
cp ~/.komodo/HELLOWORLD/HELLOWORLD.conf ~/coinData/HELLOWORLD/
```

Change the values of `rpcuser`, `rpcpassword`, and `rpcport` in the file `~/coinData/HELLOWORLD/HELLOWORLD.conf`.

##### The HELLOWORLD.CONF File

```
rpcuser=changethis
rpcpassword=changethis
... (ommitted) ...
rpcport=12345
```

(Change all values shown above on the right side of the `=` side.)

Add a new line `port=<choose a port number betwen 1 and 65000>` to the file.

```
... (file continued) ...
port=22020
```

In all values above, the chosen values must be different from the values in the first daemon's .conf file. 

## Launch the Second daemon

When launching the second daemon, use the same Antara customization parameters as the first daemon.

However, now we specify the data directory for the daemon, as well as the `p2p` connection.

To accomplish this, we use the <b>datadir</b> and <b>addnode</b> common launch parameters.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -datadir=/home/<USERNAME>/coinData/HELLOWORLD -addnode=localhost
```

::: tip

Replace `<USERNAME>` with the USERNAME for your local node. You can find this value use the `echo $USER` command in the terminal.

:::

To interact with the second daemon, add the <b>datadir</b> parameter to the `komodo-cli` command:

```bash
./komodo-cli -ac_name=HELLOWORLD -datadir=/home/<USERNAME>/coinData/HELLOWORLD getinfo
```

After launching the second daemon, calling `getinfo` to either of the daemons should report `"connections":1`.

## Using curl

To issue a `getinfo` call using curl, observe the following example.

Replace `<rpcuser>`, `<rpcpassword>`, `<rpcport>` with the values from the `.conf` file in the data directory corresponding to the daemon that needs to be queried.

```bash
curl -s --user <rpcuser>:<rpcpassword> --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "getinfo", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:<rpcport>/
```

Alternatively, source the `.conf` file before using the curl command. Each time you desire to switch daemons, source the `.conf` file of your target daemon.

##### Source the First Daemon's .conf File

```bash
# Source the .conf file

source ~/.komodo/HELLOWORLD/HELLOWORLD.conf

# Execute the curl command

curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "getinfo", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

##### Source the Second Daemon's .conf File

```bash
# Source the .conf file

source ~/coinData/HELLOWORLD/HELLOWORLD.conf

# Execute the curl command

curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "getinfo", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```
# Introduction to Smart Chain Tutorials

Welcome to the Komodo Smart Chain tutorial documentation.

This section contains tutorials that are specifically designed only for the essential aspects of Smart Chain software. These tutorials often focus on technology that is available to Komodo via upstream technologies, such as Bitcoin or Zcash.

For tutorials regarding other Komodo software, such as <b>Antara</b>, which focuses on Komodo enhancement technologies, or <b>AtomicDEX</b>, which offers cross-chain atomic-swap compatibility, please see their respective documentation centers.

For a targeted learning approach to Komodo's Smart Chain software, please see the Learning Launchpad.

[<b>Link to Learning Launchpad</b>](../../../basic-docs/start-here/learning-launchpad/learning-path-outlines.html)


# Multisignature Transaction Creation and Walkthrough

## Introduction

Multisignature (multisig) is a technology used to increase the number of signatures required for a transaction from an address. This provides an additional layer of security to cryptocurrency transactions.

In this guide we demonstrate the creation and usage of a `2of2` multisignature wallet. We use two nodes with the KMD main chain.

To accomplish the same task on another Komodo Smart Chain, add `-ac_name=NAMEOFCHAIN` to each command.

## Get a New Address, Public Key, and Private Key

Create addresses on two nodes. We will combine these two addresses into a single multisig address.

## Node One

#### Generate a New Address

##### Command

```
./komodo-cli getnewaddress
```

##### Response

```
RDomQ4tftJGjcHBVpAUx549jZfxtJx74r5
```

#### Get the Public Key Using validateaddress

##### Command

```shell
./komodo-cli validateaddress RDomQ4tftJGjcHBVpAUx549jZfxtJx74r5
```

##### Response 

```JSON
{
  "isvalid": true,
  "address": "RDomQ4tftJGjcHBVpAUx549jZfxtJx74r5",
  "scriptPubKey": "76a91431a8cbc716e21238079729d46cb655ae7fadc9e388ac",
  "segid": 37,
  "ismine": true,
  "iswatchonly": false,
  "isscript": false,
  "pubkey": "02dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a26",
  "iscompressed": true,
  "account": ""
}
```

#### Get the Private Key

##### Command

```shell
./komodo-cli dumpprivkey RDomQ4tftJGjcHBVpAUx549jZfxtJx74r5
```

##### Response

```
DO_NOT_USEBnFx9R6iaPmWaBX8iqHzRpFRjNp8kBEQYKNt
```

#### A Summarization of Data from Node One

```
# address: RDomQ4tftJGjcHBVpAUx549jZfxtJx74r5
# pubkey:  02dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a26
# privkey: UrunDGyFJu5UFZG7BnFx9R6iaPmWaBX8iqHzRpFRjNp8kBEQYKNt
```

## Node Two

Follow the same steps.

#### Generate a New Address

##### Command

```shell
./komodo-cli getnewaddress
```

##### Response

```
RBqZ6nHcANekX3zxF9y4zRyfB6X8VEWF7s
```

#### Get the Pubkey Value Using validateaddress

##### Command

```shell
./komodo-cli validateaddress RBqZ6nHcANekX3zxF9y4zRyfB6X8VEWF7s
```

##### Response

```JSON
{
  "isvalid": true,
  "address": "RBqZ6nHcANekX3zxF9y4zRyfB6X8VEWF7s",
  "scriptPubKey": "76a9141c0f1c482d38c43bb847506a527521d2204afe6588ac",
  "segid": 38,
  "ismine": true,
  "iswatchonly": false,
  "isscript": false,
  "pubkey": "032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a2816",
  "iscompressed": true,
  "account": ""
}
```

#### Get the Private Key

##### Command

```shell
./komodo-cli dumpprivkey RBqZ6nHcANekX3zxF9y4zRyfB6X8VEWF7s
```

##### Response

```
UsuE7jG8BD1CV2xuCoBCwgzzbs4HqZ2P2im5fdyJmP2tSd3arAv7
```

#### Summarization of Data From Node Two

```
address: RBqZ6nHcANekX3zxF9y4zRyfB6X8VEWF7s
pubkey:  032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a2816
privkey: UsuE7jG8BD1CV2xuCoBCwgzzbs4HqZ2P2im5fdyJmP2tSd3arAv7
```

## Create a Multisig Address

Combine the pubkeys to create a `2of2` multisig address. 

A `2of2` address requires that both addresses sign for every transaction.

::: tip

You can customize the signature requirements for essentially any combination. For example, you can make a <b>3of5</b> multisig address that requires <b>3</b> of <b>5</b> available addresses for each transaction.

:::

Execute the following command on either node. The command returns the `redeemScript` json object, which is required to spend funds.

##### Command

```shell
./komodo-cli createmultisig 2 '["02dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a26","032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a2816"]'
```

##### Response

```JSON
{
  "address": "bEP3HK73CboW8tGN8obyHUQteBzYjFzgNm",
  "redeemScript": "522102dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a2621032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a281652ae"
}
```

## Fund the multisig Address

Fund the multisig address. 

(You may use either node.)

##### Command

```shell
./komodo-cli sendtoaddress bEP3HK73CboW8tGN8obyHUQteBzYjFzgNm 7.77
```

##### Response

```
194fea388c5474ae25d261d8c57213b79f9a111e774caeea066f796ddd99e81c
```

## Create the Raw Transaction

As input we use the unspent vout of the transaction used to create the multisig address. We also place our desired target destination address in the transaction.

In this example, we send the full `7.77` sum to the destination address.

If you do not want to send the full amount, you must manually specify the "change" address and state how much of the change you desire to keep.

Recall that any amount taken from the initial utxo and not included in either the destination address, or in the change address, will automatically be given to the miners as a mining fee. 

##### Command

```shell
./komodo-cli createrawtransaction '[{"txid":"194fea388c5474ae25d261d8c57213b79f9a111e774caeea066f796ddd99e81c","vout":1}]' '{"RP81MSVu39QgXhGDHfnk9d9KMnp4vhEVBu":7.77}'
```
##### Response

```
0400008085202f89011ce899dd6d796f06eaae4c771e119a9fb71372c5d861d225ae74548c38ea4f190100000000ffffffff014014502e000000001976a91497d5106d5f69619803eb8d72a2bf45a4f033338a88ac00000000a80000000000000000000000000000
```

## Sign the Raw Transaction

Sign the raw transaction using both nodes.

## Sign Using Node One

##### Command

```shell
./komodo-cli signrawtransaction "0400008085202f89011ce899dd6d796f06eaae4c771e119a9fb71372c5d861d225ae74548c38ea4f190100000000ffffffff014014502e000000001976a91497d5106d5f69619803eb8d72a2bf45a4f033338a88ac00000000a80000000000000000000000000000" '[{"txid":"194fea388c5474ae25d261d8c57213b79f9a111e774caeea066f796ddd99e81c","vout":1,"scriptPubKey":"a914121cbc7a828772bd4612bc7b9765cbbf13d0b3cc87","redeemScript":"522102dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a2621032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a281652ae","amount":7.77}]' '["UrunDGyFJu5UFZG7BnFx9R6iaPmWaBX8iqHzRpFRjNp8kBEQYKNt"]'
```

##### Response

```JSON
{
  "hex": "0400008085202f89011ce899dd6d796f06eaae4c771e119a9fb71372c5d861d225ae74548c38ea4f19010000009200483045022100a5f4bdf5b61a4f4baf0b5b48f69488b8f752e36cbac23ec0c762bba99552ac9e022036e658c7c8c19ec4bd423fcc6a109a811b189311fc874dd466e58a1755ef4e940147522102dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a2621032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a281652aeffffffff014014502e000000001976a91497d5106d5f69619803eb8d72a2bf45a4f033338a88ac00000000a80000000000000000000000000000",
  "complete": false,
  "errors": [
    {
      "txid": "194fea388c5474ae25d261d8c57213b79f9a111e774caeea066f796ddd99e81c",
      "vout": 1,
      "scriptSig": "00483045022100a5f4bdf5b61a4f4baf0b5b48f69488b8f752e36cbac23ec0c762bba99552ac9e022036e658c7c8c19ec4bd423fcc6a109a811b189311fc874dd466e58a1755ef4e940147522102dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a2621032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a281652ae",
      "sequence": 4294967295,
      "error": "Operation not valid with the current stack size"
    }
  ]
}
```

## Sign Using Node Two

Use the hex value from node one, but change the privkey to the privkey of node two's address.

##### Command

```shell
./komodo-cli signrawtransaction "0400008085202f89011ce899dd6d796f06eaae4c771e119a9fb71372c5d861d225ae74548c38ea4f19010000009200483045022100a5f4bdf5b61a4f4baf0b5b48f69488b8f752e36cbac23ec0c762bba99552ac9e022036e658c7c8c19ec4bd423fcc6a109a811b189311fc874dd466e58a1755ef4e940147522102dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a2621032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a281652aeffffffff014014502e000000001976a91497d5106d5f69619803eb8d72a2bf45a4f033338a88ac00000000a80000000000000000000000000000" '[{"txid":"194fea388c5474ae25d261d8c57213b79f9a111e774caeea066f796ddd99e81c","vout":1,"scriptPubKey":"a914121cbc7a828772bd4612bc7b9765cbbf13d0b3cc87","redeemScript":"522102dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a2621032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a281652ae","amount":7.77}]' '["UsuE7jG8BD1CV2xuCoBCwgzzbs4HqZ2P2im5fdyJmP2tSd3arAv7"]'
```

##### Response

```JSON
{
  "hex": "0400008085202f89011ce899dd6d796f06eaae4c771e119a9fb71372c5d861d225ae74548c38ea4f1901000000da00483045022100a5f4bdf5b61a4f4baf0b5b48f69488b8f752e36cbac23ec0c762bba99552ac9e022036e658c7c8c19ec4bd423fcc6a109a811b189311fc874dd466e58a1755ef4e940147304402200abc8c1e1e26090a7012df8859a3986229da34b0edd82c42a64efc8b89390e6702202582cbdce3de13fe59196228d4d0a6a80916e23ccb343f1cf32515688a938ebb0147522102dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a2621032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a281652aeffffffff014014502e000000001976a91497d5106d5f69619803eb8d72a2bf45a4f033338a88ac00000000a80000000000000000000000000000",
  "complete": true
}
```

## Step 6 - Broadcast the transaction

Broadcast the raw hex to finish send the transaction.

##### Command

```shell
./komodo-cli sendrawtransaction 0400008085202f89011ce899dd6d796f06eaae4c771e119a9fb71372c5d861d225ae74548c38ea4f1901000000da00483045022100a5f4bdf5b61a4f4baf0b5b48f69488b8f752e36cbac23ec0c762bba99552ac9e022036e658c7c8c19ec4bd423fcc6a109a811b189311fc874dd466e58a1755ef4e940147304402200abc8c1e1e26090a7012df8859a3986229da34b0edd82c42a64efc8b89390e6702202582cbdce3de13fe59196228d4d0a6a80916e23ccb343f1cf32515688a938ebb0147522102dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a2621032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a281652aeffffffff014014502e000000001976a91497d5106d5f69619803eb8d72a2bf45a4f033338a88ac00000000a80000000000000000000000000000
```

##### Response

```
23c2aaaf458ada3f171ee5d274e8dcfc91b62099ec15e4b2d02da2b2d1172cb1
```

The above is the output txid which can be used in an online KMD block explorer to verify the transaction.

## Useful Links 
- [Detailed Article in the Russian Language](https://medium.com/@decker.komodo/%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BC%D1%83%D0%BB%D1%8C%D1%82%D0%B8%D0%BF%D0%BE%D0%B4%D0%BF%D0%B8%D1%81%D0%B5%D0%B9-multisig-%D0%B2-komodo-9d8f8c48da52)
- [Multisig Web Tool](https://deckersu.github.io/coinbin/#newMultiSig)

# Running Komodo Software in Debug Mode

## Introduction

To run Komodo software in debug mode, follow these steps.

## Install gdb

```bash
sudo apt-get install gdb
```

## Run Komodo Daemon With `gdb` Tool

Initiate your daemon using with `gdb -args` as a prefix.

For example, the below command would initiate the Komodod daemon with mining active and a designated pubkey.

```bash
gdb -args ./src/komodod -gen -genproclimit=2 -pubkey="03af2412ebf9517a43d192193490476fd0a44312c70755e07eb03b6d71338ebc9d"
```
::: tip

If you are having trouble initiating komodod in the shell, try use the absolute path to komodod. For example, <b>/home/$USERNAME/komodo/src/komodod</b>

:::

The shell should return the following prompt.

```bash
gdb>
```

Execute `run` in the shell to start Komodo in debug mode.

```bash
gdb> run
```

## Retrieving Backtrace Data

Whenever komodod crashes, you will again see `gdb>` as a prompt.

To recall the last stages of komodod before the crash, execute the following command.

##### Command

```bash
gdb> backtrace
```

The returned data can be shared with any Komodo developer to assist in troubleshooting Komodo development.

Select and highlight all relevant data using the cursor, and then use `CTRL + SHIFT + C` to copy to the clipboard.
# Smart Chain API Basics

## API Tutorials: Introduction

The following tutorial can assist in gaining hands-on experience with the essential Smart Chain API.

In this tutorial, we create two new blockchains, called RT1 & RT2. 

The first blockchain, RT1, demonstrates the fundamental API concepts, such as how to create and utilize a simple test blockchain, how to query a blockchain for data, etc.

The RT2 blockchain demonstrates the creation of a custom application-specific blockchain that <!--Sidd: Mylo, your original sentence cut off here -->

For simplicity's sake, we use the blockchain [<b>regtest</b>](../installations/common-runtime-parameters.html#regtest) feature, which allows us to run a blockchain on a single node without having to connect to a network. 

After the tutorial, the developer should be able to repeat the same concepts on live and fully functional Komodo Smart Chains, assuming the Smart Chain in question has the proper CC features enabled.

#### Tutorial Topics Outline

Topics covered in this tutorial include:

- How to create a simple Smart Chain for testing purposes
- How to execute a komodo-cli command to query the blockchain for existing data
- How to execute a curl command for the same purpose
- Understanding common API methods ("RPC's")
- Understanding common technology concepts in the Komodo ecosystem


### Tutorial Prerequisites

#### komodod and komodo-cli

The following tutorials assume that you have already [compiled the Komodo daemon](https://docs.komodoplatform.com/komodo/installation.html), and that you have used the default `~/komodo/src` directory as the root Komodo software directory.

As with all software related to `komodod`, at the command line we use the terminal-based `komodo-cli` software, and the `curl` command, to access the daemon. 

## Komodo API Fundamentals Tutorial

### Create a Regtest Blockchain

The quickest way to establish your own development environment is to use the [<b>regtest</b>](../installations/common-runtime-parameters.html#regtest) feature. 

In regtest mode, the daemon creates a blockchain that is almost fully functional, save for a few exceptions. Two of the exceptions are that the chain runs on a single host, and the user instructs the daemon on when and how to perform new blocks (as opposed to receiving new blocks from a decentralized network of miners).

The command to create our `RT1` regtest chain is as follows:

```bash
./komodod -regtest -ac_name=RT1 -ac_supply=1000 &
```

##### ac_supply

Note the `-ac_supply=1000` argument. This is the total number of coins we desire when the blockchain spawns. 

For more information, refer to the [<b>ac_supply</b>](../installations/asset-chain-parameters.html#ac-supply) launch parameter.

##### ac_name

Also note the `-ac_name=RT1` argument. This is the blockchain ticker name we desire. For more information, refer to the [<b>ac_name</b>](../installations/asset-chain-parameters.html#ac-name) launch parameter.

There are many additional parameters that you can explore later in the [Smart Chain Parameters](../installations/asset-chain-parameters.html) documentation.

##### Observe the Response

The daemon will return a response similar to the following: 

```
[1] 22892
ASSETCHAINS_SUPPLY 1000
MAX_MONEY 106320417438 1063.20417438
Created (/home/mylo/.komodo/RT1/RT1.conf)
call komodo_args.(./komodod) NOTARY_PUBKEY.()
>>>>>>>>>> RT1: p2p.13100 rpc.13101 magic.fd772ab9 4252445369 1000 coins
initialized RT1 at 1555581638
finished loading blocks RT1
fAddressIndex.0/0 fSpentIndex.0/0
height.0 slowflag.1 possible.1 cmp.0
```

From the response, note the following information:

##### Smart Chain Supply

```
ASSETCHAINS_SUPPLY 1000
```

We see the 1000 coin initial supply.

##### Configuration File Location

```
Created (/home/mylo/.komodo/RT1/RT1.conf)
```

This is the location of the configuration file.

Placing the configuration data here follows the Komodo convention of placing all relevant data for a Smart Chain in a subdirectory contained in the `~/.komodo/` directory. The new subdirectory for our regtest chain is named after the `RT1` value we gave to the `ac_name` parameter.

##### Relevant RPC Data

```
>>>>>>>>>> RT1: p2p.13100 rpc.13101 magic.fd772ab9 4252445369 1000 coins
``` 

This information is the blockchain name, its network ports used for p2p (13100), and RPC control (13101).  The magic number is a number the Komodo daemon uses for network purposes, and the number of coins is informational.

##### Explanation of All Initial Daemon Output

Here is an explanation of all of the output, as it appears in the above response. Many of the actual values will be different on your machine, although the underlying purpose of the value is the same.

| Value | Description |
| ----- | ----------- |
| [1] 22892 | the process number; the value is dependent on your machine and will be different | 
| ASSETCHAINS_SUPPLY 1000 | the number of coins when the blockchain initiates for its first time |
| MAX_MONEY 106320417438 1063.20417438 | this value is not important at this time; it states that 100 billion coins is the maximum possible amount the blockchain can mathematically support |
| Created (/home/mylo/.komodo/RT1/RT1.conf) | the location of the configuration file |
| call komodo_args.(./komodod) NOTARY_PUBKEY.() | this value specifies where the new coins from block rewards are sent; by default, the coins will be sent to your node's local wallet |
| >>>>>>>>>> RT1: p2p.13100 rpc.13101 magic.fd772ab9 4252445369 1000 coins | the blockchain name, its network ports and RPC controls; the magic number is used in Komodo networking and the number of coins derives from the <b>ac_supply</b> parameter included at runtime |  
| initialized RT1 at 1555581638 | the time in seconds, past epoch, when the blockchain was initialized | 
| finished loading blocks RT1 | informational |
| fAddressIndex.0/0 fSpentIndex.0/0 | informational and can be ignored for now |
| height.0 slowflag.1 possible.1 cmp.0 | informational and can be ignored for now |

### Querying the Blockchain Using komodo-cli

With the regtest Smart Chain operational we are prepared to execute our first API call. 

#### Access a Daemon via komodo-cli on a Smart Chain

When using `komodo-cli` to access the daemon of a Smart Chain, we must add an additional argument to each terminal input.

This required argument is the name of the Smart Chain for which the user desires `komodo-cli` to connect. The name is provided in the same format used to launch the chain. 

In our tutorial, the argument is: `-ac_name=RT1`

Furthermore, as we are using the regtest feature, we must also include the `-regtest` argument with each terminal input.

Therefore, each `komodo-cli` terminal input will begin with the following:

```bash
./komodo-cli -regtest -ac_name=RT1 INSERT_API_CALL_HERE INSERT_ARGUMENTS_HERE
```

#### Using the getinfo API Method

The [<b>getinfo</b>](../komodo-api/control.html#getinfo) API method does not require any additional parameters when called and provides useful information about our chain.

To execute the method in the terminal we can use the `komodo-cli` software.

#### Command

```bash
./komodo-cli -regtest -ac_name=RT1 getinfo
```

#### Response

```json
{
  "version": 2001526,
  "protocolversion": 170007,
  "KMDversion": "0.3.3b",
  "notarized": 0,
  "prevMoMheight": 0,
  "notarizedhash": "0000000000000000000000000000000000000000000000000000000000000000",
  "notarizedtxid": "0000000000000000000000000000000000000000000000000000000000000000",
  "notarizedtxid_height": "mempool",
  "KMDnotarized_height": 0,
  "notarized_confirms": 0,
  "walletversion": 60000,
  "balance": 0.00000000,
  "blocks": 0,
  "longestchain": 0,
  "timeoffset": 0,
  "tiptime": 1296688602,
  "connections": 0,
  "proxy": "",
  "difficulty": 1,
  "testnet": false,
  "keypoololdest": 1555581641,
  "keypoolsize": 101,
  "paytxfee": 0.00000000,
  "relayfee": 0.00000100,
  "errors": "",
  "name": "RT1",
  "sapling": -1,
  "p2pport": 13100,
  "rpcport": 13101,
  "magic": -42521927,
  "premine": 1000
}
```

Note the `blocks` count of zero `0` and the `balance` sum of `0`. While our regtest chain's daemon is operational, we have yet to mine the genesis block and collect the initial coin value. 

### Querying the Blockchain Using curl

Alternatively, we can execute the [<b>getinfo</b>](../komodo-api/control.html#getinfo) method using the Unix `curl` command. 

##### Sourcing the Configuration File

The `curl` command will also need information about which Smart Chain daemon the user desires to connect. However, the `curl` command will receive these instructions in a different manner.

The user must provide the `myrpcuser`, `myrpcpassword`, and `myrpcport` values from the Smart Chain's configuration file.

The configuration file is automatically generated on Smart Chain creation, and is formatted for use with the Unix `source` command. 

To import all values into our terminal process environment, execute the following:

```bash
source ~/.komodo/RT1/RT1.conf
```

We can test that the variables were loaded correctly with the following commands:

```bash
echo $rpcuser $rpcpassword $rpcport
```

The terminal should return the values from the configuration file. 

##### Executing the curl Command

With these variables set we can now easily use the `curl` command to execute the `getinfo` API method:

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "getinfo", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

We execute the `curl` command with `-s` silent option; this mutes irrelevant response data.

The `$rpcuser:$rpcpassword` and the `...$rpcport` arguments utilize our sourced environment variables.

The HTTP header `-H`, `--data-binary`, and `content-type: text/plain;` arguments instruct `curl` to reply with a json object.

Without further intervention, the returned json response will be unformatted and difficult to read.

To improve readability, the developer may optionally install and utilize the `jq` terminal software.

[Link to download and install <b>jq</b>](https://stedolan.github.io/jq/download/)

Once installed, add a `|` pipe and a ` jq '.'` reference at the end of the curl command:

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "getinfo", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

This should return a well formatted json object.

## Preparing Your Local Wallet

The wallet is not part of the blockchain. Rather, it is a separate application that tracks your private keys and grants access to them upon user request. This separate application is built into the Komodo daemon and can be accessed using the API. 

Common API commands include the following:

| Command | Description |
| ------- | ----------- |
|[<b>getnewaddress</b>](../komodo-api/wallet.html#getnewaddress) | get a new address |
| [<b>validateaddress</b>](../komodo-api/util.html#validateaddress) | get the public key of the new address; used often when developing a custom application-specific blockchain |
| [<b>dumpprivkey</b>](../komodo-api/wallet.html#dumpprivkey) | get the private key of an address |

We save details from each response, so that we may avoid continually obtaining new wallet keys.

The next two sections demonstrate how to obtain a new private key. The first section uses `komodo-cli` software, and the second section repeats the same API steps using the `curl` command.

### Preparing Your Wallet Using komodo-cli

#### getnewaddress

To obtain a new address, we use the `getnewaddress` API method:

```bash
./komodo-cli -regtest -ac_name=RT1 getnewaddress
```

Response:

```json
RHGqU4BPHsTve4jUJtJobAaf8SieYUzeFs
```

Your response will be a different address of the same format.

#### validateaddress

To obtain the public key, also called the "pubkey", we use the `validateaddress` API method.

```
./komodo-cli -regtest -ac_name=RT1 validateaddress RHGqU4BPHsTve4jUJtJobAaf8SieYUzeFs
```

Response:

```
{
  "isvalid": true,
  "address": "RHGqU4BPHsTve4jUJtJobAaf8SieYUzeFs",
  "scriptPubKey": "76a91457afccfe042ee068257f95873e1fd3cd4aa210ad88ac",
  "segid": 28,
  "ismine": true,
  "iswatchonly": false,
  "isscript": false,
  "pubkey": "0350dd9b828e92600166dd74e521ac8510eb39064dfb30111c990396864542ce56",
  "iscompressed": true,
  "account": ""
}
```

Make a note of the `pubkey` value. We will use it towards the end of the tutorial.

#### dumpprivkey

Use the response from `getnewaddress` as an argument for the `dumpprivkey` API method.

```bash
./komodo-cli -regtest -ac_name=RT1 dumpprivkey RWbzxx8tKncvcVBzBCetMsPRrcB3YFsXhw
```

```json
REDACTED_FOR_TUTORIAL
```
The response is the private key for this address.

The private key should never be shared under any circumstances. We have redacted the response for this tutorial.

### Preparing Your Wallet Using curl

#### getnewaddress

A `curl` command to obtain a new address using the `getnewaddress` API method.

##### Command

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "getnewaddress", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

##### Response

```json
{
  "result": "RYNBgpcanNdfy4oGLbnVYnPPtu5JWcZM8B",
  "error": null,
  "id": "curltest"
}
```

#### validateaddress

A `curl` command to obtain the `pubkey` using the `validateaddress` API method.

##### Command

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "validateaddress", "params": ["RYNBgpcanNdfy4oGLbnVYnPPtu5JWcZM8B"]}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

##### Response

```json
{
  "result": {
    "isvalid": true,
    "address": "RYNBgpcanNdfy4oGLbnVYnPPtu5JWcZM8B",
    "scriptPubKey": "76a914fd3ca56e0dc10a080c1d351b42c75bd82fc76d2288ac",
    "segid": 56,
    "ismine": true,
    "iswatchonly": false,
    "isscript": false,
    "pubkey": "03cb108cdb893a4a6c72c2fe23768929ada335103c6fa2bea428f5204bd051dacc",
    "iscompressed": true,
    "account": ""
  },
  "error": null,
  "id": "curltest"
}
```

#### dumpprivkey

A `curl` command to obtain the `pubkey` using the `validateaddress` API method.

##### Command

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "dumpprivkey", "params": ["RYNBgpcanNdfy4oGLbnVYnPPtu5JWcZM8B"]}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

##### Response

```json
{
  "result": "REDACTED_FOR_TUTORIAL",
  "error": null,
  "id": "curltest"
}
```

## Generating Blocks and Getting the New Coins

When connecting to an existing blockchain that already has a populated network of miners or stakers, the user does not need to be concerned about how blocks are generated.

However, in this tutorial we are running a regtest chain, and therefore we must instruct the daemon to generate new blocks.

This also provides us with a useful opportunity to discuss the nature of simple mining in the Komodo ecosystem. The methods we discuss here reflect mining on a proof-of-work based Smart Chain. 

The reader should be aware that Komodo also offers proof-of-stake mining, and hybrid models that blend proof-of-work with proof-of-stake. For more information, the reader may turn to the [<b>ac_staked</b>](../installations/asset-chain-parameters.html#ac-staked) feature.

Here are several common API methods for mining:

| Command | Description |
| ------- | ----------- |
| [generate](../komodo-api/generate.html#generate) | the number of blocks to generate |
| [getblock](../komodo-api/blockchain.html#getblock) | query information about a block |
| [gettransaction](../komodo-api/wallet.html#gettransaction) | query a transaction |

In a moment, we will use these commands to generate new blocks on our regtest chain, and in the process of generating, the blockchain will create new coins.

#### Understanding the Coinbase Transaction

The reader should be aware of the manner in which a blockchain creates new coins. 

When a blockchain initiates for the first time, and before it has mined the first block, the total sum of coins on the blockchain is always `0`. 

To add coins into the total coin supply, the blockchain must mint new coins. This minting process occurs in a special transaction that is included as the first transaction in each block of the blockchain. 

This transaction is called the `coinbase` transaction.

While every other transaction on the blockchain can only take coins from the existing supply, the `coinbase` transaction may create new coins from nothing.

These new coins can be sent to any number of locations. The rules of the blockchain, as set by the blockchain's developer, determine how many coins are minted, and who receives the coins. 

For more information about how to customize your `coinbase` transactions on a Komodo Smart Chain, observe the many different customization parameters in the [Custom Smart Chain Parameters](../installations/asset-chain-parameters.html#ac-name) documentation.

For example, read about [<b>ac_reward</b>](../installations/asset-chain-parameters.html#ac-reward), [<b>ac_eras</b>](../installations/asset-chain-parameters.html#ac-eras), [<b>ac_founders</b>](../installations/asset-chain-parameters.html#ac-founders), and many others.

In our tutorial, when we mine our first block, all of the `1000` new coins we indicated will be mined in the first block's `coinbase` transaction. By default, these coins are distributed immediately into our own local wallet. 

### Generating Blocks Using komodo-cli

#### generate

We now generate a few blocks using the `generate` API method.

##### Command

```bash
./komodo-cli -regtest -ac_name=RT1 generate 2
```

##### Response

```json
[
  "0d2701895c90f48d80156fbe349bda661c80f38ad6b75acc2294763e348b4eab",
  "0de2bb48b3a3ef47d5ece90b1ffeccc81b9609879ab86cc03a77cf248adea25d"
]
```

The response contains an array of blockhashes. These are the hashes of the blocks generated.

#### getblock

To inspect the particular information about any given block, we use the `getblock` API method and include our desired blockhash as an argument.

```bash
./komodo-cli -regtest -ac_name=RT1 getblock 0d2701895c90f48d80156fbe349bda661c80f38ad6b75acc2294763e348b4eab
```

Alternatively, with `getblock` we can instead include the desired block `height` of the block we wish to inspect. 

In our case, we desire to inspect the genesis block, which is the first block ever mined on our Smart Chain. Therefore, the block `height` will be `1`.

##### Command

```bash
./komodo-cli -regtest -ac_name=RT1 getblock 1
```

##### Response

```json
{
  "hash": "0d2701895c90f48d80156fbe349bda661c80f38ad6b75acc2294763e348b4eab",
  "confirmations": 2,
  "rawconfirmations": 2,
  "size": 276,
  "height": 1,
  "version": 4,
  "merkleroot": "4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006",
  "segid": -1,
  "finalsaplingroot": "3e49b5f954aa9d3545bc6c37744661eea48d7c34e3000d82b7f0010c30f4c2fb",
  "tx": [
    "4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006"
  ],
  "time": 1555589136,
  "nonce": "0000d66a538f8cc7de721633f23e5d52649e5031a3f0a90e9821189e5b530056",
  "solution": "01de6014269f75bae931362838b75c5fc3e318c620d2a203d65b9d52691b3d056ae753fc",
  "bits": "200f0f0f",
  "difficulty": 1,
  "chainwork": "0000000000000000000000000000000000000000000000000000000000000022",
  "anchor": "59d2cde5e65c1414c32ba54f0fe4bdb3d67618125286e6a191317917c812c6d7",
  "blocktype": "mined",
  "valuePools": [
    {
      "id": "sprout",
      "monitored": true,
      "chainValue": 0.00000000,
      "chainValueZat": 0,
      "valueDelta": 0.00000000,
      "valueDeltaZat": 0
    },
    {
      "id": "sapling",
      "monitored": true,
      "chainValue": 0.00000000,
      "chainValueZat": 0,
      "valueDelta": 0.00000000,
      "valueDeltaZat": 0
    }
  ],
  "previousblockhash": "029f11d80ef9765602235e1bc9727e3eb6ba20839319f761fee920d63401e327",
  "nextblockhash": "0de2bb48b3a3ef47d5ece90b1ffeccc81b9609879ab86cc03a77cf248adea25d"
}
```

Note in the response the `tx` value.

```json

    ...

  "tx": [
    "4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006"
  ],

    ...

```

This value is an array containing all transactions performed within this block. Because it is the genesis block, and because we did not send any transactions on our blockchain, the only transaction is our `coinbase` transaction, wherein the `1000` coins were minted and sent to our local wallet.

#### gettransaction

To observe this transaction, we use the [<b>gettransaction</b>](../komodo-api/wallet.html#gettransaction) API method.

##### Command

```bash
./komodo-cli -regtest -ac_name=RT1 gettransaction 4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006
```

##### Response

```json
{
  "amount": 1000.07809721,
  "rawconfirmations": 2,
  "generated": true,
  "confirmations": 2,
  "blockhash": "0d2701895c90f48d80156fbe349bda661c80f38ad6b75acc2294763e348b4eab",
  "blockindex": 0,
  "blocktime": 1555589136,
  "expiryheight": 0,
  "txid": "4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006",
  "walletconflicts": [
  ],
  "time": 1555589136,
  "timereceived": 1555589136,
  "vjoinsplit": [
  ],
  "details": [
    {
      "account": "",
      "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
      "category": "generate",
      "amount": 1000.07809721,
      "vout": 0,
      "size": 98
    }
  ],
  "hex": "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff03510101ffffffff01b912ee4817000000232103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac1068b85c"
}
```

Note that the `amount` value is slightly higher than `1000`. This is normal. It is due to the internal mathematical complexities of a blockchain.

### Generating Blocks Using curl

#### generate

We have already generated the genesis block. The following is a sample of using `curl` with the `generate` API method to generate 5 blocks.

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "generate", "params": [5]}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

<collapse-text hidden title="Response">
```json
{
  "result": [
    "0561e5c9e81ff8823be080af1232a99c87c41cb208595da20cf461b4ed34f0a9",
    "0792db3d6976c16ead4c42d4a3fc949931979a0120aefb822b632758fb1968d4",
    "0975e3320f31cc4e06bb6cfba74ae6762517421535f3c1440c6e4c41cb2428df",
    "01102d09117d797253899b5b1a68a66d552e30fcc0fa964b4ab64005acfecf0b",
    "02f1df412f56aee2ea94380e7c59c10ed089481b3a37dc73b9c78577b73ce9f1"
  ],
  "error": null,
  "id": "curltest"
}
```
</collapse-text>

#### getblock

Here is a sample of using `curl` with the `getblock` API method on the blockhash of the genesis block.

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "getblock", "params": ["0d2701895c90f48d80156fbe349bda661c80f38ad6b75acc2294763e348b4eab"]}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

To use the block `height` instead, the `curl` command is formatted as follows.

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "getblock", "params": ["1"]}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

<collapse-text hidden title="Response">

```json
{
  "result": {
    "hash": "0d2701895c90f48d80156fbe349bda661c80f38ad6b75acc2294763e348b4eab",
    "confirmations": 2,
    "rawconfirmations": 2,
    "size": 276,
    "height": 1,
    "version": 4,
    "merkleroot": "4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006",
    "segid": -1,
    "finalsaplingroot": "3e49b5f954aa9d3545bc6c37744661eea48d7c34e3000d82b7f0010c30f4c2fb",
    "tx": [
      "4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006"
    ],
    "time": 1555589136,
    "nonce": "0000d66a538f8cc7de721633f23e5d52649e5031a3f0a90e9821189e5b530056",
    "solution": "01de6014269f75bae931362838b75c5fc3e318c620d2a203d65b9d52691b3d056ae753fc",
    "bits": "200f0f0f",
    "difficulty": 1,
    "chainwork": "0000000000000000000000000000000000000000000000000000000000000022",
    "anchor": "59d2cde5e65c1414c32ba54f0fe4bdb3d67618125286e6a191317917c812c6d7",
    "blocktype": "mined",
    "valuePools": [
      {
        "id": "sprout",
        "monitored": true,
        "chainValue": 0,
        "chainValueZat": 0,
        "valueDelta": 0,
        "valueDeltaZat": 0
      },
      {
        "id": "sapling",
        "monitored": true,
        "chainValue": 0,
        "chainValueZat": 0,
        "valueDelta": 0,
        "valueDeltaZat": 0
      }
    ],
    "previousblockhash": "029f11d80ef9765602235e1bc9727e3eb6ba20839319f761fee920d63401e327",
    "nextblockhash": "0de2bb48b3a3ef47d5ece90b1ffeccc81b9609879ab86cc03a77cf248adea25d"
  },
  "error": null,
  "id": "curltest"
}
```
</collapse-text>

#### gettransaction

Here is the `curl` command to retrieve the first block's `coinbase` transaction.

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "gettransaction", "params": ["4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006"]}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

<collapse-text hidden title="Response">
```json
{
  "result": {
    "amount": 1000.07809721,
    "rawconfirmations": 2,
    "generated": true,
    "confirmations": 2,
    "blockhash": "0d2701895c90f48d80156fbe349bda661c80f38ad6b75acc2294763e348b4eab",
    "blockindex": 0,
    "blocktime": 1555589136,
    "expiryheight": 0,
    "txid": "4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006",
    "walletconflicts": [],
    "time": 1555589136,
    "timereceived": 1555589136,
    "vjoinsplit": [],
    "details": [
      {
        "account": "",
        "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
        "category": "generate",
        "amount": 1000.07809721,
        "vout": 0,
        "size": 98
      }
    ],
    "hex": "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff03510101ffffffff01b912ee4817000000232103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac1068b85c"
  },
  "error": null,
  "id": "curltest"
}
```
</collapse-text>


## Inspecting the wallet

We have generated blocks and received the value from the `coinbase` transactions. Now, we would like to inspect the contents of our wallet. We will execute the [<b>listunspent</b>]() method for this purpose. 

However, before we execute this command, the reader should familiarize themselves with the way a blockchain stores value in a wallet. The title of the technical concept to understand is, <b>"utxo."</b> This stands for "unspent transaction." 

The way a utxo works is often difficult to understand for newcomers to blockchain technology. We have provided an article that explains this concept in more detail here, and we recommend the reader study it before proceeding.

[Click Here to Read Our Explanation of the Utxo](https://komodoplatform.com/whats-utxo/)

Also, the reader may turn to Chapter 6, Section 3 of the Komodo whitepaper. Search for the section titled, <u>"The Utxo: An elusive, yet fundamental concept."</u>

[Click Here to Read the Komodo Whitepaper; Search for Chapter 6, Section 3](https://komodoplatform.com/whitepaper)

In blockchain technology, all value is contained within utxos. Every transaction consumes a utxo and creates new utxos.

Once you are comfortably familiar with the concept, you are prepared to continue with the tutorial.

### Listing Unspent Transactions Using komodo-cli

A developer should be able to easily validate ownership of a utxo, as only the owner of a utxo is able to spend it. 

#### listunspent

For this purpose, we turn to the [<b>listunspent</b>](../komodo-api/wallet.html#listunspent) API method:

```bash
./komodo-cli -regtest -ac_name=RT1 listunspent
```

The response is an array of transactions ids, called `txid` for brevity's sake.

```json
[
  {
    "txid": "4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006",
    "vout": 0,
    "generated": true,
    "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
    "segid": 47,
    "amount": 1000.07809721,
    "interest": 0.00000000,
    "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
    "rawconfirmations": 7,
    "confirmations": 7,
    "spendable": true
  },
  {
    "txid": "148d8970e3c7e113bd3b4038c1efdd273a6d975f45b194b4257fda6acec4b14a",
    "vout": 0,
    "generated": true,
    "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
    "segid": 47,
    "amount": 0.00010000,
    "interest": 0.00000000,
    "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
    "rawconfirmations": 5,
    "confirmations": 5,
    "spendable": true
  },
  {
    "txid": "a0e13cad677b4fede6211c78069aed9345880147ea79edb647383787eb15fe51",
    "vout": 0,
    "generated": true,
    "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
    "segid": 47,
    "amount": 0.00010000,
    "interest": 0.00000000,
    "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
    "rawconfirmations": 6,
    "confirmations": 6,
    "spendable": true
  },
  {
    "txid": "01be6fa42a897009477f7a7248c538896ad39a24e132e9bcba00138c781fd57b",
    "vout": 0,
    "generated": true,
    "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
    "segid": 47,
    "amount": 0.00010000,
    "interest": 0.00000000,
    "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
    "rawconfirmations": 1,
    "confirmations": 1,
    "spendable": true
  },
  {
    "txid": "73ba44853735808e0b07c45bb1e1acd7c0323bc72e872d4bae92428ad03899be",
    "vout": 0,
    "generated": true,
    "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
    "segid": 47,
    "amount": 0.00010000,
    "interest": 0.00000000,
    "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
    "rawconfirmations": 3,
    "confirmations": 3,
    "spendable": true
  },
  {
    "txid": "78a401c6bb7765d73fedf1e2c033935db281a94a58d35f33e6986bda36e57bd5",
    "vout": 0,
    "generated": true,
    "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
    "segid": 47,
    "amount": 0.00010000,
    "interest": 0.00000000,
    "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
    "rawconfirmations": 2,
    "confirmations": 2,
    "spendable": true
  },
  {
    "txid": "d81523ef05f9d19abca61982f8c0d5374eb61ecb88c923226277bc0d3e7120e6",
    "vout": 0,
    "generated": true,
    "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
    "segid": 47,
    "amount": 0.00010000,
    "interest": 0.00000000,
    "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
    "rawconfirmations": 4,
    "confirmations": 4,
    "spendable": true
  }
]
```

### Listing Unspent Transactions Using curl

With `curl`, the terminal command for `listunspent` is as follows:

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "listunspent", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

<collapse-text hidden title="Response">

```json
{
  "result": [
    {
      "txid": "4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006",
      "vout": 0,
      "generated": true,
      "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
      "segid": 47,
      "amount": 1000.07809721,
      "interest": 0,
      "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
      "rawconfirmations": 7,
      "confirmations": 7,
      "spendable": true
    },
    {
      "txid": "148d8970e3c7e113bd3b4038c1efdd273a6d975f45b194b4257fda6acec4b14a",
      "vout": 0,
      "generated": true,
      "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
      "segid": 47,
      "amount": 0.0001,
      "interest": 0,
      "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
      "rawconfirmations": 5,
      "confirmations": 5,
      "spendable": true
    },
    {
      "txid": "a0e13cad677b4fede6211c78069aed9345880147ea79edb647383787eb15fe51",
      "vout": 0,
      "generated": true,
      "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
      "segid": 47,
      "amount": 0.0001,
      "interest": 0,
      "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
      "rawconfirmations": 6,
      "confirmations": 6,
      "spendable": true
    },
    {
      "txid": "01be6fa42a897009477f7a7248c538896ad39a24e132e9bcba00138c781fd57b",
      "vout": 0,
      "generated": true,
      "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
      "segid": 47,
      "amount": 0.0001,
      "interest": 0,
      "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
      "rawconfirmations": 1,
      "confirmations": 1,
      "spendable": true
    },
    {
      "txid": "73ba44853735808e0b07c45bb1e1acd7c0323bc72e872d4bae92428ad03899be",
      "vout": 0,
      "generated": true,
      "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
      "segid": 47,
      "amount": 0.0001,
      "interest": 0,
      "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
      "rawconfirmations": 3,
      "confirmations": 3,
      "spendable": true
    },
    {
      "txid": "78a401c6bb7765d73fedf1e2c033935db281a94a58d35f33e6986bda36e57bd5",
      "vout": 0,
      "generated": true,
      "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
      "segid": 47,
      "amount": 0.0001,
      "interest": 0,
      "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
      "rawconfirmations": 2,
      "confirmations": 2,
      "spendable": true
    },
    {
      "txid": "d81523ef05f9d19abca61982f8c0d5374eb61ecb88c923226277bc0d3e7120e6",
      "vout": 0,
      "generated": true,
      "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
      "segid": 47,
      "amount": 0.0001,
      "interest": 0,
      "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
      "rawconfirmations": 4,
      "confirmations": 4,
      "spendable": true
    }
  ],
  "error": null,
  "id": "curltest"
}
```
</collapse-text>

## Setting the pubkey Parameter

Observe this first `txid` returned from the `listunspent` transaction:

```json
  ...

  {
    "txid": "4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006",
    "vout": 0,
    "generated": true,
    "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
    "segid": 47,
    "amount": 1000.07809721,
    "interest": 0.00000000,
    "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
    "rawconfirmations": 7,
    "confirmations": 7,
    "spendable": true
  },

  ...
```

Notice that the address to which these `1000` coins were sent is not the address we generated earlier. Rather, it is an entirely new address. At the moment we may not mind, because the coins were sent to an address that the wallet automatically generated and which we own. 

However, what if we want to control the address to which coins are sent when mining? When this is the case, we turn to the [<b>pubkey</b>](../installations/common-runtime-parameters.html#pubkey) launch parameter.

The `pubkey` we input into this parameter can be the same `pubkey` we generated earlier in the tutorial. 

#### Stopping the Daemon Using komodo-cli

To place this pubkey at startup, we must first stop the Smart Chain.

For this we use the [<b>stop</b>](../komodo-api/control.html#stop) API method.

##### Command

```bash
./komodo-cli -regtest -ac_name=RT1 stop
```

##### Response

```
RT1 server stopping
```

#### Stopping the Daemon Using curl

Using `curl` to stop the daemon.

##### Command

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "stop", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

##### Response

```json
{
  "result": "RT1 server stopping",
  "error": null,
  "id": "curltest"
}
```

#### Restarting the Smart Chain With the pubkey Parameter

Execute the following to relaunch `komodod` with the `pubkey` we saved at the beginning of the tutorial.

##### Command

```bash
./komodod -regtest -ac_name=RT1 -ac_supply=1000 -pubkey=0350dd9b828e92600166dd74e521ac8510eb39064dfb30111c990396864542ce56 &
```

Now, when we generate new blocks, the `coinbase` transaction sends new coins to the new address associated with our `pubkey`.

First, we generate a new block using komodo-cli.

```bash
./komodo-cli -regtest -ac_name=RT1 generate 1
```

Response:

```json
[
  "06a639d7821f6ee803c6c53fe53a6b1dfe65063240ebc3a2907f7658cad8301e"
]
```

We can repeat the `getblock` method on the blockhash returned above to see the `coinbase` transaction.

With that `coinbase` transaction, we can the execute `gettransaction` to see the address to which the new coins were sent. 

After executing these previously explained methods, here is a snippet of the final result:


```json
...
  {
    "txid": "2411800f0e9c15f5233453ffc17ff301f43043c70887c256a041945d341796f0",
    "vout": 0,
    "generated": true,
    "address": "RHGqU4BPHsTve4jUJtJobAaf8SieYUzeFs",
    "segid": 28,
    "account": "",
    "amount": 0.00010000,
    "interest": 0.00000000,
    "scriptPubKey": "210350dd9b828e92600166dd74e521ac8510eb39064dfb30111c990396864542ce56ac",
    "rawconfirmations": 1,
    "confirmations": 1,
    "spendable": true
  }
...snipped
```

Note that the `address` in this output is the one associated with our desired `pubkey`.

## Closing

Some of the fundamental blockchain and API skills we have learned include the following:

- How to create a new Komodo Smart Chain
- How to make a single-node regtest chain, for development purposes
- How to launch with the pubkey set
- How to generate new blocks
- How to obtain information about blocks and transactions
- The nature of a utxo
- The nature of a coinbase transaction

Having completed this tutorial, the developer should be able to explore the many API methods in the Komodo documentation.

# Introduction to AtomicDEX

Welcome to the AtomicDEX technical documentation.

#### About the AtomicDEX Section

This documentation is intended for developers utilizing the AtomicDEX API.

Users who are not interested in development-related activities, but are searching for documentation assistance, can find support in the Komodo Support Center.

[<b>Link to Komodo Support Center</b>](https://support.komodoplatform.com/support/home)

#### Conceptual Overview

A brief conceptual overview of AtomicDEX can be found in the <b>Start Here</b> > <b>Product Introductions</b> > <b>AtomicDEX </b> section.

[<b>Link to "AtomicDEX" Introduction</b>](../basic-docs/start-here/about-komodo-platform/product-introductions.html#AtomicDEX)

The [<b>AtomicDEX Tutorials</b>](../basic-docs/atomicdex/atomicdex-tutorials/introduction-to-atomicdex.md) section contains a more thorough conceptual explanation of AtomicDEX.

Please consult our [Learning Path Outlines](../basic-docs/start-here/learning-launchpad/learning-path-outlines.html#type-b-developers-smart-chains) section for more details on approaches to learning AtomicDEX from both a conceptual and technical perspective.

#### About AtomicDEX Setup

The AtomicDEX Setup section contains basic information about setting up and using an AtomicDEX-enabled environment. 

#### About AtomicDEX Tutorials

The AtomicDEX Tutorials section contains various tutorials that provide instruction for AtomicDEX usage and creation.

For a walkthrough covering multiple tutorials in a targeted fashion, please see the [Learning Launchpad](../basic-docs/start-here/learning-launchpad/learning-path-outlines.html) section.

#### About AtomicDEX API

The AtomicDEX API section contains all available API commands.

These API commands can also be called Remote Procedure Calls, or RPCs. 
# DEX API

## Note About Current Limitations

This API documentation currently only features RPC methods that are available in MarketMaker 2.0 (MM2). There are many commands from the legacy Market Maker 1.0 that Komodo intends to import to MM2 as soon as possible. For now, these commands are available at [this external website.](https://docs.komodoplatform.com/mmV1/api/introduction.html)

## buy

**buy base rel price volume**

The `buy` method issues a buy request and attempts to match an order from the orderbook based on the provided arguments.

::: tip

Buy and sell methods always create the `taker` order first. Therefore, you must pay an additional 1/777 fee of the trade amount during the swap when taking liquidity from the market. If your order is not matched in 30 seconds, the order is automatically converted to a `maker` request and stays on the orderbook until the request is matched or cancelled. To always act as a maker, please use the [setprice method.](../atomic-swap-dex/dex-api.html#setprice)

:::

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| base      | string | the name of the coin the user desires to receive |
| rel       | string | the name of the coin the user desires to sell |
| price     | string (numeric) | the price in `rel` the user is willing to pay per one unit of the `base` coin |
| volume    | string (numeric) | the amount of coins the user is willing to receive of the `base` coin |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| result        | object | the resulting order object |
| result.action | string | the action of the request (`Buy`) |
| result.base   | string | the base currency of request |
| result.base_amount | string | the resulting amount of base currency that will be received if the order matches |
| result.rel    | string | the rel currency of the request |
| result.rel_amount | string | the maximum amount of `rel` coin that will be spent to buy the `base_amount` (according to `price`) |
| result.method | string | this field is used for internal P2P interactions; the value is always equal to "request" |
| result.dest_pub_key    | string | reserved for future use. `dest_pub_key` will allow the user to choose the P2P node that will be eligible to match with the request. This value defaults to a "zero pubkey", which means `anyone` can be a match |
| result.sender_pubkey   | string | the public key of this node |
| result.uuid   | string | the request uuid |

#### :pushpin: Examples

#### Command

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"buy\",\"base\":\"HELLO\",\"rel\":\"WORLD\",\"volume\":\"1\",\"price\":\"1\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response (success)

```json
{
    "result": {
        "action": "Buy",
        "base": "HELLO",
        "base_amount": "1",
        "dest_pub_key": "0000000000000000000000000000000000000000000000000000000000000000",
        "method": "request",
        "rel": "WORLD",
        "rel_amount": "1",
        "sender_pubkey": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
        "uuid": "288743e2-92a5-471e-92d5-bb828a2303c3"
    }
}
```

#### Response (error)

```json
{"error":"rpc:278] utxo:884] REL balance 12.88892991 is too low, required 21.15"}
```

</collapse-text>

</div>

## cancel_all_orders

**cancel_order cancel_by**

The `cancel_all_orders` cancels the active orders created by the MM2 node by specified condition.

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| cancel_by | object   | orders matching this condition will be cancelled |
| cancel_by.type | string   | `All` to cancel all orders or `Pair` to cancel all orders for specific coins pair |
| cancel_by.data | object   | additional data of cancel condition, present only for `Pair` type |
| cancel_by.data.base | string   | base coin of the pair |
| cancel_by.data.rel  | string   | rel coin of the pair |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| result    | object   | |
| result.cancelled | array of strings (uuids) | uuids of cancelled orders |
| result.currently_matching | array of strings (uuids) | uuids of the orders being matched with other orders; these are not cancelled even if they fit cancel condition |

#### :pushpin: Examples

#### Command (All orders)

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"cancel_all_orders\",\"cancel_by\":{\"type\":\"All\"}}"
```

#### Command (Cancel by pair)

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"cancel_all_orders\",\"cancel_by\":{\"type\":\"Pair\",\"data\":{\"base\":\"RICK\",\"rel\":\"MORTY\"}}}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response (1 order cancelled)

```json
{"result":{"cancelled":["2aae69d1-0167-493e-ad15-c6a8b43546d6"],"currently_matching":[]}}
```

#### Response (1 order cancelled and 1 is currently matching)

```json
{"result":{"cancelled":["2aae69d1-0167-493e-ad15-c6a8b43546d6"],"currently_matching":["e9a6f422-e378-437f-bb74-ba4307a90e68"]}}
```

</collapse-text>

</div>

## cancel_order

**cancel_order uuid**

The `cancel_order` cancels the active order created by the MM2 node.

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| uuid      | string   | the uuid of the order the user desires to cancel |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| result    | string   | indicates the status of operation |

#### :pushpin: Examples

#### Command

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"cancel_order\",\"uuid\":\"6a242691-6c05-474a-85c1-5b3f42278f41\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response (success)

```json
{"result":"success"}
```

#### Response (error)

```json
{"error":"Order with uuid 6a242691-6c05-474a-85c1-5b3f42278f42 is not found"}
```

</collapse-text>

</div>

## coins_needed_for_kick_start

**coins_needed_for_kick_start()**

If MM2 is stopped while making a swap/having the active order it will attempt to kick-start them on next launch and continue from the point where it's stopped. `coins_needed_for_kick_start` returns the tickers of coins that should be activated ASAP after MM2 is started to continue the interrupted swaps. Consider calling this method on MM2 startup and activate the returned coins using `enable` or `electrum` methods.

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| (none)    | | |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| result    | array of strings | tickers of coins that should be activated to kick-start swaps and orders |

#### :pushpin: Examples

#### Command

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"coins_needed_for_kick_start\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response (BTC and KMD should be activated ASAP in this case)

```json
{"result":["BTC","KMD"]}
```

#### Response (no swaps and orders waiting to be started)

```json
{"result":[]}
```

</collapse-text>

</div>

## electrum

**electrum coin servers (mm2 tx_history=false)**

::: warning Important

This command must be executed at the initiation of each MM2 instance. Also, AtomicDEX software requires the `mm2` parameter to be set for each `coin`; the methods to activate the parameter vary. See below for further information.

:::

::: tip

Electrum mode is available for utxo-based coins only; this includes Bitcoin and Bitcoin-based forks. Electrum mode is not available for ETH/ERC20.

:::

The `electrum` method enables a `coin` by connecting the user's software instance to the `coin` blockchain using electrum technology (e.g. lite mode). This allows the user to avoid syncing the entire blockchain to their local machine.

Each `coin` can be enabled only once, and in either Electrum or Native mode. The DEX software does not allow a `coin` to be active in both modes at once.

#### Notes on the MM2 Parameter

For each `coin`, Komodo software requires the user/developer to set the `mm2` parameter. This can be achieved either in the [coins](../atomic-swap-dex/dex-walkthrough.md#setting-up-coin-list) for more details), or via the [electrum](../atomic-swap-dex/dex-api.html#electrum) and [enable](../atomic-swap-dex/dex-api.html#enable) methods.

The value of the `mm2` parameter informs the software as to whether the `coin` is expected to function.

- `0` = `non-functioning`
- `1` = `functioning`

::: tip

GUI software developers may refer to the `coins` file [in this link](https://github.com/jl777/coins) for the default coin json configuration.

:::

Volunteers are welcome to test coins with AtomicDEX software at any time. After testing a coin, please create a pull request with the desired coin configuration and successful swap details using the guide linked below.

[Guide to Submitting Coin Test Results](https://github.com/jl777/coins#0-the-coin-must-be-tested-with-barterdex-atomic-swaps)


##### Examples of the Parameter Settings

Set the value of the `mm2` parameter in the [coins](../atomic-swap-dex/dex-walkthrough.md#setting-up-coin-list) file as follows:

```bash
mm2=1
```

For terminal interface examples, see the examples section below.

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| coin      | string | the name of the coin you want to enable |
| servers   | array of objects | the list of Electrum servers to which you want to connect |
| servers.url | string | server url |
| servers.protocol | string | the transport protocol that MM2 will use to connect to the server. Possible values: `TCP`, `SSL`. Default value: `TCP` |
| servers.disable_cert_verification | bool | when set to true, this disables server SSL/TLS certificate verification (e.g. to use self-signed certificate). Default value is `false`. <b>Use at your own risk</b> |
| mm2       | number (required if not set in the `coins` file) | this property informs the AtomicDEX software as to whether the coin is expected to function; accepted values are either `0` or `1` |
| tx_history| bool | whether the node should enable `tx_history` preloading as a background process; this must be set to `true` if you plan to use the `my_tx_history` API |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| address    | string  | the address of the user's `coin` wallet, based on the user's passphrase |
| balance   | string (numeric) | the amount of `coin` the user holds in their wallet |
| result    | string    | the result of the request; this will be either `success`, or will indicate an error or failure otherwise |

#### :pushpin: Examples

#### Command

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"electrum\",\"coin\":\"HELLOWORLD\",\"servers\":[{\"url\":\"localhost:20025\",\"protocol\":\"SSL\",\"disable_cert_verification\":true},{\"url\":\"localhost:10025\"}]}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response (Success)

```json
{
  "coin": "HELLOWORLD",
  "address": "RQNUR7qLgPUgZxYbvU9x5Kw93f6LU898CQ",
  "balance": "10",
  "result": "success"
}
```

</collapse-text>

</div>

#### Command (With `mm2` argument)

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"electrum\",\"coin\":\"HELLOWORLD\",\"servers\":[{\"url\":\"localhost:20025\",\"protocol\":\"SSL\",\"disable_cert_verification\":true},{\"url\":\"localhost:10025\"}],\"mm2\":1}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response (Success)

```bash
{
  "coin": "HELLOWORLD",
  "address": "RQNUR7qLgPUgZxYbvU9x5Kw93f6LU898CQ",
  "balance": "10",
  "result": "success"
}
```

#### Response (Error, `mm2` is not set)

```bash
{
  "error":"lp_coins:943] lp_coins:693] mm2 param is not set neither in coins config nor enable request, assuming that coin is not supported"
}
```

</collapse-text>

</div>

## enable

**enable coin (urls swap_contract_address mm2 tx_history=false)**

::: warning Important

AtomicDEX software requires the `mm2` parameter to be set for each `coin`; the methods to activate the parameter vary. See below for further information.

:::

The `enable` method enables a coin by connecting the user's software instance to the `coin` blockchain using the `native` coin daemon.

Each `coin` can be enabled only once, and in either Electrum or Native mode. The DEX software does not allow a `coin` to be active in both modes at once.

For utxo-based coins the daemon of this blockchain must also be running on the user's machine for `enable` to function.

ETH/ERC20 coins are also enabled by the `enable` method, but a local installation of an ETH node is not required.

#### Notes on the mm2 Parameter

Please refer to the `mm2` explanatory section in the `electrum` method for information about setting the `mm2` parameter and testing new coins.

[Link to `mm2` explanatory section](../atomic-swap-dex/dex-api.html#notes-on-the-mm2-parameter)

For terminal interface examples using the `mm2` parameter with the `enable` method, see the examples section below.

#### Using AtomicDEX Software on an ETH-Based Network

The following information can assist the user/developer in connecting AtomicDEX software to the Ethereum network:

- Swap smart contract on the ETH mainnet: [0x8500AFc0bc5214728082163326C2FF0C73f4a871](https://etherscan.io/address/0x8500AFc0bc5214728082163326C2FF0C73f4a871)
  - Main-net nodes maintained by the Komodo team: <b>http://eth1.cipig.net:8555</b>, <b>http://eth2.cipig.net:8555</b>, <b>http://eth3.cipig.net:8555</b>
- Swap smart contract on the Ropsten testnet: [0x7Bc1bBDD6A0a722fC9bffC49c921B685ECB84b94](https://ropsten.etherscan.io/address/0x7bc1bbdd6a0a722fc9bffc49c921b685ecb84b94)
  - Ropsten node maintained by the Komodo team: <b>http://195.201.0.6:8545</b>

To use AtomicDEX software on another Ethereum-based network, such as the Kovan testnet or ETC, deploy the Etomic swap contract code from the repository linked below. Use of this code requires either an ETH node setup or access to a public service such as [Infura.](https://infura.io/)

[Link to repository code for Ethereum-based networks](https://github.com/artemii235/etomic-swap)

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| coin      | string | the name of the coin the user desires to enable |
| urls      | array of strings (required for ETH/ERC20) | urls of Ethereum RPC nodes to which the user desires to connect |
| swap_contract_address | string (required for ETH/ERC20) | address of etomic swap smart contract |
| gas_station_url | string (optional for ETH/ERC20) | url of [ETH gas station API](https://docs.ethgasstation.info/); MM2 uses [eth_gasPrice RPC API](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_gasprice) by default; when this parameter is set, MM2 will request the current gas price from Station for new transactions, and this often results in lower fees |
| mm2       | number (required if not set in the `coins` file) | this property informs the AtomicDEX software as to whether the coin is expected to function; accepted values are either `0` or `1` |
| tx_history| bool | whether the node should enable `tx_history` preloading as a background process; this must be set to `true` if you plan to use the `my_tx_history` API |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| address    | string  | the address of the user's `coin` wallet, based on the user's passphrase |
| balance   | string (numeric)    | the amount of `coin` the user holds in their wallet |
| result    | string    | the result of the request; this will be either `success`, or will indicate an error or failure otherwise |

#### :pushpin: Examples

#### Command (for Bitcoin-based blockchains)

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"enable\",\"coin\":\"HELLOWORLD\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response

```json
{
  "coin": "HELLOWORLD",
  "address": "RQNUR7qLgPUgZxYbvU9x5Kw93f6LU898CQ",
  "balance": "10",
  "result": "success"
}
```

</collapse-text>

</div>

#### Command (for Ethereum and ERC20-based blockchains)

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"enable\",\"coin\":\"ETH\",\"urls\":[\"http://195.201.0.6:8545\"],\"swap_contract_address\":\"0x7Bc1bBDD6A0a722fC9bffC49c921B685ECB84b94\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response

```json
{
  "coin": "ETH",
  "address": "0x3c7aad7b693e94f13b61d4be4abaeaf802b2e3b5",
  "balance": "50",
  "result": "success"
}
```

</collapse-text>

</div>

#### Command (for Ethereum and ERC20-based blockchains with gas_station_url)

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"enable\",\"coin\":\"ETH\",\"urls\":[\"http://195.201.0.6:8545\"],\"swap_contract_address\":\"0x7Bc1bBDD6A0a722fC9bffC49c921B685ECB84b94\",\"gas_station_url\":\"https://ethgasstation.info/json/ethgasAPI.json\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response

```json
{
  "coin": "ETH",
  "address": "0x3c7aad7b693e94f13b61d4be4abaeaf802b2e3b5",
  "balance": "50",
  "result": "success"
}
```

</collapse-text>

</div>

#### Command (With `mm2` argument)

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"enable\",\"coin\":\"HELLOWORLD\",\"mm2\":1}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response (Success):

```bash
{
  "coin": "HELLOWORLD",
  "address": "RQNUR7qLgPUgZxYbvU9x5Kw93f6LU898CQ",
  "balance": "10",
  "result": "success"
}
```

#### Response (Error, `mm2` is not set)

```bash
{
  "error":"lp_coins:943] lp_coins:693] mm2 param is not set neither in coins config nor enable request, assuming that coin is not supported"
}
```

</collapse-text>

</div>

## get_enabled_coins

**get_enabled_coins**

The `get_enabled_coins` method returns data of coins that are currently enabled on the user's MM2 node.

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| (none)    | | |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| result    | array of objects | tickers and addresses of enabled coins |
| result.address    | string | the user's address for this coin |
| result.ticker    | string | the ticker name of this coin |

#### :pushpin: Examples

#### Command

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"get_enabled_coins\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response

```json
{
    "result":[
        {
            "address":"1WxswvLF2HdaDr4k77e92VjaXuPQA8Uji",
            "ticker":"BTC"
        },
        {
            "address":"R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW",
            "ticker":"PIZZA"
        },
        {
            "address":"R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW",
            "ticker":"BEER"
        },
        {
            "address":"0xbAB36286672fbdc7B250804bf6D14Be0dF69fa29",
            "ticker":"ETH"
        },
        {
            "address":"R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW",
            "ticker":"ETOMIC"
        },
        {
            "address":"0xbAB36286672fbdc7B250804bf6D14Be0dF69fa29",
            "ticker":"DEC8"
        },
        {
            "address":"0xbAB36286672fbdc7B250804bf6D14Be0dF69fa29",
            "ticker":"BAT"
        }
    ]
}
```

</collapse-text>

</div>

## get_trade_fee

**get_trade_fee coin**

The `get_trade_fee` method returns the approximate amount of the miner fee that will be paid per swap transaction.

This amount should be multiplied by 2 and deducted from the volume on `buy/sell` calls when the user is about to trade the entire balance of the selected coin.

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| coin      | string | the name of the coin for the requested trade fee |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| result    | object   | an object containing the relevant information |
| result.coin | string | the fee will be paid from the user's balance of this coin. This coin name may differ from the requested coin. For example ERC20 fees are paid by ETH (gas) |
| result.amount | string (numeric) | the approximate fee amount to be paid per swap transaction |

#### :pushpin: Examples

#### Command (BTC)

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"get_trade_fee\",\"coin\":\"BTC\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response

```json
{
    "result":{
        "amount":"0.00096041",
        "coin":"BTC"
    }
}
```

</collapse-text>

</div>

#### Command (ETH)

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"get_trade_fee\",\"coin\":\"ETH\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response

```json
{
    "result":{
        "amount":"0.00121275",
        "coin":"ETH"
    }
}
```

</collapse-text>

</div>

#### Command (ERC20)

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"get_trade_fee\",\"coin\":\"BAT\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response

```json
{
    "result":{
        "amount":"0.00121275",
        "coin":"ETH"
    }
}
```

</collapse-text>

</div>

## help

**help()**

The `help` method returns the full API documentation in the terminal.

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| (none)    |   | |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| (returns the full docs in terminal)    |   | |

## my_balance

**my_balance coin**

The `my_balance` method returns the current balance of the specified `coin`.

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| coin      | string | the name of the coin to retrieve the balance |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| address | string | the address that holds the coins |
| balance | string (numeric) | the number of coins in the address |
| coin  | string    | the name of the coin |

#### :pushpin: Examples

#### Command

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"my_balance\",\"coin\":\"HELLOWORLD\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response

```json
{
  "address": "RQNUR7qLgPUgZxYbvU9x5Kw93f6LU898CQ",
  "balance": "10",
  "coin": "HELLOWORLD"
}
```

</collapse-text>

</div>

## my_orders

**my_orders()**

The `my_orders` method returns the data of all active orders created by the MM2 node.

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| (none)    | | |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| maker_orders   | map of objects | orders that are currently active in market maker mode |
| taker_orders   | map of objects | orders that are currently active in market taker mode |

#### :pushpin: Examples

#### Command

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"my_orders\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response

```json
{
    "result": {
         "maker_orders": {
            "fedd5261-a57e-4cbf-80ac-b3507045e140": {
                "base": "BEER",
                "created_at": 1560529042434,
                "available_amount":"1",
                "cancellable":true,
                "matches": {
                    "60aaacca-ed31-4633-9326-c9757ea4cf78": {
                        "connect": {
                            "dest_pub_key": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
                            "maker_order_uuid": "fedd5261-a57e-4cbf-80ac-b3507045e140",
                            "method": "connect",
                            "sender_pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                            "taker_order_uuid": "60aaacca-ed31-4633-9326-c9757ea4cf78"
                        },
                        "connected": {
                            "dest_pub_key": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                            "maker_order_uuid": "fedd5261-a57e-4cbf-80ac-b3507045e140",
                            "method": "connected",
                            "sender_pubkey": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
                            "taker_order_uuid": "60aaacca-ed31-4633-9326-c9757ea4cf78"
                        },
                        "last_updated": 1560529572571,
                        "request": {
                            "action": "Buy",
                            "base": "BEER",
                            "base_amount": "1",
                            "dest_pub_key": "0000000000000000000000000000000000000000000000000000000000000000",
                            "method": "request",
                            "rel": "PIZZA",
                            "rel_amount": "1",
                            "sender_pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                            "uuid": "60aaacca-ed31-4633-9326-c9757ea4cf78"
                        },
                        "reserved": {
                            "base": "BEER",
                            "base_amount": "1",
                            "dest_pub_key": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                            "maker_order_uuid": "fedd5261-a57e-4cbf-80ac-b3507045e140",
                            "method": "reserved",
                            "rel": "PIZZA",
                            "rel_amount": "1",
                            "sender_pubkey": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
                            "taker_order_uuid": "60aaacca-ed31-4633-9326-c9757ea4cf78"
                        }
                    }
                },
                "max_base_vol": "1",
                "min_base_vol": "0",
                "price": "1",
                "rel": "PIZZA",
                "started_swaps": [
                    "60aaacca-ed31-4633-9326-c9757ea4cf78"
                ],
                "uuid": "fedd5261-a57e-4cbf-80ac-b3507045e140"
            }
        },
        "taker_orders": {
            "45252de5-ea9f-44ae-8b48-85092a0c99ed": {
                "created_at": 1560529048998,
                "cancellable":true,
                "matches": {
                    "15922925-cc46-4219-8cbd-613802e17797": {
                        "connect": {
                            "dest_pub_key": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                            "maker_order_uuid": "15922925-cc46-4219-8cbd-613802e17797",
                            "method": "connect",
                            "sender_pubkey": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
                            "taker_order_uuid": "45252de5-ea9f-44ae-8b48-85092a0c99ed"
                        },
                        "connected": {
                            "dest_pub_key": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
                            "maker_order_uuid": "15922925-cc46-4219-8cbd-613802e17797",
                            "method": "connected",
                            "sender_pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                            "taker_order_uuid": "45252de5-ea9f-44ae-8b48-85092a0c99ed"
                        },
                        "last_updated": 1560529049477,
                        "reserved": {
                            "base": "BEER",
                            "base_amount": "1",
                            "dest_pub_key": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
                            "maker_order_uuid": "15922925-cc46-4219-8cbd-613802e17797",
                            "method": "reserved",
                            "rel": "ETOMIC",
                            "rel_amount": "1",
                            "sender_pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                            "taker_order_uuid": "45252de5-ea9f-44ae-8b48-85092a0c99ed"
                        }
                    }
                },
                "request": {
                    "action": "Buy",
                    "base": "BEER",
                    "base_amount": "1",
                    "dest_pub_key": "0000000000000000000000000000000000000000000000000000000000000000",
                    "method": "request",
                    "rel": "ETOMIC",
                    "rel_amount": "1",
                    "sender_pubkey": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
                    "uuid": "45252de5-ea9f-44ae-8b48-85092a0c99ed"
                }
            }
        }
    }
}
```

</collapse-text>

</div>

## my_recent_swaps

**(from_uuid limit=10)**

The `my_recent_swaps` method returns the data of the most recent atomic swaps executed by the MM2 node.

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| limit     | number   | limits the number of returned swaps |
| from_uuid | string   | MM2 will skip records until this uuid, skipping the `from_uuid` as well |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| swaps     | array of objects | swaps data; each record has the format of the `my_swap_status` response |
| from_uuid | string           | the from_uuid that was set in the request; this value is null if nothing was set |
| skipped   | number           | the number of skipped records (i.e. the position of `from_uuid` in the list + 1; the value is 0 if `from_uuid` was not set |
| limit     | number           | the limit that was set in the request; note that the actual number of swaps can differ from the specified limit (e.g. on the last page) |
| total     | number           | total number of swaps available |

#### :pushpin: Examples

#### Command

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"my_recent_swaps\",\"from_uuid\":\"e299c6ece7a7ddc42444eda64d46b163eaa992da65ce6de24eb812d715184e4c\",\"limit\":2}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response (success)

```json
{
    "result": {
        "from_uuid": "e299c6ece7a7ddc42444eda64d46b163eaa992da65ce6de24eb812d715184e4c",
        "limit": 2,
        "skipped": 1,
        "swaps": [
            {
                "error_events": [
                    "StartFailed",
                    "NegotiateFailed",
                    "TakerFeeValidateFailed",
                    "MakerPaymentTransactionFailed",
                    "MakerPaymentDataSendFailed",
                    "TakerPaymentValidateFailed",
                    "TakerPaymentSpendFailed",
                    "MakerPaymentRefunded",
                    "MakerPaymentRefundFailed"
                ],
                "events": [
                    {
                        "event": {
                            "data": {
                                "lock_duration": 7800,
                                "maker_amount": "1",
                                "maker_coin": "BEER",
                                "maker_coin_start_block": 154221,
                                "maker_payment_confirmations": 1,
                                "maker_payment_lock": 1561545442,
                                "my_persistent_pub": "02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3",
                                "secret": "ea774bc94dce44c138920c6e9255e31d5645e60c0b64e9a059ab025f1dd2fdc6",
                                "started_at": 1561529842,
                                "taker": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                                "taker_amount": "1",
                                "taker_coin": "PIZZA",
                                "taker_coin_start_block": 141363,
                                "taker_payment_confirmations": 1,
                                "uuid": "6bf6e313-e610-4a9a-ba8c-57fc34a124aa"
                            },
                            "type": "Started"
                        },
                        "timestamp": 1561529842866
                    },
                    {
                        "event": {
                            "data": {
                                "taker_payment_locktime": 1561537641,
                                "taker_pubkey": "02631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640"
                            },
                            "type": "Negotiated"
                        },
                        "timestamp": 1561529883208
                    },
                    {
                        "event": {
                            "data": {
                                "block_height": 141364,
                                "coin": "PIZZA",
                                "fee_details": {
                                    "amount": 1e-05
                                },
                                "from": [
                                    "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh"
                                ],
                                "internal_id": "a91469546211cc910fbe4a1f4668ab0353765d3d0cb03f4a67bff9326991f682",
                                "my_balance_change": 0.0,
                                "received_by_me": 0.0,
                                "spent_by_me": 0.0,
                                "timestamp": 1561529907,
                                "to": [
                                    "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh",
                                    "RThtXup6Zo7LZAi8kRWgjAyi1s4u6U9Cpf"
                                ],
                                "total_amount": 0.002,
                                "tx_hash": "a91469546211cc910fbe4a1f4668ab0353765d3d0cb03f4a67bff9326991f682",
                                "tx_hex": "0400008085202f89021c7eeec33f8eb5ff2ed6c3d09e40e04b05a9674ea2feefcc12de3f9dcc16aff8000000006b483045022100e18e3d1afa8a24ecec82c92bfc05c119bfacdbb71b5f5663a4b96cc2a41ab269022017a79a1a1f6e0220d8fa1d2cf3b1c9788272f1ad18e4987b8f1cd4418acaa5b0012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff6a0d321eb52c3c7165adf80f83b15b7a5caa3a0dfa87746239021600d47fb43e000000006b483045022100937ed900e084d57d5e3341499fc66c5574884ca71cd4331fa696c8b7a517591b02201f5f851f94c3ca0ffb4789f1af22cb95dc83564e127ed7d23f1129eb2b981a2f012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff02bcf60100000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac9c120100000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac2f0e135d000000000000000000000000000000"
                            },
                            "type": "TakerFeeValidated"
                        },
                        "timestamp": 1561529927879
                    },
                    {
                        "event": {
                            "data": {
                                "block_height": 0,
                                "coin": "BEER",
                                "fee_details": {
                                    "amount": 1e-05
                                },
                                "from": [
                                    "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"
                                ],
                                "internal_id": "efa90a2918e6793c8a2725c06ee34d0fa76c43bc85e680be195414e7aee36154",
                                "my_balance_change": -1.00001,
                                "received_by_me": 0.0285517,
                                "spent_by_me": 1.0285617,
                                "timestamp": 0,
                                "to": [
                                    "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW",
                                    "bKuQbg7vgFR1C25vPqMq8ePnB25cUEAGpo"
                                ],
                                "total_amount": 1.0285617,
                                "tx_hash": "efa90a2918e6793c8a2725c06ee34d0fa76c43bc85e680be195414e7aee36154",
                                "tx_hex": "0400008085202f890cdcd071edda0d5f489b0be9c8b521ad608bb6d7f43f6e7a491843e7a4d0078f85000000006b483045022100fbc3bd09f8e1821ed671d1b1d2ed355833fb42c0bc435fef2da5c5b0a980b9a002204ef92b35576069d640ca0ac08f46645e5ade36afd5f19fb6aad19cfc9fb221fb012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffe6ae2a3ce221a6612d9e640bdbe10a2e477b3bc68a1aeee4a6784cb18648a785010000006a47304402202000a7e60ae2ce1529247875623ef2c5b42448dcaeac8de0f8f0e2f8e5bd8a6b0220426321a004b793172014f522efbca77a3dc92e86ce0a75330d8ceb83072ad4e7012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff9335553edcbac9559cae517a3e25b880a48fabf661c4ac338394972eef4572da000000006b4830450221008ded7230f2fb37a42b94f96174ec192baf4cd9e9e68fb9b6cf0463a36a6093e00220538de51ceda1617f3964a2350802377940fdfa018cc1043d77c66081b1cab0c4012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3fffffffff91b5d3733877f84108de77fec46bee156766e1a6837fa7b580ccbc3905acb14000000006b483045022100d07cf1fd20e07aafdc942ba56f6b45baee61b93145a2bdba391e2cdb8024bf15022056ea8183990703ef05018df2fe8bd5ec678ec0f9207b0283292b2cdafc5e1e0c012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff147870387ca938b2b6e7daa96ba2496014f125c0e4e576273ef36ee8186c415a000000006a47304402204c5b15b641d7e34444456d2ea6663bdc8bd8216e309a7220814474f346b8425e0220634d1dd943b416b7a807704d7f7a3d46a60d88ef4e20734588a0b302c55fa82d012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffd2b954ae9b4a61fad9f7bc956d24e38d7b6fe313da824bd3bd91287d5a6b49d9000000006b483045022100a7387d9ab7b2c92d3cbce525e96ffac5ae3ef14f848661741ada0db17715c4a002202c1417d5e3e04b1a2d1774a83bb8d5aa1c0536c100138123089fa69921b5d976012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff28792a2e26d9d7be0467fac52b12ece67410b23eea845008257979bd87d083e3000000006a473044022027c40517c33cd3202d4310cfd2c75f38e6d7804b255fc3838a32ea26e5a3cb0002202b4399e1d7e655b64f699318f2bfbdced49f064ee54e9d6a678668fce51caf96012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffa8bf797bacd213b74a9977ae1b956afe3af33a1ee94324e010a16db891a07441000000006a473044022004cbb1d970b9f02c578b5c1d7de33361581eebc19c3cd8d2e50b0211ca4ef13702200c93b9fe5428055b6274dc8e52073c3e87f5b5e4206134d745928ccfc9393919012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff2b6fd82c9a68111b67ad85a614a6ecb50f7b6eac3d21d8ebefd9a6065cdf5729000000006b483045022100fdff16c595c7b4a9b4fc1e445b565f7b29fe5b7a08f79291b0ff585c7b72ac2902200c694aa124013bd419ce2349f15d10435827868d35db939b9d3c344d16e78420012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff6a5468dd8c83553dc51022f2a2fb772cf91c8607dc2ca1b8f203ac534612ab29000000006b483045022100ba7cc79e7ae3720238bfc5caa225dc8017d6a0d1cb1ec66abaf724fd20b3b7ab02206e8c942756604af0f63b74af495a9b3b7f4a44c489267f69a14cf2b1b953f46e012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff5f9f48a91d343fd5aef1d85f00850070931459ab256697afb728d1c81c1fa1d2000000006a47304402200ec85fc66f963e7504eb27361a4b4bb17de60e459da414fdc3962476de636134022056b62c15cf7f9b4e7d4e11c03e4e541dd348919b8c55efa4f1927e2fdd5ae8ea012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffee1f455924d3167e7f7abf452c1856e9abdcfe27dc889942dd249cb376169d38000000006b48304502210089274eed807c5d23d819f6dfa8a358a9748e56f2080be4396ef77bb19d91b17402207fc7b22c879534fffe0eeaaec8fc284e22c2756f380c05ea57b881a96b09f3af012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200e1f5050000000017a9144eb3a361d8a15d7f6a8ef9d1cf44962a90c44d548702912b00000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac490e135d000000000000000000000000000000"
                            },
                            "type": "MakerPaymentSent"
                        },
                        "timestamp": 1561529938879
                    },
                    {
                        "event": {
                            "data": {
                                "block_height": 141365,
                                "coin": "PIZZA",
                                "fee_details": {
                                    "amount": 1e-05
                                },
                                "from": [
                                    "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh"
                                ],
                                "internal_id": "7e0e38e31dbe80792ef320b8c0a7cb9259127427ef8c2fca1d796f24484046a5",
                                "my_balance_change": 0.0,
                                "received_by_me": 0.0,
                                "spent_by_me": 0.0,
                                "timestamp": 1561529960,
                                "to": [
                                    "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh",
                                    "bUN5nesdt1xsAjCtAaYUnNbQhGqUWwQT1Q"
                                ],
                                "total_amount": 1.01999523,
                                "tx_hash": "7e0e38e31dbe80792ef320b8c0a7cb9259127427ef8c2fca1d796f24484046a5",
                                "tx_hex": ""
                            },
                            "type": "TakerPaymentReceived"
                        },
                        "timestamp": 1561529998938
                    },
                    {
                        "event": {
                            "type": "TakerPaymentWaitConfirmStarted"
                        },
                        "timestamp": 1561529998941
                    },
                    {
                        "event": {
                            "type": "TakerPaymentValidatedAndConfirmed"
                        },
                        "timestamp": 1561530000859
                    },
                    {
                        "event": {
                            "data": {
                                "block_height": 0,
                                "coin": "PIZZA",
                                "fee_details": {
                                    "amount": 1e-05
                                },
                                "from": [
                                    "bUN5nesdt1xsAjCtAaYUnNbQhGqUWwQT1Q"
                                ],
                                "internal_id": "235f8e7ab3c9515a17fe8ee721ef971bbee273eb90baf70788edda7b73138c86",
                                "my_balance_change": 0.99999,
                                "received_by_me": 0.99999,
                                "spent_by_me": 0.0,
                                "timestamp": 0,
                                "to": [
                                    "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"
                                ],
                                "total_amount": 1.0,
                                "tx_hash": "235f8e7ab3c9515a17fe8ee721ef971bbee273eb90baf70788edda7b73138c86",
                                "tx_hex": "0400008085202f8901a5464048246f791dca2f8cef2774125992cba7c0b820f32e7980be1de3380e7e00000000d8483045022100beca668a946fcad98da64cc56fa04edd58b4c239aa1362b4453857cc2e0042c90220606afb6272ef0773185ade247775103e715e85797816fbc204ec5128ac10a4b90120ea774bc94dce44c138920c6e9255e31d5645e60c0b64e9a059ab025f1dd2fdc6004c6b6304692c135db1752102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac6782012088a914eb78e2f0cf001ed7dc69276afd37b25c4d6bb491882102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac68ffffffff0118ddf505000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8000135d000000000000000000000000000000"
                            },
                            "type": "TakerPaymentSpent"
                        },
                        "timestamp": 1561530003429
                    },
                    {
                        "event": {
                            "type": "Finished"
                        },
                        "timestamp": 1561530003433
                    }
                ],
                "my_info": {
                    "my_amount": "1",
                    "my_coin": "BEER",
                    "other_amount": "1",
                    "other_coin": "PIZZA",
                    "started_at": 1561529842
                },
                "success_events": [
                    "Started",
                    "Negotiated",
                    "TakerFeeValidated",
                    "MakerPaymentSent",
                    "TakerPaymentReceived",
                    "TakerPaymentWaitConfirmStarted",
                    "TakerPaymentValidatedAndConfirmed",
                    "TakerPaymentSpent",
                    "Finished"
                ],
                "type": "Maker",
                "uuid": "6bf6e313-e610-4a9a-ba8c-57fc34a124aa"
            },
            {
                "error_events": [
                    "StartFailed",
                    "NegotiateFailed",
                    "TakerFeeSendFailed",
                    "MakerPaymentValidateFailed",
                    "TakerPaymentTransactionFailed",
                    "TakerPaymentDataSendFailed",
                    "TakerPaymentWaitForSpendFailed",
                    "MakerPaymentSpendFailed",
                    "TakerPaymentRefunded",
                    "TakerPaymentRefundFailed"
                ],
                "events": [
                    {
                        "event": {
                            "data": {
                                "lock_duration": 31200,
                                "maker": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                                "maker_amount": "0.01",
                                "maker_coin": "BEER",
                                "maker_coin_start_block": 154187,
                                "maker_payment_confirmations": 1,
                                "maker_payment_wait": 1561492367,
                                "my_persistent_pub": "02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3",
                                "started_at": 1561481967,
                                "taker_amount": "0.01",
                                "taker_coin": "BCH",
                                "taker_coin_start_block": 588576,
                                "taker_payment_confirmations": 1,
                                "taker_payment_lock": 1561513167,
                                "uuid": "491df802-43c3-4c73-85ef-1c4c49315ac6"
                            },
                            "type": "Started"
                        },
                        "timestamp": 1561481968393
                    },
                    {
                        "event": {
                            "data": {
                                "maker_payment_locktime": 1561544367,
                                "maker_pubkey": "02631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640",
                                "secret_hash": "ba5128bcca5a2f7d2310054fb8ec51b80f352ef3"
                            },
                            "type": "Negotiated"
                        },
                        "timestamp": 1561482029079
                    },
                    {
                        "event": {
                            "data": {
                                "block_height": 0,
                                "coin": "BCH",
                                "fee_details": {
                                    "amount": 1e-05
                                },
                                "from": [
                                    "1WxswvLF2HdaDr4k77e92VjaXuPQA8Uji"
                                ],
                                "internal_id": "9dd7c0c8124315d7884fb0c7bf8dbfd3f3bd185c62a2ee42dfbc1e3b74f21a0e",
                                "my_balance_change": -2.287e-05,
                                "received_by_me": 0.0155402,
                                "spent_by_me": 0.01556307,
                                "timestamp": 0,
                                "to": [
                                    "1KRhTPvoxyJmVALwHFXZdeeWFbcJSbkFPu",
                                    "1WxswvLF2HdaDr4k77e92VjaXuPQA8Uji"
                                ],
                                "total_amount": 0.01556307,
                                "tx_hash": "9dd7c0c8124315d7884fb0c7bf8dbfd3f3bd185c62a2ee42dfbc1e3b74f21a0e",
                                "tx_hex": "0100000001f1beda7feba9fa5c52aa38027587db50b6428bbbcc053cd4ab17461fb00b89d1000000006a473044022004ad0330210e20dea416c3ff442e50dc59970c5d1a8b4d0a7d5cc61a2edc701602204459e1ee6774f1ba8258322fff72e1e1acddeb7aed2f75657458aa3deecc9465412102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0207050000000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac64b61700000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac2d53125d"
                            },
                            "type": "TakerFeeSent"
                        },
                        "timestamp": 1561482032294
                    },
                    {
                        "event": {
                            "data": {
                                "block_height": 154190,
                                "coin": "BEER",
                                "fee_details": {
                                    "amount": 1e-05
                                },
                                "from": [
                                    "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh"
                                ],
                                "internal_id": "ba36c890785e3e9d4b853310ad4d79ce8175e7c4184a398128b37339321672f4",
                                "my_balance_change": 0.0,
                                "received_by_me": 0.0,
                                "spent_by_me": 0.0,
                                "timestamp": 1561482056,
                                "to": [
                                    "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh",
                                    "bF2S8qwenfVZbvUU6dWyV3oXMxEP7sHLbr"
                                ],
                                "total_amount": 0.99999,
                                "tx_hash": "ba36c890785e3e9d4b853310ad4d79ce8175e7c4184a398128b37339321672f4",
                                "tx_hex": "0400008085202f890197f703d245127e5b88471791f2820d29152046f4be133907afa8ac5542911190000000006b48304502210090e1c52aa2eba12b7c71fceab83b77f1456830a3dee1b956a831ecee5b5b353602205353a48c0129eae44b7c06a1f1651b9ceb8642374a1d5224a1e907240a978ad2012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff0240420f000000000017a914192f34528c6c8cd11eefebec27f195f3894eb11187f096e605000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac4353125d000000000000000000000000000000"
                            },
                            "type": "MakerPaymentReceived"
                        },
                        "timestamp": 1561482073479
                    },
                    {
                        "event": {
                            "type": "MakerPaymentWaitConfirmStarted"
                        },
                        "timestamp": 1561482073482
                    },
                    {
                        "event": {
                            "type": "MakerPaymentValidatedAndConfirmed"
                        },
                        "timestamp": 1561482074296
                    },
                    {
                        "event": {
                            "data": {
                                "block_height": 0,
                                "coin": "BCH",
                                "fee_details": {
                                    "amount": 1e-05
                                },
                                "from": [
                                    "1WxswvLF2HdaDr4k77e92VjaXuPQA8Uji"
                                ],
                                "internal_id": "bc98def88d93c270ae3cdb8a098d1b939ca499bf98f7a22b97be36bca13cdbc7",
                                "my_balance_change": -0.01001,
                                "received_by_me": 0.0055302,
                                "spent_by_me": 0.0155402,
                                "timestamp": 0,
                                "to": [
                                    "1WxswvLF2HdaDr4k77e92VjaXuPQA8Uji",
                                    "31k5nkp5G9QHq3zZFFba6Kq3m5FEHstkrd"
                                ],
                                "total_amount": 0.0155402,
                                "tx_hash": "bc98def88d93c270ae3cdb8a098d1b939ca499bf98f7a22b97be36bca13cdbc7",
                                "tx_hex": "01000000010e1af2743b1ebcdf42eea2625c18bdf3d3bf8dbfc7b04f88d7154312c8c0d79d010000006a4730440220030266d6d6435a4772cce2cebd91b6d4afffb920e23e9bc761434f105349cda002202335a050e2f28e4ca28862868141d3d7b553f3d30bceb83724ad70a32d04b0bd412102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0240420f000000000017a9140094798ed4100852f10a9ad85990f19b364f4c2d873c700800000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac5a53125d"
                            },
                            "type": "TakerPaymentSent"
                        },
                        "timestamp": 1561482078908
                    },
                    {
                        "event": {
                            "data": {
                                "secret": "66ed6c24bbb4892634eac4ce1e1ad0627d6379da4443b8d656b64d49ef2aa7a3",
                                "transaction": {
                                    "block_height": 0,
                                    "coin": "BCH",
                                    "fee_details": {
                                        "amount": 1e-05
                                    },
                                    "from": [
                                        "31k5nkp5G9QHq3zZFFba6Kq3m5FEHstkrd"
                                    ],
                                    "internal_id": "eec643315d4495aa5feb5062344fe2474223dc0f231b610afd336f908ae99ebc",
                                    "my_balance_change": 0.0,
                                    "received_by_me": 0.0,
                                    "spent_by_me": 0.0,
                                    "timestamp": 0,
                                    "to": [
                                        "1ABMe2m1XphME4gaZNcjQFdJc6ttu2Gbz2"
                                    ],
                                    "total_amount": 0.01,
                                    "tx_hash": "eec643315d4495aa5feb5062344fe2474223dc0f231b610afd336f908ae99ebc",
                                    "tx_hex": "0100000001c7db3ca1bc36be972ba2f798bf99a49c931b8d098adb3cae70c2938df8de98bc00000000d747304402202e344f8c61f2f49f4d620d687d02448cfba631a8ce8c0f8ee774da177230a75902201f4a175e7fa40f26896f522b5c51c7c0485e0ad18d3221c885e8b96b52ed1cab412066ed6c24bbb4892634eac4ce1e1ad0627d6379da4443b8d656b64d49ef2aa7a3004c6b6304cfcc125db1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a914ba5128bcca5a2f7d2310054fb8ec51b80f352ef3882102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac68ffffffff01583e0f00000000001976a91464ae8510aac9546d5e7704e31ce177451386455588acfd49125d"
                                }
                            },
                            "type": "TakerPaymentSpent"
                        },
                        "timestamp": 1561483355081
                    },
                    {
                        "event": {
                            "data": {
                                "block_height": 0,
                                "coin": "BEER",
                                "fee_details": {
                                    "amount": 1e-05
                                },
                                "from": [
                                    "bF2S8qwenfVZbvUU6dWyV3oXMxEP7sHLbr"
                                ],
                                "internal_id": "858f07d0a4e74318497a6e3ff4d7b68b60ad21b5c8e90b9b485f0ddaed71d0dc",
                                "my_balance_change": 0.00999,
                                "received_by_me": 0.00999,
                                "spent_by_me": 0.0,
                                "timestamp": 0,
                                "to": [
                                    "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"
                                ],
                                "total_amount": 0.01,
                                "tx_hash": "858f07d0a4e74318497a6e3ff4d7b68b60ad21b5c8e90b9b485f0ddaed71d0dc",
                                "tx_hex": "0400008085202f8901f47216323973b32881394a18c4e77581ce794dad1033854b9d3e5e7890c836ba00000000d8483045022100847a65faed4bea33c5cbccff2bee7c1292871a3b130bd2f23e696bd80c07365f02202039ea02b4463afd4f1e2b20b348d64b40aaea165f8dfb483293e2b368d536fe012066ed6c24bbb4892634eac4ce1e1ad0627d6379da4443b8d656b64d49ef2aa7a3004c6b6304af46135db1752102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac6782012088a914ba5128bcca5a2f7d2310054fb8ec51b80f352ef3882102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac68ffffffff01583e0f00000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac4b4a125d000000000000000000000000000000"
                            },
                            "type": "MakerPaymentSpent"
                        },
                        "timestamp": 1561483358319
                    },
                    {
                        "event": {
                            "type": "Finished"
                        },
                        "timestamp": 1561483358321
                    }
                ],
                "my_info": {
                    "my_amount": "0.01",
                    "my_coin": "BCH",
                    "other_amount": "0.01",
                    "other_coin": "BEER",
                    "started_at": 1561481967
                },
                "success_events": [
                    "Started",
                    "Negotiated",
                    "TakerFeeSent",
                    "MakerPaymentReceived",
                    "MakerPaymentWaitConfirmStarted",
                    "MakerPaymentValidatedAndConfirmed",
                    "TakerPaymentSent",
                    "TakerPaymentSpent",
                    "MakerPaymentSpent",
                    "Finished"
                ],
                "type": "Taker",
                "uuid": "491df802-43c3-4c73-85ef-1c4c49315ac6"
            }
        ],
        "total": 49
    }
}
```

Response (error)

```json
{
    "error": "lp_swap:1454] from_uuid e299c6ece7a7ddc42444eda64d46b163eaa992da65ce6de24eb812d715184e41 swap is not found"
}
```

</collapse-text>

</div>

## my_swap_status

**uuid**

The `my_swap_status` method returns the data of an atomic swap executed on a MM2 node.

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| params uuid | string | the uuid of swap, typically received from the buy/sell call |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| events         | array of objects | the events that occurred during the swap |
| success_events | array of strings | a list of events that gained a `success` swap state; the contents are listed in the order in which they should occur in the `events` array |
| error_events   | array of strings | a list of events that fell into an `error` swap state; if at least 1 of the events happens, the swap is considered a failure  |
| type           | string           | whether the node acted as a market `Maker` or `Taker` |
| uuid           | string           | swap uuid |
| my_info        | object           | this object maps event data to make displaying swap data in a GUI simpler (`my_coin`, `my_amount`, etc.) |

#### :pushpin: Examples

#### Command

```bash
curl --url "http://127.0.0.1:7783" --data "{\"method\":\"my_swap_status\",\"params\":{\"uuid\":\"d14452bb-e82d-44a0-86b0-10d4cdcb8b24\"},\"userpass\":\"$userpass\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response (Taker swap)

```json
{
    "result": {
        "error_events": [
            "StartFailed",
            "NegotiateFailed",
            "TakerFeeSendFailed",
            "MakerPaymentValidateFailed",
            "TakerPaymentTransactionFailed",
            "TakerPaymentDataSendFailed",
            "TakerPaymentWaitForSpendFailed",
            "MakerPaymentSpendFailed",
            "TakerPaymentRefunded",
            "TakerPaymentRefundFailed"
        ],
        "events": [
            {
                "event": {
                    "data": {
                        "lock_duration": 31200,
                        "maker": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                        "maker_amount": "0.01",
                        "maker_coin": "BEER",
                        "maker_coin_start_block": 154187,
                        "maker_payment_confirmations": 1,
                        "maker_payment_wait": 1561492367,
                        "my_persistent_pub": "02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3",
                        "started_at": 1561481967,
                        "taker_amount": "0.01",
                        "taker_coin": "BCH",
                        "taker_coin_start_block": 588576,
                        "taker_payment_confirmations": 1,
                        "taker_payment_lock": 1561513167,
                        "uuid": "491df802-43c3-4c73-85ef-1c4c49315ac6"
                    },
                    "type": "Started"
                },
                "timestamp": 1561481968393
            },
            {
                "event": {
                    "data": {
                        "maker_payment_locktime": 1561544367,
                        "maker_pubkey": "02631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640",
                        "secret_hash": "ba5128bcca5a2f7d2310054fb8ec51b80f352ef3"
                    },
                    "type": "Negotiated"
                },
                "timestamp": 1561482029079
            },
            {
                "event": {
                    "data": {
                        "block_height": 0,
                        "coin": "BCH",
                        "fee_details": {
                            "amount": 1e-05
                        },
                        "from": [
                            "1WxswvLF2HdaDr4k77e92VjaXuPQA8Uji"
                        ],
                        "internal_id": "9dd7c0c8124315d7884fb0c7bf8dbfd3f3bd185c62a2ee42dfbc1e3b74f21a0e",
                        "my_balance_change": -2.287e-05,
                        "received_by_me": 0.0155402,
                        "spent_by_me": 0.01556307,
                        "timestamp": 0,
                        "to": [
                            "1KRhTPvoxyJmVALwHFXZdeeWFbcJSbkFPu",
                            "1WxswvLF2HdaDr4k77e92VjaXuPQA8Uji"
                        ],
                        "total_amount": 0.01556307,
                        "tx_hash": "9dd7c0c8124315d7884fb0c7bf8dbfd3f3bd185c62a2ee42dfbc1e3b74f21a0e",
                        "tx_hex": "0100000001f1beda7feba9fa5c52aa38027587db50b6428bbbcc053cd4ab17461fb00b89d1000000006a473044022004ad0330210e20dea416c3ff442e50dc59970c5d1a8b4d0a7d5cc61a2edc701602204459e1ee6774f1ba8258322fff72e1e1acddeb7aed2f75657458aa3deecc9465412102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0207050000000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac64b61700000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac2d53125d"
                    },
                    "type": "TakerFeeSent"
                },
                "timestamp": 1561482032294
            },
            {
                "event": {
                    "data": {
                        "block_height": 154190,
                        "coin": "BEER",
                        "fee_details": {
                            "amount": 1e-05
                        },
                        "from": [
                            "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh"
                        ],
                        "internal_id": "ba36c890785e3e9d4b853310ad4d79ce8175e7c4184a398128b37339321672f4",
                        "my_balance_change": 0.0,
                        "received_by_me": 0.0,
                        "spent_by_me": 0.0,
                        "timestamp": 1561482056,
                        "to": [
                            "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh",
                            "bF2S8qwenfVZbvUU6dWyV3oXMxEP7sHLbr"
                        ],
                        "total_amount": 0.99999,
                        "tx_hash": "ba36c890785e3e9d4b853310ad4d79ce8175e7c4184a398128b37339321672f4",
                        "tx_hex": "0400008085202f890197f703d245127e5b88471791f2820d29152046f4be133907afa8ac5542911190000000006b48304502210090e1c52aa2eba12b7c71fceab83b77f1456830a3dee1b956a831ecee5b5b353602205353a48c0129eae44b7c06a1f1651b9ceb8642374a1d5224a1e907240a978ad2012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff0240420f000000000017a914192f34528c6c8cd11eefebec27f195f3894eb11187f096e605000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac4353125d000000000000000000000000000000"
                    },
                    "type": "MakerPaymentReceived"
                },
                "timestamp": 1561482073479
            },
            {
                "event": {
                    "type": "MakerPaymentWaitConfirmStarted"
                },
                "timestamp": 1561482073482
            },
            {
                "event": {
                    "type": "MakerPaymentValidatedAndConfirmed"
                },
                "timestamp": 1561482074296
            },
            {
                "event": {
                    "data": {
                        "block_height": 0,
                        "coin": "BCH",
                        "fee_details": {
                            "amount": 1e-05
                        },
                        "from": [
                            "1WxswvLF2HdaDr4k77e92VjaXuPQA8Uji"
                        ],
                        "internal_id": "bc98def88d93c270ae3cdb8a098d1b939ca499bf98f7a22b97be36bca13cdbc7",
                        "my_balance_change": -0.01001,
                        "received_by_me": 0.0055302,
                        "spent_by_me": 0.0155402,
                        "timestamp": 0,
                        "to": [
                            "1WxswvLF2HdaDr4k77e92VjaXuPQA8Uji",
                            "31k5nkp5G9QHq3zZFFba6Kq3m5FEHstkrd"
                        ],
                        "total_amount": 0.0155402,
                        "tx_hash": "bc98def88d93c270ae3cdb8a098d1b939ca499bf98f7a22b97be36bca13cdbc7",
                        "tx_hex": "01000000010e1af2743b1ebcdf42eea2625c18bdf3d3bf8dbfc7b04f88d7154312c8c0d79d010000006a4730440220030266d6d6435a4772cce2cebd91b6d4afffb920e23e9bc761434f105349cda002202335a050e2f28e4ca28862868141d3d7b553f3d30bceb83724ad70a32d04b0bd412102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0240420f000000000017a9140094798ed4100852f10a9ad85990f19b364f4c2d873c700800000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac5a53125d"
                    },
                    "type": "TakerPaymentSent"
                },
                "timestamp": 1561482078908
            },
            {
                "event": {
                    "data": {
                        "secret": "66ed6c24bbb4892634eac4ce1e1ad0627d6379da4443b8d656b64d49ef2aa7a3",
                        "transaction": {
                            "block_height": 0,
                            "coin": "BCH",
                            "fee_details": {
                                "amount": 1e-05
                            },
                            "from": [
                                "31k5nkp5G9QHq3zZFFba6Kq3m5FEHstkrd"
                            ],
                            "internal_id": "eec643315d4495aa5feb5062344fe2474223dc0f231b610afd336f908ae99ebc",
                            "my_balance_change": 0.0,
                            "received_by_me": 0.0,
                            "spent_by_me": 0.0,
                            "timestamp": 0,
                            "to": [
                                "1ABMe2m1XphME4gaZNcjQFdJc6ttu2Gbz2"
                            ],
                            "total_amount": 0.01,
                            "tx_hash": "eec643315d4495aa5feb5062344fe2474223dc0f231b610afd336f908ae99ebc",
                            "tx_hex": "0100000001c7db3ca1bc36be972ba2f798bf99a49c931b8d098adb3cae70c2938df8de98bc00000000d747304402202e344f8c61f2f49f4d620d687d02448cfba631a8ce8c0f8ee774da177230a75902201f4a175e7fa40f26896f522b5c51c7c0485e0ad18d3221c885e8b96b52ed1cab412066ed6c24bbb4892634eac4ce1e1ad0627d6379da4443b8d656b64d49ef2aa7a3004c6b6304cfcc125db1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a914ba5128bcca5a2f7d2310054fb8ec51b80f352ef3882102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac68ffffffff01583e0f00000000001976a91464ae8510aac9546d5e7704e31ce177451386455588acfd49125d"
                        }
                    },
                    "type": "TakerPaymentSpent"
                },
                "timestamp": 1561483355081
            },
            {
                "event": {
                    "data": {
                        "block_height": 0,
                        "coin": "BEER",
                        "fee_details": {
                            "amount": 1e-05
                        },
                        "from": [
                            "bF2S8qwenfVZbvUU6dWyV3oXMxEP7sHLbr"
                        ],
                        "internal_id": "858f07d0a4e74318497a6e3ff4d7b68b60ad21b5c8e90b9b485f0ddaed71d0dc",
                        "my_balance_change": 0.00999,
                        "received_by_me": 0.00999,
                        "spent_by_me": 0.0,
                        "timestamp": 0,
                        "to": [
                            "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"
                        ],
                        "total_amount": 0.01,
                        "tx_hash": "858f07d0a4e74318497a6e3ff4d7b68b60ad21b5c8e90b9b485f0ddaed71d0dc",
                        "tx_hex": "0400008085202f8901f47216323973b32881394a18c4e77581ce794dad1033854b9d3e5e7890c836ba00000000d8483045022100847a65faed4bea33c5cbccff2bee7c1292871a3b130bd2f23e696bd80c07365f02202039ea02b4463afd4f1e2b20b348d64b40aaea165f8dfb483293e2b368d536fe012066ed6c24bbb4892634eac4ce1e1ad0627d6379da4443b8d656b64d49ef2aa7a3004c6b6304af46135db1752102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac6782012088a914ba5128bcca5a2f7d2310054fb8ec51b80f352ef3882102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac68ffffffff01583e0f00000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac4b4a125d000000000000000000000000000000"
                    },
                    "type": "MakerPaymentSpent"
                },
                "timestamp": 1561483358319
            },
            {
                "event": {
                    "type": "Finished"
                },
                "timestamp": 1561483358321
            }
        ],
        "my_info": {
            "my_amount": "0.01",
            "my_coin": "BCH",
            "other_amount": "0.01",
            "other_coin": "BEER",
            "started_at": 1561481967
        },
        "success_events": [
            "Started",
            "Negotiated",
            "TakerFeeSent",
            "MakerPaymentReceived",
            "MakerPaymentWaitConfirmStarted",
            "MakerPaymentValidatedAndConfirmed",
            "TakerPaymentSent",
            "TakerPaymentSpent",
            "MakerPaymentSpent",
            "Finished"
        ],
        "type": "Taker",
        "uuid": "491df802-43c3-4c73-85ef-1c4c49315ac6"
    }
}
```

#### Response (Maker swap)

```json
{
    "result": {
        "error_events": [
            "StartFailed",
            "NegotiateFailed",
            "TakerFeeValidateFailed",
            "MakerPaymentTransactionFailed",
            "MakerPaymentDataSendFailed",
            "TakerPaymentValidateFailed",
            "TakerPaymentSpendFailed",
            "MakerPaymentRefunded",
            "MakerPaymentRefundFailed"
        ],
        "events": [
            {
                "event": {
                    "data": {
                        "lock_duration": 7800,
                        "maker_amount": "1",
                        "maker_coin": "BEER",
                        "maker_coin_start_block": 154221,
                        "maker_payment_confirmations": 1,
                        "maker_payment_lock": 1561545442,
                        "my_persistent_pub": "02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3",
                        "secret": "ea774bc94dce44c138920c6e9255e31d5645e60c0b64e9a059ab025f1dd2fdc6",
                        "started_at": 1561529842,
                        "taker": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                        "taker_amount": "1",
                        "taker_coin": "PIZZA",
                        "taker_coin_start_block": 141363,
                        "taker_payment_confirmations": 1,
                        "uuid": "6bf6e313-e610-4a9a-ba8c-57fc34a124aa"
                    },
                    "type": "Started"
                },
                "timestamp": 1561529842866
            },
            {
                "event": {
                    "data": {
                        "taker_payment_locktime": 1561537641,
                        "taker_pubkey": "02631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640"
                    },
                    "type": "Negotiated"
                },
                "timestamp": 1561529883208
            },
            {
                "event": {
                    "data": {
                        "block_height": 141364,
                        "coin": "PIZZA",
                        "fee_details": {
                            "amount": 1e-05
                        },
                        "from": [
                            "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh"
                        ],
                        "internal_id": "a91469546211cc910fbe4a1f4668ab0353765d3d0cb03f4a67bff9326991f682",
                        "my_balance_change": 0.0,
                        "received_by_me": 0.0,
                        "spent_by_me": 0.0,
                        "timestamp": 1561529907,
                        "to": [
                            "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh",
                            "RThtXup6Zo7LZAi8kRWgjAyi1s4u6U9Cpf"
                        ],
                        "total_amount": 0.002,
                        "tx_hash": "a91469546211cc910fbe4a1f4668ab0353765d3d0cb03f4a67bff9326991f682",
                        "tx_hex": "0400008085202f89021c7eeec33f8eb5ff2ed6c3d09e40e04b05a9674ea2feefcc12de3f9dcc16aff8000000006b483045022100e18e3d1afa8a24ecec82c92bfc05c119bfacdbb71b5f5663a4b96cc2a41ab269022017a79a1a1f6e0220d8fa1d2cf3b1c9788272f1ad18e4987b8f1cd4418acaa5b0012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff6a0d321eb52c3c7165adf80f83b15b7a5caa3a0dfa87746239021600d47fb43e000000006b483045022100937ed900e084d57d5e3341499fc66c5574884ca71cd4331fa696c8b7a517591b02201f5f851f94c3ca0ffb4789f1af22cb95dc83564e127ed7d23f1129eb2b981a2f012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff02bcf60100000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac9c120100000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac2f0e135d000000000000000000000000000000"
                    },
                    "type": "TakerFeeValidated"
                },
                "timestamp": 1561529927879
            },
            {
                "event": {
                    "data": {
                        "block_height": 0,
                        "coin": "BEER",
                        "fee_details": {
                            "amount": 1e-05
                        },
                        "from": [
                            "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"
                        ],
                        "internal_id": "efa90a2918e6793c8a2725c06ee34d0fa76c43bc85e680be195414e7aee36154",
                        "my_balance_change": -1.00001,
                        "received_by_me": 0.0285517,
                        "spent_by_me": 1.0285617,
                        "timestamp": 0,
                        "to": [
                            "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW",
                            "bKuQbg7vgFR1C25vPqMq8ePnB25cUEAGpo"
                        ],
                        "total_amount": 1.0285617,
                        "tx_hash": "efa90a2918e6793c8a2725c06ee34d0fa76c43bc85e680be195414e7aee36154",
                        "tx_hex": "0400008085202f890cdcd071edda0d5f489b0be9c8b521ad608bb6d7f43f6e7a491843e7a4d0078f85000000006b483045022100fbc3bd09f8e1821ed671d1b1d2ed355833fb42c0bc435fef2da5c5b0a980b9a002204ef92b35576069d640ca0ac08f46645e5ade36afd5f19fb6aad19cfc9fb221fb012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffe6ae2a3ce221a6612d9e640bdbe10a2e477b3bc68a1aeee4a6784cb18648a785010000006a47304402202000a7e60ae2ce1529247875623ef2c5b42448dcaeac8de0f8f0e2f8e5bd8a6b0220426321a004b793172014f522efbca77a3dc92e86ce0a75330d8ceb83072ad4e7012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff9335553edcbac9559cae517a3e25b880a48fabf661c4ac338394972eef4572da000000006b4830450221008ded7230f2fb37a42b94f96174ec192baf4cd9e9e68fb9b6cf0463a36a6093e00220538de51ceda1617f3964a2350802377940fdfa018cc1043d77c66081b1cab0c4012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3fffffffff91b5d3733877f84108de77fec46bee156766e1a6837fa7b580ccbc3905acb14000000006b483045022100d07cf1fd20e07aafdc942ba56f6b45baee61b93145a2bdba391e2cdb8024bf15022056ea8183990703ef05018df2fe8bd5ec678ec0f9207b0283292b2cdafc5e1e0c012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff147870387ca938b2b6e7daa96ba2496014f125c0e4e576273ef36ee8186c415a000000006a47304402204c5b15b641d7e34444456d2ea6663bdc8bd8216e309a7220814474f346b8425e0220634d1dd943b416b7a807704d7f7a3d46a60d88ef4e20734588a0b302c55fa82d012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffd2b954ae9b4a61fad9f7bc956d24e38d7b6fe313da824bd3bd91287d5a6b49d9000000006b483045022100a7387d9ab7b2c92d3cbce525e96ffac5ae3ef14f848661741ada0db17715c4a002202c1417d5e3e04b1a2d1774a83bb8d5aa1c0536c100138123089fa69921b5d976012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff28792a2e26d9d7be0467fac52b12ece67410b23eea845008257979bd87d083e3000000006a473044022027c40517c33cd3202d4310cfd2c75f38e6d7804b255fc3838a32ea26e5a3cb0002202b4399e1d7e655b64f699318f2bfbdced49f064ee54e9d6a678668fce51caf96012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffa8bf797bacd213b74a9977ae1b956afe3af33a1ee94324e010a16db891a07441000000006a473044022004cbb1d970b9f02c578b5c1d7de33361581eebc19c3cd8d2e50b0211ca4ef13702200c93b9fe5428055b6274dc8e52073c3e87f5b5e4206134d745928ccfc9393919012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff2b6fd82c9a68111b67ad85a614a6ecb50f7b6eac3d21d8ebefd9a6065cdf5729000000006b483045022100fdff16c595c7b4a9b4fc1e445b565f7b29fe5b7a08f79291b0ff585c7b72ac2902200c694aa124013bd419ce2349f15d10435827868d35db939b9d3c344d16e78420012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff6a5468dd8c83553dc51022f2a2fb772cf91c8607dc2ca1b8f203ac534612ab29000000006b483045022100ba7cc79e7ae3720238bfc5caa225dc8017d6a0d1cb1ec66abaf724fd20b3b7ab02206e8c942756604af0f63b74af495a9b3b7f4a44c489267f69a14cf2b1b953f46e012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff5f9f48a91d343fd5aef1d85f00850070931459ab256697afb728d1c81c1fa1d2000000006a47304402200ec85fc66f963e7504eb27361a4b4bb17de60e459da414fdc3962476de636134022056b62c15cf7f9b4e7d4e11c03e4e541dd348919b8c55efa4f1927e2fdd5ae8ea012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffee1f455924d3167e7f7abf452c1856e9abdcfe27dc889942dd249cb376169d38000000006b48304502210089274eed807c5d23d819f6dfa8a358a9748e56f2080be4396ef77bb19d91b17402207fc7b22c879534fffe0eeaaec8fc284e22c2756f380c05ea57b881a96b09f3af012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200e1f5050000000017a9144eb3a361d8a15d7f6a8ef9d1cf44962a90c44d548702912b00000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac490e135d000000000000000000000000000000"
                    },
                    "type": "MakerPaymentSent"
                },
                "timestamp": 1561529938879
            },
            {
                "event": {
                    "data": {
                        "block_height": 141365,
                        "coin": "PIZZA",
                        "fee_details": {
                            "amount": 1e-05
                        },
                        "from": [
                            "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh"
                        ],
                        "internal_id": "7e0e38e31dbe80792ef320b8c0a7cb9259127427ef8c2fca1d796f24484046a5",
                        "my_balance_change": 0.0,
                        "received_by_me": 0.0,
                        "spent_by_me": 0.0,
                        "timestamp": 1561529960,
                        "to": [
                            "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh",
                            "bUN5nesdt1xsAjCtAaYUnNbQhGqUWwQT1Q"
                        ],
                        "total_amount": 1.01999523,
                        "tx_hash": "7e0e38e31dbe80792ef320b8c0a7cb9259127427ef8c2fca1d796f24484046a5",
                        "tx_hex": ""
                    },
                    "type": "TakerPaymentReceived"
                },
                "timestamp": 1561529998938
            },
            {
                "event": {
                    "type": "TakerPaymentWaitConfirmStarted"
                },
                "timestamp": 1561529998941
            },
            {
                "event": {
                    "type": "TakerPaymentValidatedAndConfirmed"
                },
                "timestamp": 1561530000859
            },
            {
                "event": {
                    "data": {
                        "block_height": 0,
                        "coin": "PIZZA",
                        "fee_details": {
                            "amount": 1e-05
                        },
                        "from": [
                            "bUN5nesdt1xsAjCtAaYUnNbQhGqUWwQT1Q"
                        ],
                        "internal_id": "235f8e7ab3c9515a17fe8ee721ef971bbee273eb90baf70788edda7b73138c86",
                        "my_balance_change": 0.99999,
                        "received_by_me": 0.99999,
                        "spent_by_me": 0.0,
                        "timestamp": 0,
                        "to": [
                            "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"
                        ],
                        "total_amount": 1.0,
                        "tx_hash": "235f8e7ab3c9515a17fe8ee721ef971bbee273eb90baf70788edda7b73138c86",
                        "tx_hex": "0400008085202f8901a5464048246f791dca2f8cef2774125992cba7c0b820f32e7980be1de3380e7e00000000d8483045022100beca668a946fcad98da64cc56fa04edd58b4c239aa1362b4453857cc2e0042c90220606afb6272ef0773185ade247775103e715e85797816fbc204ec5128ac10a4b90120ea774bc94dce44c138920c6e9255e31d5645e60c0b64e9a059ab025f1dd2fdc6004c6b6304692c135db1752102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac6782012088a914eb78e2f0cf001ed7dc69276afd37b25c4d6bb491882102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac68ffffffff0118ddf505000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8000135d000000000000000000000000000000"
                    },
                    "type": "TakerPaymentSpent"
                },
                "timestamp": 1561530003429
            },
            {
                "event": {
                    "type": "Finished"
                },
                "timestamp": 1561530003433
            }
        ],
        "my_info": {
            "my_amount": "1",
            "my_coin": "BEER",
            "other_amount": "1",
            "other_coin": "PIZZA",
            "started_at": 1561529842
        },
        "success_events": [
            "Started",
            "Negotiated",
            "TakerFeeValidated",
            "MakerPaymentSent",
            "TakerPaymentReceived",
            "TakerPaymentWaitConfirmStarted",
            "TakerPaymentValidatedAndConfirmed",
            "TakerPaymentSpent",
            "Finished"
        ],
        "type": "Maker",
        "uuid": "6bf6e313-e610-4a9a-ba8c-57fc34a124aa"
    }
}
```

#### Response (error)

```json
{
    "error": "swap data is not found"
}
```

</collapse-text>

</div>

## my_tx_history

**(from_id limit=10)**

The `my_tx_history` method returns the blockchain transactions involving the MM2 node's coin address.

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| coin      | string   | the name of the coin for the history request |
| limit     | number   | limits the number of returned transactions |
| from_id   | string   | MM2 will skip records until it reaches this ID, skipping the `from_id` as well; track the `internal_id` of the last displayed transaction to find the value of this field for the next page |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| transactions | array of objects | transactions data |
| from_id   | string           | the from_id specified in the request; this value is null if from_id was not set |
| skipped   | number           | the number of skipped records (i.e. the position of `from_id` in the list + 1); this value is 0 if `from_id` was not set |
| limit     | number           | the limit that was set in the request; note that the actual number of transactions can differ from the specified limit (e.g. on the last page) |
| total     | number           | the total number of transactions available |
| current_block | number       | the number of the latest block of coin blockchain |
| sync_status | object         | provides the information that helps to track the progress of transaction history preloading at background |
| sync_status.state | string   | current state of sync; possible values: `NotEnabled`, `NotStarted`, `InProgress`, `Error`, `Finished` | 
| sync_status.additional_info  | object   | additional info that helps to track the progress; present for `InProgress` and `Error` states only | 
| sync_status.additional_info.blocks_left  | number   | present for ETH/ERC20 coins only; displays the number of blocks left to be processed for `InProgress` state | 
| sync_status.additional_info.transactions_left  | number   | present for UTXO coins only; displays the number of transactions left to be processed for `InProgress` state | 
| sync_status.additional_info.code  | number   | displays the error code for `Error` state | 
| sync_status.additional_info.message  | number | displays the error message for `Error` state | 

#### :pushpin: Examples

#### Command

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"my_tx_history\",\"coin\":\"RICK\",\"limit\":1,\"from_id\":\"1d5c1b67f8ebd3fc480e25a1d60791bece278f5d1245c5f9474c91a142fee8e1\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response (success)

```json
{
    "result": {
        "from_id": null,
        "limit": 1,
        "skipped": 0,
        "total": 13,
        "transactions": [
            {
                "block_height": 41464,
                "coin": "RICK",
                "confirmations": 18740,
                "fee_details": {
                    "amount": 1e-05
                },
                "from": [
                    "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"
                ],
                "internal_id": "1d5c1b67f8ebd3fc480e25a1d60791bece278f5d1245c5f9474c91a142fee8e1",
                "my_balance_change": -1e-05,
                "received_by_me": 0.998353,
                "spent_by_me": 0.998363,
                "timestamp": 1555410894,
                "to": [
                    "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"
                ],
                "total_amount": 0.998363,
                "tx_hash": "1d5c1b67f8ebd3fc480e25a1d60791bece278f5d1245c5f9474c91a142fee8e1",
                "tx_hex": "0400008085202f89020f93cf7fae5f6a5c4d36081185c8c1db24564c0804eddf365324ac2571409b7a000000006b483045022100f565796fe1d89f5a93d84d2efe4f752b63313e99c5e687fede01ced2f58e20b802207b5a503e45db9ad530572551cf37a558aecaf29c65604e36fe4818cd3120424f012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0f93cf7fae5f6a5c4d36081185c8c1db24564c0804eddf365324ac2571409b7a010000006a473044022061c43c63c0dbf0eb50344e62708235d2807ddc89909bae518afa355f9d69d30302205135d6546dd08fbba592583276fc1189c16472dd11395acc3b568f8193a1f890012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0280969800000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac24c75a05000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac00000000000000000000000000000000000000"
            }
        ]
    }
}
```

#### Response (error)

```json
{
    "error": "lp_coins:1011] from_id 1d5c1b67f8ebd3fc480e25a1d60791bece278f5d1245c5f9474c91a142fee8e2 is not found"
}
```

#### Response (History too large in electrum mode)

```json
{
    "result": {
        "current_block": 144753,
        "from_id": null,
        "limit": 0,
        "skipped": 0,
        "sync_status": {
            "additional_info": {
                "code": -1,
                "message": "Got `history too large` error from Electrum server. History is not available"
            },
            "state": "Error"
        },
        "total": 0,
        "transactions": []
    }
}
```

#### Response (Sync in progress for UTXO coins)

```json
{
    "result": {
        "current_block": 148300,
        "from_id": null,
        "limit": 0,
        "skipped": 0,
        "sync_status": {
            "additional_info": {
                "transactions_left": 1656
            },
            "state": "InProgress"
        },
        "total": 3956,
        "transactions": []
    }
}
```

#### Response (Sync in progress for ETH/ERC20 coins)

```json
{
    "result": {
        "current_block": 8039935,
        "from_id": null,
        "limit": 0,
        "skipped": 0,
        "sync_status": {
            "additional_info": {
                "blocks_left": 2158991
            },
            "state": "InProgress"
        },
        "total": 0,
        "transactions": []
    }
}
```

</collapse-text>

</div>

## order_status

**order_status uuid**

The `order_status` method returns the data of the active order with the selected `uuid` created by the MM2 node.

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| uuid      | string   | uuid of order to display |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| type      | string   | type of the order ("Maker" or "Taker") |
| order     | object   | order data |

#### :pushpin: Examples

#### Command

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"order_status\",\"uuid\":\"c3b3105c-e914-4ed7-9f1c-604783b054a1\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response (Maker order)

```json
{
    "result":{
        "type":"Maker",
        "order":{
            "base":"BEER",
            "created_at":1560529042434,
            "available_amount":"1",
            "cancellable":true,
            "matches":{
                "60aaacca-ed31-4633-9326-c9757ea4cf78":{
                    "connect":{
                        "dest_pub_key":"c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
                        "maker_order_uuid":"fedd5261-a57e-4cbf-80ac-b3507045e140",
                        "method":"connect",
                        "sender_pubkey":"5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                        "taker_order_uuid":"60aaacca-ed31-4633-9326-c9757ea4cf78"
                    },
                    "connected":{
                        "dest_pub_key":"5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                        "maker_order_uuid":"fedd5261-a57e-4cbf-80ac-b3507045e140",
                        "method":"connected",
                        "sender_pubkey":"c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
                        "taker_order_uuid":"60aaacca-ed31-4633-9326-c9757ea4cf78"
                    },
                    "last_updated":1560529572571,
                    "request":{
                        "action":"Buy",
                        "base":"BEER",
                        "base_amount":"1",
                        "dest_pub_key":"0000000000000000000000000000000000000000000000000000000000000000",
                        "method":"request",
                        "rel":"PIZZA",
                        "rel_amount":"1",
                        "sender_pubkey":"5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                        "uuid":"60aaacca-ed31-4633-9326-c9757ea4cf78"
                    },
                    "reserved":{
                        "base":"BEER",
                        "base_amount":"1",
                        "dest_pub_key":"5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                        "maker_order_uuid":"fedd5261-a57e-4cbf-80ac-b3507045e140",
                        "method":"reserved",
                        "rel":"PIZZA",
                        "rel_amount":"1",
                        "sender_pubkey":"c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
                        "taker_order_uuid":"60aaacca-ed31-4633-9326-c9757ea4cf78"
                    }
                }
            },
            "max_base_vol":"1",
            "min_base_vol":"0",
            "price":"1",
            "rel":"PIZZA",
            "started_swaps":[
                "60aaacca-ed31-4633-9326-c9757ea4cf78"
            ],
            "uuid":"fedd5261-a57e-4cbf-80ac-b3507045e140"
        }
    }
}
```

#### Response (Taker order)

```json
{
    "result":{
        "type":"Taker",
        "order":{
            "created_at":1560529048998,
            "cancellable":true,
            "matches":{
                "15922925-cc46-4219-8cbd-613802e17797":{
                    "connect":{
                        "dest_pub_key":"5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                        "maker_order_uuid":"15922925-cc46-4219-8cbd-613802e17797",
                        "method":"connect",
                        "sender_pubkey":"c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
                        "taker_order_uuid":"45252de5-ea9f-44ae-8b48-85092a0c99ed"
                    },
                    "connected":{
                        "dest_pub_key":"c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
                        "maker_order_uuid":"15922925-cc46-4219-8cbd-613802e17797",
                        "method":"connected",
                        "sender_pubkey":"5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                        "taker_order_uuid":"45252de5-ea9f-44ae-8b48-85092a0c99ed"
                    },
                    "last_updated":1560529049477,
                    "reserved":{
                        "base":"BEER",
                        "base_amount":"1",
                        "dest_pub_key":"c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
                        "maker_order_uuid":"15922925-cc46-4219-8cbd-613802e17797",
                        "method":"reserved",
                        "rel":"ETOMIC",
                        "rel_amount":"1",
                        "sender_pubkey":"5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
                        "taker_order_uuid":"45252de5-ea9f-44ae-8b48-85092a0c99ed"
                    }
                }
            },
            "request":{
                "action":"Buy",
                "base":"BEER",
                "base_amount":"1",
                "dest_pub_key":"0000000000000000000000000000000000000000000000000000000000000000",
                "method":"request",
                "rel":"ETOMIC",
                "rel_amount":"1",
                "sender_pubkey":"c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
                "uuid":"c3b3105c-e914-4ed7-9f1c-604783b054a1"
            }
        }
    }
}
```

#### Response (No order found)

```json
{"error":"Order with uuid c3b3105c-e914-4ed7-9f1c-604783b054a1 is not found"}
```

</collapse-text>

</div>

## orderbook

**orderbook base rel (duration=number)**

The `orderbook` method requests from the network the currently available orders for the specified trading pair.

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| base       | string | base currency of a pair |
| rel       | string | "related" currency, also can be called "quote currency" according to exchange terms |
| duration  | number | `deprecated` |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| bids | array | an array of objects containing outstanding bids (from Alice nodes) |
| numbids | number | the number of outstanding bids |
| biddepth | number | `deprecated` |
| asks | array | an array of objects containing outstanding asks (from Bob nodes) |
| coin | string | the name of the `base` coin; the user desires this |
| address | string | the address offering the trade |
| price     | number | the price in `rel` the user is willing to pay per one unit of the `base` coin |
| numutxos | number | `deprecated` the number of utxos the offer provider has in their wallet |
| avevolume | number | `deprecated` the average volume of `coin` per utxo |
| maxvolume | number | the total amount of `base` coins the offer provider has in their wallet |
| depth | number | `deprecated` |
| pubkey | string | the pubkey of the offer provider |
| age | number | the age of the offer |
| zcredits | number | the zeroconf deposit amount |
| numasks | number | the total number of asks |
| askdepth | number | the depth of the ask requests |
| base | string | the name of the coin the user desires to receive |
| rel | string | the name of the coin the user will trade |
| timestamp | number | the timestamp of the orderbook request |
| netid | number | the id of the network on which the request is made (default is `0`) |

#### :pushpin: Examples

#### Command

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"orderbook\",\"base\":\"HELLO\",\"rel\":\"WORLD\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response

```json
{
  "bids": [],
  "numbids": 0,
  "biddepth": 0,
  "asks": [
    {
      "coin": "HELLO",
      "address": "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh",
      "price": 0.89999998,
      "numutxos": 0,
      "avevolume": 0,
      "maxvolume": 10855.85028615,
      "depth": 0,
      "pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
      "age": 11,
      "zcredits": 0
    }
  ],
  "numasks": 1,
  "askdepth": 0,
  "base": "HELLO",
  "rel": "WORLD",
  "timestamp": 1549327944,
  "netid": 9999
}
```

</collapse-text>

</div>

## sell

**sell base rel price volume**

The `sell` method issues a sell request and attempts to match an order from the orderbook based on the provided arguments.

::: tip

Buy and sell methods always create the `taker` order first. Therefore, you must pay an additional 1/777 fee of the trade amount during the swap when taking liquidity from market. If your order is not matched in 30 seconds, the order is automatically converted to a `maker` request and stays on the orderbook until the request is matched or cancelled. To always act as a maker, please use the [setprice method.](../atomic-swap-dex/dex-api.html#setprice)

:::

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| base      | string | the name of the coin the user desires to sell |
| rel       | string | the name of the coin the user desires to receive |
| price     | string (numeric) | the price in `rel` the user is willing to receive per one unit of the `base` coin |
| volume    | string (numeric) | the amount of coins the user is willing to sell of the `base` coin |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| result        | object | the resulting order object |
| result.action | string | the action of the request (`Sell`) |
| result.base   | string | the base currency of the request |
| result.base_amount | string | the resulting amount of base currency that will be sold if the order matches |
| result.rel    | string | the rel currency of the request |
| result.rel_amount | string | the minimum amount of `rel` coin that will be received to sell the `base_amount` of `base` (according to `price`) |
| result.method | string | this field is used for internal P2P interactions; the value is always equal to "request" |
| result.dest_pub_key    | string | reserved for future use. The `dest_pub_key` will allow the user to choose the P2P node that is be eligible to match with the request. This value defaults to "zero pubkey", which means that `anyone` can match |
| result.sender_pubkey   | string | the public key of our node |
| result.uuid   | string | the request uuid |

#### :pushpin: Examples

#### Command

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"sell\",\"base\":\"BASE\",\"rel\":\"REL\",\"volume\":\"1\",\"price\":\"1\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response (success)

```json
{
    "result": {
        "action": "Sell",
        "base": "BASE",
        "base_amount": "1",
        "dest_pub_key": "0000000000000000000000000000000000000000000000000000000000000000",
        "method": "request",
        "rel": "REL",
        "rel_amount": "1",
        "sender_pubkey": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
        "uuid": "d14452bb-e82d-44a0-86b0-10d4cdcb8b24"
    }
}
```

#### Response (error)

```json
{"error":"rpc:278] utxo:884] BASE balance 12.88892991 is too low, required 21.15"}
```

</collapse-text>

</div>

## send_raw_transaction

**send_raw_transaction coin tx_hex**

The `send_raw_transaction` method broadcasts the transaction to the network of selected coin.

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| coin      | string | the name of the coin network on which to broadcast the transaction |
| tx_hex    | string | the transaction bytes in hexadecimal format; this is typically generated by the `withdraw` method |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| tx_hash   | string   | the hash of the broadcast transaction |

#### :pushpin: Examples

#### Command

```bash
curl --url "http://127.0.0.1:7783" --data "{\"method\":\"send_raw_transaction\",\"coin\":\"KMD\",\"tx_hex\":\"0400008085202f8902d6a5b976db5e5c9e8f9ead50713b25f22cd061edc8ff0ff1049fd2cd775ba087000000006b483045022100bf2073c1ecfef3fc78f272045f46a722591401f61c2d2fac87fc474a17df7c3102200ca1bd0664ba75f3383e5cbbe96127ad534a86238dbea256e000b0fe2067ab8c012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffffd04d4e07ac5dacd08fb76e08d2a435fc4fe2b16eb0158695c820b44f42f044cb010000006a47304402200a0c21e8c0ae4a740f3663fe08aeff02cea6495157d531045b58d2dd79fb802702202f80dddd264db33f55e49799363997a175d39a91242a95f268c40f7ced97030b012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200e1f505000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788acc3b3ca27000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac00000000000000000000000000000000000000\",\"userpass\":\"$userpass\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response (success)

```json
{
    "tx_hash":"0b024ea6997e16387c0931de9f203d534c6b2b8500e4bda2df51a36b52a3ef33",
}
```

</collapse-text>

</div>

## setprice

**setprice base rel price (volume max cancel_previous=true)**

The `setprice` method places an order on the orderbook, and it relies on this node acting as a `maker`, also called a `Bob` node.

The `setprice` order is always considered a `sell`, for internal implementation convenience.

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| base      | string | the name of the coin the user desires to sell |
| rel       | string | the name of the coin the user desires to receive |
| price     | string (numeric) | the price in `rel` the user is willing to receive per one unit of the `base` coin |
| volume    | string (numeric) | the maximum amount of `base` coin available for the order, ignored if max is `true` |
| max       | bool | MM2 will use the entire coin balance for the order, taking `0.001` coins into reserve to account for fees |
| cancel_previous | bool | MM2 will cancel all existing orders for the selected pair by default; set this value to `false` to prevent this behavior |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| result    | object   | the resulting order object |
| result.base | string | the base coin of the order |
| result.rel  | string | the rel coin of the order  |
| result.price | string (numeric) | the expected amount of `rel` coin to be received per 1 unit of `base` coin, returned as a string to avoid floating point representation errors |
| result.max_base_vol  | string (numeric) | the maximum volume of base coin available to trade, returned as a string to avoid floating point representation errors |
| result.min_base_vol  | string (numeric) | MM2 won't match with other orders that attempt to trade less than `min_base_vol`; returned as a string to avoid floating point representation errors |
| result.created_at    | number | unix timestamp in milliseconds, indicating the order creation time |
| result.matches | object | contains the map of ongoing matches with other orders, empty as the order was recently created |
| result.started_swaps | array of strings | uuids of swaps that were initiated by the order |
| result.uuid | string | uuid of the created order |

#### :pushpin: Examples

#### Command (with volume)

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"setprice\",\"base\":\"BASE\",\"rel\":\"REL\",\"price\":\"0.9\",\"volume\":\"1\"}
```

#### Command (max = true)

```bash
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"setprice\",\"base\":\"BASE\",\"rel\":\"REL\",\"price\":\"0.9\",\"max\":true}
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response (success)

```json
{
    "result": {
        "base": "BASE",
        "rel": "REL",
        "max_base_vol": "1",
        "min_base_vol": "0",
        "created_at": 1559052299258,
        "matches": {},
        "price": "1",
        "started_swaps": [],
        "uuid": "6a242691-6c05-474a-85c1-5b3f42278f41"
    }
}
```

#### Response (error)

```json
{"error":"Rel coin REL is not found"}
```

</collapse-text>

</div>

## stop

**stop()**

The `stop` method stops the MM2 software if there are no swaps in process.

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| (none)    |   | |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| (none)    |   | |

## withdraw

**withdraw coin to (amount max)**

The `withdraw` method generates, signs, and returns a transaction that transfers the `amount` of `coin` to the address indicated in the `to` argument.

This method generates a raw transaction which should then be broadcast using [send_raw_transaction](../atomic-swap-dex/dex-api.html#send-raw-transaction).

#### Arguments

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| coin      | string | the name of the coin the user desires to withdraw |
| to        | string | coins will be withdrawn to this address |
| amount    | string (numeric) | the amount the user desires to withdraw, ignored when `max=true` |
| max       | bool   | withdraw the maximum available amount |

#### Response

| Structure | Type     | Description |
| --------- | -------- | ----------- |
| from      | array of strings    | coins will be withdrawn from this address; the array contains a single element, but transactions may be sent from several addresses (UTXO coins) |
| to        | array of strings    | coins will be withdrawn to this address; this may contain the `my_address` address, where change from UTXO coins is sent |
| my_balance_change | number      | the expected balance of change, after the transaction broadcasts |
| received_by_me    | number      | the amount of coins received by `my_address` after the transaction broadcasts; the value may be above zero when the transaction requires that MM2 send change to `my_address` |
| spent_by_me       | number      | the amount of coins spent by `my_address`; this value differ from the request amount, as the transaction fee is added here |
| total_amount      | number      | the total amount of coins transferred |
| fee_details | object    | the fee details of the generated transaction; this value differs for utxo and ETH/ERC20 coins, check the examples for more details |
| tx_hash   | string    | the hash of the generated transaction |
| tx_hex    | string    | transaction bytes in hexadecimal format; use this value as input for the `send_raw_transaction` method |

#### :pushpin: Examples

#### Command (BTC, KMD, and other BTC-based forks)

```bash
curl --url "http://127.0.0.1:7783" --data "{\"method\":\"withdraw\",\"coin\":\"KMD\",\"to\":\"RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh\",\"amount\":\"10\",\"userpass\":\"$userpass\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response (success)

```json
{
    "block_height": 0,
    "coin": "ETOMIC",
    "fee_details": {
        "amount": 1e-05
    },
    "from": [
        "R9o9xTocqr6CeEDGDH6mEYpwLoMz6jNjMW"
    ],
    "my_balance_change": -10.00001,
    "received_by_me": 0.34417325,
    "spent_by_me": 10.34418325,
    "to": [
        "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh"
    ],
    "total_amount": 10.34418325,
    "tx_hash": "3a1c382c50a7d12e4675d12ed7e723ce9f0167693dd75fd772bae8524810e605",
    "tx_hex": "0400008085202f890207a8e96978acfb8f0d002c3e4390142810dc6568b48f8cd6d8c71866ad8743c5010000006a47304402201960a7089f2d93480fff68ce0b7ca7bb7a32a52915753ac7ae780abd6162cb1d02202c9b11d442e5f72a532f44ceb10122898d486b1474a10eb981c60c5538b9c82d012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff97f56bf3b0f815bb737b7867e71ddb8198bba3574bb75737ba9c389a4d08edc6000000006a473044022055199d80bd7e2d1b932e54f097c6a15fc4b148d21299dc50067c1da18045f0ed02201d26d85333df65e6daab40a07a0e8a671af9d9b9d92fdf7d7ef97bd868ca545a012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff0200ca9a3b000000001976a91464ae8510aac9546d5e7704e31ce177451386455588acad2a0d02000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac00000000000000000000000000000000000000"
}
```

</collapse-text>

</div>

#### Command (ETH, ERC20, and other ETH-based forks)

```bash
curl --url "http://127.0.0.1:7783" --data "{\"method\":\"withdraw\",\"coin\":\"ETH\",\"to\":\"0xbab36286672fbdc7b250804bf6d14be0df69fa28\",\"amount\":10,\"userpass\":\"$userpass\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response (success)

```json
{
    "block_height": 0,
    "coin": "ETH",
    "fee_details": {
        "coin": "ETH",
        "gas": 21000,
        "gas_price": 1e-09,
        "total_fee": 2.1e-05
    },
    "from": [
        "0xbab36286672fbdc7b250804bf6d14be0df69fa29"
    ],
    "my_balance_change": -10.000021,
    "received_by_me": 0.0,
    "spent_by_me": 10.000021,
    "to": [
        "0xbab36286672fbdc7b250804bf6d14be0df69fa28"
    ],
    "total_amount": 10.000021,
    "tx_hash": "8fbc5538679e4c4b78f8b9db0faf9bf78d02410006e8823faadba8e8ae721d60",
    "tx_hex": "f86d820a59843b9aca0082520894bab36286672fbdc7b250804bf6d14be0df69fa28888ac7230489e80000801ba0fee87414a3b40d58043a1ae143f7a75d7f47a24e872b638281c448891fd69452a05b0efcaed9dee1b6d182e3215d91af317d53a627404b0efc5102cfe714c93a28"
}
```

</collapse-text>

</div>

#### Command (max = true)

```bash
curl --url "http://127.0.0.1:7783" --data "{\"method\":\"withdraw\",\"coin\":\"ETH\",\"to\":\"0xbab36286672fbdc7b250804bf6d14be0df69fa28\",\"max\":true,\"userpass\":\"$userpass\"}"
```

<div style="margin-top: 0.5rem;">

<collapse-text hidden title="Response">

#### Response (success)

```json
{
    "block_height": 0,
    "coin": "ETH",
    "fee_details": {
        "coin": "ETH",
        "gas": 21000,
        "gas_price": 1e-09,
        "total_fee": 2.1e-05
    },
    "from": [
        "0xbab36286672fbdc7b250804bf6d14be0df69fa29"
    ],
    "my_balance_change": -10.000021,
    "received_by_me": 0.0,
    "spent_by_me": 10.000021,
    "to": [
        "0xbab36286672fbdc7b250804bf6d14be0df69fa28"
    ],
    "total_amount": 10.000021,
    "tx_hash": "8fbc5538679e4c4b78f8b9db0faf9bf78d02410006e8823faadba8e8ae721d60",
    "tx_hex": "f86d820a59843b9aca0082520894bab36286672fbdc7b250804bf6d14be0df69fa28888ac7230489e80000801ba0fee87414a3b40d58043a1ae143f7a75d7f47a24e872b638281c448891fd69452a05b0efcaed9dee1b6d182e3215d91af317d53a627404b0efc5102cfe714c93a28"
}
```

</collapse-text>

</div>

# Installing AtomicDEX Software (MM2)

### Minimum Requirements for Installation

* MacOS, Windows (see note below), and Linux (see note below)

* 64-bit (see note below for 32-bit)

* Minimum 2GB of free RAM 

* Normal user account with admin/root privileges

::: warning Note
If you would prefer to avoid building MM2 from source, you can download our pre-built nightly binary [from this link](http://195.201.0.6/mm2/).
:::

### Note about Linux

For Linux users, much of the following documentation assumes that you are building and running MM2 on a Debian 9/10 or Ubuntu 18.04 host. If you have questions about other releases or distributions, [please reach out to us on the #dev-marketmaker channel on Discord](https://komodoplatform.com/discord).

### Note about Installing on Windows

Developing software on Windows typically requires an installation of Git Bash.

Git Bash is a terminal shell based on Unix. It is similar to the Windows Shell or Windows Command Prompt, but uses Unix-based syntax.

All instructions in the MarketMaker 2.0 documentation are given with Unix-based syntax, and therefore we recommend installing Git Bash before proceeding. 

You may download and install Git Bash for Windows here:

[Download Git Bash for Windows](https://git-scm.com/download/win)

The download should begin automatically.

Double-click the downloaded `.exe` file and follow the Installation Wizard.

Once Git Bash is open and running on your machine, you may continue.

### Note About 32-bit Operating Systems

We are currently testing 32-bit operating system functionality. As 32-bit machines can often be comparatively older hardware, we cannot guarantee that MarketMaker 2.0 will run successfully by default. 

We invite users of 32-bit operating systems to test the software and [report any errors to our team on the #dev-marketmaker channel on Discord](https://komodoplatform.com/discord).

### Installing Dependencies

#### Rust

Install [Rust](https://www.rust-lang.org/tools/install):

```bash
curl https://sh.rustup.rs -sSf | sh
```

#### cmake Version 3.12 or Higher

Download the cmake software here: [download link](https://cmake.org/download/)

Unpack and follow the instructions here: [instructions link](https://cmake.org/install/)

#### Build Tools for Your OS

##### Linux: 

```bash
sudo apt-get install build-essential
```

##### Windows: [Follow these instructions for MSVC](https://docs.microsoft.com/en-us/cpp/build/vscpp-step-0-installation?view=vs-2017)

##### MacOS: [Install XCode via the App Store](https://itunes.apple.com/us/app/xcode/id497799835?mt=12)

#### Install Additional Dependencies

Install the following additional dependencies using the terminal.

```bash
sudo apt-get install -y build-essential git llvm-3.9-dev libclang-3.9-dev clang-3.9 libssl-dev pkg-config
```

#### Install Additional Rust Components

Install additional Rust components:

```bash
rustup install nightly-2019-06-26
```

```bash
rustup default nightly-2019-06-26
```

```bash
rustup component add rustfmt-preview
```

#### Install jq

`jq` is an optional, but useful addition to our needed software. `jq` can provide a more readable format of JSON output in the terminal, which helps us more quickly digest mm2's data.

##### Linux:

```
sudo apt-get install jq
```

##### MacOS:

Download the appropriate file from [this link.](https://stedolan.github.io/jq/download/)

In your terminal, make the file executable by changing into the directory where the file downloaded and executing:

```
chmod +x jq
```

Then execute the file.

##### Windows:

Download and execute the appropriate file from [this link.](https://stedolan.github.io/jq/download/)

### Build MM2

Clone the MM2 repository:

```bash
cd ~
git clone https://github.com/artemii235/SuperNET.git --branch mm2 --single-branch && cd SuperNET
```

Compile the source code:

```bash
cargo build --features native -vv
```

If everything installs successfully you will see something similar:

```
“Finished dev [optimized + debuginfo] target(s) in 3m 33s”
```

The MM2 executable is now built and available here: `~/SuperNET/target/debug/mm2`
# Additional Notes

## A Back End for Front-End Implementations

AtomicDEX software is built to have a core component that can serve many front-end graphical-user interfaces (GUIs). 

The core component is called MarketMaker 2.0, or MM2 for brevity.

Various front-end GUIs exist in our ecosystem, some of them built by the volunteer efforts of our community members. We are also working to release a Komodo-supported User Experience and User Interface, in coordination with Ideas By Nature, a UX/UI design firm.

This also allows developers and entrepreneurs the freedom to create your own front-end implementation for your own purposes. For example, you can create your own front-end implementation that acts on the same atomic-swap network as other communities. Or, you could make a front-end implementation for your own private network. 

The documentation here only concerns the core component, MarketMaker 2.0 (MM2). This component is typically accessed via an API or a terminal interface.

Documentation for a GUI for MM2 is not yet available.

## New Features of MarketMaker 2.0 (Desktop)

Users who worked with the previous version of the MM software, MarketMaker 1.0 (MM1), will note several differences with the new release.  

### New Off-Chain Technology

MM1 used nanomsg technology for its off-chain network layer (e.g. orderbook propagation, ordermatching, client traffic routing, and other technologies that are not active on the blockchain itself).

MM2 replaced nanomsg with Rust TCP implementation and also uses `libtorrent` as a torrent/DHT network system for the off-chain network layer. This p2p software is widely used and highly reliable, granting a greater development experience.

### Rust Implementation

MM1 was based on ANSI C.

For MM2 we ported the system to Rust, utilizing the cargo ecosystem. Internal benchmarks prove this to be more efficient. Furthermore, the Rust code base supports mobile devices, including Android & iOS. This is a key benefit, as we expect mobile devices to be a key component of MM2 adoption.

### Multi-Threading and Other Multi-Tasking Improvements

MM1 had limited multi-tasking capabilities. Also, the bob-side technology was not reliable when using MM1 in lite mode (SPV), wherein blockchain syncing is not required for end-users.

MM2 has multi-threading. This allows it to reliably manage multiple concurrent requests.

## MarketMaker 2.0 for Mobile (New!)

Komodo is pleased to announce that MarketMaker 2.0 is preparing for release on compatible Android and iOS devices. The software is currently undergoing quality tests and external reviews before publication.

Notable aspects of the Mobile MM2 software include:

- Optimization for low-data usage and CPU consumption
- Low storage requirements (less than 50 MB)
- Integrates seamlessly with the desktop MarketMaker 2.0 software

Through the Komodo API, mobile-device developers can integrate MM2 for Mobile into other software packages.

Please reach out to our team on [Discord](https://komodoplatform.com/discord) to be involved with the software release.

## Add Your Coin to MarketMaker 2.0

All coins that are built on the BTC and ETH core software can be added to MarketMaker 2.0 (MM2) quickly and simply. Coins built on other software frameworks may be able to be added as well, depending on specific details. Specifically, a coin must support functionality that is similar to the "CheckLockTimeVerify" of the Bitcoin protocol, wherein a utxo can be locked for a specific amount of time and then released in a manner determined by the developer. For more information, please reach out to our team on Discord.

To add your BTC or ETH-based coin to MM2, first follow the linked checklist below:

[Link to checklist for adding coin to MM2](https://github.com/jl777/coins#0-the-coin-must-be-tested-with-barterdex-atomic-swaps)

Upon completing the checklist, please submit your proposed coin configuration files to the same repository with a pull request. 

## Features Carried From MM1

##### SPV-based Trading

AtomicDEX holds support for [SPV Electrum-based](https://en.bitcoin.it/wiki/Electrum) coins. This feature allows a user to trade with their coins without downloading their coins' blockchain data. This feature is available for all Bitcoin-protocol based coins running native-coin daemons, Ethereum, and Ethereum-based ERC20 tokens. The AtomicDEX API is built to handle the nature of the SPV requirements, providing additional functionality to developers.

##### Liquidity Multiplication

AtomicDEX also enables a feature known as Liquidity Multiplication, a protocol that allows the same funds to be used in multiple requests on AtomicDEX "orderbooks." The first request to fill completes the trade, and all outstanding requests are immediately cancelled. This feature is available to the user when providing liquidity to the exchange (called a "Bob-side" trade).

Liquidity Multiplication therefore allows an initial amount of funding to create an exponentially higher amount of liquidity on the exchange. This also provides a special advantage for traders that like to wait for below-market dumps. While this feature is something that any other exchange could implement, few do. 

On AtomicDEX, all orderbook entries are 100% backed by real funds, as opposed to a centralized exchange’s vouchers, which may be one reason why AtomicDEX can more readily offer this feature.

# DEX Walkthrough

Now that you have MarketMaker 2.0 (MM2) installed you are ready for your first atomic swap!

Since we're testing MM2 as a back end, we're going to be doing a few things that a normal user will not be expected to do once we have a GUI or TUI/CLI available. We are working with Ideas By Nature, a user-experience and user-interface design firm, to facilitate this. 

Let's open up the terminal and get started.

## Setting Up the Coin List 

In the Komodo ecosystem we use two blockchain coins, RICK and MORTY, for testing purposes. These coins are freely distributed and have no blockchain scarcity, so you don't want to treat these coins as real currency. Also, if you lose them or destroy them, there's no need to stress. You can always grab more from our faucet. 

Let's set up a file in the `~/KomodoPlatform/target/debug` directory to import the settings for these test coins. Make a file called `coins` and place the following text into it:

```
[{"coin":"RICK","asset":"RICK","fname":"RICK (TESTCOIN)","rpcport":28223,"mm2":1},{"coin":"MORTY","asset":"MORTY","fname":"MORTY (TESTCOIN)","rpcport":63812,"mm2":1}]
```

Save this file. MM2 will search for it automatically on launch.

::: tip
The `coins` file in [this linked repository](https://github.com/jl777/coins) contains the standard coin configuration file used in GUI software.
:::

#### RPC password 

We also need to choose a password. 

Make it a secure one by including at least 8 characters, both uppercase and lowercase letters, and a few numbers and symbols.  

Write this down in a safe location where you won't lose it.  

We have our initial materials, let's launch the software.

## Initiate MarketMaker 2.0

Look at the following command below, but don't execute it yet:

```
stdbuf -oL ./mm2 "{\"gui\":\"MM2GUI\",\"netid\":9999, \"userhome\":\"/${HOME#"/"}\", \"passphrase\":\"YOUR_PASSPHRASE_HERE\", \"rpc_password\":\"YOUR_PASSWORD_HERE\"}" &
```

Replace `YOUR_PASSPHRASE_HERE` and `YOUR_PASSWORD_HERE` with your actual passphrase and password, and then execute the command in the terminal.

Here is an approximate interpretation of the arguments in the command, to help you see what's happening:

| Argument | (Value) | Description |
| -------- | ------- | ----------- |
| gui | MM2GUI | this is a flag that can be ignored for now |
| netid | 9999 | this tells MM2 which network to join. 9999 is a private test network we use here. 0 is the default network. |
| passphrase | YOUR_PASSPHRASE_HERE | your passphrase; this is the source of each of your coins' private keys |
| rpc_password | YOUR_PASSWORD_HERE | your password for protected RPC methods (userpass) |
| userhome | /${HOME#"/"} | the path to your home, called from your environment variables and entered as a regular expression |

Having executed the command, you should see output similar to the following:

```
29 19:39:41, lp_coins:796] ticker = "BTC", method = Some("enable"), block_count = 0 😅 2019-01-29 20:39:41 +0100 [coin KMD no-conf] Warning, coin KMD is used without a corresponding configuration.
cant open.(/root/.komodo/komodo.conf)
29 19:39:41, lp_coins:796] ticker = "KMD", method = Some("enable"), block_count = 0
RPCport.7783 remoteport.7782, nanoports 47762 47772 47782
29 19:39:41, peers:942] initialize] netid 9999 public key ab44ae49d2ff89295ee9a0574e89a2bdd7bfbb4f1a34f7d5c0256cf06e89485d preferred port 47773 drill false
connected to push.(tcp://333.333.333.333:47762) pushsock.0 valid.1  | connected to sub.(tcp://333.333.333.333:47772) subsock.1 valid.1 numactive.1
connected to push.(tcp://333.333.333.333:47762) pushsock.2 valid.1  | connected to sub.(tcp://333.333.333.333:47772) subsock.3 valid.1 numactive.1
_LPaddpeer 333.333.333.333 -> numpeers.2 mypubsock.-1 other.(0)
29 19:39:41, rpc:334] >>>>>>>>>> DEX stats 127.0.0.1:7783 DEX stats API enabled at unixtime.1548790781 <<<<<<<<<
· 2019-01-29 20:39:41 +0100 [dht-boot] DHT bootstrap ... Done.
New priority.1 max_Reserved_msgs.1
29 19:40:01, lp_signatures:613] lp_notify_recv] hailed by peer: 127.0.0.85
29 19:40:01, peers:996] investigate_peer] ip 127.0.0.85 preferred port 7803
29 19:40:01, peers:355] Sending a ping to V4(127.0.0.85:7803)…
connected to push.(tcp://127.0.0.85:7793) pushsock.4 valid.1  | connected to sub.(tcp://127.0.0.85:7803) subsock.5 valid.1 numactive.2
_LPaddpeer 127.0.0.85 -> numpeers.3
```

The terminal will then repeat similar output to the following every so often:

```
04 21:28:47, peers:996] investigate_peer] ip 54.36.126.42 preferred port 7803
04 21:28:47, peers:355] Sending a ping to V4(54.36.126.42:7803)…
04 21:29:08, lp_signatures:613] lp_notify_recv] hailed by peer: 54.36.126.42
```

If you see something similar, MarketMaker 2.0 is up and running!

## Setting userpass Environment Variable

::: tip
Userpass will be renamed to <b>rpc_password</b> for clarity in the near future
:::

Make a new file in the `~/KomodoPlatform/target/debug` directory called `userpass` and enter the following text, including the `rpc_password` you specified earlier:

```
export userpass="RPC_PASSWORD"
```

Save it, and then in the terminal execute:

```
source userpass
```

Test it by executing:

```
echo $userpass
```

You should see your userpass as a returned value.

::: tip
The `userpass` environment variable will remain in our terminal's memory until we close the session. When we open up a new session later, we need to create the `userpass` environment variable again. Later, a GUI designer can create functionality to perform this automatically.  
:::

## Connect to the Relevant Coin Networks

While we did set up the coins' configuration properties in the internal files, MM2 isn't going to connect to their blockchain networks immediately. 

One reason for this is that if you trade between many coins, the startup process would require connecting to every coin all at once.

We'll tell MM2 that we're ready to activate these coins now.

Execute the following command:

```
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"electrum\",\"coin\":\"RICK\",\"servers\":[{\"url\":\"electrum1.cipig.net:10017\"},{\"url\":\"electrum2.cipig.net:10017\"},{\"url\":\"electrum3.cipig.net:10017\"}]}"
```

You should get a similar response:

```
{"address":"RLgAgBFHFbG2ma9MDTHyKL5vovftMepBkE","coin":"RICK",balance":16.95595733,"result":"success"}
```

You are now connected to the RICK test-blockchain network.

Let's connect to MORTY (note it uses a different Electrum port).

```
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"electrum\",\"coin\":\"MORTY\",\"servers\":[{\"url\":\"electrum1.cipig.net:10018\"},{\"url\":\"electrum2.cipig.net:10018\"},{\"url\":\"electrum3.cipig.net:10018\"}]}"
```

You should get a similar response:

```
{"address":"RLgAgBFHFbG2ma9MDTHyKL5vovftMepBkE","coin":"MORTY","balance":11.27710708,"result":"success"}
```

You are now connected to the MORTY test-blockchain network.

## Get MORTY From a Faucet

Note that in the examples the address, `RLgAgBFHFbG2ma9MDTHyKL5vovftMepBkE`, is present in both returned responses.

You will see a different address in your returned responses.

This address is unique to you and you will use it for our trades here.

We don't recommend placing anything valuable in this address for now, as MM2 is still in testing.

On the other hand, RICK and MORTY have no real value, so you can place as much in here as you like!

Let's retrieve some MORTY.

[Click on this link](https://www.atomicexplorer.com/#/faucet/morty) and you should see an address input box. 

Place your address in there, fill out the reCaptcha to prove you're a human, and hit `OK`.

In a minute or so a few MORTY coins will arrive in your address. 

You can check by executing this command:

```
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"my_balance\",\"coin\":\"MORTY\"}"
```

You should see a similar response:

```
{"address":"RQNUR7qLgPUgZxYbvU9x5Kw93f6LU898CQ","balance":77.7,"coin":"MORTY"}
```

You now have MORTY.

## Observing the Orderbook

MarketMaker 2.0 uses a decentralized orderbook to allow users to buy and sell from each other without having to rely on a centralized service. This gives it an increased level of security, as there is no central agency that can manipulate prices. This also prevents "wash" trading, where trading activity is faked. 

To see the orderbook's current state, execute the following command:

```
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"orderbook\",\"base\":\"RICK\",\"rel\":\"MORTY\"}"
```

This sends a request to MM2 to see who is willing to give up RICK for MORTY.

The call will return a similar result:

```
{"bids":[],"numbids":0,"biddepth":0,"asks":[{"coin":"RICK","address":"RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh","price":0.89999998,"numutxos":0,"avevolume":0,"maxvolume":10855.85028615,"depth":0,"pubkey":"5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12","age":5,"zcredits":0}],"numasks":1,"askdepth":0,"base":"RICK","rel":"MORTY","timestamp":1549319941,"netid":9999}
```

This is the current orderbook.

Now, you'll notice that the output isn't easily readable. Here's where we should start using `jq`.

You may remember that we installed software called `jq` during the setup process. `jq` is optional, but it is recommended as it makes reading the output in the terminal easier.

To activate `jq`, simply add the following to the end of any command: ` | jq`.

For example:

```
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"orderbook\",\"base\":\"RICK\",\"rel\":\"MORTY\"}" | jq
```

(If using `jq` gives you troubles, you can remove it from any of the commands without issue. It is only here for convenience.)

Here's the response:

```
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   505  100   377  100   128   122k  42666 --:--:-- --:--:-- --:--:--  246k
{
  "bids": [],
  "numbids": 0,
  "biddepth": 0,
  "asks": [
    {
      "coin": "RICK",
      "address": "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh",
      "price": 1,
      "numutxos": 0,
      "avevolume": 0,
      "maxvolume": 10855.85028615,
      "depth": 0,
      "pubkey": "5a2f1c468b7083c4f7649bf68a50612ffe7c38b1d62e1ece3829ca88e7e7fd12",
      "age": 9,
      "zcredits": 0
    }
  ],
  "numasks": 1,
  "askdepth": 0,
  "base": "RICK",
  "rel": "MORTY",
  "timestamp": 1549320152,
  "netid": 9999
}
```

That's much easier to read. We can easily see someone with the address `RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh`.

```
"address": "RJTYiYeJ8eVvJ53n2YbrVmxWNNMVZjDGLh",
```

They are willing to give up RICK for MORTY.

```
"base": "RICK",
"rel": "MORTY",
```

They are asking for `1` MORTY for every 1 RICK. 

```
"price": 1,
```

They have a total of `10855.85028615` available to trade. 

```
"maxvolume": 10855.85028615,
```

## Initiate a Swap

Let's create a RICK/MORTY `buy` order

```
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"buy\",\"base\":\"RICK\",\"rel\":\"MORTY\",\"volume\":\"1\",\"price\":\"1\"}" | jq
```

You should receive a similar response:

```
{
    "result": {
        "action": "Buy",
        "base": "RICK",
        "base_amount": "1",
        "dest_pub_key": "0000000000000000000000000000000000000000000000000000000000000000",
        "method": "request",
        "rel": "MORTY",
        "rel_amount": "1",
        "sender_pubkey": "c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920",
        "uuid": "288743e2-92a5-471e-92d5-bb828a2303c3"
    }
}
```

If you see order data in the response, the order was successfully submitted to the network.

Your swap is not yet started, however.

From here, everything is automated.

If your order is matched you will see something similar in terminal output:

```
26 10:51:50, lp_ordermatch:333] Entering the taker_swap_loop RICK/MORTY
26 10:51:51, lp_ordermatch:490] CONNECTED.({"dest_pub_key":"c213230771ebff769c58ade63e8debac1b75062ead66796c8d793594005f3920","maker_order_uuid":"cbe664e7-3be5-4b45-9bd0-03c6a785e636","method":"connected","sender_pubkey":"199fe4169c30f464bc022273de0c893b4e2864128cdc9f7126fa24bc0910fd0e","taker_order_uuid":"c4d1b840-ebe8-4e44-9cb8-f6c767d3972f"})
26 10:52:12, lp_swap:1629] Received 'negotiation@c4d1b840-ebe8-4e44-9cb8-f6c767d3972f' (69 bytes, crc 794323698)
26 10:52:12, lp_swap:1658] Sending 'negotiation-reply@c4d1b840-ebe8-4e44-9cb8-f6c767d3972f' (69 bytes, crc 2294558621)
26 10:52:53, lp_swap:1665] Received 'negotiated@c4d1b840-ebe8-4e44-9cb8-f6c767d3972f' (1 bytes, crc 2768625435)
26 10:53:00, lp_swap:1731] Taker fee tx hash 2e019f6eb2e43b4d96c6400c86c0b65364024a21e8feb555aa108d3c9518989c
26 10:53:00, lp_swap:1740] Sending 'taker-fee@c4d1b840-ebe8-4e44-9cb8-f6c767d3972f' (244 bytes, crc 3461506896)
26 10:53:44, lp_swap:1748] Received 'maker-payment@c4d1b840-ebe8-4e44-9cb8-f6c767d3972f' (242 bytes, crc 2227964296)
26 10:53:44, lp_swap:1764] Got maker payment 5648da6db5143551fa6ceffe7ef7b0a21b2a4dd479cb7a12dd46f73f2fd87597
26 10:53:45, rpc_clients:111] Waiting for tx 5648da6db5143551fa6ceffe7ef7b0a21b2a4dd479cb7a12dd46f73f2fd87597 confirmations, now 0, required 1
26 10:53:56, rpc_clients:111] Waiting for tx 5648da6db5143551fa6ceffe7ef7b0a21b2a4dd479cb7a12dd46f73f2fd87597 confirmations, now 0, required 1
26 10:54:06, rpc_clients:111] Waiting for tx 5648da6db5143551fa6ceffe7ef7b0a21b2a4dd479cb7a12dd46f73f2fd87597 confirmations, now 0, required 1
26 10:54:16, rpc_clients:111] Waiting for tx 5648da6db5143551fa6ceffe7ef7b0a21b2a4dd479cb7a12dd46f73f2fd87597 confirmations, now 0, required 1
26 10:54:27, rpc_clients:111] Waiting for tx 5648da6db5143551fa6ceffe7ef7b0a21b2a4dd479cb7a12dd46f73f2fd87597 confirmations, now 0, required 1
26 10:54:43, lp_swap:1863] Taker payment tx hash 368a9ee2db36feb6870266695be72e8ed8d1beb2afd95d62920f1d620941fff2
26 10:54:44, lp_swap:1885] Sending 'taker-payment@c4d1b840-ebe8-4e44-9cb8-f6c767d3972f' (242 bytes, crc 3588913089)
26 10:57:11, lp_swap:1902] Taker payment spend tx 364c0df46028be2439f15a31ddae534a98d0e20ec22464c69a9086807f3afc89
26 10:57:14, lp_swap:1949] Maker payment spend tx b8c2a30f23cebb48f0d8fe0a048a65755ca5b8f56f4c68f80d044acd0f8e1ce6
· 2019-06-26 17:57:14 +0700 [swap uuid=c4d1b840-ebe8-4e44-9cb8-f6c767d3972f] Finished
    Maker payment spent...
    Taker payment spent...
    Taker payment sent...
    Maker payment validated and confirmed...
    Maker payment wait confirm started...
    Maker payment received...
    Taker fee sent...
    Negotiated...
    Started...
```

When you see that last line, you know that your swap went through:

```
29 22:48:03, lp_ordermatch:781] Swap finished successfully
```

Let's check by looking at your RICK balance. Execute this command:

```
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"my_balance\",\"coin\":\"RICK\"}" | jq
```

You should receive a similar response, the balance will be a bit less than volume set on trade as you have to pay the fee to mine your swap transaction:

```
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   192  100    77  100   115    377    563 --:--:-- --:--:-- --:--:--   945
{
  "address": "RQNUR7qLgPUgZxYbvU9x5Kw93f6LU898CQ",
  "balance": 0.99999,
  "coin": "RICK"
}
```

Congratulations! You are one of the first people in history to trade a currency without any help from a middleman and without even having to know your trading partner.

When you are finished, exit using the following command:

```
curl --url "http://127.0.0.1:7783" --data "{\"userpass\":\"$userpass\",\"method\":\"stop\"}"
```

Please reach out to us [on Discord](https://komodoplatform.com/discord) and tell us about your experience.
# Introduction to AtomicDEX

One of Komodo's blockchain tools is an atomic-swap powered, decentralized exchange (DEX), called AtomicDEX.

Komodo’s AtomicDEX software is entirely separate from the `komodod` software that powers the rest of Komodo.

Because AtomicDEX is built on atomic swaps, developers and users can rely on it to exchange cryptocurrencies at will, and without any middleman involvement. Users of this software maintain full control over the private keys of their assets at all times. This dramatically increases the security of the exchange process.

This software is capable of facilitating atomic-swap exchanges between approximately 99% of the coins listed on [coinmarketcap.com](https://coinmarketcap.com). All coins were listed without charge.

## Why is AtomicDEX Special?

When it comes to DEX technology, Komodo has a remarkable story.

In April 2014, Komodo’s lead developer experimented with his first atomic-swap prototypes. By August of 2017, Komodo released version 1.0 of the atomic-swap DEX software, allowing anonymous Internet users to perform over 100,000 atomic swaps via automation. These are but two examples of how Komodo has led the way in atomic-swap DEX technology since the beginning.

To understand AtomicDEX, one must first understand what a decentralized exchange is, why it is important, and how atomic swaps come into play.

This discussion requires a small amount of foundational knowledge. The reader should be generally familiar with blockchain technology and should understand the basic ideas of the Komodo project. If an overview of Komodo is needed, head to the documentation introduction, ["Why Komodo?"](../start-here/outline-for-new-developers.html#why-komodo) For a more thorough understanding of general blockchain technology, check out [Part I of the Komodo whitepaper.](https://komodoplatform.com/whitepaper) This section of the whitepaper gives an overview of how a blockchain works and why it matters. After reading those articles, the following discussion should be attainable.

## Understanding the Most Common Method of Cryptocurrency Exchange

In the world of cryptocurrency, the goods we are trading are our digital assets. These can be coins, tokens, or other forms of digital rights and property. By nature, each digital asset is bound to the individual blockchain that secures its transaction history.

### Trading Between Blockchains is a Challenge

So long as a user exchanges these assets within their parent blockchains the normal methods of conducting transactions are sufficient for trading. However, questions arise once the user wants to exchange assets on one blockchain for assets on an entirely separate blockchain.

Typically, separate blockchains have separate demographics of miners and stakers securing the history. When a user trades value between the two blockchains, by default there is no inter-chain security mechanism that can ensure that the user's trading partner does not cheat, and that technical difficulties do not destroy the user's assets.

### The Centralized Exchange as a Method

The simplest solution is to abandon decentralization during this process and trust a third party. This describes a normal "centralized exchange" (CEX), such as Coinbase, Kraken, and Binance.

To conduct an exchange using a CEX the user must entrust their digital assets to the CEX's care during the process. The user sends their digital assets to the CEX, and the CEX then issues the user "I Owe You" (IOU) tokens that represent the user's ownership of these assets.

The user is then within a single environment that is controlled by a centralized authority. This grants all the benefits of the old system to the trading process, including greater speed of development and design.

Throughout this experience the user relies on the security of a centralized third party to ensure that their purchases and sales are conducted honestly and accurately. When the user is finished exchanging, they hand back their IOUs and tell the CEX the address where they would like to export their purchases.

Once the user receives their digital assets back into an address which they control, they are again truly the "owner" of these assets.

### Problems with Centralized Exchanges

Assuming all goes as intended, a CEX is an efficient and effective tool for trading cryptocurrencies. However, reliable CEX's readily state that this model carries great risk. Many of the highest quality CEX's are looking to change their model to mitigate these dangers.

The primary concern for a CEX is security. When a user places their assets on a centralized exchange, the private keys to these assets are held in a database that, by nature, must have some kind of connection to the public Internet. As the database must always be available online, an attacker can penetrate an individual user's account and gain control over the IOUs even when the user is offline. The attacker can then trade these IOUs at malicious prices into an account the attacker controls and withdraw the true assets. 

Furthermore, this database holds the assets of thousands of other users. Having a large amount of vulnerable funds on the Internet is an additional incentive for attackers. [As reported by IG Group studies,](https://www.group-ib.com/resources/threat-research/2018-report.html) from 2017 to 2018, nearly 1 billion US dollar's worth of digital assets were stolen from major exchanges around the world. 

A CEX has several challenges to consider as a result of this danger. From a legal perspective, [the infamous Mt. Gox case](https://www.coindesk.com/mississippi-doctors-sued-mt-gox-for-bitcoin-loss-now-worth-135-million) illustrates how users may attempt to hold the CEX liable in the event of a theft. A CEX may struggle to find an insurance provider that will protect them. Also, compared to fiat currency, government authorities can do little to assist in recovering stolen funds.

### Pros and Cons of the Centralized Exchange

| Perspective | Pros  | Cons |
| ----------- | ----- | ---- |
| User | The IOU exchange process is high-speed, simple, and often has a pleasant interface | Compromising the user's individual account is achievable for a determined hacker, and there are effectively no methods to recover funds stolen from a CEX |
| User | Because the CEX model has many users, a CEX is more likely to achieve high liquidity | The high user population motivates sophisticated attackers to compromise the entire site |
| User | A large CEX can handle the complexities of holding and using cryptocurrencies | Once a user gives up control over their funds to the CEX, the user can only trust that the funds will be returned |
| Exchange Owner | Without decentralization, business development is often faster | In holding thousands of user's personal funds, the exchange owners assume an enormous amount of liability |
| Exchange Owner | The automated aspect of cryptocurrency allows for fast profits through small fees | The owner must be wary of thieves even among their own employees |

In light of these concerns, many reputable and established CEX's are turning to decentralized technologies. For example, Binance, one of the most popular CEX's on the Internet, [is moving swiftly into DEX technology](https://www.theblockcrypto.com/2019/02/07/binance-moves-away-from-ethereum-as-it-prepares-to-launch-dex/) to enhance both security and functionality for their users.

## A Decentralized Exchange Can Bring Greater Safety

To understand why a CEX may wish to implement decentralized technologies, one must first understand how a typical decentralized exchange (DEX) works. There are many types of DEX's, each having a unique technical structure. Perhaps the most popular DEX format is a decentralized gateway.

### Types of Decentralized Exchanges

| Type | Summary | Examples |
| ---- | ------- | -------- |
| Decentralized Gateway | A decentralized network of gateway keepers hold user funds in escrow and issue IOUs for trading | InstantDEX, Bitshares, Binance DEX |
| On-Chain Token Exchange | Tokens created on the parent blockchain are traded within the consensus rules; by adding gateway nodes, this can also extend to become a decentralized gateway | EtherDelta, 0x |
| Non-Custodial Exchange | A centralized website arranges for a moderately secure, but non-decentralized trade between liquidity providers and purchasers; there is no order book and the exchange's control over user funds is limited | ShapeShift, Changelly |

A decentralized gateway can be thought of as a cryptocurrency holding station that is owned and controlled by several different parties. The gateway performs two functions: it holds the assets that users send to it, and it issues IOUs.

The IOUs issued to the user do not derive from a centralized database. Rather, they are managed through a blockchain. The user maintains control over the private keys to their IOUs at all times. While this method is not as secure as having access to the private keys to the true digital assets, the method does provide some protection. Assuming the user knows how to secure their private keys, when the user is offline their IOUs are not vulnerable to attackers. This is one improvement over the CEX model. 

The user trades their IOUs with other users in much the same way as on a CEX. When a user is finished trading, they send their IOUs back to the gateway, and with this transaction they include an external address to which they would like their funds withdrawn.

Now comes another key difference. The actual assets that the gateway is holding are contained in a special type of blockchain address. It is special because it is owned and controlled not by one person or central authority, but rather by several people or parties working together. This address can collect funds from anywhere and from anyone. However, it can only release funds when several of the address’s owners grant permission. This special type of blockchain address is called a “multi-signature” address.

Because a multi-signature address requires several different parties to sign the release of funds, the gateway is able to provide an improved measure of security. For an attacker to succeed, they must compromise several different parties, rather than a central authority. 

In many ways, this popular DEX model is an improvement over the CEX model, and this is why many CEX's are expanding into this territory. Users have control over their IOUs, making them responsible for individual attacks, rather than the exchange owners. The risk of an exchange-wide attack is also shared across multiple parties.

### The Decentralized Gateway

| Pros | Cons |
| ---- | ---- |
| Tokens can be issued for any asset, including both cryptocurrency and fiat | This method requires a wide network of trustworthy and technically proficient business partners |
| Users maintain ownership over their IOUs at all times, limiting attackers' capabilities | All true assets are still in the ownership of a small group of people, albeit somewhat decentralized, and therefore susceptible to attacks, errors, and corruption |
| IOUs are on-chain, and therefore buying and selling funds can be performed at high speeds | Maintenance and improvements to the DEX are highly technical, time consuming, and cost prohibitive |

For a developer and entrepreneur, the DEX method is more secure than the CEX model, but there remain many difficulties on technical and political levels. The entrepreneur must find trustworthy partners to be co-owners of the multi-signature address. The developer must ensure that their partners' infrastructure and other technical contributions are secure, as a failure by the partners can reflect poorly on the developer and entrepreneur's own brand.

Furthermore, from the user's perspective, the primary danger persists in this DEX model. Once the user sends their assets to the gateway, the user loses control and responsibility over their true assets.

## Atomic Swaps are a Significantly Superior Basis for Exchange

What if there was a way to trade different types of cryptocurrencies without the user ever transferring control until the trade is complete? Could a user keep the private keys to their assets, and only deal directly with their trading partner and not with a third party?

This is the idea of an atomic swap. It is simply a trade of assets between two users where, assuming both behave honestly, ownership over the assets is not released until both sides are secure in receiving a fair outcome. If one side tries to cheat or makes any kind of mistake, they cannot receive a financial reward from it, and the non-offending side cannot be penalized or lose their funds.

An atomic swap can do everything else that both the DEX and CEX models can do. Atomic swaps can be conducted quickly; users may form networks of high liquidity trading; nearly all types of cryptocurrencies can be exchanged.

However, the nature of an atomic swap is unique in comparison with the opposing models, as an atomic swap does not require third-party intervention. This can provide simplicity for both the user, the entrepreneur, and even the developer. Depending on the application, the cost may also be dramatically cheaper, as far less infrastructure and manpower is required.

### Technical Comparisons

| Capability | Atomic Swap | Decentralized Gateway | Centralized Exchange |
| ---------- | ----------- | --------------------- | -------------------- |
| Third party is not required | <b>Yes:</b> The entire exchange happens between two users; no third party is required | <b>No:</b> The exchange relies on a decentralized network of gateway nodes, who must be trusted | <b>No:</b> Users depend on a centralized company to maintain and secure their funds |
| An exchange can be set up by anyone | <b>Yes:</b> Requires only two users and an Internet connection | <b>No:</b> Requires sufficient technical knowledge, funding, and committed business partners to serve as gateway nodes | <b>No:</b> Requires sufficient technical knowledge, funding, and a higher level of business and legal knowledge | 
| Users maintain control over the funds throughout the process | <b>Yes:</b> Users maintain control over their funds until the trade is completed, at which point ownership is swapped atomically | <b>No:</b> Users relinquish ownership to the gateway nodes, although users do hold private keys to IOUs | <b>No:</b> Once the user sends funds to the CEX, they only own their funds in theory until the funds are returned |
| User funds remain distributed and decentralized throughout process | <b>Yes:</b> As users maintain ownership over their funds at all times, all funds in the exchange process are never in a central location | <b>No:</b> User funds are held in a collection of multi-signature addresses that are maintained by a small group of people | <b>No:</b> User funds are held in a centralized database, managed by company employees |

This is probably enough to get the basic idea. If the reader desires a more thorough understanding of the atomic swap process, read Part III of [the Komodo whitepaper,](https://komodoplatform.com/whitepaper) or [this blog post for a condensed explanation.](https://komodoplatform.com/atomic-swaps/)

The underlying ideas of atomic swaps were invented by Tier Nolan in 2013. He posted his ideas on an online community forum where Komodo's lead developer and primary visionary, JL777, or "James" for short, was also exploring blockchain technology. Here’s where Komodo enters the picture.

### Komodo's Leadership in Atomic-Swap Technology

Upon reading Nolan’s discussion, James began experimenting. In April 2014 he wrote his first experimental software for allowing anonymous users on the Internet to conduct on-chain atomic swaps between two assets on the NXT blockchain.

In September 2015, James performed an experimental atomic swap between Bitcoin and NXT. Like all Bitcoin-based atomic swaps performed during this time period, James's atomic swap could not be considered secure as Bitcoin software lacked a feature called "Check Lock Time Verify." This feature was added in November 2015, and James performed a secure atomic swap shortly thereafter. 

At this time, James also began the creation of his current endeavor, the Komodo ecosystem. Additional team members were hired, money was raised, and large-scale software and company development began.

From its foundation, the Komodo ecosystem is designed to facilitate blockchain interoperability and scalability, and our atomic-swap software plays a key role. In August 2017, Komodo released version 1.0 of the first atomic-swap based DEX to the public. Releasing this entirely new DEX software to the masses was an endeavor many years in the making, and countless volunteer developers and other dreamers contributed.

Upon release of Komodo’s DEX 1.0, hundreds of members of the Komodo open-source community collectively performed over 100,000 atomic swaps. It was the first time in history that users with no coding knowledge could trade assets without either a third-party acting as an arbiter, or even without any public knowledge of who was trading with whom.
 
Another point to mention is that while AtomicDEX is built upon atomic swaps, other software in the Komodo ecosystem is able to perform the rest of the functionality necessary to run other types of decentralized exchanges. As all Komodo software is natively integrated, this provides the Komodo entrepreneur with perhaps the widest range of DEX software packages in existence.

### Capabilities of Komodo Software

| Atomic Swaps | Decentralized Gateway | On-Chain Token Exchange | Cross-Chain Asset Transfers | ... and more! |
| -- | -- | -- | -- | -- |
| Check! | Check! | Check! | Check! | Check! |

Today, Komodo developers took what they learned from version 1.0 and rewrote the code from the ground up to enhance essentially all aspects of the user experience. This is the AtomicDEX 2.0 software. Komodo is also partnered with Ideas By Nature, a UX/UI design and development firm, to create a well designed atomic-swap trading experience.

Recently, yet again Komodo forged into new territory with atomic swaps. In February of 2019, the Komodo team performed the first mobile-based atomic swap. The mobile version of AtomicDEX is available for Android and iOS devices, and the software interfaces seamlessly with our desktop software.

While the code behind Komodo's technology is complex, the good news is, the code takes care of itself. A developer and entrepreneur building on Komodo can simply fire up the software and access its functionalities through the API.

## AtomicDEX Software is an Industry-Wide Invitation

AtomicDEX is open source, meaning that we do not keep the software's source code private. Also, the Komodo team is creating a network that is open to other financially motivated businesses and organizations seeking profit in the cryptocurrency-exchange industry. 

Many opportunities are available for cryptocurrency-exchange entrepreneurs to build their own audiences and businesses using Komodo software. Entrepreneurs can create their own market places on the main Komodo network for trading, or they can create their own private and public networks. Developers can use Komodo's back-end software API to feature atomic-swap DEX functionality in their existing or upcoming software innovations, including mobile software. Enterprise and other large-scale companies can reach out to Komodo for integration with Komodo technology, or even for consulting services.

[Please reach out to the Komodo team for further information.](https://komodoplatform.com/contact-us/)

